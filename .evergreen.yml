# Functions are any command that can be run.
#
# Current functions:
#   checkout - Checks out the project from git.
#   install - Installs Node and all dependencies.
#   check - Performs linter and dependency checks.
#   test - Runs all tests.
#   build - Builds the mongosh executable.
#   release_macos - Publishes the npm packages and uploads the tarballs.
#   release_linux - Publishes the npm packages and uploads the tarballs.
#   release_win - Publishes the npm packages and uploads the tarballs.
functions:
  checkout:
    - command: git.get_project
      params:
        directory: src
  install:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
          source .evergreen/.setup
          nvm install 12.4.0
          nvm alias default 12.4.0
          npm install -g npm@latest lerna
          npm install
          npm run bootstrap
  check:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          source .evergreen/.setup
          export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
          npm run check-ci
  test:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          source .evergreen/.setup
          export MONGOSH_STITCH_TEST_APP_ID=${stitch_test_app_id}
          export MONGOSH_STITCH_TEST_SERVICE_NAME=${stitch_test_service_name}
          npm run test-ci
  build:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          source .evergreen/.setup
          export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
          npm run compile-exec
  release_macos:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          source .evergreen/.setup
          export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
          echo "################# Sign, notarise, and release MacOS artifacts to S3 and Github ################"
  release_linux:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          source .evergreen/.setup
          export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
          echo "################# Sign and release Linux artifacts to S3 and Github ################"
  release_win:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          echo "################# Sign and release Windows artifacts to S3 and Github ################"
# Tasks will show up as the individual blocks in the Evergreen UI that can
# pass or fail.
#
# Current tasks:
#   check - Performs linter and dependency checks.
#   test - Runs all tests.
#   build - Builds the mongosh executable.
#   release_macos - Publishes the npm packages and uploads the tarballs.
#   release_linux - Publishes the npm packages and uploads the tarballs.
#   release_win - Publishes the npm packages and uploads the tarballs.
tasks:
  - name: check
    commands:
      - func: checkout
      - func: install
      - func: check
  - name: test
    commands:
      - func: checkout
      - func: install
      - func: test
  - name: build
    commands:
      - func: checkout
      - func: install
      - func: build
  - name: release_macos
    depends_on:
      - name: check
      - name: test
      - name: build
    commands:
      - func: checkout
      - func: install
      - func: release_macos
  - name: release_linux
    depends_on:
      - name: check
      - name: test
      - name: build
    commands:
      - func: checkout
      - func: install
      - func: release_linux
  - name: release_win
    depends_on:
      - name: check
      - name: test
      - name: build
    commands:
      - func: checkout
      - func: install
      - func: release_win
# Need to run builds for every possible build variant.
# TODO: Durran: BUILD-10374 - Need OSX Catalina Signing Machine
buildvariants:
  - name: macos
    display_name: "MacOS Mohave"
    run_on: macos-1014
    tasks:
      - name: check
      - name: test
      - name: build
      - name: release_macos
  - name: ubuntu
    display_name: "Ubuntu 18.04"
    run_on: ubuntu1804-test
    tasks:
      - name: check
      - name: test
      - name: build
      - name: release_linux
#  - name: ubuntuppc
#    display_name: "Ubuntu 18.04 PPC"
#    run_on: ubuntu1804-power8-test
#    tasks:
#      - name: check
#      - name: test
#      - name: build
#      - name: release_linux
#  - name: ubuntuz
#    display_name: "Ubuntu 18.04 Z Series"
#    run_on: ubuntu1804-zseries-test
#    tasks:
#      - name: check
#      - name: test
#      - name: build
#      - name: release_linux
#  - name: rhel7
#    display_name: "RHEL 7.6"
#    run_on: rhel76-test
#    tasks:
#      - name: check
#      - name: test
#      - name: build
#      - name: release_linux
#  - name: rhelppc
#    display_name: "RHEL 7.1 PPC"
#    run_on: rhel71-power8-test
#    tasks:
#      - name: check
#      - name: test
#      - name: build
#      - name: release_linux
#  - name: rhelz
#    display_name: "RHEL 7.2 Z Series"
#    run_on: rhel72-zseries-test
#    tasks:
#      - name: check
#      - name: test
#      - name: build
#      - name: release_linux
