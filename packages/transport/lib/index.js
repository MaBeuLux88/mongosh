(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["mongodbsh-transport"] = factory();
	else
		root["mongodbsh-transport"] = factory();
})(global, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "./";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_transport__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n/* harmony import */ var _node_transport__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_transport__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, \"NodeTransport\", function() { return _node_transport__WEBPACK_IMPORTED_MODULE_0___default.a; });\n/* harmony import */ var _stitch_browser_transport__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(186);\n/* harmony import */ var _stitch_browser_transport__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_stitch_browser_transport__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, \"StitchBrowserTransport\", function() { return _stitch_browser_transport__WEBPACK_IMPORTED_MODULE_1___default.a; });\n/* harmony import */ var _stitch_server_transport__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(187);\n/* harmony import */ var _stitch_server_transport__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_stitch_server_transport__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, \"StitchServerTransport\", function() { return _stitch_server_transport__WEBPACK_IMPORTED_MODULE_2___default.a; });\nvar cov_xkmstlxt3=function(){var path='/Users/modetojoy/work/mongodb-js/mongosh/packages/transport/src/index.js',hash='7acd9c75ea045b3c6429f62ed92477961c490b42',Function=function(){}.constructor,global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/Users/modetojoy/work/mongodb-js/mongosh/packages/transport/src/index.js',statementMap:{},fnMap:{},branchMap:{},s:{},f:{},b:{},inputSourceMap:{version:3,sources:['/Users/modetojoy/work/mongodb-js/mongosh/packages/transport/src/index.js'],names:['NodeTransport','StitchBrowserTransport','StitchServerTransport'],mappings:'AAAA,OAAOA,aAAP,MAA0B,kBAA1B;AACA,OAAOC,sBAAP,MAAmC,4BAAnC;AACA,OAAOC,qBAAP,MAAkC,2BAAlC;AAEA,eAAeF,aAAf;AACA,SAASA,aAAT,EAAwBC,sBAAxB,EAAgDC,qBAAhD',sourcesContent:['import NodeTransport from \\'./node-transport\\';\\nimport StitchBrowserTransport from \\'./stitch-browser-transport\\';\\nimport StitchServerTransport from \\'./stitch-server-transport\\';\\n\\nexport default NodeTransport;\\nexport { NodeTransport, StitchBrowserTransport, StitchServerTransport };\\n']},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();/* harmony default export */ __webpack_exports__[\"default\"] = (_node_transport__WEBPACK_IMPORTED_MODULE_0___default.a);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly4vc3JjL2luZGV4LmpzP2I2MzUiXSwibmFtZXMiOlsiTm9kZVRyYW5zcG9ydCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Oztvd0NBR2VBLHFIQUFmIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTm9kZVRyYW5zcG9ydCBmcm9tICcuL25vZGUtdHJhbnNwb3J0JztcbmltcG9ydCBTdGl0Y2hCcm93c2VyVHJhbnNwb3J0IGZyb20gJy4vc3RpdGNoLWJyb3dzZXItdHJhbnNwb3J0JztcbmltcG9ydCBTdGl0Y2hTZXJ2ZXJUcmFuc3BvcnQgZnJvbSAnLi9zdGl0Y2gtc2VydmVyLXRyYW5zcG9ydCc7XG5leHBvcnQgZGVmYXVsdCBOb2RlVHJhbnNwb3J0O1xuZXhwb3J0IHsgTm9kZVRyYW5zcG9ydCwgU3RpdGNoQnJvd3NlclRyYW5zcG9ydCwgU3RpdGNoU2VydmVyVHJhbnNwb3J0IH07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

eval("var cov_edkskjgfp=function(){var path='/Users/modetojoy/work/mongodb-js/mongosh/packages/transport/src/node-transport.js',hash='bc6913c3262f942670a92cd9c67ff8a007cb513a',Function=function(){}.constructor,global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/Users/modetojoy/work/mongodb-js/mongosh/packages/transport/src/node-transport.js',statementMap:{'0':{start:{line:3,column:4},end:{line:3,column:22}},'1':{start:{line:19,column:24},end:{line:22,column:6}},'2':{start:{line:23,column:4},end:{line:23,column:32}},'3':{start:{line:24,column:4},end:{line:24,column:42}},'4':{start:{line:34,column:4},end:{line:34,column:35}},'5':{start:{line:48,column:4},end:{line:48,column:53}},'6':{start:{line:58,column:4},end:{line:58,column:37}},'7':{start:{line:64,column:0},end:{line:64,column:31}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:18,column:2},end:{line:18,column:3}},loc:{start:{line:18,column:28},end:{line:25,column:3}},line:18},'1':{name:'(anonymous_1)',decl:{start:{line:33,column:2},end:{line:33,column:3}},loc:{start:{line:33,column:27},end:{line:35,column:3}},line:33},'2':{name:'(anonymous_2)',decl:{start:{line:47,column:2},end:{line:47,column:3}},loc:{start:{line:47,column:43},end:{line:49,column:3}},line:47},'3':{name:'(anonymous_3)',decl:{start:{line:57,column:2},end:{line:57,column:3}},loc:{start:{line:57,column:12},end:{line:59,column:3}},line:57}},branchMap:{'0':{loc:{start:{line:47,column:29},end:{line:47,column:41}},type:'default-arg',locations:[{start:{line:47,column:39},end:{line:47,column:41}}],line:47}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0},f:{'0':0,'1':0,'2':0,'3':0},b:{'0':[0]},inputSourceMap:{version:3,sources:['/Users/modetojoy/work/mongodb-js/mongosh/packages/transport/src/node-transport.js'],names:['MongoClient','require','NodeTransport','fromURI','uri','mongoClient','useNewUrlParser','useUnifiedTopology','connect','constructor','runCommand','database','spec','options','_db','command','name','db','module','exports'],mappings:'AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAkBC,OAAO,CAAC,SAAD,CAA/B;AAEA;;;;;;AAIA,MAAMC,aAAN,CAAoB;AAClB;;;;;;;AAOA,eAAaC,OAAb,CAAqBC,GAArB,EAA0B;AACxB,UAAMC,WAAW,GAAG,IAAIL,WAAJ,CAAgBI,GAAhB,EAAqB;AAACE,MAAAA,eAAe,EAAE,IAAlB;AAAwBC,MAAAA,kBAAkB,EAAE;AAA5C,KAArB,CAApB;AACA,UAAMF,WAAW,CAACG,OAAZ,EAAN;AACA,WAAO,IAAIN,aAAJ,CAAkBG,WAAlB,CAAP;AACD;;AAED;;;;;;AAMAI,EAAAA,WAAW,CAACJ,WAAD,EAAc;AACvB,SAAKA,WAAL,GAAmBA,WAAnB;AACD;AAED;;;;;;;;;;;AASAK,EAAAA,UAAU,CAACC,QAAD,EAAWC,IAAX,EAAiBC,OAAO,GAAG,EAA3B,EAA+B;AACvC,WAAO,KAAKC,GAAL,CAASH,QAAT,EAAmBI,OAAnB,CAA2BH,IAA3B,EAAiCC,OAAjC,CAAP;AACD;AAED;;;;;;;AAKAC,EAAAA,GAAG,CAACE,IAAD,EAAO;AACR,WAAO,KAAKX,WAAL,CAAiBY,EAAjB,CAAoBD,IAApB,CAAP;AACD;;AA5CiB;;AA6CnB;AAEDE,MAAM,CAACC,OAAP,GAAiBjB,aAAjB',sourcesContent:['const { MongoClient } = require(\\'mongodb\\');\\n\\n/**\\n * Encapsulates logic for communicating with a MongoDB instance via\\n * the Node Driver.\\n */\\nclass NodeTransport {\\n  /**\\n   * Create a NodeTransport from a URI.\\n   *\\n   * @param {String} uri - The URI.\\n   *\\n   * @returns {NodeTransport} The Node transport.\\n   */\\n  static async fromURI(uri) {\\n    const mongoClient = new MongoClient(uri, {useNewUrlParser: true, useUnifiedTopology: true});\\n    await mongoClient.connect();\\n    return new NodeTransport(mongoClient);\\n  };\\n\\n  /**\\n   * Instantiate a new Node transport with the Node driver\\'s connected\\n   * MongoClient instance.\\n   *\\n   * @param {MongoClient} mongoClient - The Node drivers\\' MongoClient instance.\\n   */\\n  constructor(mongoClient) {\\n    this.mongoClient = mongoClient;\\n  }\\n\\n  /**\\n   * Run a command against the database.\\n   *\\n   * @param {String} database - The database name.\\n   * @param {Object} spec - The command specification.\\n   * @param {Object} options - The database options.\\n   *\\n   * @returns {Promise} The promise of command results.\\n   */\\n  runCommand(database, spec, options = {}) {\\n    return this._db(database).command(spec, options);\\n  }\\n\\n  /**\\n   * Get the DB object from the client.\\n   *\\n   * @param {String} name - The database name.\\n   */\\n  _db(name) {\\n    return this.mongoClient.db(name);\\n  }\\n};\\n\\nmodule.exports = NodeTransport;\\n']},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const{MongoClient}=(cov_edkskjgfp.s[0]++,__webpack_require__(2));class NodeTransport{static async fromURI(uri){cov_edkskjgfp.f[0]++;const mongoClient=(cov_edkskjgfp.s[1]++,new MongoClient(uri,{useNewUrlParser:true,useUnifiedTopology:true}));cov_edkskjgfp.s[2]++;await mongoClient.connect();cov_edkskjgfp.s[3]++;return new NodeTransport(mongoClient);}constructor(mongoClient){cov_edkskjgfp.f[1]++;cov_edkskjgfp.s[4]++;this.mongoClient=mongoClient;}runCommand(database,spec,options=(cov_edkskjgfp.b[0][0]++,{})){cov_edkskjgfp.f[2]++;cov_edkskjgfp.s[5]++;return this._db(database).command(spec,options);}_db(name){cov_edkskjgfp.f[3]++;cov_edkskjgfp.s[6]++;return this.mongoClient.db(name);}};cov_edkskjgfp.s[7]++;module.exports=NodeTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly4vc3JjL25vZGUtdHJhbnNwb3J0LmpzPzlmNGQiXSwibmFtZXMiOlsiTW9uZ29DbGllbnQiLCJyZXF1aXJlIiwiTm9kZVRyYW5zcG9ydCIsImZyb21VUkkiLCJ1cmkiLCJtb25nb0NsaWVudCIsInVzZU5ld1VybFBhcnNlciIsInVzZVVuaWZpZWRUb3BvbG9neSIsImNvbm5lY3QiLCJjb25zdHJ1Y3RvciIsInJ1bkNvbW1hbmQiLCJkYXRhYmFzZSIsInNwZWMiLCJvcHRpb25zIiwiX2RiIiwiY29tbWFuZCIsIm5hbWUiLCJkYiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJ3MElBQUEsS0FBTSxDQUNKQSxXQURJLHdCQUVGQyxtQkFBT0EsQ0FBQyxDQUFSLENBRkUsQ0FBTixDQVNBLEtBQU1DLGNBQWMsQ0FRbEIsWUFBYUMsUUFBYixDQUFxQkMsR0FBckIsQ0FBMEIsc0JBQ3hCLEtBQU1DLG1DQUFjLEdBQUlMLFlBQUosQ0FBZ0JJLEdBQWhCLENBQXFCLENBQ3ZDRSxnQkFBaUIsSUFEc0IsQ0FFdkNDLG1CQUFvQixJQUZtQixDQUFyQixDQUFkLENBQU4sQ0FEd0IscUJBS3hCLEtBQU1GLGFBQVlHLE9BQVosRUFBTixDQUx3QixxQkFNeEIsTUFBTyxJQUFJTixjQUFKLENBQWtCRyxXQUFsQixDQUFQLENBQ0QsQ0FRREksWUFBWUosV0FBWixDQUF5QiwyQ0FDdkIsS0FBS0EsV0FBTCxDQUFtQkEsV0FBbkIsQ0FDRCxDQVlESyxXQUFXQyxRQUFYLENBQXFCQyxJQUFyQixDQUEyQkMsaUNBQVUsRUFBVixDQUEzQixDQUF5QywyQ0FDdkMsTUFBTyxNQUFLQyxHQUFMLENBQVNILFFBQVQsRUFBbUJJLE9BQW5CLENBQTJCSCxJQUEzQixDQUFpQ0MsT0FBakMsQ0FBUCxDQUNELENBUURDLElBQUlFLElBQUosQ0FBVSwyQ0FDUixNQUFPLE1BQUtYLFdBQUwsQ0FBaUJZLEVBQWpCLENBQW9CRCxJQUFwQixDQUFQLENBQ0QsQ0FqRGlCLENBcURwQixDLHFCQUNBRSxPQUFPQyxPQUFQLENBQWlCakIsYUFBakIiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtcbiAgTW9uZ29DbGllbnRcbn0gPSByZXF1aXJlKCdtb25nb2RiJyk7XG4vKipcbiAqIEVuY2Fwc3VsYXRlcyBsb2dpYyBmb3IgY29tbXVuaWNhdGluZyB3aXRoIGEgTW9uZ29EQiBpbnN0YW5jZSB2aWFcbiAqIHRoZSBOb2RlIERyaXZlci5cbiAqL1xuXG5cbmNsYXNzIE5vZGVUcmFuc3BvcnQge1xuICAvKipcbiAgICogQ3JlYXRlIGEgTm9kZVRyYW5zcG9ydCBmcm9tIGEgVVJJLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdXJpIC0gVGhlIFVSSS5cbiAgICpcbiAgICogQHJldHVybnMge05vZGVUcmFuc3BvcnR9IFRoZSBOb2RlIHRyYW5zcG9ydC5cbiAgICovXG4gIHN0YXRpYyBhc3luYyBmcm9tVVJJKHVyaSkge1xuICAgIGNvbnN0IG1vbmdvQ2xpZW50ID0gbmV3IE1vbmdvQ2xpZW50KHVyaSwge1xuICAgICAgdXNlTmV3VXJsUGFyc2VyOiB0cnVlLFxuICAgICAgdXNlVW5pZmllZFRvcG9sb2d5OiB0cnVlXG4gICAgfSk7XG4gICAgYXdhaXQgbW9uZ29DbGllbnQuY29ubmVjdCgpO1xuICAgIHJldHVybiBuZXcgTm9kZVRyYW5zcG9ydChtb25nb0NsaWVudCk7XG4gIH1cblxuICAvKipcbiAgICogSW5zdGFudGlhdGUgYSBuZXcgTm9kZSB0cmFuc3BvcnQgd2l0aCB0aGUgTm9kZSBkcml2ZXIncyBjb25uZWN0ZWRcbiAgICogTW9uZ29DbGllbnQgaW5zdGFuY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7TW9uZ29DbGllbnR9IG1vbmdvQ2xpZW50IC0gVGhlIE5vZGUgZHJpdmVycycgTW9uZ29DbGllbnQgaW5zdGFuY2UuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihtb25nb0NsaWVudCkge1xuICAgIHRoaXMubW9uZ29DbGllbnQgPSBtb25nb0NsaWVudDtcbiAgfVxuICAvKipcbiAgICogUnVuIGEgY29tbWFuZCBhZ2FpbnN0IHRoZSBkYXRhYmFzZS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGFiYXNlIC0gVGhlIGRhdGFiYXNlIG5hbWUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzcGVjIC0gVGhlIGNvbW1hbmQgc3BlY2lmaWNhdGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgZGF0YWJhc2Ugb3B0aW9ucy5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2V9IFRoZSBwcm9taXNlIG9mIGNvbW1hbmQgcmVzdWx0cy5cbiAgICovXG5cblxuICBydW5Db21tYW5kKGRhdGFiYXNlLCBzcGVjLCBvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5fZGIoZGF0YWJhc2UpLmNvbW1hbmQoc3BlYywgb3B0aW9ucyk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgREIgb2JqZWN0IGZyb20gdGhlIGNsaWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgLSBUaGUgZGF0YWJhc2UgbmFtZS5cbiAgICovXG5cblxuICBfZGIobmFtZSkge1xuICAgIHJldHVybiB0aGlzLm1vbmdvQ2xpZW50LmRiKG5hbWUpO1xuICB9XG5cbn1cblxuO1xubW9kdWxlLmV4cG9ydHMgPSBOb2RlVHJhbnNwb3J0OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// Core module\nconst core = __webpack_require__(3);\nconst Instrumentation = __webpack_require__(102);\n\n// Set up the connect function\nconst connect = __webpack_require__(103).connect;\n\n// Expose error class\nconnect.MongoError = core.MongoError;\nconnect.MongoNetworkError = core.MongoNetworkError;\nconnect.MongoTimeoutError = core.MongoTimeoutError;\n\n// Actual driver classes exported\nconnect.Admin = __webpack_require__(160);\nconnect.MongoClient = __webpack_require__(103);\nconnect.Db = __webpack_require__(150);\nconnect.Collection = __webpack_require__(111);\nconnect.Server = __webpack_require__(176);\nconnect.ReplSet = __webpack_require__(178);\nconnect.Mongos = __webpack_require__(174);\nconnect.ReadPreference = core.ReadPreference;\nconnect.GridStore = __webpack_require__(181);\nconnect.Chunk = __webpack_require__(182);\nconnect.Logger = core.Logger;\nconnect.AggregationCursor = __webpack_require__(116);\nconnect.CommandCursor = __webpack_require__(117);\nconnect.Cursor = __webpack_require__(106);\nconnect.GridFSBucket = __webpack_require__(183);\n// Exported to be used in tests not to be used anywhere else\nconnect.CoreServer = core.Server;\nconnect.CoreConnection = core.Connection;\n\n// BSON types exported\nconnect.Binary = core.BSON.Binary;\nconnect.Code = core.BSON.Code;\nconnect.Map = core.BSON.Map;\nconnect.DBRef = core.BSON.DBRef;\nconnect.Double = core.BSON.Double;\nconnect.Int32 = core.BSON.Int32;\nconnect.Long = core.BSON.Long;\nconnect.MinKey = core.BSON.MinKey;\nconnect.MaxKey = core.BSON.MaxKey;\nconnect.ObjectID = core.BSON.ObjectID;\nconnect.ObjectId = core.BSON.ObjectID;\nconnect.Symbol = core.BSON.Symbol;\nconnect.Timestamp = core.BSON.Timestamp;\nconnect.BSONRegExp = core.BSON.BSONRegExp;\nconnect.Decimal128 = core.BSON.Decimal128;\n\n// Add connect method\nconnect.connect = connect;\n\n// Set up the instrumentation method\nconnect.instrument = function(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  const instrumentation = new Instrumentation();\n  instrumentation.instrument(connect.MongoClient, callback);\n  return instrumentation;\n};\n\n// Set our exports to be the connect function\nmodule.exports = connect;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvaW5kZXguanM/ODc3YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBLGFBQWEsbUJBQU8sQ0FBQyxDQUFZO0FBQ2pDLHdCQUF3QixtQkFBTyxDQUFDLEdBQVc7O0FBRTNDO0FBQ0EsZ0JBQWdCLG1CQUFPLENBQUMsR0FBb0I7O0FBRTVDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCLG1CQUFPLENBQUMsR0FBYTtBQUNyQyxzQkFBc0IsbUJBQU8sQ0FBQyxHQUFvQjtBQUNsRCxhQUFhLG1CQUFPLENBQUMsR0FBVTtBQUMvQixxQkFBcUIsbUJBQU8sQ0FBQyxHQUFrQjtBQUMvQyxpQkFBaUIsbUJBQU8sQ0FBQyxHQUF5QjtBQUNsRCxrQkFBa0IsbUJBQU8sQ0FBQyxHQUEwQjtBQUNwRCxpQkFBaUIsbUJBQU8sQ0FBQyxHQUF5QjtBQUNsRDtBQUNBLG9CQUFvQixtQkFBTyxDQUFDLEdBQXlCO0FBQ3JELGdCQUFnQixtQkFBTyxDQUFDLEdBQW9CO0FBQzVDO0FBQ0EsNEJBQTRCLG1CQUFPLENBQUMsR0FBMEI7QUFDOUQsd0JBQXdCLG1CQUFPLENBQUMsR0FBc0I7QUFDdEQsaUJBQWlCLG1CQUFPLENBQUMsR0FBYztBQUN2Qyx1QkFBdUIsbUJBQU8sQ0FBQyxHQUFxQjtBQUNwRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBDb3JlIG1vZHVsZVxuY29uc3QgY29yZSA9IHJlcXVpcmUoJy4vbGliL2NvcmUnKTtcbmNvbnN0IEluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vbGliL2FwbScpO1xuXG4vLyBTZXQgdXAgdGhlIGNvbm5lY3QgZnVuY3Rpb25cbmNvbnN0IGNvbm5lY3QgPSByZXF1aXJlKCcuL2xpYi9tb25nb19jbGllbnQnKS5jb25uZWN0O1xuXG4vLyBFeHBvc2UgZXJyb3IgY2xhc3NcbmNvbm5lY3QuTW9uZ29FcnJvciA9IGNvcmUuTW9uZ29FcnJvcjtcbmNvbm5lY3QuTW9uZ29OZXR3b3JrRXJyb3IgPSBjb3JlLk1vbmdvTmV0d29ya0Vycm9yO1xuY29ubmVjdC5Nb25nb1RpbWVvdXRFcnJvciA9IGNvcmUuTW9uZ29UaW1lb3V0RXJyb3I7XG5cbi8vIEFjdHVhbCBkcml2ZXIgY2xhc3NlcyBleHBvcnRlZFxuY29ubmVjdC5BZG1pbiA9IHJlcXVpcmUoJy4vbGliL2FkbWluJyk7XG5jb25uZWN0Lk1vbmdvQ2xpZW50ID0gcmVxdWlyZSgnLi9saWIvbW9uZ29fY2xpZW50Jyk7XG5jb25uZWN0LkRiID0gcmVxdWlyZSgnLi9saWIvZGInKTtcbmNvbm5lY3QuQ29sbGVjdGlvbiA9IHJlcXVpcmUoJy4vbGliL2NvbGxlY3Rpb24nKTtcbmNvbm5lY3QuU2VydmVyID0gcmVxdWlyZSgnLi9saWIvdG9wb2xvZ2llcy9zZXJ2ZXInKTtcbmNvbm5lY3QuUmVwbFNldCA9IHJlcXVpcmUoJy4vbGliL3RvcG9sb2dpZXMvcmVwbHNldCcpO1xuY29ubmVjdC5Nb25nb3MgPSByZXF1aXJlKCcuL2xpYi90b3BvbG9naWVzL21vbmdvcycpO1xuY29ubmVjdC5SZWFkUHJlZmVyZW5jZSA9IGNvcmUuUmVhZFByZWZlcmVuY2U7XG5jb25uZWN0LkdyaWRTdG9yZSA9IHJlcXVpcmUoJy4vbGliL2dyaWRmcy9ncmlkX3N0b3JlJyk7XG5jb25uZWN0LkNodW5rID0gcmVxdWlyZSgnLi9saWIvZ3JpZGZzL2NodW5rJyk7XG5jb25uZWN0LkxvZ2dlciA9IGNvcmUuTG9nZ2VyO1xuY29ubmVjdC5BZ2dyZWdhdGlvbkN1cnNvciA9IHJlcXVpcmUoJy4vbGliL2FnZ3JlZ2F0aW9uX2N1cnNvcicpO1xuY29ubmVjdC5Db21tYW5kQ3Vyc29yID0gcmVxdWlyZSgnLi9saWIvY29tbWFuZF9jdXJzb3InKTtcbmNvbm5lY3QuQ3Vyc29yID0gcmVxdWlyZSgnLi9saWIvY3Vyc29yJyk7XG5jb25uZWN0LkdyaWRGU0J1Y2tldCA9IHJlcXVpcmUoJy4vbGliL2dyaWRmcy1zdHJlYW0nKTtcbi8vIEV4cG9ydGVkIHRvIGJlIHVzZWQgaW4gdGVzdHMgbm90IHRvIGJlIHVzZWQgYW55d2hlcmUgZWxzZVxuY29ubmVjdC5Db3JlU2VydmVyID0gY29yZS5TZXJ2ZXI7XG5jb25uZWN0LkNvcmVDb25uZWN0aW9uID0gY29yZS5Db25uZWN0aW9uO1xuXG4vLyBCU09OIHR5cGVzIGV4cG9ydGVkXG5jb25uZWN0LkJpbmFyeSA9IGNvcmUuQlNPTi5CaW5hcnk7XG5jb25uZWN0LkNvZGUgPSBjb3JlLkJTT04uQ29kZTtcbmNvbm5lY3QuTWFwID0gY29yZS5CU09OLk1hcDtcbmNvbm5lY3QuREJSZWYgPSBjb3JlLkJTT04uREJSZWY7XG5jb25uZWN0LkRvdWJsZSA9IGNvcmUuQlNPTi5Eb3VibGU7XG5jb25uZWN0LkludDMyID0gY29yZS5CU09OLkludDMyO1xuY29ubmVjdC5Mb25nID0gY29yZS5CU09OLkxvbmc7XG5jb25uZWN0Lk1pbktleSA9IGNvcmUuQlNPTi5NaW5LZXk7XG5jb25uZWN0Lk1heEtleSA9IGNvcmUuQlNPTi5NYXhLZXk7XG5jb25uZWN0Lk9iamVjdElEID0gY29yZS5CU09OLk9iamVjdElEO1xuY29ubmVjdC5PYmplY3RJZCA9IGNvcmUuQlNPTi5PYmplY3RJRDtcbmNvbm5lY3QuU3ltYm9sID0gY29yZS5CU09OLlN5bWJvbDtcbmNvbm5lY3QuVGltZXN0YW1wID0gY29yZS5CU09OLlRpbWVzdGFtcDtcbmNvbm5lY3QuQlNPTlJlZ0V4cCA9IGNvcmUuQlNPTi5CU09OUmVnRXhwO1xuY29ubmVjdC5EZWNpbWFsMTI4ID0gY29yZS5CU09OLkRlY2ltYWwxMjg7XG5cbi8vIEFkZCBjb25uZWN0IG1ldGhvZFxuY29ubmVjdC5jb25uZWN0ID0gY29ubmVjdDtcblxuLy8gU2V0IHVwIHRoZSBpbnN0cnVtZW50YXRpb24gbWV0aG9kXG5jb25uZWN0Lmluc3RydW1lbnQgPSBmdW5jdGlvbihvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gbmV3IEluc3RydW1lbnRhdGlvbigpO1xuICBpbnN0cnVtZW50YXRpb24uaW5zdHJ1bWVudChjb25uZWN0Lk1vbmdvQ2xpZW50LCBjYWxsYmFjayk7XG4gIHJldHVybiBpbnN0cnVtZW50YXRpb247XG59O1xuXG4vLyBTZXQgb3VyIGV4cG9ydHMgdG8gYmUgdGhlIGNvbm5lY3QgZnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzID0gY29ubmVjdDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nlet BSON = __webpack_require__(4);\nconst require_optional = __webpack_require__(27);\nconst EJSON = __webpack_require__(35).retrieveEJSON();\n\ntry {\n  // Attempt to grab the native BSON parser\n  const BSONNative = require_optional('bson-ext');\n  // If we got the native parser, use it instead of the\n  // Javascript one\n  if (BSONNative) {\n    BSON = BSONNative;\n  }\n} catch (err) {} // eslint-disable-line\n\nmodule.exports = {\n  // Errors\n  MongoError: __webpack_require__(37).MongoError,\n  MongoNetworkError: __webpack_require__(37).MongoNetworkError,\n  MongoParseError: __webpack_require__(37).MongoParseError,\n  MongoTimeoutError: __webpack_require__(37).MongoTimeoutError,\n  MongoWriteConcernError: __webpack_require__(37).MongoWriteConcernError,\n  mongoErrorContextSymbol: __webpack_require__(37).mongoErrorContextSymbol,\n  // Core\n  Connection: __webpack_require__(38),\n  Server: __webpack_require__(52),\n  ReplSet: __webpack_require__(89),\n  Mongos: __webpack_require__(91),\n  Logger: __webpack_require__(51),\n  Cursor: __webpack_require__(82).CoreCursor,\n  ReadPreference: __webpack_require__(42),\n  Sessions: __webpack_require__(74),\n  BSON: BSON,\n  EJSON: EJSON,\n  Topology: __webpack_require__(92),\n  // Raw operations\n  Query: __webpack_require__(48).Query,\n  // Auth mechanisms\n  MongoCredentials: __webpack_require__(98).MongoCredentials,\n  defaultAuthProviders: __webpack_require__(62).defaultAuthProviders,\n  MongoCR: __webpack_require__(63),\n  X509: __webpack_require__(65),\n  Plain: __webpack_require__(66),\n  GSSAPI: __webpack_require__(67),\n  ScramSHA1: __webpack_require__(69).ScramSHA1,\n  ScramSHA256: __webpack_require__(69).ScramSHA256,\n  // Utilities\n  parseConnectionString: __webpack_require__(99)\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NvcmUvaW5kZXguanM/M2JiZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixXQUFXLG1CQUFPLENBQUMsQ0FBTTtBQUN6Qix5QkFBeUIsbUJBQU8sQ0FBQyxFQUFrQjtBQUNuRCxjQUFjLG1CQUFPLENBQUMsRUFBUzs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsZUFBZTs7QUFFaEI7QUFDQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxFQUFTO0FBQy9CLHFCQUFxQixtQkFBTyxDQUFDLEVBQVM7QUFDdEMsbUJBQW1CLG1CQUFPLENBQUMsRUFBUztBQUNwQyxxQkFBcUIsbUJBQU8sQ0FBQyxFQUFTO0FBQ3RDLDBCQUEwQixtQkFBTyxDQUFDLEVBQVM7QUFDM0MsMkJBQTJCLG1CQUFPLENBQUMsRUFBUztBQUM1QztBQUNBLGNBQWMsbUJBQU8sQ0FBQyxFQUF5QjtBQUMvQyxVQUFVLG1CQUFPLENBQUMsRUFBcUI7QUFDdkMsV0FBVyxtQkFBTyxDQUFDLEVBQXNCO0FBQ3pDLFVBQVUsbUJBQU8sQ0FBQyxFQUFxQjtBQUN2QyxVQUFVLG1CQUFPLENBQUMsRUFBcUI7QUFDdkMsVUFBVSxtQkFBTyxDQUFDLEVBQVU7QUFDNUIsa0JBQWtCLG1CQUFPLENBQUMsRUFBOEI7QUFDeEQsWUFBWSxtQkFBTyxDQUFDLEVBQVk7QUFDaEM7QUFDQTtBQUNBLFlBQVksbUJBQU8sQ0FBQyxFQUFpQjtBQUNyQztBQUNBLFNBQVMsbUJBQU8sQ0FBQyxFQUF1QjtBQUN4QztBQUNBLG9CQUFvQixtQkFBTyxDQUFDLEVBQTBCO0FBQ3RELHdCQUF3QixtQkFBTyxDQUFDLEVBQTZCO0FBQzdELFdBQVcsbUJBQU8sQ0FBQyxFQUFnQjtBQUNuQyxRQUFRLG1CQUFPLENBQUMsRUFBYTtBQUM3QixTQUFTLG1CQUFPLENBQUMsRUFBYztBQUMvQixVQUFVLG1CQUFPLENBQUMsRUFBZTtBQUNqQyxhQUFhLG1CQUFPLENBQUMsRUFBYztBQUNuQyxlQUFlLG1CQUFPLENBQUMsRUFBYztBQUNyQztBQUNBLHlCQUF5QixtQkFBTyxDQUFDLEVBQWM7QUFDL0MiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubGV0IEJTT04gPSByZXF1aXJlKCdic29uJyk7XG5jb25zdCByZXF1aXJlX29wdGlvbmFsID0gcmVxdWlyZSgncmVxdWlyZV9vcHRpb25hbCcpO1xuY29uc3QgRUpTT04gPSByZXF1aXJlKCcuL3V0aWxzJykucmV0cmlldmVFSlNPTigpO1xuXG50cnkge1xuICAvLyBBdHRlbXB0IHRvIGdyYWIgdGhlIG5hdGl2ZSBCU09OIHBhcnNlclxuICBjb25zdCBCU09OTmF0aXZlID0gcmVxdWlyZV9vcHRpb25hbCgnYnNvbi1leHQnKTtcbiAgLy8gSWYgd2UgZ290IHRoZSBuYXRpdmUgcGFyc2VyLCB1c2UgaXQgaW5zdGVhZCBvZiB0aGVcbiAgLy8gSmF2YXNjcmlwdCBvbmVcbiAgaWYgKEJTT05OYXRpdmUpIHtcbiAgICBCU09OID0gQlNPTk5hdGl2ZTtcbiAgfVxufSBjYXRjaCAoZXJyKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBFcnJvcnNcbiAgTW9uZ29FcnJvcjogcmVxdWlyZSgnLi9lcnJvcicpLk1vbmdvRXJyb3IsXG4gIE1vbmdvTmV0d29ya0Vycm9yOiByZXF1aXJlKCcuL2Vycm9yJykuTW9uZ29OZXR3b3JrRXJyb3IsXG4gIE1vbmdvUGFyc2VFcnJvcjogcmVxdWlyZSgnLi9lcnJvcicpLk1vbmdvUGFyc2VFcnJvcixcbiAgTW9uZ29UaW1lb3V0RXJyb3I6IHJlcXVpcmUoJy4vZXJyb3InKS5Nb25nb1RpbWVvdXRFcnJvcixcbiAgTW9uZ29Xcml0ZUNvbmNlcm5FcnJvcjogcmVxdWlyZSgnLi9lcnJvcicpLk1vbmdvV3JpdGVDb25jZXJuRXJyb3IsXG4gIG1vbmdvRXJyb3JDb250ZXh0U3ltYm9sOiByZXF1aXJlKCcuL2Vycm9yJykubW9uZ29FcnJvckNvbnRleHRTeW1ib2wsXG4gIC8vIENvcmVcbiAgQ29ubmVjdGlvbjogcmVxdWlyZSgnLi9jb25uZWN0aW9uL2Nvbm5lY3Rpb24nKSxcbiAgU2VydmVyOiByZXF1aXJlKCcuL3RvcG9sb2dpZXMvc2VydmVyJyksXG4gIFJlcGxTZXQ6IHJlcXVpcmUoJy4vdG9wb2xvZ2llcy9yZXBsc2V0JyksXG4gIE1vbmdvczogcmVxdWlyZSgnLi90b3BvbG9naWVzL21vbmdvcycpLFxuICBMb2dnZXI6IHJlcXVpcmUoJy4vY29ubmVjdGlvbi9sb2dnZXInKSxcbiAgQ3Vyc29yOiByZXF1aXJlKCcuL2N1cnNvcicpLkNvcmVDdXJzb3IsXG4gIFJlYWRQcmVmZXJlbmNlOiByZXF1aXJlKCcuL3RvcG9sb2dpZXMvcmVhZF9wcmVmZXJlbmNlJyksXG4gIFNlc3Npb25zOiByZXF1aXJlKCcuL3Nlc3Npb25zJyksXG4gIEJTT046IEJTT04sXG4gIEVKU09OOiBFSlNPTixcbiAgVG9wb2xvZ3k6IHJlcXVpcmUoJy4vc2RhbS90b3BvbG9neScpLFxuICAvLyBSYXcgb3BlcmF0aW9uc1xuICBRdWVyeTogcmVxdWlyZSgnLi9jb25uZWN0aW9uL2NvbW1hbmRzJykuUXVlcnksXG4gIC8vIEF1dGggbWVjaGFuaXNtc1xuICBNb25nb0NyZWRlbnRpYWxzOiByZXF1aXJlKCcuL2F1dGgvbW9uZ29fY3JlZGVudGlhbHMnKS5Nb25nb0NyZWRlbnRpYWxzLFxuICBkZWZhdWx0QXV0aFByb3ZpZGVyczogcmVxdWlyZSgnLi9hdXRoL2RlZmF1bHRBdXRoUHJvdmlkZXJzJykuZGVmYXVsdEF1dGhQcm92aWRlcnMsXG4gIE1vbmdvQ1I6IHJlcXVpcmUoJy4vYXV0aC9tb25nb2NyJyksXG4gIFg1MDk6IHJlcXVpcmUoJy4vYXV0aC94NTA5JyksXG4gIFBsYWluOiByZXF1aXJlKCcuL2F1dGgvcGxhaW4nKSxcbiAgR1NTQVBJOiByZXF1aXJlKCcuL2F1dGgvZ3NzYXBpJyksXG4gIFNjcmFtU0hBMTogcmVxdWlyZSgnLi9hdXRoL3NjcmFtJykuU2NyYW1TSEExLFxuICBTY3JhbVNIQTI1NjogcmVxdWlyZSgnLi9hdXRoL3NjcmFtJykuU2NyYW1TSEEyNTYsXG4gIC8vIFV0aWxpdGllc1xuICBwYXJzZUNvbm5lY3Rpb25TdHJpbmc6IHJlcXVpcmUoJy4vdXJpX3BhcnNlcicpXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

eval("var BSON = __webpack_require__(5),\n  Binary = __webpack_require__(21),\n  Code = __webpack_require__(16),\n  DBRef = __webpack_require__(20),\n  Decimal128 = __webpack_require__(17),\n  Double = __webpack_require__(8),\n  Int32 = __webpack_require__(15),\n  Long = __webpack_require__(7),\n  Map = __webpack_require__(6),\n  MaxKey = __webpack_require__(19),\n  MinKey = __webpack_require__(18),\n  ObjectId = __webpack_require__(10),\n  BSONRegExp = __webpack_require__(13),\n  Symbol = __webpack_require__(14),\n  Timestamp = __webpack_require__(9);\n\n// BSON MAX VALUES\nBSON.BSON_INT32_MAX = 0x7fffffff;\nBSON.BSON_INT32_MIN = -0x80000000;\n\nBSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;\nBSON.BSON_INT64_MIN = -Math.pow(2, 63);\n\n// JS MAX PRECISE VALUES\nBSON.JS_INT_MAX = 0x20000000000000; // Any integer up to 2^53 can be precisely represented by a double.\nBSON.JS_INT_MIN = -0x20000000000000; // Any integer down to -2^53 can be precisely represented by a double.\n\n// Add BSON types to function creation\nBSON.Binary = Binary;\nBSON.Code = Code;\nBSON.DBRef = DBRef;\nBSON.Decimal128 = Decimal128;\nBSON.Double = Double;\nBSON.Int32 = Int32;\nBSON.Long = Long;\nBSON.Map = Map;\nBSON.MaxKey = MaxKey;\nBSON.MinKey = MinKey;\nBSON.ObjectId = ObjectId;\nBSON.ObjectID = ObjectId;\nBSON.BSONRegExp = BSONRegExp;\nBSON.Symbol = Symbol;\nBSON.Timestamp = Timestamp;\n\n// Return the BSON\nmodule.exports = BSON;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL2Jzb24vaW5kZXguanM/NThjNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLG1CQUFPLENBQUMsQ0FBaUI7QUFDcEMsV0FBVyxtQkFBTyxDQUFDLEVBQW1CO0FBQ3RDLFNBQVMsbUJBQU8sQ0FBQyxFQUFpQjtBQUNsQyxVQUFVLG1CQUFPLENBQUMsRUFBbUI7QUFDckMsZUFBZSxtQkFBTyxDQUFDLEVBQXVCO0FBQzlDLFdBQVcsbUJBQU8sQ0FBQyxDQUFtQjtBQUN0QyxVQUFVLG1CQUFPLENBQUMsRUFBbUI7QUFDckMsU0FBUyxtQkFBTyxDQUFDLENBQWlCO0FBQ2xDLFFBQVEsbUJBQU8sQ0FBQyxDQUFnQjtBQUNoQyxXQUFXLG1CQUFPLENBQUMsRUFBb0I7QUFDdkMsV0FBVyxtQkFBTyxDQUFDLEVBQW9CO0FBQ3ZDLGFBQWEsbUJBQU8sQ0FBQyxFQUFxQjtBQUMxQyxlQUFlLG1CQUFPLENBQUMsRUFBbUI7QUFDMUMsV0FBVyxtQkFBTyxDQUFDLEVBQW1CO0FBQ3RDLGNBQWMsbUJBQU8sQ0FBQyxDQUFzQjs7QUFFNUM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxtQ0FBbUM7QUFDbkMsb0NBQW9DOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQlNPTiA9IHJlcXVpcmUoJy4vbGliL2Jzb24vYnNvbicpLFxuICBCaW5hcnkgPSByZXF1aXJlKCcuL2xpYi9ic29uL2JpbmFyeScpLFxuICBDb2RlID0gcmVxdWlyZSgnLi9saWIvYnNvbi9jb2RlJyksXG4gIERCUmVmID0gcmVxdWlyZSgnLi9saWIvYnNvbi9kYl9yZWYnKSxcbiAgRGVjaW1hbDEyOCA9IHJlcXVpcmUoJy4vbGliL2Jzb24vZGVjaW1hbDEyOCcpLFxuICBEb3VibGUgPSByZXF1aXJlKCcuL2xpYi9ic29uL2RvdWJsZScpLFxuICBJbnQzMiA9IHJlcXVpcmUoJy4vbGliL2Jzb24vaW50XzMyJyksXG4gIExvbmcgPSByZXF1aXJlKCcuL2xpYi9ic29uL2xvbmcnKSxcbiAgTWFwID0gcmVxdWlyZSgnLi9saWIvYnNvbi9tYXAnKSxcbiAgTWF4S2V5ID0gcmVxdWlyZSgnLi9saWIvYnNvbi9tYXhfa2V5JyksXG4gIE1pbktleSA9IHJlcXVpcmUoJy4vbGliL2Jzb24vbWluX2tleScpLFxuICBPYmplY3RJZCA9IHJlcXVpcmUoJy4vbGliL2Jzb24vb2JqZWN0aWQnKSxcbiAgQlNPTlJlZ0V4cCA9IHJlcXVpcmUoJy4vbGliL2Jzb24vcmVnZXhwJyksXG4gIFN5bWJvbCA9IHJlcXVpcmUoJy4vbGliL2Jzb24vc3ltYm9sJyksXG4gIFRpbWVzdGFtcCA9IHJlcXVpcmUoJy4vbGliL2Jzb24vdGltZXN0YW1wJyk7XG5cbi8vIEJTT04gTUFYIFZBTFVFU1xuQlNPTi5CU09OX0lOVDMyX01BWCA9IDB4N2ZmZmZmZmY7XG5CU09OLkJTT05fSU5UMzJfTUlOID0gLTB4ODAwMDAwMDA7XG5cbkJTT04uQlNPTl9JTlQ2NF9NQVggPSBNYXRoLnBvdygyLCA2MykgLSAxO1xuQlNPTi5CU09OX0lOVDY0X01JTiA9IC1NYXRoLnBvdygyLCA2Myk7XG5cbi8vIEpTIE1BWCBQUkVDSVNFIFZBTFVFU1xuQlNPTi5KU19JTlRfTUFYID0gMHgyMDAwMDAwMDAwMDAwMDsgLy8gQW55IGludGVnZXIgdXAgdG8gMl41MyBjYW4gYmUgcHJlY2lzZWx5IHJlcHJlc2VudGVkIGJ5IGEgZG91YmxlLlxuQlNPTi5KU19JTlRfTUlOID0gLTB4MjAwMDAwMDAwMDAwMDA7IC8vIEFueSBpbnRlZ2VyIGRvd24gdG8gLTJeNTMgY2FuIGJlIHByZWNpc2VseSByZXByZXNlbnRlZCBieSBhIGRvdWJsZS5cblxuLy8gQWRkIEJTT04gdHlwZXMgdG8gZnVuY3Rpb24gY3JlYXRpb25cbkJTT04uQmluYXJ5ID0gQmluYXJ5O1xuQlNPTi5Db2RlID0gQ29kZTtcbkJTT04uREJSZWYgPSBEQlJlZjtcbkJTT04uRGVjaW1hbDEyOCA9IERlY2ltYWwxMjg7XG5CU09OLkRvdWJsZSA9IERvdWJsZTtcbkJTT04uSW50MzIgPSBJbnQzMjtcbkJTT04uTG9uZyA9IExvbmc7XG5CU09OLk1hcCA9IE1hcDtcbkJTT04uTWF4S2V5ID0gTWF4S2V5O1xuQlNPTi5NaW5LZXkgPSBNaW5LZXk7XG5CU09OLk9iamVjdElkID0gT2JqZWN0SWQ7XG5CU09OLk9iamVjdElEID0gT2JqZWN0SWQ7XG5CU09OLkJTT05SZWdFeHAgPSBCU09OUmVnRXhwO1xuQlNPTi5TeW1ib2wgPSBTeW1ib2w7XG5CU09OLlRpbWVzdGFtcCA9IFRpbWVzdGFtcDtcblxuLy8gUmV0dXJuIHRoZSBCU09OXG5tb2R1bGUuZXhwb3J0cyA9IEJTT047XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Map = __webpack_require__(6),\n  Long = __webpack_require__(7),\n  Double = __webpack_require__(8),\n  Timestamp = __webpack_require__(9),\n  ObjectID = __webpack_require__(10),\n  BSONRegExp = __webpack_require__(13),\n  Symbol = __webpack_require__(14),\n  Int32 = __webpack_require__(15),\n  Code = __webpack_require__(16),\n  Decimal128 = __webpack_require__(17),\n  MinKey = __webpack_require__(18),\n  MaxKey = __webpack_require__(19),\n  DBRef = __webpack_require__(20),\n  Binary = __webpack_require__(21);\n\n// Parts of the parser\nvar deserialize = __webpack_require__(23),\n  serializer = __webpack_require__(24),\n  calculateObjectSize = __webpack_require__(26),\n  utils = __webpack_require__(11);\n\n/**\n * @ignore\n * @api private\n */\n// Default Max Size\nvar MAXSIZE = 1024 * 1024 * 17;\n\n// Current Internal Temporary Serialization Buffer\nvar buffer = utils.allocBuffer(MAXSIZE);\n\nvar BSON = function() {};\n\n/**\n * Serialize a Javascript object.\n *\n * @param {Object} object the Javascript object to serialize.\n * @param {Boolean} [options.checkKeys] the serializer will check if keys are valid.\n * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.\n * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.\n * @param {Number} [options.minInternalBufferSize=1024*1024*17] minimum size of the internal temporary serialization buffer **(default:1024*1024*17)**.\n * @return {Buffer} returns the Buffer object containing the serialized object.\n * @api public\n */\nBSON.prototype.serialize = function serialize(object, options) {\n  options = options || {};\n  // Unpack the options\n  var checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n  var serializeFunctions =\n    typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  var ignoreUndefined =\n    typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n  var minInternalBufferSize =\n    typeof options.minInternalBufferSize === 'number' ? options.minInternalBufferSize : MAXSIZE;\n  \n  // Resize the internal serialization buffer if needed\n  if (buffer.length < minInternalBufferSize) {\n    buffer = utils.allocBuffer(minInternalBufferSize);\n  }\n\n  // Attempt to serialize\n  var serializationIndex = serializer(\n    buffer,\n    object,\n    checkKeys,\n    0,\n    0,\n    serializeFunctions,\n    ignoreUndefined,\n    []\n  );\n  // Create the final buffer\n  var finishedBuffer = utils.allocBuffer(serializationIndex);\n  // Copy into the finished buffer\n  buffer.copy(finishedBuffer, 0, 0, finishedBuffer.length);\n  // Return the buffer\n  return finishedBuffer;\n};\n\n/**\n * Serialize a Javascript object using a predefined Buffer and index into the buffer, useful when pre-allocating the space for serialization.\n *\n * @param {Object} object the Javascript object to serialize.\n * @param {Buffer} buffer the Buffer you pre-allocated to store the serialized BSON object.\n * @param {Boolean} [options.checkKeys] the serializer will check if keys are valid.\n * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.\n * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.\n * @param {Number} [options.index] the index in the buffer where we wish to start serializing into.\n * @return {Number} returns the index pointing to the last written byte in the buffer.\n * @api public\n */\nBSON.prototype.serializeWithBufferAndIndex = function(object, finalBuffer, options) {\n  options = options || {};\n  // Unpack the options\n  var checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n  var serializeFunctions =\n    typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  var ignoreUndefined =\n    typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n  var startIndex = typeof options.index === 'number' ? options.index : 0;\n\n  // Attempt to serialize\n  var serializationIndex = serializer(\n    finalBuffer,\n    object,\n    checkKeys,\n    startIndex || 0,\n    0,\n    serializeFunctions,\n    ignoreUndefined\n  );\n\n  // Return the index\n  return serializationIndex - 1;\n};\n\n/**\n * Deserialize data as BSON.\n *\n * @param {Buffer} buffer the buffer containing the serialized set of BSON documents.\n * @param {Object} [options.evalFunctions=false] evaluate functions in the BSON document scoped to the object deserialized.\n * @param {Object} [options.cacheFunctions=false] cache evaluated functions for reuse.\n * @param {Object} [options.cacheFunctionsCrc32=false] use a crc32 code for caching, otherwise use the string of the function.\n * @param {Object} [options.promoteLongs=true] when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n * @param {Object} [options.promoteBuffers=false] when deserializing a Binary will return it as a node.js Buffer instance.\n * @param {Object} [options.promoteValues=false] when deserializing will promote BSON values to their Node.js closest equivalent types.\n * @param {Object} [options.fieldsAsRaw=null] allow to specify if there what fields we wish to return as unserialized raw buffer.\n * @param {Object} [options.bsonRegExp=false] return BSON regular expressions as BSONRegExp instances.\n * @return {Object} returns the deserialized Javascript Object.\n * @api public\n */\nBSON.prototype.deserialize = function(buffer, options) {\n  return deserialize(buffer, options);\n};\n\n/**\n * Calculate the bson size for a passed in Javascript object.\n *\n * @param {Object} object the Javascript object to calculate the BSON byte size for.\n * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.\n * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.\n * @return {Number} returns the number of bytes the BSON object will take up.\n * @api public\n */\nBSON.prototype.calculateObjectSize = function(object, options) {\n  options = options || {};\n\n  var serializeFunctions =\n    typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  var ignoreUndefined =\n    typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n\n  return calculateObjectSize(object, serializeFunctions, ignoreUndefined);\n};\n\n/**\n * Deserialize stream data as BSON documents.\n *\n * @param {Buffer} data the buffer containing the serialized set of BSON documents.\n * @param {Number} startIndex the start index in the data Buffer where the deserialization is to start.\n * @param {Number} numberOfDocuments number of documents to deserialize.\n * @param {Array} documents an array where to store the deserialized documents.\n * @param {Number} docStartIndex the index in the documents array from where to start inserting documents.\n * @param {Object} [options] additional options used for the deserialization.\n * @param {Object} [options.evalFunctions=false] evaluate functions in the BSON document scoped to the object deserialized.\n * @param {Object} [options.cacheFunctions=false] cache evaluated functions for reuse.\n * @param {Object} [options.cacheFunctionsCrc32=false] use a crc32 code for caching, otherwise use the string of the function.\n * @param {Object} [options.promoteLongs=true] when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n * @param {Object} [options.promoteBuffers=false] when deserializing a Binary will return it as a node.js Buffer instance.\n * @param {Object} [options.promoteValues=false] when deserializing will promote BSON values to their Node.js closest equivalent types.\n * @param {Object} [options.fieldsAsRaw=null] allow to specify if there what fields we wish to return as unserialized raw buffer.\n * @param {Object} [options.bsonRegExp=false] return BSON regular expressions as BSONRegExp instances.\n * @return {Number} returns the next index in the buffer after deserialization **x** numbers of documents.\n * @api public\n */\nBSON.prototype.deserializeStream = function(\n  data,\n  startIndex,\n  numberOfDocuments,\n  documents,\n  docStartIndex,\n  options\n) {\n  options = options != null ? options : {};\n  var index = startIndex;\n  // Loop over all documents\n  for (var i = 0; i < numberOfDocuments; i++) {\n    // Find size of the document\n    var size =\n      data[index] | (data[index + 1] << 8) | (data[index + 2] << 16) | (data[index + 3] << 24);\n    // Update options with index\n    options['index'] = index;\n    // Parse the document at this point\n    documents[docStartIndex + i] = this.deserialize(data, options);\n    // Adjust index by the document size\n    index = index + size;\n  }\n\n  // Return object containing end index of parsing and list of documents\n  return index;\n};\n\n/**\n * @ignore\n * @api private\n */\n// BSON MAX VALUES\nBSON.BSON_INT32_MAX = 0x7fffffff;\nBSON.BSON_INT32_MIN = -0x80000000;\n\nBSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;\nBSON.BSON_INT64_MIN = -Math.pow(2, 63);\n\n// JS MAX PRECISE VALUES\nBSON.JS_INT_MAX = 0x20000000000000; // Any integer up to 2^53 can be precisely represented by a double.\nBSON.JS_INT_MIN = -0x20000000000000; // Any integer down to -2^53 can be precisely represented by a double.\n\n// Internal long versions\n// var JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000); // Any integer up to 2^53 can be precisely represented by a double.\n// var JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000); // Any integer down to -2^53 can be precisely represented by a double.\n\n/**\n * Number BSON Type\n *\n * @classconstant BSON_DATA_NUMBER\n **/\nBSON.BSON_DATA_NUMBER = 1;\n/**\n * String BSON Type\n *\n * @classconstant BSON_DATA_STRING\n **/\nBSON.BSON_DATA_STRING = 2;\n/**\n * Object BSON Type\n *\n * @classconstant BSON_DATA_OBJECT\n **/\nBSON.BSON_DATA_OBJECT = 3;\n/**\n * Array BSON Type\n *\n * @classconstant BSON_DATA_ARRAY\n **/\nBSON.BSON_DATA_ARRAY = 4;\n/**\n * Binary BSON Type\n *\n * @classconstant BSON_DATA_BINARY\n **/\nBSON.BSON_DATA_BINARY = 5;\n/**\n * ObjectID BSON Type\n *\n * @classconstant BSON_DATA_OID\n **/\nBSON.BSON_DATA_OID = 7;\n/**\n * Boolean BSON Type\n *\n * @classconstant BSON_DATA_BOOLEAN\n **/\nBSON.BSON_DATA_BOOLEAN = 8;\n/**\n * Date BSON Type\n *\n * @classconstant BSON_DATA_DATE\n **/\nBSON.BSON_DATA_DATE = 9;\n/**\n * null BSON Type\n *\n * @classconstant BSON_DATA_NULL\n **/\nBSON.BSON_DATA_NULL = 10;\n/**\n * RegExp BSON Type\n *\n * @classconstant BSON_DATA_REGEXP\n **/\nBSON.BSON_DATA_REGEXP = 11;\n/**\n * Code BSON Type\n *\n * @classconstant BSON_DATA_CODE\n **/\nBSON.BSON_DATA_CODE = 13;\n/**\n * Symbol BSON Type\n *\n * @classconstant BSON_DATA_SYMBOL\n **/\nBSON.BSON_DATA_SYMBOL = 14;\n/**\n * Code with Scope BSON Type\n *\n * @classconstant BSON_DATA_CODE_W_SCOPE\n **/\nBSON.BSON_DATA_CODE_W_SCOPE = 15;\n/**\n * 32 bit Integer BSON Type\n *\n * @classconstant BSON_DATA_INT\n **/\nBSON.BSON_DATA_INT = 16;\n/**\n * Timestamp BSON Type\n *\n * @classconstant BSON_DATA_TIMESTAMP\n **/\nBSON.BSON_DATA_TIMESTAMP = 17;\n/**\n * Long BSON Type\n *\n * @classconstant BSON_DATA_LONG\n **/\nBSON.BSON_DATA_LONG = 18;\n/**\n * MinKey BSON Type\n *\n * @classconstant BSON_DATA_MIN_KEY\n **/\nBSON.BSON_DATA_MIN_KEY = 0xff;\n/**\n * MaxKey BSON Type\n *\n * @classconstant BSON_DATA_MAX_KEY\n **/\nBSON.BSON_DATA_MAX_KEY = 0x7f;\n\n/**\n * Binary Default Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_DEFAULT\n **/\nBSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;\n/**\n * Binary Function Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_FUNCTION\n **/\nBSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;\n/**\n * Binary Byte Array Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY\n **/\nBSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;\n/**\n * Binary UUID Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_UUID\n **/\nBSON.BSON_BINARY_SUBTYPE_UUID = 3;\n/**\n * Binary MD5 Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_MD5\n **/\nBSON.BSON_BINARY_SUBTYPE_MD5 = 4;\n/**\n * Binary User Defined Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED\n **/\nBSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;\n\n// Return BSON\nmodule.exports = BSON;\nmodule.exports.Code = Code;\nmodule.exports.Map = Map;\nmodule.exports.Symbol = Symbol;\nmodule.exports.BSON = BSON;\nmodule.exports.DBRef = DBRef;\nmodule.exports.Binary = Binary;\nmodule.exports.ObjectID = ObjectID;\nmodule.exports.Long = Long;\nmodule.exports.Timestamp = Timestamp;\nmodule.exports.Double = Double;\nmodule.exports.Int32 = Int32;\nmodule.exports.MinKey = MinKey;\nmodule.exports.MaxKey = MaxKey;\nmodule.exports.BSONRegExp = BSONRegExp;\nmodule.exports.Decimal128 = Decimal128;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// We have an ES6 Map available, return the native instance\nif (typeof global.Map !== 'undefined') {\n  module.exports = global.Map;\n  module.exports.Map = global.Map;\n} else {\n  // We will return a polyfill\n  var Map = function(array) {\n    this._keys = [];\n    this._values = {};\n\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] == null) continue; // skip null and undefined\n      var entry = array[i];\n      var key = entry[0];\n      var value = entry[1];\n      // Add the key to the list of keys in order\n      this._keys.push(key);\n      // Add the key and value to the values dictionary with a point\n      // to the location in the ordered keys list\n      this._values[key] = { v: value, i: this._keys.length - 1 };\n    }\n  };\n\n  Map.prototype.clear = function() {\n    this._keys = [];\n    this._values = {};\n  };\n\n  Map.prototype.delete = function(key) {\n    var value = this._values[key];\n    if (value == null) return false;\n    // Delete entry\n    delete this._values[key];\n    // Remove the key from the ordered keys list\n    this._keys.splice(value.i, 1);\n    return true;\n  };\n\n  Map.prototype.entries = function() {\n    var self = this;\n    var index = 0;\n\n    return {\n      next: function() {\n        var key = self._keys[index++];\n        return {\n          value: key !== undefined ? [key, self._values[key].v] : undefined,\n          done: key !== undefined ? false : true\n        };\n      }\n    };\n  };\n\n  Map.prototype.forEach = function(callback, self) {\n    self = self || this;\n\n    for (var i = 0; i < this._keys.length; i++) {\n      var key = this._keys[i];\n      // Call the forEach callback\n      callback.call(self, this._values[key].v, key, self);\n    }\n  };\n\n  Map.prototype.get = function(key) {\n    return this._values[key] ? this._values[key].v : undefined;\n  };\n\n  Map.prototype.has = function(key) {\n    return this._values[key] != null;\n  };\n\n  Map.prototype.keys = function() {\n    var self = this;\n    var index = 0;\n\n    return {\n      next: function() {\n        var key = self._keys[index++];\n        return {\n          value: key !== undefined ? key : undefined,\n          done: key !== undefined ? false : true\n        };\n      }\n    };\n  };\n\n  Map.prototype.set = function(key, value) {\n    if (this._values[key]) {\n      this._values[key].v = value;\n      return this;\n    }\n\n    // Add the key to the list of keys in order\n    this._keys.push(key);\n    // Add the key and value to the values dictionary with a point\n    // to the location in the ordered keys list\n    this._values[key] = { v: value, i: this._keys.length - 1 };\n    return this;\n  };\n\n  Map.prototype.values = function() {\n    var self = this;\n    var index = 0;\n\n    return {\n      next: function() {\n        var key = self._keys[index++];\n        return {\n          value: key !== undefined ? self._values[key].v : undefined,\n          done: key !== undefined ? false : true\n        };\n      }\n    };\n  };\n\n  // Last ismaster\n  Object.defineProperty(Map.prototype, 'size', {\n    enumerable: true,\n    get: function() {\n      return this._keys.length;\n    }\n  });\n\n  module.exports = Map;\n  module.exports.Map = Map;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL2Jzb24vbGliL2Jzb24vbWFwLmpzP2M2YTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CLGtCQUFrQjtBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsbUJBQW1CLHVCQUF1QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gV2UgaGF2ZSBhbiBFUzYgTWFwIGF2YWlsYWJsZSwgcmV0dXJuIHRoZSBuYXRpdmUgaW5zdGFuY2VcbmlmICh0eXBlb2YgZ2xvYmFsLk1hcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuTWFwO1xuICBtb2R1bGUuZXhwb3J0cy5NYXAgPSBnbG9iYWwuTWFwO1xufSBlbHNlIHtcbiAgLy8gV2Ugd2lsbCByZXR1cm4gYSBwb2x5ZmlsbFxuICB2YXIgTWFwID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICB0aGlzLl9rZXlzID0gW107XG4gICAgdGhpcy5fdmFsdWVzID0ge307XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYXJyYXlbaV0gPT0gbnVsbCkgY29udGludWU7IC8vIHNraXAgbnVsbCBhbmQgdW5kZWZpbmVkXG4gICAgICB2YXIgZW50cnkgPSBhcnJheVtpXTtcbiAgICAgIHZhciBrZXkgPSBlbnRyeVswXTtcbiAgICAgIHZhciB2YWx1ZSA9IGVudHJ5WzFdO1xuICAgICAgLy8gQWRkIHRoZSBrZXkgdG8gdGhlIGxpc3Qgb2Yga2V5cyBpbiBvcmRlclxuICAgICAgdGhpcy5fa2V5cy5wdXNoKGtleSk7XG4gICAgICAvLyBBZGQgdGhlIGtleSBhbmQgdmFsdWUgdG8gdGhlIHZhbHVlcyBkaWN0aW9uYXJ5IHdpdGggYSBwb2ludFxuICAgICAgLy8gdG8gdGhlIGxvY2F0aW9uIGluIHRoZSBvcmRlcmVkIGtleXMgbGlzdFxuICAgICAgdGhpcy5fdmFsdWVzW2tleV0gPSB7IHY6IHZhbHVlLCBpOiB0aGlzLl9rZXlzLmxlbmd0aCAtIDEgfTtcbiAgICB9XG4gIH07XG5cbiAgTWFwLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2tleXMgPSBbXTtcbiAgICB0aGlzLl92YWx1ZXMgPSB7fTtcbiAgfTtcblxuICBNYXAucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuX3ZhbHVlc1trZXldO1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gRGVsZXRlIGVudHJ5XG4gICAgZGVsZXRlIHRoaXMuX3ZhbHVlc1trZXldO1xuICAgIC8vIFJlbW92ZSB0aGUga2V5IGZyb20gdGhlIG9yZGVyZWQga2V5cyBsaXN0XG4gICAgdGhpcy5fa2V5cy5zcGxpY2UodmFsdWUuaSwgMSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgTWFwLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBpbmRleCA9IDA7XG5cbiAgICByZXR1cm4ge1xuICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBrZXkgPSBzZWxmLl9rZXlzW2luZGV4KytdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHZhbHVlOiBrZXkgIT09IHVuZGVmaW5lZCA/IFtrZXksIHNlbGYuX3ZhbHVlc1trZXldLnZdIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGRvbmU6IGtleSAhPT0gdW5kZWZpbmVkID8gZmFsc2UgOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBNYXAucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaywgc2VsZikge1xuICAgIHNlbGYgPSBzZWxmIHx8IHRoaXM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2tleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSB0aGlzLl9rZXlzW2ldO1xuICAgICAgLy8gQ2FsbCB0aGUgZm9yRWFjaCBjYWxsYmFja1xuICAgICAgY2FsbGJhY2suY2FsbChzZWxmLCB0aGlzLl92YWx1ZXNba2V5XS52LCBrZXksIHNlbGYpO1xuICAgIH1cbiAgfTtcblxuICBNYXAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZXNba2V5XSA/IHRoaXMuX3ZhbHVlc1trZXldLnYgOiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgTWFwLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWVzW2tleV0gIT0gbnVsbDtcbiAgfTtcblxuICBNYXAucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGluZGV4ID0gMDtcblxuICAgIHJldHVybiB7XG4gICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGtleSA9IHNlbGYuX2tleXNbaW5kZXgrK107XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdmFsdWU6IGtleSAhPT0gdW5kZWZpbmVkID8ga2V5IDogdW5kZWZpbmVkLFxuICAgICAgICAgIGRvbmU6IGtleSAhPT0gdW5kZWZpbmVkID8gZmFsc2UgOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICBpZiAodGhpcy5fdmFsdWVzW2tleV0pIHtcbiAgICAgIHRoaXMuX3ZhbHVlc1trZXldLnYgPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCB0aGUga2V5IHRvIHRoZSBsaXN0IG9mIGtleXMgaW4gb3JkZXJcbiAgICB0aGlzLl9rZXlzLnB1c2goa2V5KTtcbiAgICAvLyBBZGQgdGhlIGtleSBhbmQgdmFsdWUgdG8gdGhlIHZhbHVlcyBkaWN0aW9uYXJ5IHdpdGggYSBwb2ludFxuICAgIC8vIHRvIHRoZSBsb2NhdGlvbiBpbiB0aGUgb3JkZXJlZCBrZXlzIGxpc3RcbiAgICB0aGlzLl92YWx1ZXNba2V5XSA9IHsgdjogdmFsdWUsIGk6IHRoaXMuX2tleXMubGVuZ3RoIC0gMSB9O1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIE1hcC5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBpbmRleCA9IDA7XG5cbiAgICByZXR1cm4ge1xuICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBrZXkgPSBzZWxmLl9rZXlzW2luZGV4KytdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHZhbHVlOiBrZXkgIT09IHVuZGVmaW5lZCA/IHNlbGYuX3ZhbHVlc1trZXldLnYgOiB1bmRlZmluZWQsXG4gICAgICAgICAgZG9uZToga2V5ICE9PSB1bmRlZmluZWQgPyBmYWxzZSA6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIC8vIExhc3QgaXNtYXN0ZXJcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1hcC5wcm90b3R5cGUsICdzaXplJywge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9rZXlzLmxlbmd0aDtcbiAgICB9XG4gIH0pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gTWFwO1xuICBtb2R1bGUuZXhwb3J0cy5NYXAgPSBNYXA7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

eval("// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// Copyright 2009 Google Inc. All Rights Reserved\n\n/**\n * Defines a Long class for representing a 64-bit two's-complement\n * integer value, which faithfully simulates the behavior of a Java \"Long\". This\n * implementation is derived from LongLib in GWT.\n *\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Longs.\n *\n * The internal representation of a Long is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @class\n * @param {number} low  the low (signed) 32 bits of the Long.\n * @param {number} high the high (signed) 32 bits of the Long.\n * @return {Long}\n */\nfunction Long(low, high) {\n  if (!(this instanceof Long)) return new Long(low, high);\n\n  this._bsontype = 'Long';\n  /**\n   * @type {number}\n   * @ignore\n   */\n  this.low_ = low | 0; // force into 32 signed bits.\n\n  /**\n   * @type {number}\n   * @ignore\n   */\n  this.high_ = high | 0; // force into 32 signed bits.\n}\n\n/**\n * Return the int value.\n *\n * @method\n * @return {number} the value, assuming it is a 32-bit integer.\n */\nLong.prototype.toInt = function() {\n  return this.low_;\n};\n\n/**\n * Return the Number value.\n *\n * @method\n * @return {number} the closest floating-point representation to this value.\n */\nLong.prototype.toNumber = function() {\n  return this.high_ * Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();\n};\n\n/**\n * Return the JSON value.\n *\n * @method\n * @return {string} the JSON representation.\n */\nLong.prototype.toJSON = function() {\n  return this.toString();\n};\n\n/**\n * Return the String value.\n *\n * @method\n * @param {number} [opt_radix] the radix in which the text should be written.\n * @return {string} the textual representation of this value.\n */\nLong.prototype.toString = function(opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (this.isZero()) {\n    return '0';\n  }\n\n  if (this.isNegative()) {\n    if (this.equals(Long.MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = Long.fromNumber(radix);\n      var div = this.div(radixLong);\n      var rem = div.multiply(radixLong).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return '-' + this.negate().toString(radix);\n    }\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Long.fromNumber(Math.pow(radix, 6));\n\n  rem = this;\n  var result = '';\n\n  while (!rem.isZero()) {\n    var remDiv = rem.div(radixToPower);\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n    var digits = intval.toString(radix);\n\n    rem = remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = '0' + digits;\n      }\n      result = '' + digits + result;\n    }\n  }\n};\n\n/**\n * Return the high 32-bits value.\n *\n * @method\n * @return {number} the high 32-bits as a signed value.\n */\nLong.prototype.getHighBits = function() {\n  return this.high_;\n};\n\n/**\n * Return the low 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as a signed value.\n */\nLong.prototype.getLowBits = function() {\n  return this.low_;\n};\n\n/**\n * Return the low unsigned 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as an unsigned value.\n */\nLong.prototype.getLowBitsUnsigned = function() {\n  return this.low_ >= 0 ? this.low_ : Long.TWO_PWR_32_DBL_ + this.low_;\n};\n\n/**\n * Returns the number of bits needed to represent the absolute value of this Long.\n *\n * @method\n * @return {number} Returns the number of bits needed to represent the absolute value of this Long.\n */\nLong.prototype.getNumBitsAbs = function() {\n  if (this.isNegative()) {\n    if (this.equals(Long.MIN_VALUE)) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ !== 0 ? this.high_ : this.low_;\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & (1 << bit)) !== 0) {\n        break;\n      }\n    }\n    return this.high_ !== 0 ? bit + 33 : bit + 1;\n  }\n};\n\n/**\n * Return whether this value is zero.\n *\n * @method\n * @return {boolean} whether this value is zero.\n */\nLong.prototype.isZero = function() {\n  return this.high_ === 0 && this.low_ === 0;\n};\n\n/**\n * Return whether this value is negative.\n *\n * @method\n * @return {boolean} whether this value is negative.\n */\nLong.prototype.isNegative = function() {\n  return this.high_ < 0;\n};\n\n/**\n * Return whether this value is odd.\n *\n * @method\n * @return {boolean} whether this value is odd.\n */\nLong.prototype.isOdd = function() {\n  return (this.low_ & 1) === 1;\n};\n\n/**\n * Return whether this Long equals the other\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long equals the other\n */\nLong.prototype.equals = function(other) {\n  return this.high_ === other.high_ && this.low_ === other.low_;\n};\n\n/**\n * Return whether this Long does not equal the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long does not equal the other.\n */\nLong.prototype.notEquals = function(other) {\n  return this.high_ !== other.high_ || this.low_ !== other.low_;\n};\n\n/**\n * Return whether this Long is less than the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is less than the other.\n */\nLong.prototype.lessThan = function(other) {\n  return this.compare(other) < 0;\n};\n\n/**\n * Return whether this Long is less than or equal to the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is less than or equal to the other.\n */\nLong.prototype.lessThanOrEqual = function(other) {\n  return this.compare(other) <= 0;\n};\n\n/**\n * Return whether this Long is greater than the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is greater than the other.\n */\nLong.prototype.greaterThan = function(other) {\n  return this.compare(other) > 0;\n};\n\n/**\n * Return whether this Long is greater than or equal to the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is greater than or equal to the other.\n */\nLong.prototype.greaterThanOrEqual = function(other) {\n  return this.compare(other) >= 0;\n};\n\n/**\n * Compares this Long with the given one.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} 0 if they are the same, 1 if the this is greater, and -1 if the given one is greater.\n */\nLong.prototype.compare = function(other) {\n  if (this.equals(other)) {\n    return 0;\n  }\n\n  var thisNeg = this.isNegative();\n  var otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) {\n    return -1;\n  }\n  if (!thisNeg && otherNeg) {\n    return 1;\n  }\n\n  // at this point, the signs are the same, so subtraction will not overflow\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * The negation of this value.\n *\n * @method\n * @return {Long} the negation of this value.\n */\nLong.prototype.negate = function() {\n  if (this.equals(Long.MIN_VALUE)) {\n    return Long.MIN_VALUE;\n  } else {\n    return this.not().add(Long.ONE);\n  }\n};\n\n/**\n * Returns the sum of this and the given Long.\n *\n * @method\n * @param {Long} other Long to add to this one.\n * @return {Long} the sum of this and the given Long.\n */\nLong.prototype.add = function(other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xffff;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xffff;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xffff;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xffff;\n\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 + b48;\n  c48 &= 0xffff;\n  return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n/**\n * Returns the difference of this and the given Long.\n *\n * @method\n * @param {Long} other Long to subtract from this.\n * @return {Long} the difference of this and the given Long.\n */\nLong.prototype.subtract = function(other) {\n  return this.add(other.negate());\n};\n\n/**\n * Returns the product of this and the given Long.\n *\n * @method\n * @param {Long} other Long to multiply with this.\n * @return {Long} the product of this and the other.\n */\nLong.prototype.multiply = function(other) {\n  if (this.isZero()) {\n    return Long.ZERO;\n  } else if (other.isZero()) {\n    return Long.ZERO;\n  }\n\n  if (this.equals(Long.MIN_VALUE)) {\n    return other.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n  } else if (other.equals(Long.MIN_VALUE)) {\n    return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate()\n        .multiply(other)\n        .negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  }\n\n  // If both Longs are small, use float multiplication\n  if (this.lessThan(Long.TWO_PWR_24_) && other.lessThan(Long.TWO_PWR_24_)) {\n    return Long.fromNumber(this.toNumber() * other.toNumber());\n  }\n\n  // Divide each Long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xffff;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xffff;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xffff;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xffff;\n\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xffff;\n  return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n/**\n * Returns this Long divided by the given one.\n *\n * @method\n * @param {Long} other Long by which to divide.\n * @return {Long} this Long divided by the given one.\n */\nLong.prototype.div = function(other) {\n  if (other.isZero()) {\n    throw Error('division by zero');\n  } else if (this.isZero()) {\n    return Long.ZERO;\n  }\n\n  if (this.equals(Long.MIN_VALUE)) {\n    if (other.equals(Long.ONE) || other.equals(Long.NEG_ONE)) {\n      return Long.MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n    } else if (other.equals(Long.MIN_VALUE)) {\n      return Long.ONE;\n    } else {\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n      var halfThis = this.shiftRight(1);\n      var approx = halfThis.div(other).shiftLeft(1);\n      if (approx.equals(Long.ZERO)) {\n        return other.isNegative() ? Long.ONE : Long.NEG_ONE;\n      } else {\n        var rem = this.subtract(other.multiply(approx));\n        var result = approx.add(rem.div(other));\n        return result;\n      }\n    }\n  } else if (other.equals(Long.MIN_VALUE)) {\n    return Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate()\n        .div(other)\n        .negate();\n    }\n  } else if (other.isNegative()) {\n    return this.div(other.negate()).negate();\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res = Long.ZERO;\n  rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes = Long.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = Long.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes = Long.ONE;\n    }\n\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return res;\n};\n\n/**\n * Returns this Long modulo the given one.\n *\n * @method\n * @param {Long} other Long by which to mod.\n * @return {Long} this Long modulo the given one.\n */\nLong.prototype.modulo = function(other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n\n/**\n * The bitwise-NOT of this value.\n *\n * @method\n * @return {Long} the bitwise-NOT of this value.\n */\nLong.prototype.not = function() {\n  return Long.fromBits(~this.low_, ~this.high_);\n};\n\n/**\n * Returns the bitwise-AND of this Long and the given one.\n *\n * @method\n * @param {Long} other the Long with which to AND.\n * @return {Long} the bitwise-AND of this and the other.\n */\nLong.prototype.and = function(other) {\n  return Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);\n};\n\n/**\n * Returns the bitwise-OR of this Long and the given one.\n *\n * @method\n * @param {Long} other the Long with which to OR.\n * @return {Long} the bitwise-OR of this and the other.\n */\nLong.prototype.or = function(other) {\n  return Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);\n};\n\n/**\n * Returns the bitwise-XOR of this Long and the given one.\n *\n * @method\n * @param {Long} other the Long with which to XOR.\n * @return {Long} the bitwise-XOR of this and the other.\n */\nLong.prototype.xor = function(other) {\n  return Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Long} this shifted to the left by the given amount.\n */\nLong.prototype.shiftLeft = function(numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var low = this.low_;\n    if (numBits < 32) {\n      var high = this.high_;\n      return Long.fromBits(low << numBits, (high << numBits) | (low >>> (32 - numBits)));\n    } else {\n      return Long.fromBits(0, low << (numBits - 32));\n    }\n  }\n};\n\n/**\n * Returns this Long with bits shifted to the right by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Long} this shifted to the right by the given amount.\n */\nLong.prototype.shiftRight = function(numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Long.fromBits((low >>> numBits) | (high << (32 - numBits)), high >> numBits);\n    } else {\n      return Long.fromBits(high >> (numBits - 32), high >= 0 ? 0 : -1);\n    }\n  }\n};\n\n/**\n * Returns this Long with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Long} this shifted to the right by the given amount, with zeros placed into the new leading bits.\n */\nLong.prototype.shiftRightUnsigned = function(numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Long.fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits);\n    } else if (numBits === 32) {\n      return Long.fromBits(high, 0);\n    } else {\n      return Long.fromBits(high >>> (numBits - 32), 0);\n    }\n  }\n};\n\n/**\n * Returns a Long representing the given (32-bit) integer value.\n *\n * @method\n * @param {number} value the 32-bit integer in question.\n * @return {Long} the corresponding Long value.\n */\nLong.fromInt = function(value) {\n  if (-128 <= value && value < 128) {\n    var cachedObj = Long.INT_CACHE_[value];\n    if (cachedObj) {\n      return cachedObj;\n    }\n  }\n\n  var obj = new Long(value | 0, value < 0 ? -1 : 0);\n  if (-128 <= value && value < 128) {\n    Long.INT_CACHE_[value] = obj;\n  }\n  return obj;\n};\n\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n *\n * @method\n * @param {number} value the number in question.\n * @return {Long} the corresponding Long value.\n */\nLong.fromNumber = function(value) {\n  if (isNaN(value) || !isFinite(value)) {\n    return Long.ZERO;\n  } else if (value <= -Long.TWO_PWR_63_DBL_) {\n    return Long.MIN_VALUE;\n  } else if (value + 1 >= Long.TWO_PWR_63_DBL_) {\n    return Long.MAX_VALUE;\n  } else if (value < 0) {\n    return Long.fromNumber(-value).negate();\n  } else {\n    return new Long((value % Long.TWO_PWR_32_DBL_) | 0, (value / Long.TWO_PWR_32_DBL_) | 0);\n  }\n};\n\n/**\n * Returns a Long representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.\n *\n * @method\n * @param {number} lowBits the low 32-bits.\n * @param {number} highBits the high 32-bits.\n * @return {Long} the corresponding Long value.\n */\nLong.fromBits = function(lowBits, highBits) {\n  return new Long(lowBits, highBits);\n};\n\n/**\n * Returns a Long representation of the given string, written using the given radix.\n *\n * @method\n * @param {string} str the textual representation of the Long.\n * @param {number} opt_radix the radix in which the text is written.\n * @return {Long} the corresponding Long value.\n */\nLong.fromString = function(str, opt_radix) {\n  if (str.length === 0) {\n    throw Error('number format error: empty string');\n  }\n\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (str.charAt(0) === '-') {\n    return Long.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw Error('number format error: interior \"-\" character: ' + str);\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Long.fromNumber(Math.pow(radix, 8));\n\n  var result = Long.ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = Long.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(Long.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(Long.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {Object}\n * @ignore\n */\nLong.INT_CACHE_ = {};\n\n// NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function below.\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_16_DBL_ = 1 << 16;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_24_DBL_ = 1 << 24;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_32_DBL_ = Long.TWO_PWR_16_DBL_ * Long.TWO_PWR_16_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_31_DBL_ = Long.TWO_PWR_32_DBL_ / 2;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_48_DBL_ = Long.TWO_PWR_32_DBL_ * Long.TWO_PWR_16_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_64_DBL_ = Long.TWO_PWR_32_DBL_ * Long.TWO_PWR_32_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_63_DBL_ = Long.TWO_PWR_64_DBL_ / 2;\n\n/** @type {Long} */\nLong.ZERO = Long.fromInt(0);\n\n/** @type {Long} */\nLong.ONE = Long.fromInt(1);\n\n/** @type {Long} */\nLong.NEG_ONE = Long.fromInt(-1);\n\n/** @type {Long} */\nLong.MAX_VALUE = Long.fromBits(0xffffffff | 0, 0x7fffffff | 0);\n\n/** @type {Long} */\nLong.MIN_VALUE = Long.fromBits(0, 0x80000000 | 0);\n\n/**\n * @type {Long}\n * @ignore\n */\nLong.TWO_PWR_24_ = Long.fromInt(1 << 24);\n\n/**\n * Expose.\n */\nmodule.exports = Long;\nmodule.exports.Long = Long;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

eval("/**\n * A class representation of the BSON Double type.\n *\n * @class\n * @param {number} value the number we want to represent as a double.\n * @return {Double}\n */\nfunction Double(value) {\n  if (!(this instanceof Double)) return new Double(value);\n\n  this._bsontype = 'Double';\n  this.value = value;\n}\n\n/**\n * Access the number value.\n *\n * @method\n * @return {number} returns the wrapped double number.\n */\nDouble.prototype.valueOf = function() {\n  return this.value;\n};\n\n/**\n * @ignore\n */\nDouble.prototype.toJSON = function() {\n  return this.value;\n};\n\nmodule.exports = Double;\nmodule.exports.Double = Double;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL2Jzb24vbGliL2Jzb24vZG91YmxlLmpzP2NhZGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJmaWxlIjoiOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBjbGFzcyByZXByZXNlbnRhdGlvbiBvZiB0aGUgQlNPTiBEb3VibGUgdHlwZS5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSB0aGUgbnVtYmVyIHdlIHdhbnQgdG8gcmVwcmVzZW50IGFzIGEgZG91YmxlLlxuICogQHJldHVybiB7RG91YmxlfVxuICovXG5mdW5jdGlvbiBEb3VibGUodmFsdWUpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIERvdWJsZSkpIHJldHVybiBuZXcgRG91YmxlKHZhbHVlKTtcblxuICB0aGlzLl9ic29udHlwZSA9ICdEb3VibGUnO1xuICB0aGlzLnZhbHVlID0gdmFsdWU7XG59XG5cbi8qKlxuICogQWNjZXNzIHRoZSBudW1iZXIgdmFsdWUuXG4gKlxuICogQG1ldGhvZFxuICogQHJldHVybiB7bnVtYmVyfSByZXR1cm5zIHRoZSB3cmFwcGVkIGRvdWJsZSBudW1iZXIuXG4gKi9cbkRvdWJsZS5wcm90b3R5cGUudmFsdWVPZiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy52YWx1ZTtcbn07XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5Eb3VibGUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy52YWx1ZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRG91YmxlO1xubW9kdWxlLmV4cG9ydHMuRG91YmxlID0gRG91YmxlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports) {

eval("// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// Copyright 2009 Google Inc. All Rights Reserved\n\n/**\n * This type is for INTERNAL use in MongoDB only and should not be used in applications.\n * The appropriate corresponding type is the JavaScript Date type.\n * \n * Defines a Timestamp class for representing a 64-bit two's-complement\n * integer value, which faithfully simulates the behavior of a Java \"Timestamp\". This\n * implementation is derived from TimestampLib in GWT.\n *\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Timestamps.\n *\n * The internal representation of a Timestamp is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @class\n * @param {number} low  the low (signed) 32 bits of the Timestamp.\n * @param {number} high the high (signed) 32 bits of the Timestamp.\n */\nfunction Timestamp(low, high) {\n  if (!(this instanceof Timestamp)) return new Timestamp(low, high);\n  this._bsontype = 'Timestamp';\n  /**\n   * @type {number}\n   * @ignore\n   */\n  this.low_ = low | 0; // force into 32 signed bits.\n\n  /**\n   * @type {number}\n   * @ignore\n   */\n  this.high_ = high | 0; // force into 32 signed bits.\n}\n\n/**\n * Return the int value.\n *\n * @return {number} the value, assuming it is a 32-bit integer.\n */\nTimestamp.prototype.toInt = function() {\n  return this.low_;\n};\n\n/**\n * Return the Number value.\n *\n * @method\n * @return {number} the closest floating-point representation to this value.\n */\nTimestamp.prototype.toNumber = function() {\n  return this.high_ * Timestamp.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();\n};\n\n/**\n * Return the JSON value.\n *\n * @method\n * @return {string} the JSON representation.\n */\nTimestamp.prototype.toJSON = function() {\n  return this.toString();\n};\n\n/**\n * Return the String value.\n *\n * @method\n * @param {number} [opt_radix] the radix in which the text should be written.\n * @return {string} the textual representation of this value.\n */\nTimestamp.prototype.toString = function(opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (this.isZero()) {\n    return '0';\n  }\n\n  if (this.isNegative()) {\n    if (this.equals(Timestamp.MIN_VALUE)) {\n      // We need to change the Timestamp value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixTimestamp = Timestamp.fromNumber(radix);\n      var div = this.div(radixTimestamp);\n      var rem = div.multiply(radixTimestamp).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return '-' + this.negate().toString(radix);\n    }\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Timestamp.fromNumber(Math.pow(radix, 6));\n\n  rem = this;\n  var result = '';\n\n  while (!rem.isZero()) {\n    var remDiv = rem.div(radixToPower);\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n    var digits = intval.toString(radix);\n\n    rem = remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = '0' + digits;\n      }\n      result = '' + digits + result;\n    }\n  }\n};\n\n/**\n * Return the high 32-bits value.\n *\n * @method\n * @return {number} the high 32-bits as a signed value.\n */\nTimestamp.prototype.getHighBits = function() {\n  return this.high_;\n};\n\n/**\n * Return the low 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as a signed value.\n */\nTimestamp.prototype.getLowBits = function() {\n  return this.low_;\n};\n\n/**\n * Return the low unsigned 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as an unsigned value.\n */\nTimestamp.prototype.getLowBitsUnsigned = function() {\n  return this.low_ >= 0 ? this.low_ : Timestamp.TWO_PWR_32_DBL_ + this.low_;\n};\n\n/**\n * Returns the number of bits needed to represent the absolute value of this Timestamp.\n *\n * @method\n * @return {number} Returns the number of bits needed to represent the absolute value of this Timestamp.\n */\nTimestamp.prototype.getNumBitsAbs = function() {\n  if (this.isNegative()) {\n    if (this.equals(Timestamp.MIN_VALUE)) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ !== 0 ? this.high_ : this.low_;\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & (1 << bit)) !== 0) {\n        break;\n      }\n    }\n    return this.high_ !== 0 ? bit + 33 : bit + 1;\n  }\n};\n\n/**\n * Return whether this value is zero.\n *\n * @method\n * @return {boolean} whether this value is zero.\n */\nTimestamp.prototype.isZero = function() {\n  return this.high_ === 0 && this.low_ === 0;\n};\n\n/**\n * Return whether this value is negative.\n *\n * @method\n * @return {boolean} whether this value is negative.\n */\nTimestamp.prototype.isNegative = function() {\n  return this.high_ < 0;\n};\n\n/**\n * Return whether this value is odd.\n *\n * @method\n * @return {boolean} whether this value is odd.\n */\nTimestamp.prototype.isOdd = function() {\n  return (this.low_ & 1) === 1;\n};\n\n/**\n * Return whether this Timestamp equals the other\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp equals the other\n */\nTimestamp.prototype.equals = function(other) {\n  return this.high_ === other.high_ && this.low_ === other.low_;\n};\n\n/**\n * Return whether this Timestamp does not equal the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp does not equal the other.\n */\nTimestamp.prototype.notEquals = function(other) {\n  return this.high_ !== other.high_ || this.low_ !== other.low_;\n};\n\n/**\n * Return whether this Timestamp is less than the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp is less than the other.\n */\nTimestamp.prototype.lessThan = function(other) {\n  return this.compare(other) < 0;\n};\n\n/**\n * Return whether this Timestamp is less than or equal to the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp is less than or equal to the other.\n */\nTimestamp.prototype.lessThanOrEqual = function(other) {\n  return this.compare(other) <= 0;\n};\n\n/**\n * Return whether this Timestamp is greater than the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp is greater than the other.\n */\nTimestamp.prototype.greaterThan = function(other) {\n  return this.compare(other) > 0;\n};\n\n/**\n * Return whether this Timestamp is greater than or equal to the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp is greater than or equal to the other.\n */\nTimestamp.prototype.greaterThanOrEqual = function(other) {\n  return this.compare(other) >= 0;\n};\n\n/**\n * Compares this Timestamp with the given one.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} 0 if they are the same, 1 if the this is greater, and -1 if the given one is greater.\n */\nTimestamp.prototype.compare = function(other) {\n  if (this.equals(other)) {\n    return 0;\n  }\n\n  var thisNeg = this.isNegative();\n  var otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) {\n    return -1;\n  }\n  if (!thisNeg && otherNeg) {\n    return 1;\n  }\n\n  // at this point, the signs are the same, so subtraction will not overflow\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * The negation of this value.\n *\n * @method\n * @return {Timestamp} the negation of this value.\n */\nTimestamp.prototype.negate = function() {\n  if (this.equals(Timestamp.MIN_VALUE)) {\n    return Timestamp.MIN_VALUE;\n  } else {\n    return this.not().add(Timestamp.ONE);\n  }\n};\n\n/**\n * Returns the sum of this and the given Timestamp.\n *\n * @method\n * @param {Timestamp} other Timestamp to add to this one.\n * @return {Timestamp} the sum of this and the given Timestamp.\n */\nTimestamp.prototype.add = function(other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xffff;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xffff;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xffff;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xffff;\n\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 + b48;\n  c48 &= 0xffff;\n  return Timestamp.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n/**\n * Returns the difference of this and the given Timestamp.\n *\n * @method\n * @param {Timestamp} other Timestamp to subtract from this.\n * @return {Timestamp} the difference of this and the given Timestamp.\n */\nTimestamp.prototype.subtract = function(other) {\n  return this.add(other.negate());\n};\n\n/**\n * Returns the product of this and the given Timestamp.\n *\n * @method\n * @param {Timestamp} other Timestamp to multiply with this.\n * @return {Timestamp} the product of this and the other.\n */\nTimestamp.prototype.multiply = function(other) {\n  if (this.isZero()) {\n    return Timestamp.ZERO;\n  } else if (other.isZero()) {\n    return Timestamp.ZERO;\n  }\n\n  if (this.equals(Timestamp.MIN_VALUE)) {\n    return other.isOdd() ? Timestamp.MIN_VALUE : Timestamp.ZERO;\n  } else if (other.equals(Timestamp.MIN_VALUE)) {\n    return this.isOdd() ? Timestamp.MIN_VALUE : Timestamp.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate()\n        .multiply(other)\n        .negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  }\n\n  // If both Timestamps are small, use float multiplication\n  if (this.lessThan(Timestamp.TWO_PWR_24_) && other.lessThan(Timestamp.TWO_PWR_24_)) {\n    return Timestamp.fromNumber(this.toNumber() * other.toNumber());\n  }\n\n  // Divide each Timestamp into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xffff;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xffff;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xffff;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xffff;\n\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xffff;\n  return Timestamp.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n/**\n * Returns this Timestamp divided by the given one.\n *\n * @method\n * @param {Timestamp} other Timestamp by which to divide.\n * @return {Timestamp} this Timestamp divided by the given one.\n */\nTimestamp.prototype.div = function(other) {\n  if (other.isZero()) {\n    throw Error('division by zero');\n  } else if (this.isZero()) {\n    return Timestamp.ZERO;\n  }\n\n  if (this.equals(Timestamp.MIN_VALUE)) {\n    if (other.equals(Timestamp.ONE) || other.equals(Timestamp.NEG_ONE)) {\n      return Timestamp.MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n    } else if (other.equals(Timestamp.MIN_VALUE)) {\n      return Timestamp.ONE;\n    } else {\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n      var halfThis = this.shiftRight(1);\n      var approx = halfThis.div(other).shiftLeft(1);\n      if (approx.equals(Timestamp.ZERO)) {\n        return other.isNegative() ? Timestamp.ONE : Timestamp.NEG_ONE;\n      } else {\n        var rem = this.subtract(other.multiply(approx));\n        var result = approx.add(rem.div(other));\n        return result;\n      }\n    }\n  } else if (other.equals(Timestamp.MIN_VALUE)) {\n    return Timestamp.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate()\n        .div(other)\n        .negate();\n    }\n  } else if (other.isNegative()) {\n    return this.div(other.negate()).negate();\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res = Timestamp.ZERO;\n  rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes = Timestamp.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = Timestamp.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes = Timestamp.ONE;\n    }\n\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return res;\n};\n\n/**\n * Returns this Timestamp modulo the given one.\n *\n * @method\n * @param {Timestamp} other Timestamp by which to mod.\n * @return {Timestamp} this Timestamp modulo the given one.\n */\nTimestamp.prototype.modulo = function(other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n\n/**\n * The bitwise-NOT of this value.\n *\n * @method\n * @return {Timestamp} the bitwise-NOT of this value.\n */\nTimestamp.prototype.not = function() {\n  return Timestamp.fromBits(~this.low_, ~this.high_);\n};\n\n/**\n * Returns the bitwise-AND of this Timestamp and the given one.\n *\n * @method\n * @param {Timestamp} other the Timestamp with which to AND.\n * @return {Timestamp} the bitwise-AND of this and the other.\n */\nTimestamp.prototype.and = function(other) {\n  return Timestamp.fromBits(this.low_ & other.low_, this.high_ & other.high_);\n};\n\n/**\n * Returns the bitwise-OR of this Timestamp and the given one.\n *\n * @method\n * @param {Timestamp} other the Timestamp with which to OR.\n * @return {Timestamp} the bitwise-OR of this and the other.\n */\nTimestamp.prototype.or = function(other) {\n  return Timestamp.fromBits(this.low_ | other.low_, this.high_ | other.high_);\n};\n\n/**\n * Returns the bitwise-XOR of this Timestamp and the given one.\n *\n * @method\n * @param {Timestamp} other the Timestamp with which to XOR.\n * @return {Timestamp} the bitwise-XOR of this and the other.\n */\nTimestamp.prototype.xor = function(other) {\n  return Timestamp.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);\n};\n\n/**\n * Returns this Timestamp with bits shifted to the left by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Timestamp} this shifted to the left by the given amount.\n */\nTimestamp.prototype.shiftLeft = function(numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var low = this.low_;\n    if (numBits < 32) {\n      var high = this.high_;\n      return Timestamp.fromBits(low << numBits, (high << numBits) | (low >>> (32 - numBits)));\n    } else {\n      return Timestamp.fromBits(0, low << (numBits - 32));\n    }\n  }\n};\n\n/**\n * Returns this Timestamp with bits shifted to the right by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Timestamp} this shifted to the right by the given amount.\n */\nTimestamp.prototype.shiftRight = function(numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Timestamp.fromBits((low >>> numBits) | (high << (32 - numBits)), high >> numBits);\n    } else {\n      return Timestamp.fromBits(high >> (numBits - 32), high >= 0 ? 0 : -1);\n    }\n  }\n};\n\n/**\n * Returns this Timestamp with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Timestamp} this shifted to the right by the given amount, with zeros placed into the new leading bits.\n */\nTimestamp.prototype.shiftRightUnsigned = function(numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Timestamp.fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits);\n    } else if (numBits === 32) {\n      return Timestamp.fromBits(high, 0);\n    } else {\n      return Timestamp.fromBits(high >>> (numBits - 32), 0);\n    }\n  }\n};\n\n/**\n * Returns a Timestamp representing the given (32-bit) integer value.\n *\n * @method\n * @param {number} value the 32-bit integer in question.\n * @return {Timestamp} the corresponding Timestamp value.\n */\nTimestamp.fromInt = function(value) {\n  if (-128 <= value && value < 128) {\n    var cachedObj = Timestamp.INT_CACHE_[value];\n    if (cachedObj) {\n      return cachedObj;\n    }\n  }\n\n  var obj = new Timestamp(value | 0, value < 0 ? -1 : 0);\n  if (-128 <= value && value < 128) {\n    Timestamp.INT_CACHE_[value] = obj;\n  }\n  return obj;\n};\n\n/**\n * Returns a Timestamp representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n *\n * @method\n * @param {number} value the number in question.\n * @return {Timestamp} the corresponding Timestamp value.\n */\nTimestamp.fromNumber = function(value) {\n  if (isNaN(value) || !isFinite(value)) {\n    return Timestamp.ZERO;\n  } else if (value <= -Timestamp.TWO_PWR_63_DBL_) {\n    return Timestamp.MIN_VALUE;\n  } else if (value + 1 >= Timestamp.TWO_PWR_63_DBL_) {\n    return Timestamp.MAX_VALUE;\n  } else if (value < 0) {\n    return Timestamp.fromNumber(-value).negate();\n  } else {\n    return new Timestamp(\n      (value % Timestamp.TWO_PWR_32_DBL_) | 0,\n      (value / Timestamp.TWO_PWR_32_DBL_) | 0\n    );\n  }\n};\n\n/**\n * Returns a Timestamp representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.\n *\n * @method\n * @param {number} lowBits the low 32-bits.\n * @param {number} highBits the high 32-bits.\n * @return {Timestamp} the corresponding Timestamp value.\n */\nTimestamp.fromBits = function(lowBits, highBits) {\n  return new Timestamp(lowBits, highBits);\n};\n\n/**\n * Returns a Timestamp representation of the given string, written using the given radix.\n *\n * @method\n * @param {string} str the textual representation of the Timestamp.\n * @param {number} opt_radix the radix in which the text is written.\n * @return {Timestamp} the corresponding Timestamp value.\n */\nTimestamp.fromString = function(str, opt_radix) {\n  if (str.length === 0) {\n    throw Error('number format error: empty string');\n  }\n\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (str.charAt(0) === '-') {\n    return Timestamp.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw Error('number format error: interior \"-\" character: ' + str);\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Timestamp.fromNumber(Math.pow(radix, 8));\n\n  var result = Timestamp.ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = Timestamp.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(Timestamp.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(Timestamp.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n/**\n * A cache of the Timestamp representations of small integer values.\n * @type {Object}\n * @ignore\n */\nTimestamp.INT_CACHE_ = {};\n\n// NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function below.\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_16_DBL_ = 1 << 16;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_24_DBL_ = 1 << 24;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_32_DBL_ = Timestamp.TWO_PWR_16_DBL_ * Timestamp.TWO_PWR_16_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_31_DBL_ = Timestamp.TWO_PWR_32_DBL_ / 2;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_48_DBL_ = Timestamp.TWO_PWR_32_DBL_ * Timestamp.TWO_PWR_16_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_64_DBL_ = Timestamp.TWO_PWR_32_DBL_ * Timestamp.TWO_PWR_32_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_63_DBL_ = Timestamp.TWO_PWR_64_DBL_ / 2;\n\n/** @type {Timestamp} */\nTimestamp.ZERO = Timestamp.fromInt(0);\n\n/** @type {Timestamp} */\nTimestamp.ONE = Timestamp.fromInt(1);\n\n/** @type {Timestamp} */\nTimestamp.NEG_ONE = Timestamp.fromInt(-1);\n\n/** @type {Timestamp} */\nTimestamp.MAX_VALUE = Timestamp.fromBits(0xffffffff | 0, 0x7fffffff | 0);\n\n/** @type {Timestamp} */\nTimestamp.MIN_VALUE = Timestamp.fromBits(0, 0x80000000 | 0);\n\n/**\n * @type {Timestamp}\n * @ignore\n */\nTimestamp.TWO_PWR_24_ = Timestamp.fromInt(1 << 24);\n\n/**\n * Expose.\n */\nmodule.exports = Timestamp;\nmodule.exports.Timestamp = Timestamp;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL2Jzb24vbGliL2Jzb24vdGltZXN0YW1wLmpzPzU5M2EiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxzQkFBc0I7O0FBRXRCO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxzQkFBc0IsU0FBUztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFVBQVU7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixZQUFZLFVBQVU7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsWUFBWSxVQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixZQUFZLFVBQVU7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsWUFBWSxVQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxVQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixZQUFZLFVBQVU7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsWUFBWSxVQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZLFVBQVU7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixZQUFZLFVBQVU7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsZ0JBQWdCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBLFdBQVcsVUFBVTtBQUNyQjs7QUFFQSxXQUFXLFVBQVU7QUFDckI7O0FBRUEsV0FBVyxVQUFVO0FBQ3JCOztBQUVBLFdBQVcsVUFBVTtBQUNyQjs7QUFFQSxXQUFXLFVBQVU7QUFDckI7O0FBRUE7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8vXG4vLyBDb3B5cmlnaHQgMjAwOSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkXG5cbi8qKlxuICogVGhpcyB0eXBlIGlzIGZvciBJTlRFUk5BTCB1c2UgaW4gTW9uZ29EQiBvbmx5IGFuZCBzaG91bGQgbm90IGJlIHVzZWQgaW4gYXBwbGljYXRpb25zLlxuICogVGhlIGFwcHJvcHJpYXRlIGNvcnJlc3BvbmRpbmcgdHlwZSBpcyB0aGUgSmF2YVNjcmlwdCBEYXRlIHR5cGUuXG4gKiBcbiAqIERlZmluZXMgYSBUaW1lc3RhbXAgY2xhc3MgZm9yIHJlcHJlc2VudGluZyBhIDY0LWJpdCB0d28ncy1jb21wbGVtZW50XG4gKiBpbnRlZ2VyIHZhbHVlLCB3aGljaCBmYWl0aGZ1bGx5IHNpbXVsYXRlcyB0aGUgYmVoYXZpb3Igb2YgYSBKYXZhIFwiVGltZXN0YW1wXCIuIFRoaXNcbiAqIGltcGxlbWVudGF0aW9uIGlzIGRlcml2ZWQgZnJvbSBUaW1lc3RhbXBMaWIgaW4gR1dULlxuICpcbiAqIENvbnN0cnVjdHMgYSA2NC1iaXQgdHdvJ3MtY29tcGxlbWVudCBpbnRlZ2VyLCBnaXZlbiBpdHMgbG93IGFuZCBoaWdoIDMyLWJpdFxuICogdmFsdWVzIGFzICpzaWduZWQqIGludGVnZXJzLiAgU2VlIHRoZSBmcm9tKiBmdW5jdGlvbnMgYmVsb3cgZm9yIG1vcmVcbiAqIGNvbnZlbmllbnQgd2F5cyBvZiBjb25zdHJ1Y3RpbmcgVGltZXN0YW1wcy5cbiAqXG4gKiBUaGUgaW50ZXJuYWwgcmVwcmVzZW50YXRpb24gb2YgYSBUaW1lc3RhbXAgaXMgdGhlIHR3byBnaXZlbiBzaWduZWQsIDMyLWJpdCB2YWx1ZXMuXG4gKiBXZSB1c2UgMzItYml0IHBpZWNlcyBiZWNhdXNlIHRoZXNlIGFyZSB0aGUgc2l6ZSBvZiBpbnRlZ2VycyBvbiB3aGljaFxuICogSmF2YXNjcmlwdCBwZXJmb3JtcyBiaXQtb3BlcmF0aW9ucy4gIEZvciBvcGVyYXRpb25zIGxpa2UgYWRkaXRpb24gYW5kXG4gKiBtdWx0aXBsaWNhdGlvbiwgd2Ugc3BsaXQgZWFjaCBudW1iZXIgaW50byAxNi1iaXQgcGllY2VzLCB3aGljaCBjYW4gZWFzaWx5IGJlXG4gKiBtdWx0aXBsaWVkIHdpdGhpbiBKYXZhc2NyaXB0J3MgZmxvYXRpbmctcG9pbnQgcmVwcmVzZW50YXRpb24gd2l0aG91dCBvdmVyZmxvd1xuICogb3IgY2hhbmdlIGluIHNpZ24uXG4gKlxuICogSW4gdGhlIGFsZ29yaXRobXMgYmVsb3csIHdlIGZyZXF1ZW50bHkgcmVkdWNlIHRoZSBuZWdhdGl2ZSBjYXNlIHRvIHRoZVxuICogcG9zaXRpdmUgY2FzZSBieSBuZWdhdGluZyB0aGUgaW5wdXQocykgYW5kIHRoZW4gcG9zdC1wcm9jZXNzaW5nIHRoZSByZXN1bHQuXG4gKiBOb3RlIHRoYXQgd2UgbXVzdCBBTFdBWVMgY2hlY2sgc3BlY2lhbGx5IHdoZXRoZXIgdGhvc2UgdmFsdWVzIGFyZSBNSU5fVkFMVUVcbiAqICgtMl42MykgYmVjYXVzZSAtTUlOX1ZBTFVFID09IE1JTl9WQUxVRSAoc2luY2UgMl42MyBjYW5ub3QgYmUgcmVwcmVzZW50ZWQgYXNcbiAqIGEgcG9zaXRpdmUgbnVtYmVyLCBpdCBvdmVyZmxvd3MgYmFjayBpbnRvIGEgbmVnYXRpdmUpLiAgTm90IGhhbmRsaW5nIHRoaXNcbiAqIGNhc2Ugd291bGQgb2Z0ZW4gcmVzdWx0IGluIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7bnVtYmVyfSBsb3cgIHRoZSBsb3cgKHNpZ25lZCkgMzIgYml0cyBvZiB0aGUgVGltZXN0YW1wLlxuICogQHBhcmFtIHtudW1iZXJ9IGhpZ2ggdGhlIGhpZ2ggKHNpZ25lZCkgMzIgYml0cyBvZiB0aGUgVGltZXN0YW1wLlxuICovXG5mdW5jdGlvbiBUaW1lc3RhbXAobG93LCBoaWdoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBUaW1lc3RhbXApKSByZXR1cm4gbmV3IFRpbWVzdGFtcChsb3csIGhpZ2gpO1xuICB0aGlzLl9ic29udHlwZSA9ICdUaW1lc3RhbXAnO1xuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGhpcy5sb3dfID0gbG93IHwgMDsgLy8gZm9yY2UgaW50byAzMiBzaWduZWQgYml0cy5cblxuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGhpcy5oaWdoXyA9IGhpZ2ggfCAwOyAvLyBmb3JjZSBpbnRvIDMyIHNpZ25lZCBiaXRzLlxufVxuXG4vKipcbiAqIFJldHVybiB0aGUgaW50IHZhbHVlLlxuICpcbiAqIEByZXR1cm4ge251bWJlcn0gdGhlIHZhbHVlLCBhc3N1bWluZyBpdCBpcyBhIDMyLWJpdCBpbnRlZ2VyLlxuICovXG5UaW1lc3RhbXAucHJvdG90eXBlLnRvSW50ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmxvd187XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgTnVtYmVyIHZhbHVlLlxuICpcbiAqIEBtZXRob2RcbiAqIEByZXR1cm4ge251bWJlcn0gdGhlIGNsb3Nlc3QgZmxvYXRpbmctcG9pbnQgcmVwcmVzZW50YXRpb24gdG8gdGhpcyB2YWx1ZS5cbiAqL1xuVGltZXN0YW1wLnByb3RvdHlwZS50b051bWJlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5oaWdoXyAqIFRpbWVzdGFtcC5UV09fUFdSXzMyX0RCTF8gKyB0aGlzLmdldExvd0JpdHNVbnNpZ25lZCgpO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIEpTT04gdmFsdWUuXG4gKlxuICogQG1ldGhvZFxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgSlNPTiByZXByZXNlbnRhdGlvbi5cbiAqL1xuVGltZXN0YW1wLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBTdHJpbmcgdmFsdWUuXG4gKlxuICogQG1ldGhvZFxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRfcmFkaXhdIHRoZSByYWRpeCBpbiB3aGljaCB0aGUgdGV4dCBzaG91bGQgYmUgd3JpdHRlbi5cbiAqIEByZXR1cm4ge3N0cmluZ30gdGhlIHRleHR1YWwgcmVwcmVzZW50YXRpb24gb2YgdGhpcyB2YWx1ZS5cbiAqL1xuVGltZXN0YW1wLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdF9yYWRpeCkge1xuICB2YXIgcmFkaXggPSBvcHRfcmFkaXggfHwgMTA7XG4gIGlmIChyYWRpeCA8IDIgfHwgMzYgPCByYWRpeCkge1xuICAgIHRocm93IEVycm9yKCdyYWRpeCBvdXQgb2YgcmFuZ2U6ICcgKyByYWRpeCk7XG4gIH1cblxuICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgIHJldHVybiAnMCc7XG4gIH1cblxuICBpZiAodGhpcy5pc05lZ2F0aXZlKCkpIHtcbiAgICBpZiAodGhpcy5lcXVhbHMoVGltZXN0YW1wLk1JTl9WQUxVRSkpIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gY2hhbmdlIHRoZSBUaW1lc3RhbXAgdmFsdWUgYmVmb3JlIGl0IGNhbiBiZSBuZWdhdGVkLCBzbyB3ZSByZW1vdmVcbiAgICAgIC8vIHRoZSBib3R0b20tbW9zdCBkaWdpdCBpbiB0aGlzIGJhc2UgYW5kIHRoZW4gcmVjdXJzZSB0byBkbyB0aGUgcmVzdC5cbiAgICAgIHZhciByYWRpeFRpbWVzdGFtcCA9IFRpbWVzdGFtcC5mcm9tTnVtYmVyKHJhZGl4KTtcbiAgICAgIHZhciBkaXYgPSB0aGlzLmRpdihyYWRpeFRpbWVzdGFtcCk7XG4gICAgICB2YXIgcmVtID0gZGl2Lm11bHRpcGx5KHJhZGl4VGltZXN0YW1wKS5zdWJ0cmFjdCh0aGlzKTtcbiAgICAgIHJldHVybiBkaXYudG9TdHJpbmcocmFkaXgpICsgcmVtLnRvSW50KCkudG9TdHJpbmcocmFkaXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJy0nICsgdGhpcy5uZWdhdGUoKS50b1N0cmluZyhyYWRpeCk7XG4gICAgfVxuICB9XG5cbiAgLy8gRG8gc2V2ZXJhbCAoNikgZGlnaXRzIGVhY2ggdGltZSB0aHJvdWdoIHRoZSBsb29wLCBzbyBhcyB0b1xuICAvLyBtaW5pbWl6ZSB0aGUgY2FsbHMgdG8gdGhlIHZlcnkgZXhwZW5zaXZlIGVtdWxhdGVkIGRpdi5cbiAgdmFyIHJhZGl4VG9Qb3dlciA9IFRpbWVzdGFtcC5mcm9tTnVtYmVyKE1hdGgucG93KHJhZGl4LCA2KSk7XG5cbiAgcmVtID0gdGhpcztcbiAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gIHdoaWxlICghcmVtLmlzWmVybygpKSB7XG4gICAgdmFyIHJlbURpdiA9IHJlbS5kaXYocmFkaXhUb1Bvd2VyKTtcbiAgICB2YXIgaW50dmFsID0gcmVtLnN1YnRyYWN0KHJlbURpdi5tdWx0aXBseShyYWRpeFRvUG93ZXIpKS50b0ludCgpO1xuICAgIHZhciBkaWdpdHMgPSBpbnR2YWwudG9TdHJpbmcocmFkaXgpO1xuXG4gICAgcmVtID0gcmVtRGl2O1xuICAgIGlmIChyZW0uaXNaZXJvKCkpIHtcbiAgICAgIHJldHVybiBkaWdpdHMgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdoaWxlIChkaWdpdHMubGVuZ3RoIDwgNikge1xuICAgICAgICBkaWdpdHMgPSAnMCcgKyBkaWdpdHM7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSAnJyArIGRpZ2l0cyArIHJlc3VsdDtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBoaWdoIDMyLWJpdHMgdmFsdWUuXG4gKlxuICogQG1ldGhvZFxuICogQHJldHVybiB7bnVtYmVyfSB0aGUgaGlnaCAzMi1iaXRzIGFzIGEgc2lnbmVkIHZhbHVlLlxuICovXG5UaW1lc3RhbXAucHJvdG90eXBlLmdldEhpZ2hCaXRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmhpZ2hfO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGxvdyAzMi1iaXRzIHZhbHVlLlxuICpcbiAqIEBtZXRob2RcbiAqIEByZXR1cm4ge251bWJlcn0gdGhlIGxvdyAzMi1iaXRzIGFzIGEgc2lnbmVkIHZhbHVlLlxuICovXG5UaW1lc3RhbXAucHJvdG90eXBlLmdldExvd0JpdHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMubG93Xztcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBsb3cgdW5zaWduZWQgMzItYml0cyB2YWx1ZS5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHRoZSBsb3cgMzItYml0cyBhcyBhbiB1bnNpZ25lZCB2YWx1ZS5cbiAqL1xuVGltZXN0YW1wLnByb3RvdHlwZS5nZXRMb3dCaXRzVW5zaWduZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMubG93XyA+PSAwID8gdGhpcy5sb3dfIDogVGltZXN0YW1wLlRXT19QV1JfMzJfREJMXyArIHRoaXMubG93Xztcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGJpdHMgbmVlZGVkIHRvIHJlcHJlc2VudCB0aGUgYWJzb2x1dGUgdmFsdWUgb2YgdGhpcyBUaW1lc3RhbXAuXG4gKlxuICogQG1ldGhvZFxuICogQHJldHVybiB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIgb2YgYml0cyBuZWVkZWQgdG8gcmVwcmVzZW50IHRoZSBhYnNvbHV0ZSB2YWx1ZSBvZiB0aGlzIFRpbWVzdGFtcC5cbiAqL1xuVGltZXN0YW1wLnByb3RvdHlwZS5nZXROdW1CaXRzQWJzID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLmlzTmVnYXRpdmUoKSkge1xuICAgIGlmICh0aGlzLmVxdWFscyhUaW1lc3RhbXAuTUlOX1ZBTFVFKSkge1xuICAgICAgcmV0dXJuIDY0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5uZWdhdGUoKS5nZXROdW1CaXRzQWJzKCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciB2YWwgPSB0aGlzLmhpZ2hfICE9PSAwID8gdGhpcy5oaWdoXyA6IHRoaXMubG93XztcbiAgICBmb3IgKHZhciBiaXQgPSAzMTsgYml0ID4gMDsgYml0LS0pIHtcbiAgICAgIGlmICgodmFsICYgKDEgPDwgYml0KSkgIT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmhpZ2hfICE9PSAwID8gYml0ICsgMzMgOiBiaXQgKyAxO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybiB3aGV0aGVyIHRoaXMgdmFsdWUgaXMgemVyby5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIHRoaXMgdmFsdWUgaXMgemVyby5cbiAqL1xuVGltZXN0YW1wLnByb3RvdHlwZS5pc1plcm8gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuaGlnaF8gPT09IDAgJiYgdGhpcy5sb3dfID09PSAwO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gd2hldGhlciB0aGlzIHZhbHVlIGlzIG5lZ2F0aXZlLlxuICpcbiAqIEBtZXRob2RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IHdoZXRoZXIgdGhpcyB2YWx1ZSBpcyBuZWdhdGl2ZS5cbiAqL1xuVGltZXN0YW1wLnByb3RvdHlwZS5pc05lZ2F0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmhpZ2hfIDwgMDtcbn07XG5cbi8qKlxuICogUmV0dXJuIHdoZXRoZXIgdGhpcyB2YWx1ZSBpcyBvZGQuXG4gKlxuICogQG1ldGhvZFxuICogQHJldHVybiB7Ym9vbGVhbn0gd2hldGhlciB0aGlzIHZhbHVlIGlzIG9kZC5cbiAqL1xuVGltZXN0YW1wLnByb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gKHRoaXMubG93XyAmIDEpID09PSAxO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gd2hldGhlciB0aGlzIFRpbWVzdGFtcCBlcXVhbHMgdGhlIG90aGVyXG4gKlxuICogQG1ldGhvZFxuICogQHBhcmFtIHtUaW1lc3RhbXB9IG90aGVyIFRpbWVzdGFtcCB0byBjb21wYXJlIGFnYWluc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIHRoaXMgVGltZXN0YW1wIGVxdWFscyB0aGUgb3RoZXJcbiAqL1xuVGltZXN0YW1wLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihvdGhlcikge1xuICByZXR1cm4gdGhpcy5oaWdoXyA9PT0gb3RoZXIuaGlnaF8gJiYgdGhpcy5sb3dfID09PSBvdGhlci5sb3dfO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gd2hldGhlciB0aGlzIFRpbWVzdGFtcCBkb2VzIG5vdCBlcXVhbCB0aGUgb3RoZXIuXG4gKlxuICogQG1ldGhvZFxuICogQHBhcmFtIHtUaW1lc3RhbXB9IG90aGVyIFRpbWVzdGFtcCB0byBjb21wYXJlIGFnYWluc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIHRoaXMgVGltZXN0YW1wIGRvZXMgbm90IGVxdWFsIHRoZSBvdGhlci5cbiAqL1xuVGltZXN0YW1wLnByb3RvdHlwZS5ub3RFcXVhbHMgPSBmdW5jdGlvbihvdGhlcikge1xuICByZXR1cm4gdGhpcy5oaWdoXyAhPT0gb3RoZXIuaGlnaF8gfHwgdGhpcy5sb3dfICE9PSBvdGhlci5sb3dfO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gd2hldGhlciB0aGlzIFRpbWVzdGFtcCBpcyBsZXNzIHRoYW4gdGhlIG90aGVyLlxuICpcbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7VGltZXN0YW1wfSBvdGhlciBUaW1lc3RhbXAgdG8gY29tcGFyZSBhZ2FpbnN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gd2hldGhlciB0aGlzIFRpbWVzdGFtcCBpcyBsZXNzIHRoYW4gdGhlIG90aGVyLlxuICovXG5UaW1lc3RhbXAucHJvdG90eXBlLmxlc3NUaGFuID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgcmV0dXJuIHRoaXMuY29tcGFyZShvdGhlcikgPCAwO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gd2hldGhlciB0aGlzIFRpbWVzdGFtcCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIG90aGVyLlxuICpcbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7VGltZXN0YW1wfSBvdGhlciBUaW1lc3RhbXAgdG8gY29tcGFyZSBhZ2FpbnN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gd2hldGhlciB0aGlzIFRpbWVzdGFtcCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIG90aGVyLlxuICovXG5UaW1lc3RhbXAucHJvdG90eXBlLmxlc3NUaGFuT3JFcXVhbCA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gIHJldHVybiB0aGlzLmNvbXBhcmUob3RoZXIpIDw9IDA7XG59O1xuXG4vKipcbiAqIFJldHVybiB3aGV0aGVyIHRoaXMgVGltZXN0YW1wIGlzIGdyZWF0ZXIgdGhhbiB0aGUgb3RoZXIuXG4gKlxuICogQG1ldGhvZFxuICogQHBhcmFtIHtUaW1lc3RhbXB9IG90aGVyIFRpbWVzdGFtcCB0byBjb21wYXJlIGFnYWluc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIHRoaXMgVGltZXN0YW1wIGlzIGdyZWF0ZXIgdGhhbiB0aGUgb3RoZXIuXG4gKi9cblRpbWVzdGFtcC5wcm90b3R5cGUuZ3JlYXRlclRoYW4gPSBmdW5jdGlvbihvdGhlcikge1xuICByZXR1cm4gdGhpcy5jb21wYXJlKG90aGVyKSA+IDA7XG59O1xuXG4vKipcbiAqIFJldHVybiB3aGV0aGVyIHRoaXMgVGltZXN0YW1wIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgb3RoZXIuXG4gKlxuICogQG1ldGhvZFxuICogQHBhcmFtIHtUaW1lc3RhbXB9IG90aGVyIFRpbWVzdGFtcCB0byBjb21wYXJlIGFnYWluc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIHRoaXMgVGltZXN0YW1wIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgb3RoZXIuXG4gKi9cblRpbWVzdGFtcC5wcm90b3R5cGUuZ3JlYXRlclRoYW5PckVxdWFsID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgcmV0dXJuIHRoaXMuY29tcGFyZShvdGhlcikgPj0gMDtcbn07XG5cbi8qKlxuICogQ29tcGFyZXMgdGhpcyBUaW1lc3RhbXAgd2l0aCB0aGUgZ2l2ZW4gb25lLlxuICpcbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7VGltZXN0YW1wfSBvdGhlciBUaW1lc3RhbXAgdG8gY29tcGFyZSBhZ2FpbnN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gMCBpZiB0aGV5IGFyZSB0aGUgc2FtZSwgMSBpZiB0aGUgdGhpcyBpcyBncmVhdGVyLCBhbmQgLTEgaWYgdGhlIGdpdmVuIG9uZSBpcyBncmVhdGVyLlxuICovXG5UaW1lc3RhbXAucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbihvdGhlcikge1xuICBpZiAodGhpcy5lcXVhbHMob3RoZXIpKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICB2YXIgdGhpc05lZyA9IHRoaXMuaXNOZWdhdGl2ZSgpO1xuICB2YXIgb3RoZXJOZWcgPSBvdGhlci5pc05lZ2F0aXZlKCk7XG4gIGlmICh0aGlzTmVnICYmICFvdGhlck5lZykge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZiAoIXRoaXNOZWcgJiYgb3RoZXJOZWcpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIC8vIGF0IHRoaXMgcG9pbnQsIHRoZSBzaWducyBhcmUgdGhlIHNhbWUsIHNvIHN1YnRyYWN0aW9uIHdpbGwgbm90IG92ZXJmbG93XG4gIGlmICh0aGlzLnN1YnRyYWN0KG90aGVyKS5pc05lZ2F0aXZlKCkpIHtcbiAgICByZXR1cm4gLTE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbn07XG5cbi8qKlxuICogVGhlIG5lZ2F0aW9uIG9mIHRoaXMgdmFsdWUuXG4gKlxuICogQG1ldGhvZFxuICogQHJldHVybiB7VGltZXN0YW1wfSB0aGUgbmVnYXRpb24gb2YgdGhpcyB2YWx1ZS5cbiAqL1xuVGltZXN0YW1wLnByb3RvdHlwZS5uZWdhdGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuZXF1YWxzKFRpbWVzdGFtcC5NSU5fVkFMVUUpKSB7XG4gICAgcmV0dXJuIFRpbWVzdGFtcC5NSU5fVkFMVUU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRoaXMubm90KCkuYWRkKFRpbWVzdGFtcC5PTkUpO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHN1bSBvZiB0aGlzIGFuZCB0aGUgZ2l2ZW4gVGltZXN0YW1wLlxuICpcbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7VGltZXN0YW1wfSBvdGhlciBUaW1lc3RhbXAgdG8gYWRkIHRvIHRoaXMgb25lLlxuICogQHJldHVybiB7VGltZXN0YW1wfSB0aGUgc3VtIG9mIHRoaXMgYW5kIHRoZSBnaXZlbiBUaW1lc3RhbXAuXG4gKi9cblRpbWVzdGFtcC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgLy8gRGl2aWRlIGVhY2ggbnVtYmVyIGludG8gNCBjaHVua3Mgb2YgMTYgYml0cywgYW5kIHRoZW4gc3VtIHRoZSBjaHVua3MuXG5cbiAgdmFyIGE0OCA9IHRoaXMuaGlnaF8gPj4+IDE2O1xuICB2YXIgYTMyID0gdGhpcy5oaWdoXyAmIDB4ZmZmZjtcbiAgdmFyIGExNiA9IHRoaXMubG93XyA+Pj4gMTY7XG4gIHZhciBhMDAgPSB0aGlzLmxvd18gJiAweGZmZmY7XG5cbiAgdmFyIGI0OCA9IG90aGVyLmhpZ2hfID4+PiAxNjtcbiAgdmFyIGIzMiA9IG90aGVyLmhpZ2hfICYgMHhmZmZmO1xuICB2YXIgYjE2ID0gb3RoZXIubG93XyA+Pj4gMTY7XG4gIHZhciBiMDAgPSBvdGhlci5sb3dfICYgMHhmZmZmO1xuXG4gIHZhciBjNDggPSAwLFxuICAgIGMzMiA9IDAsXG4gICAgYzE2ID0gMCxcbiAgICBjMDAgPSAwO1xuICBjMDAgKz0gYTAwICsgYjAwO1xuICBjMTYgKz0gYzAwID4+PiAxNjtcbiAgYzAwICY9IDB4ZmZmZjtcbiAgYzE2ICs9IGExNiArIGIxNjtcbiAgYzMyICs9IGMxNiA+Pj4gMTY7XG4gIGMxNiAmPSAweGZmZmY7XG4gIGMzMiArPSBhMzIgKyBiMzI7XG4gIGM0OCArPSBjMzIgPj4+IDE2O1xuICBjMzIgJj0gMHhmZmZmO1xuICBjNDggKz0gYTQ4ICsgYjQ4O1xuICBjNDggJj0gMHhmZmZmO1xuICByZXR1cm4gVGltZXN0YW1wLmZyb21CaXRzKChjMTYgPDwgMTYpIHwgYzAwLCAoYzQ4IDw8IDE2KSB8IGMzMik7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGRpZmZlcmVuY2Ugb2YgdGhpcyBhbmQgdGhlIGdpdmVuIFRpbWVzdGFtcC5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAcGFyYW0ge1RpbWVzdGFtcH0gb3RoZXIgVGltZXN0YW1wIHRvIHN1YnRyYWN0IGZyb20gdGhpcy5cbiAqIEByZXR1cm4ge1RpbWVzdGFtcH0gdGhlIGRpZmZlcmVuY2Ugb2YgdGhpcyBhbmQgdGhlIGdpdmVuIFRpbWVzdGFtcC5cbiAqL1xuVGltZXN0YW1wLnByb3RvdHlwZS5zdWJ0cmFjdCA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gIHJldHVybiB0aGlzLmFkZChvdGhlci5uZWdhdGUoKSk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHByb2R1Y3Qgb2YgdGhpcyBhbmQgdGhlIGdpdmVuIFRpbWVzdGFtcC5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAcGFyYW0ge1RpbWVzdGFtcH0gb3RoZXIgVGltZXN0YW1wIHRvIG11bHRpcGx5IHdpdGggdGhpcy5cbiAqIEByZXR1cm4ge1RpbWVzdGFtcH0gdGhlIHByb2R1Y3Qgb2YgdGhpcyBhbmQgdGhlIG90aGVyLlxuICovXG5UaW1lc3RhbXAucHJvdG90eXBlLm11bHRpcGx5ID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICByZXR1cm4gVGltZXN0YW1wLlpFUk87XG4gIH0gZWxzZSBpZiAob3RoZXIuaXNaZXJvKCkpIHtcbiAgICByZXR1cm4gVGltZXN0YW1wLlpFUk87XG4gIH1cblxuICBpZiAodGhpcy5lcXVhbHMoVGltZXN0YW1wLk1JTl9WQUxVRSkpIHtcbiAgICByZXR1cm4gb3RoZXIuaXNPZGQoKSA/IFRpbWVzdGFtcC5NSU5fVkFMVUUgOiBUaW1lc3RhbXAuWkVSTztcbiAgfSBlbHNlIGlmIChvdGhlci5lcXVhbHMoVGltZXN0YW1wLk1JTl9WQUxVRSkpIHtcbiAgICByZXR1cm4gdGhpcy5pc09kZCgpID8gVGltZXN0YW1wLk1JTl9WQUxVRSA6IFRpbWVzdGFtcC5aRVJPO1xuICB9XG5cbiAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpKSB7XG4gICAgaWYgKG90aGVyLmlzTmVnYXRpdmUoKSkge1xuICAgICAgcmV0dXJuIHRoaXMubmVnYXRlKCkubXVsdGlwbHkob3RoZXIubmVnYXRlKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5uZWdhdGUoKVxuICAgICAgICAubXVsdGlwbHkob3RoZXIpXG4gICAgICAgIC5uZWdhdGUoKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAob3RoZXIuaXNOZWdhdGl2ZSgpKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsdGlwbHkob3RoZXIubmVnYXRlKCkpLm5lZ2F0ZSgpO1xuICB9XG5cbiAgLy8gSWYgYm90aCBUaW1lc3RhbXBzIGFyZSBzbWFsbCwgdXNlIGZsb2F0IG11bHRpcGxpY2F0aW9uXG4gIGlmICh0aGlzLmxlc3NUaGFuKFRpbWVzdGFtcC5UV09fUFdSXzI0XykgJiYgb3RoZXIubGVzc1RoYW4oVGltZXN0YW1wLlRXT19QV1JfMjRfKSkge1xuICAgIHJldHVybiBUaW1lc3RhbXAuZnJvbU51bWJlcih0aGlzLnRvTnVtYmVyKCkgKiBvdGhlci50b051bWJlcigpKTtcbiAgfVxuXG4gIC8vIERpdmlkZSBlYWNoIFRpbWVzdGFtcCBpbnRvIDQgY2h1bmtzIG9mIDE2IGJpdHMsIGFuZCB0aGVuIGFkZCB1cCA0eDQgcHJvZHVjdHMuXG4gIC8vIFdlIGNhbiBza2lwIHByb2R1Y3RzIHRoYXQgd291bGQgb3ZlcmZsb3cuXG5cbiAgdmFyIGE0OCA9IHRoaXMuaGlnaF8gPj4+IDE2O1xuICB2YXIgYTMyID0gdGhpcy5oaWdoXyAmIDB4ZmZmZjtcbiAgdmFyIGExNiA9IHRoaXMubG93XyA+Pj4gMTY7XG4gIHZhciBhMDAgPSB0aGlzLmxvd18gJiAweGZmZmY7XG5cbiAgdmFyIGI0OCA9IG90aGVyLmhpZ2hfID4+PiAxNjtcbiAgdmFyIGIzMiA9IG90aGVyLmhpZ2hfICYgMHhmZmZmO1xuICB2YXIgYjE2ID0gb3RoZXIubG93XyA+Pj4gMTY7XG4gIHZhciBiMDAgPSBvdGhlci5sb3dfICYgMHhmZmZmO1xuXG4gIHZhciBjNDggPSAwLFxuICAgIGMzMiA9IDAsXG4gICAgYzE2ID0gMCxcbiAgICBjMDAgPSAwO1xuICBjMDAgKz0gYTAwICogYjAwO1xuICBjMTYgKz0gYzAwID4+PiAxNjtcbiAgYzAwICY9IDB4ZmZmZjtcbiAgYzE2ICs9IGExNiAqIGIwMDtcbiAgYzMyICs9IGMxNiA+Pj4gMTY7XG4gIGMxNiAmPSAweGZmZmY7XG4gIGMxNiArPSBhMDAgKiBiMTY7XG4gIGMzMiArPSBjMTYgPj4+IDE2O1xuICBjMTYgJj0gMHhmZmZmO1xuICBjMzIgKz0gYTMyICogYjAwO1xuICBjNDggKz0gYzMyID4+PiAxNjtcbiAgYzMyICY9IDB4ZmZmZjtcbiAgYzMyICs9IGExNiAqIGIxNjtcbiAgYzQ4ICs9IGMzMiA+Pj4gMTY7XG4gIGMzMiAmPSAweGZmZmY7XG4gIGMzMiArPSBhMDAgKiBiMzI7XG4gIGM0OCArPSBjMzIgPj4+IDE2O1xuICBjMzIgJj0gMHhmZmZmO1xuICBjNDggKz0gYTQ4ICogYjAwICsgYTMyICogYjE2ICsgYTE2ICogYjMyICsgYTAwICogYjQ4O1xuICBjNDggJj0gMHhmZmZmO1xuICByZXR1cm4gVGltZXN0YW1wLmZyb21CaXRzKChjMTYgPDwgMTYpIHwgYzAwLCAoYzQ4IDw8IDE2KSB8IGMzMik7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhpcyBUaW1lc3RhbXAgZGl2aWRlZCBieSB0aGUgZ2l2ZW4gb25lLlxuICpcbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7VGltZXN0YW1wfSBvdGhlciBUaW1lc3RhbXAgYnkgd2hpY2ggdG8gZGl2aWRlLlxuICogQHJldHVybiB7VGltZXN0YW1wfSB0aGlzIFRpbWVzdGFtcCBkaXZpZGVkIGJ5IHRoZSBnaXZlbiBvbmUuXG4gKi9cblRpbWVzdGFtcC5wcm90b3R5cGUuZGl2ID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgaWYgKG90aGVyLmlzWmVybygpKSB7XG4gICAgdGhyb3cgRXJyb3IoJ2RpdmlzaW9uIGJ5IHplcm8nKTtcbiAgfSBlbHNlIGlmICh0aGlzLmlzWmVybygpKSB7XG4gICAgcmV0dXJuIFRpbWVzdGFtcC5aRVJPO1xuICB9XG5cbiAgaWYgKHRoaXMuZXF1YWxzKFRpbWVzdGFtcC5NSU5fVkFMVUUpKSB7XG4gICAgaWYgKG90aGVyLmVxdWFscyhUaW1lc3RhbXAuT05FKSB8fCBvdGhlci5lcXVhbHMoVGltZXN0YW1wLk5FR19PTkUpKSB7XG4gICAgICByZXR1cm4gVGltZXN0YW1wLk1JTl9WQUxVRTsgLy8gcmVjYWxsIHRoYXQgLU1JTl9WQUxVRSA9PSBNSU5fVkFMVUVcbiAgICB9IGVsc2UgaWYgKG90aGVyLmVxdWFscyhUaW1lc3RhbXAuTUlOX1ZBTFVFKSkge1xuICAgICAgcmV0dXJuIFRpbWVzdGFtcC5PTkU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIGhhdmUgfG90aGVyfCA+PSAyLCBzbyB8dGhpcy9vdGhlcnwgPCB8TUlOX1ZBTFVFfC5cbiAgICAgIHZhciBoYWxmVGhpcyA9IHRoaXMuc2hpZnRSaWdodCgxKTtcbiAgICAgIHZhciBhcHByb3ggPSBoYWxmVGhpcy5kaXYob3RoZXIpLnNoaWZ0TGVmdCgxKTtcbiAgICAgIGlmIChhcHByb3guZXF1YWxzKFRpbWVzdGFtcC5aRVJPKSkge1xuICAgICAgICByZXR1cm4gb3RoZXIuaXNOZWdhdGl2ZSgpID8gVGltZXN0YW1wLk9ORSA6IFRpbWVzdGFtcC5ORUdfT05FO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlbSA9IHRoaXMuc3VidHJhY3Qob3RoZXIubXVsdGlwbHkoYXBwcm94KSk7XG4gICAgICAgIHZhciByZXN1bHQgPSBhcHByb3guYWRkKHJlbS5kaXYob3RoZXIpKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAob3RoZXIuZXF1YWxzKFRpbWVzdGFtcC5NSU5fVkFMVUUpKSB7XG4gICAgcmV0dXJuIFRpbWVzdGFtcC5aRVJPO1xuICB9XG5cbiAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpKSB7XG4gICAgaWYgKG90aGVyLmlzTmVnYXRpdmUoKSkge1xuICAgICAgcmV0dXJuIHRoaXMubmVnYXRlKCkuZGl2KG90aGVyLm5lZ2F0ZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMubmVnYXRlKClcbiAgICAgICAgLmRpdihvdGhlcilcbiAgICAgICAgLm5lZ2F0ZSgpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChvdGhlci5pc05lZ2F0aXZlKCkpIHtcbiAgICByZXR1cm4gdGhpcy5kaXYob3RoZXIubmVnYXRlKCkpLm5lZ2F0ZSgpO1xuICB9XG5cbiAgLy8gUmVwZWF0IHRoZSBmb2xsb3dpbmcgdW50aWwgdGhlIHJlbWFpbmRlciBpcyBsZXNzIHRoYW4gb3RoZXI6ICBmaW5kIGFcbiAgLy8gZmxvYXRpbmctcG9pbnQgdGhhdCBhcHByb3hpbWF0ZXMgcmVtYWluZGVyIC8gb3RoZXIgKmZyb20gYmVsb3cqLCBhZGQgdGhpc1xuICAvLyBpbnRvIHRoZSByZXN1bHQsIGFuZCBzdWJ0cmFjdCBpdCBmcm9tIHRoZSByZW1haW5kZXIuICBJdCBpcyBjcml0aWNhbCB0aGF0XG4gIC8vIHRoZSBhcHByb3hpbWF0ZSB2YWx1ZSBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHJlYWwgdmFsdWUgc28gdGhhdCB0aGVcbiAgLy8gcmVtYWluZGVyIG5ldmVyIGJlY29tZXMgbmVnYXRpdmUuXG4gIHZhciByZXMgPSBUaW1lc3RhbXAuWkVSTztcbiAgcmVtID0gdGhpcztcbiAgd2hpbGUgKHJlbS5ncmVhdGVyVGhhbk9yRXF1YWwob3RoZXIpKSB7XG4gICAgLy8gQXBwcm94aW1hdGUgdGhlIHJlc3VsdCBvZiBkaXZpc2lvbi4gVGhpcyBtYXkgYmUgYSBsaXR0bGUgZ3JlYXRlciBvclxuICAgIC8vIHNtYWxsZXIgdGhhbiB0aGUgYWN0dWFsIHZhbHVlLlxuICAgIGFwcHJveCA9IE1hdGgubWF4KDEsIE1hdGguZmxvb3IocmVtLnRvTnVtYmVyKCkgLyBvdGhlci50b051bWJlcigpKSk7XG5cbiAgICAvLyBXZSB3aWxsIHR3ZWFrIHRoZSBhcHByb3hpbWF0ZSByZXN1bHQgYnkgY2hhbmdpbmcgaXQgaW4gdGhlIDQ4LXRoIGRpZ2l0IG9yXG4gICAgLy8gdGhlIHNtYWxsZXN0IG5vbi1mcmFjdGlvbmFsIGRpZ2l0LCB3aGljaGV2ZXIgaXMgbGFyZ2VyLlxuICAgIHZhciBsb2cyID0gTWF0aC5jZWlsKE1hdGgubG9nKGFwcHJveCkgLyBNYXRoLkxOMik7XG4gICAgdmFyIGRlbHRhID0gbG9nMiA8PSA0OCA/IDEgOiBNYXRoLnBvdygyLCBsb2cyIC0gNDgpO1xuXG4gICAgLy8gRGVjcmVhc2UgdGhlIGFwcHJveGltYXRpb24gdW50aWwgaXQgaXMgc21hbGxlciB0aGFuIHRoZSByZW1haW5kZXIuICBOb3RlXG4gICAgLy8gdGhhdCBpZiBpdCBpcyB0b28gbGFyZ2UsIHRoZSBwcm9kdWN0IG92ZXJmbG93cyBhbmQgaXMgbmVnYXRpdmUuXG4gICAgdmFyIGFwcHJveFJlcyA9IFRpbWVzdGFtcC5mcm9tTnVtYmVyKGFwcHJveCk7XG4gICAgdmFyIGFwcHJveFJlbSA9IGFwcHJveFJlcy5tdWx0aXBseShvdGhlcik7XG4gICAgd2hpbGUgKGFwcHJveFJlbS5pc05lZ2F0aXZlKCkgfHwgYXBwcm94UmVtLmdyZWF0ZXJUaGFuKHJlbSkpIHtcbiAgICAgIGFwcHJveCAtPSBkZWx0YTtcbiAgICAgIGFwcHJveFJlcyA9IFRpbWVzdGFtcC5mcm9tTnVtYmVyKGFwcHJveCk7XG4gICAgICBhcHByb3hSZW0gPSBhcHByb3hSZXMubXVsdGlwbHkob3RoZXIpO1xuICAgIH1cblxuICAgIC8vIFdlIGtub3cgdGhlIGFuc3dlciBjYW4ndCBiZSB6ZXJvLi4uIGFuZCBhY3R1YWxseSwgemVybyB3b3VsZCBjYXVzZVxuICAgIC8vIGluZmluaXRlIHJlY3Vyc2lvbiBzaW5jZSB3ZSB3b3VsZCBtYWtlIG5vIHByb2dyZXNzLlxuICAgIGlmIChhcHByb3hSZXMuaXNaZXJvKCkpIHtcbiAgICAgIGFwcHJveFJlcyA9IFRpbWVzdGFtcC5PTkU7XG4gICAgfVxuXG4gICAgcmVzID0gcmVzLmFkZChhcHByb3hSZXMpO1xuICAgIHJlbSA9IHJlbS5zdWJ0cmFjdChhcHByb3hSZW0pO1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhpcyBUaW1lc3RhbXAgbW9kdWxvIHRoZSBnaXZlbiBvbmUuXG4gKlxuICogQG1ldGhvZFxuICogQHBhcmFtIHtUaW1lc3RhbXB9IG90aGVyIFRpbWVzdGFtcCBieSB3aGljaCB0byBtb2QuXG4gKiBAcmV0dXJuIHtUaW1lc3RhbXB9IHRoaXMgVGltZXN0YW1wIG1vZHVsbyB0aGUgZ2l2ZW4gb25lLlxuICovXG5UaW1lc3RhbXAucHJvdG90eXBlLm1vZHVsbyA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gIHJldHVybiB0aGlzLnN1YnRyYWN0KHRoaXMuZGl2KG90aGVyKS5tdWx0aXBseShvdGhlcikpO1xufTtcblxuLyoqXG4gKiBUaGUgYml0d2lzZS1OT1Qgb2YgdGhpcyB2YWx1ZS5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAcmV0dXJuIHtUaW1lc3RhbXB9IHRoZSBiaXR3aXNlLU5PVCBvZiB0aGlzIHZhbHVlLlxuICovXG5UaW1lc3RhbXAucHJvdG90eXBlLm5vdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gVGltZXN0YW1wLmZyb21CaXRzKH50aGlzLmxvd18sIH50aGlzLmhpZ2hfKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYml0d2lzZS1BTkQgb2YgdGhpcyBUaW1lc3RhbXAgYW5kIHRoZSBnaXZlbiBvbmUuXG4gKlxuICogQG1ldGhvZFxuICogQHBhcmFtIHtUaW1lc3RhbXB9IG90aGVyIHRoZSBUaW1lc3RhbXAgd2l0aCB3aGljaCB0byBBTkQuXG4gKiBAcmV0dXJuIHtUaW1lc3RhbXB9IHRoZSBiaXR3aXNlLUFORCBvZiB0aGlzIGFuZCB0aGUgb3RoZXIuXG4gKi9cblRpbWVzdGFtcC5wcm90b3R5cGUuYW5kID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgcmV0dXJuIFRpbWVzdGFtcC5mcm9tQml0cyh0aGlzLmxvd18gJiBvdGhlci5sb3dfLCB0aGlzLmhpZ2hfICYgb3RoZXIuaGlnaF8pO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBiaXR3aXNlLU9SIG9mIHRoaXMgVGltZXN0YW1wIGFuZCB0aGUgZ2l2ZW4gb25lLlxuICpcbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7VGltZXN0YW1wfSBvdGhlciB0aGUgVGltZXN0YW1wIHdpdGggd2hpY2ggdG8gT1IuXG4gKiBAcmV0dXJuIHtUaW1lc3RhbXB9IHRoZSBiaXR3aXNlLU9SIG9mIHRoaXMgYW5kIHRoZSBvdGhlci5cbiAqL1xuVGltZXN0YW1wLnByb3RvdHlwZS5vciA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gIHJldHVybiBUaW1lc3RhbXAuZnJvbUJpdHModGhpcy5sb3dfIHwgb3RoZXIubG93XywgdGhpcy5oaWdoXyB8IG90aGVyLmhpZ2hfKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYml0d2lzZS1YT1Igb2YgdGhpcyBUaW1lc3RhbXAgYW5kIHRoZSBnaXZlbiBvbmUuXG4gKlxuICogQG1ldGhvZFxuICogQHBhcmFtIHtUaW1lc3RhbXB9IG90aGVyIHRoZSBUaW1lc3RhbXAgd2l0aCB3aGljaCB0byBYT1IuXG4gKiBAcmV0dXJuIHtUaW1lc3RhbXB9IHRoZSBiaXR3aXNlLVhPUiBvZiB0aGlzIGFuZCB0aGUgb3RoZXIuXG4gKi9cblRpbWVzdGFtcC5wcm90b3R5cGUueG9yID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgcmV0dXJuIFRpbWVzdGFtcC5mcm9tQml0cyh0aGlzLmxvd18gXiBvdGhlci5sb3dfLCB0aGlzLmhpZ2hfIF4gb3RoZXIuaGlnaF8pO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoaXMgVGltZXN0YW1wIHdpdGggYml0cyBzaGlmdGVkIHRvIHRoZSBsZWZ0IGJ5IHRoZSBnaXZlbiBhbW91bnQuXG4gKlxuICogQG1ldGhvZFxuICogQHBhcmFtIHtudW1iZXJ9IG51bUJpdHMgdGhlIG51bWJlciBvZiBiaXRzIGJ5IHdoaWNoIHRvIHNoaWZ0LlxuICogQHJldHVybiB7VGltZXN0YW1wfSB0aGlzIHNoaWZ0ZWQgdG8gdGhlIGxlZnQgYnkgdGhlIGdpdmVuIGFtb3VudC5cbiAqL1xuVGltZXN0YW1wLnByb3RvdHlwZS5zaGlmdExlZnQgPSBmdW5jdGlvbihudW1CaXRzKSB7XG4gIG51bUJpdHMgJj0gNjM7XG4gIGlmIChudW1CaXRzID09PSAwKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxvdyA9IHRoaXMubG93XztcbiAgICBpZiAobnVtQml0cyA8IDMyKSB7XG4gICAgICB2YXIgaGlnaCA9IHRoaXMuaGlnaF87XG4gICAgICByZXR1cm4gVGltZXN0YW1wLmZyb21CaXRzKGxvdyA8PCBudW1CaXRzLCAoaGlnaCA8PCBudW1CaXRzKSB8IChsb3cgPj4+ICgzMiAtIG51bUJpdHMpKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBUaW1lc3RhbXAuZnJvbUJpdHMoMCwgbG93IDw8IChudW1CaXRzIC0gMzIpKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGlzIFRpbWVzdGFtcCB3aXRoIGJpdHMgc2hpZnRlZCB0byB0aGUgcmlnaHQgYnkgdGhlIGdpdmVuIGFtb3VudC5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtQml0cyB0aGUgbnVtYmVyIG9mIGJpdHMgYnkgd2hpY2ggdG8gc2hpZnQuXG4gKiBAcmV0dXJuIHtUaW1lc3RhbXB9IHRoaXMgc2hpZnRlZCB0byB0aGUgcmlnaHQgYnkgdGhlIGdpdmVuIGFtb3VudC5cbiAqL1xuVGltZXN0YW1wLnByb3RvdHlwZS5zaGlmdFJpZ2h0ID0gZnVuY3Rpb24obnVtQml0cykge1xuICBudW1CaXRzICY9IDYzO1xuICBpZiAobnVtQml0cyA9PT0gMCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9IGVsc2Uge1xuICAgIHZhciBoaWdoID0gdGhpcy5oaWdoXztcbiAgICBpZiAobnVtQml0cyA8IDMyKSB7XG4gICAgICB2YXIgbG93ID0gdGhpcy5sb3dfO1xuICAgICAgcmV0dXJuIFRpbWVzdGFtcC5mcm9tQml0cygobG93ID4+PiBudW1CaXRzKSB8IChoaWdoIDw8ICgzMiAtIG51bUJpdHMpKSwgaGlnaCA+PiBudW1CaXRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFRpbWVzdGFtcC5mcm9tQml0cyhoaWdoID4+IChudW1CaXRzIC0gMzIpLCBoaWdoID49IDAgPyAwIDogLTEpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoaXMgVGltZXN0YW1wIHdpdGggYml0cyBzaGlmdGVkIHRvIHRoZSByaWdodCBieSB0aGUgZ2l2ZW4gYW1vdW50LCB3aXRoIHRoZSBuZXcgdG9wIGJpdHMgbWF0Y2hpbmcgdGhlIGN1cnJlbnQgc2lnbiBiaXQuXG4gKlxuICogQG1ldGhvZFxuICogQHBhcmFtIHtudW1iZXJ9IG51bUJpdHMgdGhlIG51bWJlciBvZiBiaXRzIGJ5IHdoaWNoIHRvIHNoaWZ0LlxuICogQHJldHVybiB7VGltZXN0YW1wfSB0aGlzIHNoaWZ0ZWQgdG8gdGhlIHJpZ2h0IGJ5IHRoZSBnaXZlbiBhbW91bnQsIHdpdGggemVyb3MgcGxhY2VkIGludG8gdGhlIG5ldyBsZWFkaW5nIGJpdHMuXG4gKi9cblRpbWVzdGFtcC5wcm90b3R5cGUuc2hpZnRSaWdodFVuc2lnbmVkID0gZnVuY3Rpb24obnVtQml0cykge1xuICBudW1CaXRzICY9IDYzO1xuICBpZiAobnVtQml0cyA9PT0gMCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9IGVsc2Uge1xuICAgIHZhciBoaWdoID0gdGhpcy5oaWdoXztcbiAgICBpZiAobnVtQml0cyA8IDMyKSB7XG4gICAgICB2YXIgbG93ID0gdGhpcy5sb3dfO1xuICAgICAgcmV0dXJuIFRpbWVzdGFtcC5mcm9tQml0cygobG93ID4+PiBudW1CaXRzKSB8IChoaWdoIDw8ICgzMiAtIG51bUJpdHMpKSwgaGlnaCA+Pj4gbnVtQml0cyk7XG4gICAgfSBlbHNlIGlmIChudW1CaXRzID09PSAzMikge1xuICAgICAgcmV0dXJuIFRpbWVzdGFtcC5mcm9tQml0cyhoaWdoLCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFRpbWVzdGFtcC5mcm9tQml0cyhoaWdoID4+PiAobnVtQml0cyAtIDMyKSwgMCk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYSBUaW1lc3RhbXAgcmVwcmVzZW50aW5nIHRoZSBnaXZlbiAoMzItYml0KSBpbnRlZ2VyIHZhbHVlLlxuICpcbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSB0aGUgMzItYml0IGludGVnZXIgaW4gcXVlc3Rpb24uXG4gKiBAcmV0dXJuIHtUaW1lc3RhbXB9IHRoZSBjb3JyZXNwb25kaW5nIFRpbWVzdGFtcCB2YWx1ZS5cbiAqL1xuVGltZXN0YW1wLmZyb21JbnQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoLTEyOCA8PSB2YWx1ZSAmJiB2YWx1ZSA8IDEyOCkge1xuICAgIHZhciBjYWNoZWRPYmogPSBUaW1lc3RhbXAuSU5UX0NBQ0hFX1t2YWx1ZV07XG4gICAgaWYgKGNhY2hlZE9iaikge1xuICAgICAgcmV0dXJuIGNhY2hlZE9iajtcbiAgICB9XG4gIH1cblxuICB2YXIgb2JqID0gbmV3IFRpbWVzdGFtcCh2YWx1ZSB8IDAsIHZhbHVlIDwgMCA/IC0xIDogMCk7XG4gIGlmICgtMTI4IDw9IHZhbHVlICYmIHZhbHVlIDwgMTI4KSB7XG4gICAgVGltZXN0YW1wLklOVF9DQUNIRV9bdmFsdWVdID0gb2JqO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xuXG4vKipcbiAqIFJldHVybnMgYSBUaW1lc3RhbXAgcmVwcmVzZW50aW5nIHRoZSBnaXZlbiB2YWx1ZSwgcHJvdmlkZWQgdGhhdCBpdCBpcyBhIGZpbml0ZSBudW1iZXIuIE90aGVyd2lzZSwgemVybyBpcyByZXR1cm5lZC5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgdGhlIG51bWJlciBpbiBxdWVzdGlvbi5cbiAqIEByZXR1cm4ge1RpbWVzdGFtcH0gdGhlIGNvcnJlc3BvbmRpbmcgVGltZXN0YW1wIHZhbHVlLlxuICovXG5UaW1lc3RhbXAuZnJvbU51bWJlciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIGlmIChpc05hTih2YWx1ZSkgfHwgIWlzRmluaXRlKHZhbHVlKSkge1xuICAgIHJldHVybiBUaW1lc3RhbXAuWkVSTztcbiAgfSBlbHNlIGlmICh2YWx1ZSA8PSAtVGltZXN0YW1wLlRXT19QV1JfNjNfREJMXykge1xuICAgIHJldHVybiBUaW1lc3RhbXAuTUlOX1ZBTFVFO1xuICB9IGVsc2UgaWYgKHZhbHVlICsgMSA+PSBUaW1lc3RhbXAuVFdPX1BXUl82M19EQkxfKSB7XG4gICAgcmV0dXJuIFRpbWVzdGFtcC5NQVhfVkFMVUU7XG4gIH0gZWxzZSBpZiAodmFsdWUgPCAwKSB7XG4gICAgcmV0dXJuIFRpbWVzdGFtcC5mcm9tTnVtYmVyKC12YWx1ZSkubmVnYXRlKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBUaW1lc3RhbXAoXG4gICAgICAodmFsdWUgJSBUaW1lc3RhbXAuVFdPX1BXUl8zMl9EQkxfKSB8IDAsXG4gICAgICAodmFsdWUgLyBUaW1lc3RhbXAuVFdPX1BXUl8zMl9EQkxfKSB8IDBcbiAgICApO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYSBUaW1lc3RhbXAgcmVwcmVzZW50aW5nIHRoZSA2NC1iaXQgaW50ZWdlciB0aGF0IGNvbWVzIGJ5IGNvbmNhdGVuYXRpbmcgdGhlIGdpdmVuIGhpZ2ggYW5kIGxvdyBiaXRzLiBFYWNoIGlzIGFzc3VtZWQgdG8gdXNlIDMyIGJpdHMuXG4gKlxuICogQG1ldGhvZFxuICogQHBhcmFtIHtudW1iZXJ9IGxvd0JpdHMgdGhlIGxvdyAzMi1iaXRzLlxuICogQHBhcmFtIHtudW1iZXJ9IGhpZ2hCaXRzIHRoZSBoaWdoIDMyLWJpdHMuXG4gKiBAcmV0dXJuIHtUaW1lc3RhbXB9IHRoZSBjb3JyZXNwb25kaW5nIFRpbWVzdGFtcCB2YWx1ZS5cbiAqL1xuVGltZXN0YW1wLmZyb21CaXRzID0gZnVuY3Rpb24obG93Qml0cywgaGlnaEJpdHMpIHtcbiAgcmV0dXJuIG5ldyBUaW1lc3RhbXAobG93Qml0cywgaGlnaEJpdHMpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgVGltZXN0YW1wIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBzdHJpbmcsIHdyaXR0ZW4gdXNpbmcgdGhlIGdpdmVuIHJhZGl4LlxuICpcbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgdGhlIHRleHR1YWwgcmVwcmVzZW50YXRpb24gb2YgdGhlIFRpbWVzdGFtcC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBvcHRfcmFkaXggdGhlIHJhZGl4IGluIHdoaWNoIHRoZSB0ZXh0IGlzIHdyaXR0ZW4uXG4gKiBAcmV0dXJuIHtUaW1lc3RhbXB9IHRoZSBjb3JyZXNwb25kaW5nIFRpbWVzdGFtcCB2YWx1ZS5cbiAqL1xuVGltZXN0YW1wLmZyb21TdHJpbmcgPSBmdW5jdGlvbihzdHIsIG9wdF9yYWRpeCkge1xuICBpZiAoc3RyLmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IEVycm9yKCdudW1iZXIgZm9ybWF0IGVycm9yOiBlbXB0eSBzdHJpbmcnKTtcbiAgfVxuXG4gIHZhciByYWRpeCA9IG9wdF9yYWRpeCB8fCAxMDtcbiAgaWYgKHJhZGl4IDwgMiB8fCAzNiA8IHJhZGl4KSB7XG4gICAgdGhyb3cgRXJyb3IoJ3JhZGl4IG91dCBvZiByYW5nZTogJyArIHJhZGl4KTtcbiAgfVxuXG4gIGlmIChzdHIuY2hhckF0KDApID09PSAnLScpIHtcbiAgICByZXR1cm4gVGltZXN0YW1wLmZyb21TdHJpbmcoc3RyLnN1YnN0cmluZygxKSwgcmFkaXgpLm5lZ2F0ZSgpO1xuICB9IGVsc2UgaWYgKHN0ci5pbmRleE9mKCctJykgPj0gMCkge1xuICAgIHRocm93IEVycm9yKCdudW1iZXIgZm9ybWF0IGVycm9yOiBpbnRlcmlvciBcIi1cIiBjaGFyYWN0ZXI6ICcgKyBzdHIpO1xuICB9XG5cbiAgLy8gRG8gc2V2ZXJhbCAoOCkgZGlnaXRzIGVhY2ggdGltZSB0aHJvdWdoIHRoZSBsb29wLCBzbyBhcyB0b1xuICAvLyBtaW5pbWl6ZSB0aGUgY2FsbHMgdG8gdGhlIHZlcnkgZXhwZW5zaXZlIGVtdWxhdGVkIGRpdi5cbiAgdmFyIHJhZGl4VG9Qb3dlciA9IFRpbWVzdGFtcC5mcm9tTnVtYmVyKE1hdGgucG93KHJhZGl4LCA4KSk7XG5cbiAgdmFyIHJlc3VsdCA9IFRpbWVzdGFtcC5aRVJPO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkgKz0gOCkge1xuICAgIHZhciBzaXplID0gTWF0aC5taW4oOCwgc3RyLmxlbmd0aCAtIGkpO1xuICAgIHZhciB2YWx1ZSA9IHBhcnNlSW50KHN0ci5zdWJzdHJpbmcoaSwgaSArIHNpemUpLCByYWRpeCk7XG4gICAgaWYgKHNpemUgPCA4KSB7XG4gICAgICB2YXIgcG93ZXIgPSBUaW1lc3RhbXAuZnJvbU51bWJlcihNYXRoLnBvdyhyYWRpeCwgc2l6ZSkpO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0Lm11bHRpcGx5KHBvd2VyKS5hZGQoVGltZXN0YW1wLmZyb21OdW1iZXIodmFsdWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gcmVzdWx0Lm11bHRpcGx5KHJhZGl4VG9Qb3dlcik7XG4gICAgICByZXN1bHQgPSByZXN1bHQuYWRkKFRpbWVzdGFtcC5mcm9tTnVtYmVyKHZhbHVlKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyBOT1RFOiBDb21tb24gY29uc3RhbnQgdmFsdWVzIFpFUk8sIE9ORSwgTkVHX09ORSwgZXRjLiBhcmUgZGVmaW5lZCBiZWxvdyB0aGVcbi8vIGZyb20qIG1ldGhvZHMgb24gd2hpY2ggdGhleSBkZXBlbmQuXG5cbi8qKlxuICogQSBjYWNoZSBvZiB0aGUgVGltZXN0YW1wIHJlcHJlc2VudGF0aW9ucyBvZiBzbWFsbCBpbnRlZ2VyIHZhbHVlcy5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAaWdub3JlXG4gKi9cblRpbWVzdGFtcC5JTlRfQ0FDSEVfID0ge307XG5cbi8vIE5PVEU6IHRoZSBjb21waWxlciBzaG91bGQgaW5saW5lIHRoZXNlIGNvbnN0YW50IHZhbHVlcyBiZWxvdyBhbmQgdGhlbiByZW1vdmVcbi8vIHRoZXNlIHZhcmlhYmxlcywgc28gdGhlcmUgc2hvdWxkIGJlIG5vIHJ1bnRpbWUgcGVuYWx0eSBmb3IgdGhlc2UuXG5cbi8qKlxuICogTnVtYmVyIHVzZWQgcmVwZWF0ZWQgYmVsb3cgaW4gY2FsY3VsYXRpb25zLiAgVGhpcyBtdXN0IGFwcGVhciBiZWZvcmUgdGhlXG4gKiBmaXJzdCBjYWxsIHRvIGFueSBmcm9tKiBmdW5jdGlvbiBiZWxvdy5cbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAaWdub3JlXG4gKi9cblRpbWVzdGFtcC5UV09fUFdSXzE2X0RCTF8gPSAxIDw8IDE2O1xuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAaWdub3JlXG4gKi9cblRpbWVzdGFtcC5UV09fUFdSXzI0X0RCTF8gPSAxIDw8IDI0O1xuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAaWdub3JlXG4gKi9cblRpbWVzdGFtcC5UV09fUFdSXzMyX0RCTF8gPSBUaW1lc3RhbXAuVFdPX1BXUl8xNl9EQkxfICogVGltZXN0YW1wLlRXT19QV1JfMTZfREJMXztcblxuLyoqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGlnbm9yZVxuICovXG5UaW1lc3RhbXAuVFdPX1BXUl8zMV9EQkxfID0gVGltZXN0YW1wLlRXT19QV1JfMzJfREJMXyAvIDI7XG5cbi8qKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBpZ25vcmVcbiAqL1xuVGltZXN0YW1wLlRXT19QV1JfNDhfREJMXyA9IFRpbWVzdGFtcC5UV09fUFdSXzMyX0RCTF8gKiBUaW1lc3RhbXAuVFdPX1BXUl8xNl9EQkxfO1xuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAaWdub3JlXG4gKi9cblRpbWVzdGFtcC5UV09fUFdSXzY0X0RCTF8gPSBUaW1lc3RhbXAuVFdPX1BXUl8zMl9EQkxfICogVGltZXN0YW1wLlRXT19QV1JfMzJfREJMXztcblxuLyoqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGlnbm9yZVxuICovXG5UaW1lc3RhbXAuVFdPX1BXUl82M19EQkxfID0gVGltZXN0YW1wLlRXT19QV1JfNjRfREJMXyAvIDI7XG5cbi8qKiBAdHlwZSB7VGltZXN0YW1wfSAqL1xuVGltZXN0YW1wLlpFUk8gPSBUaW1lc3RhbXAuZnJvbUludCgwKTtcblxuLyoqIEB0eXBlIHtUaW1lc3RhbXB9ICovXG5UaW1lc3RhbXAuT05FID0gVGltZXN0YW1wLmZyb21JbnQoMSk7XG5cbi8qKiBAdHlwZSB7VGltZXN0YW1wfSAqL1xuVGltZXN0YW1wLk5FR19PTkUgPSBUaW1lc3RhbXAuZnJvbUludCgtMSk7XG5cbi8qKiBAdHlwZSB7VGltZXN0YW1wfSAqL1xuVGltZXN0YW1wLk1BWF9WQUxVRSA9IFRpbWVzdGFtcC5mcm9tQml0cygweGZmZmZmZmZmIHwgMCwgMHg3ZmZmZmZmZiB8IDApO1xuXG4vKiogQHR5cGUge1RpbWVzdGFtcH0gKi9cblRpbWVzdGFtcC5NSU5fVkFMVUUgPSBUaW1lc3RhbXAuZnJvbUJpdHMoMCwgMHg4MDAwMDAwMCB8IDApO1xuXG4vKipcbiAqIEB0eXBlIHtUaW1lc3RhbXB9XG4gKiBAaWdub3JlXG4gKi9cblRpbWVzdGFtcC5UV09fUFdSXzI0XyA9IFRpbWVzdGFtcC5mcm9tSW50KDEgPDwgMjQpO1xuXG4vKipcbiAqIEV4cG9zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBUaW1lc3RhbXA7XG5tb2R1bGUuZXhwb3J0cy5UaW1lc3RhbXAgPSBUaW1lc3RhbXA7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

eval("// Custom inspect property name / symbol.\nvar inspect = 'inspect';\n\nvar utils = __webpack_require__(11);\n\n/**\n * Machine id.\n *\n * Create a random 3-byte value (i.e. unique for this\n * process). Other drivers use a md5 of the machine id here, but\n * that would mean an asyc call to gethostname, so we don't bother.\n * @ignore\n */\nvar MACHINE_ID = parseInt(Math.random() * 0xffffff, 10);\n\n// Regular expression that checks for hex value\nvar checkForHexRegExp = new RegExp('^[0-9a-fA-F]{24}$');\n\n// Check if buffer exists\ntry {\n  if (Buffer && Buffer.from) {\n    var hasBufferType = true;\n    inspect = __webpack_require__(12).inspect.custom || 'inspect';\n  }\n} catch (err) {\n  hasBufferType = false;\n}\n\n/**\n* Create a new ObjectID instance\n*\n* @class\n* @param {(string|number)} id Can be a 24 byte hex string, 12 byte binary string or a Number.\n* @property {number} generationTime The generation time of this ObjectId instance\n* @return {ObjectID} instance of ObjectID.\n*/\nvar ObjectID = function ObjectID(id) {\n  // Duck-typing to support ObjectId from different npm packages\n  if (id instanceof ObjectID) return id;\n  if (!(this instanceof ObjectID)) return new ObjectID(id);\n\n  this._bsontype = 'ObjectID';\n\n  // The most common usecase (blank id, new objectId instance)\n  if (id == null || typeof id === 'number') {\n    // Generate a new id\n    this.id = this.generate(id);\n    // If we are caching the hex string\n    if (ObjectID.cacheHexString) this.__id = this.toString('hex');\n    // Return the object\n    return;\n  }\n\n  // Check if the passed in id is valid\n  var valid = ObjectID.isValid(id);\n\n  // Throw an error if it's not a valid setup\n  if (!valid && id != null) {\n    throw new Error(\n      'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n    );\n  } else if (valid && typeof id === 'string' && id.length === 24 && hasBufferType) {\n    return new ObjectID(utils.toBuffer(id, 'hex'));\n  } else if (valid && typeof id === 'string' && id.length === 24) {\n    return ObjectID.createFromHexString(id);\n  } else if (id != null && id.length === 12) {\n    // assume 12 byte string\n    this.id = id;\n  } else if (id != null && id.toHexString) {\n    // Duck-typing to support ObjectId from different npm packages\n    return id;\n  } else {\n    throw new Error(\n      'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n    );\n  }\n\n  if (ObjectID.cacheHexString) this.__id = this.toString('hex');\n};\n\n// Allow usage of ObjectId as well as ObjectID\n// var ObjectId = ObjectID;\n\n// Precomputed hex table enables speedy hex string conversion\nvar hexTable = [];\nfor (var i = 0; i < 256; i++) {\n  hexTable[i] = (i <= 15 ? '0' : '') + i.toString(16);\n}\n\n/**\n* Return the ObjectID id as a 24 byte hex string representation\n*\n* @method\n* @return {string} return the 24 byte hex string representation.\n*/\nObjectID.prototype.toHexString = function() {\n  if (ObjectID.cacheHexString && this.__id) return this.__id;\n\n  var hexString = '';\n  if (!this.id || !this.id.length) {\n    throw new Error(\n      'invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is [' +\n        JSON.stringify(this.id) +\n        ']'\n    );\n  }\n\n  if (this.id instanceof _Buffer) {\n    hexString = convertToHex(this.id);\n    if (ObjectID.cacheHexString) this.__id = hexString;\n    return hexString;\n  }\n\n  for (var i = 0; i < this.id.length; i++) {\n    hexString += hexTable[this.id.charCodeAt(i)];\n  }\n\n  if (ObjectID.cacheHexString) this.__id = hexString;\n  return hexString;\n};\n\n/**\n* Update the ObjectID index used in generating new ObjectID's on the driver\n*\n* @method\n* @return {number} returns next index value.\n* @ignore\n*/\nObjectID.prototype.get_inc = function() {\n  return (ObjectID.index = (ObjectID.index + 1) % 0xffffff);\n};\n\n/**\n* Update the ObjectID index used in generating new ObjectID's on the driver\n*\n* @method\n* @return {number} returns next index value.\n* @ignore\n*/\nObjectID.prototype.getInc = function() {\n  return this.get_inc();\n};\n\n/**\n* Generate a 12 byte id buffer used in ObjectID's\n*\n* @method\n* @param {number} [time] optional parameter allowing to pass in a second based timestamp.\n* @return {Buffer} return the 12 byte id buffer string.\n*/\nObjectID.prototype.generate = function(time) {\n  if ('number' !== typeof time) {\n    time = ~~(Date.now() / 1000);\n  }\n\n  // Use pid\n  var pid =\n    (typeof process === 'undefined' || process.pid === 1\n      ? Math.floor(Math.random() * 100000)\n      : process.pid) % 0xffff;\n  var inc = this.get_inc();\n  // Buffer used\n  var buffer = utils.allocBuffer(12);\n  // Encode time\n  buffer[3] = time & 0xff;\n  buffer[2] = (time >> 8) & 0xff;\n  buffer[1] = (time >> 16) & 0xff;\n  buffer[0] = (time >> 24) & 0xff;\n  // Encode machine\n  buffer[6] = MACHINE_ID & 0xff;\n  buffer[5] = (MACHINE_ID >> 8) & 0xff;\n  buffer[4] = (MACHINE_ID >> 16) & 0xff;\n  // Encode pid\n  buffer[8] = pid & 0xff;\n  buffer[7] = (pid >> 8) & 0xff;\n  // Encode index\n  buffer[11] = inc & 0xff;\n  buffer[10] = (inc >> 8) & 0xff;\n  buffer[9] = (inc >> 16) & 0xff;\n  // Return the buffer\n  return buffer;\n};\n\n/**\n* Converts the id into a 24 byte hex string for printing\n*\n* @param {String} format The Buffer toString format parameter.\n* @return {String} return the 24 byte hex string representation.\n* @ignore\n*/\nObjectID.prototype.toString = function(format) {\n  // Is the id a buffer then use the buffer toString method to return the format\n  if (this.id && this.id.copy) {\n    return this.id.toString(typeof format === 'string' ? format : 'hex');\n  }\n\n  // if(this.buffer )\n  return this.toHexString();\n};\n\n/**\n* Converts to a string representation of this Id.\n*\n* @return {String} return the 24 byte hex string representation.\n* @ignore\n*/\nObjectID.prototype[inspect] = ObjectID.prototype.toString;\n\n/**\n* Converts to its JSON representation.\n*\n* @return {String} return the 24 byte hex string representation.\n* @ignore\n*/\nObjectID.prototype.toJSON = function() {\n  return this.toHexString();\n};\n\n/**\n* Compares the equality of this ObjectID with `otherID`.\n*\n* @method\n* @param {object} otherID ObjectID instance to compare against.\n* @return {boolean} the result of comparing two ObjectID's\n*/\nObjectID.prototype.equals = function equals(otherId) {\n  // var id;\n\n  if (otherId instanceof ObjectID) {\n    return this.toString() === otherId.toString();\n  } else if (\n    typeof otherId === 'string' &&\n    ObjectID.isValid(otherId) &&\n    otherId.length === 12 &&\n    this.id instanceof _Buffer\n  ) {\n    return otherId === this.id.toString('binary');\n  } else if (typeof otherId === 'string' && ObjectID.isValid(otherId) && otherId.length === 24) {\n    return otherId.toLowerCase() === this.toHexString();\n  } else if (typeof otherId === 'string' && ObjectID.isValid(otherId) && otherId.length === 12) {\n    return otherId === this.id;\n  } else if (otherId != null && (otherId instanceof ObjectID || otherId.toHexString)) {\n    return otherId.toHexString() === this.toHexString();\n  } else {\n    return false;\n  }\n};\n\n/**\n* Returns the generation date (accurate up to the second) that this ID was generated.\n*\n* @method\n* @return {date} the generation date\n*/\nObjectID.prototype.getTimestamp = function() {\n  var timestamp = new Date();\n  var time = this.id[3] | (this.id[2] << 8) | (this.id[1] << 16) | (this.id[0] << 24);\n  timestamp.setTime(Math.floor(time) * 1000);\n  return timestamp;\n};\n\n/**\n* @ignore\n*/\nObjectID.index = ~~(Math.random() * 0xffffff);\n\n/**\n* @ignore\n*/\nObjectID.createPk = function createPk() {\n  return new ObjectID();\n};\n\n/**\n* Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\n*\n* @method\n* @param {number} time an integer number representing a number of seconds.\n* @return {ObjectID} return the created ObjectID\n*/\nObjectID.createFromTime = function createFromTime(time) {\n  var buffer = utils.toBuffer([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n  // Encode time into first 4 bytes\n  buffer[3] = time & 0xff;\n  buffer[2] = (time >> 8) & 0xff;\n  buffer[1] = (time >> 16) & 0xff;\n  buffer[0] = (time >> 24) & 0xff;\n  // Return the new objectId\n  return new ObjectID(buffer);\n};\n\n// Lookup tables\n//var encodeLookup = '0123456789abcdef'.split('');\nvar decodeLookup = [];\ni = 0;\nwhile (i < 10) decodeLookup[0x30 + i] = i++;\nwhile (i < 16) decodeLookup[0x41 - 10 + i] = decodeLookup[0x61 - 10 + i] = i++;\n\nvar _Buffer = Buffer;\nvar convertToHex = function(bytes) {\n  return bytes.toString('hex');\n};\n\n/**\n* Creates an ObjectID from a hex string representation of an ObjectID.\n*\n* @method\n* @param {string} hexString create a ObjectID from a passed in 24 byte hexstring.\n* @return {ObjectID} return the created ObjectID\n*/\nObjectID.createFromHexString = function createFromHexString(string) {\n  // Throw an error if it's not a valid setup\n  if (typeof string === 'undefined' || (string != null && string.length !== 24)) {\n    throw new Error(\n      'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n    );\n  }\n\n  // Use Buffer.from method if available\n  if (hasBufferType) return new ObjectID(utils.toBuffer(string, 'hex'));\n\n  // Calculate lengths\n  var array = new _Buffer(12);\n  var n = 0;\n  var i = 0;\n\n  while (i < 24) {\n    array[n++] = (decodeLookup[string.charCodeAt(i++)] << 4) | decodeLookup[string.charCodeAt(i++)];\n  }\n\n  return new ObjectID(array);\n};\n\n/**\n* Checks if a value is a valid bson ObjectId\n*\n* @method\n* @return {boolean} return true if the value is a valid bson ObjectId, return false otherwise.\n*/\nObjectID.isValid = function isValid(id) {\n  if (id == null) return false;\n\n  if (typeof id === 'number') {\n    return true;\n  }\n\n  if (typeof id === 'string') {\n    return id.length === 12 || (id.length === 24 && checkForHexRegExp.test(id));\n  }\n\n  if (id instanceof ObjectID) {\n    return true;\n  }\n\n  if (id instanceof _Buffer) {\n    return true;\n  }\n\n  // Duck-Typing detection of ObjectId like objects\n  if (id.toHexString) {\n    return id.id.length === 12 || (id.id.length === 24 && checkForHexRegExp.test(id.id));\n  }\n\n  return false;\n};\n\n/**\n* @ignore\n*/\nObject.defineProperty(ObjectID.prototype, 'generationTime', {\n  enumerable: true,\n  get: function() {\n    return this.id[3] | (this.id[2] << 8) | (this.id[1] << 16) | (this.id[0] << 24);\n  },\n  set: function(value) {\n    // Encode time into first 4 bytes\n    this.id[3] = value & 0xff;\n    this.id[2] = (value >> 8) & 0xff;\n    this.id[1] = (value >> 16) & 0xff;\n    this.id[0] = (value >> 24) & 0xff;\n  }\n});\n\n/**\n * Expose.\n */\nmodule.exports = ObjectID;\nmodule.exports.ObjectID = ObjectID;\nmodule.exports.ObjectId = ObjectID;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Normalizes our expected stringified form of a function across versions of node\n * @param {Function} fn The function to stringify\n */\nfunction normalizedFunctionString(fn) {\n  return fn.toString().replace(/function *\\(/, 'function (');\n}\n\nfunction newBuffer(item, encoding) {\n  return new Buffer(item, encoding);\n}\n\nfunction allocBuffer() {\n  return Buffer.alloc.apply(Buffer, arguments);\n}\n\nfunction toBuffer() {\n  return Buffer.from.apply(Buffer, arguments);\n}\n\nmodule.exports = {\n  normalizedFunctionString: normalizedFunctionString,\n  allocBuffer: typeof Buffer.alloc === 'function' ? allocBuffer : newBuffer,\n  toBuffer: typeof Buffer.from === 'function' ? toBuffer : newBuffer\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL2Jzb24vbGliL2Jzb24vcGFyc2VyL3V0aWxzLmpzPzA5MjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjExLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE5vcm1hbGl6ZXMgb3VyIGV4cGVjdGVkIHN0cmluZ2lmaWVkIGZvcm0gb2YgYSBmdW5jdGlvbiBhY3Jvc3MgdmVyc2lvbnMgb2Ygbm9kZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIHN0cmluZ2lmeVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVkRnVuY3Rpb25TdHJpbmcoZm4pIHtcbiAgcmV0dXJuIGZuLnRvU3RyaW5nKCkucmVwbGFjZSgvZnVuY3Rpb24gKlxcKC8sICdmdW5jdGlvbiAoJyk7XG59XG5cbmZ1bmN0aW9uIG5ld0J1ZmZlcihpdGVtLCBlbmNvZGluZykge1xuICByZXR1cm4gbmV3IEJ1ZmZlcihpdGVtLCBlbmNvZGluZyk7XG59XG5cbmZ1bmN0aW9uIGFsbG9jQnVmZmVyKCkge1xuICByZXR1cm4gQnVmZmVyLmFsbG9jLmFwcGx5KEJ1ZmZlciwgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdG9CdWZmZXIoKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbS5hcHBseShCdWZmZXIsIGFyZ3VtZW50cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBub3JtYWxpemVkRnVuY3Rpb25TdHJpbmc6IG5vcm1hbGl6ZWRGdW5jdGlvblN0cmluZyxcbiAgYWxsb2NCdWZmZXI6IHR5cGVvZiBCdWZmZXIuYWxsb2MgPT09ICdmdW5jdGlvbicgPyBhbGxvY0J1ZmZlciA6IG5ld0J1ZmZlcixcbiAgdG9CdWZmZXI6IHR5cGVvZiBCdWZmZXIuZnJvbSA9PT0gJ2Z1bmN0aW9uJyA/IHRvQnVmZmVyIDogbmV3QnVmZmVyXG59O1xuXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports) {

eval("module.exports = require(\"util\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0L2V4dGVybmFsIFwidXRpbFwiP2JlMGIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ1dGlsXCIpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports) {

eval("/**\n * A class representation of the BSON RegExp type.\n *\n * @class\n * @return {BSONRegExp} A MinKey instance\n */\nfunction BSONRegExp(pattern, options) {\n  if (!(this instanceof BSONRegExp)) return new BSONRegExp();\n\n  // Execute\n  this._bsontype = 'BSONRegExp';\n  this.pattern = pattern || '';\n  this.options = options || '';\n\n  // Validate options\n  for (var i = 0; i < this.options.length; i++) {\n    if (\n      !(\n        this.options[i] === 'i' ||\n        this.options[i] === 'm' ||\n        this.options[i] === 'x' ||\n        this.options[i] === 'l' ||\n        this.options[i] === 's' ||\n        this.options[i] === 'u'\n      )\n    ) {\n      throw new Error('the regular expression options [' + this.options[i] + '] is not supported');\n    }\n  }\n}\n\nmodule.exports = BSONRegExp;\nmodule.exports.BSONRegExp = BSONRegExp;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL2Jzb24vbGliL2Jzb24vcmVnZXhwLmpzPzVhMTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFdBQVc7QUFDdkI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLHlCQUF5QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgY2xhc3MgcmVwcmVzZW50YXRpb24gb2YgdGhlIEJTT04gUmVnRXhwIHR5cGUuXG4gKlxuICogQGNsYXNzXG4gKiBAcmV0dXJuIHtCU09OUmVnRXhwfSBBIE1pbktleSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBCU09OUmVnRXhwKHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEJTT05SZWdFeHApKSByZXR1cm4gbmV3IEJTT05SZWdFeHAoKTtcblxuICAvLyBFeGVjdXRlXG4gIHRoaXMuX2Jzb250eXBlID0gJ0JTT05SZWdFeHAnO1xuICB0aGlzLnBhdHRlcm4gPSBwYXR0ZXJuIHx8ICcnO1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8ICcnO1xuXG4gIC8vIFZhbGlkYXRlIG9wdGlvbnNcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoXG4gICAgICAhKFxuICAgICAgICB0aGlzLm9wdGlvbnNbaV0gPT09ICdpJyB8fFxuICAgICAgICB0aGlzLm9wdGlvbnNbaV0gPT09ICdtJyB8fFxuICAgICAgICB0aGlzLm9wdGlvbnNbaV0gPT09ICd4JyB8fFxuICAgICAgICB0aGlzLm9wdGlvbnNbaV0gPT09ICdsJyB8fFxuICAgICAgICB0aGlzLm9wdGlvbnNbaV0gPT09ICdzJyB8fFxuICAgICAgICB0aGlzLm9wdGlvbnNbaV0gPT09ICd1J1xuICAgICAgKVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd0aGUgcmVndWxhciBleHByZXNzaW9uIG9wdGlvbnMgWycgKyB0aGlzLm9wdGlvbnNbaV0gKyAnXSBpcyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQlNPTlJlZ0V4cDtcbm1vZHVsZS5leHBvcnRzLkJTT05SZWdFeHAgPSBCU09OUmVnRXhwO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

eval("// Custom inspect property name / symbol.\nvar inspect = Buffer ? __webpack_require__(12).inspect.custom || 'inspect' : 'inspect';\n\n/**\n * A class representation of the BSON Symbol type.\n *\n * @class\n * @deprecated\n * @param {string} value the string representing the symbol.\n * @return {Symbol}\n */\nfunction Symbol(value) {\n  if (!(this instanceof Symbol)) return new Symbol(value);\n  this._bsontype = 'Symbol';\n  this.value = value;\n}\n\n/**\n * Access the wrapped string value.\n *\n * @method\n * @return {String} returns the wrapped string.\n */\nSymbol.prototype.valueOf = function() {\n  return this.value;\n};\n\n/**\n * @ignore\n */\nSymbol.prototype.toString = function() {\n  return this.value;\n};\n\n/**\n * @ignore\n */\nSymbol.prototype[inspect] = function() {\n  return this.value;\n};\n\n/**\n * @ignore\n */\nSymbol.prototype.toJSON = function() {\n  return this.value;\n};\n\nmodule.exports = Symbol;\nmodule.exports.Symbol = Symbol;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL2Jzb24vbGliL2Jzb24vc3ltYm9sLmpzPzA1MTUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx1QkFBdUIsbUJBQU8sQ0FBQyxFQUFNOztBQUVyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsImZpbGUiOiIxNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEN1c3RvbSBpbnNwZWN0IHByb3BlcnR5IG5hbWUgLyBzeW1ib2wuXG52YXIgaW5zcGVjdCA9IEJ1ZmZlciA/IHJlcXVpcmUoJ3V0aWwnKS5pbnNwZWN0LmN1c3RvbSB8fCAnaW5zcGVjdCcgOiAnaW5zcGVjdCc7XG5cbi8qKlxuICogQSBjbGFzcyByZXByZXNlbnRhdGlvbiBvZiB0aGUgQlNPTiBTeW1ib2wgdHlwZS5cbiAqXG4gKiBAY2xhc3NcbiAqIEBkZXByZWNhdGVkXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgdGhlIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHN5bWJvbC5cbiAqIEByZXR1cm4ge1N5bWJvbH1cbiAqL1xuZnVuY3Rpb24gU3ltYm9sKHZhbHVlKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTeW1ib2wpKSByZXR1cm4gbmV3IFN5bWJvbCh2YWx1ZSk7XG4gIHRoaXMuX2Jzb250eXBlID0gJ1N5bWJvbCc7XG4gIHRoaXMudmFsdWUgPSB2YWx1ZTtcbn1cblxuLyoqXG4gKiBBY2Nlc3MgdGhlIHdyYXBwZWQgc3RyaW5nIHZhbHVlLlxuICpcbiAqIEBtZXRob2RcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgd3JhcHBlZCBzdHJpbmcuXG4gKi9cblN5bWJvbC5wcm90b3R5cGUudmFsdWVPZiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy52YWx1ZTtcbn07XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5TeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnZhbHVlO1xufTtcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cblN5bWJvbC5wcm90b3R5cGVbaW5zcGVjdF0gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMudmFsdWU7XG59O1xuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuU3ltYm9sLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMudmFsdWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bWJvbDtcbm1vZHVsZS5leHBvcnRzLlN5bWJvbCA9IFN5bWJvbDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, exports) {

eval("/**\n * A class representation of a BSON Int32 type.\n *\n * @class\n * @param {number} value the number we want to represent as an int32.\n * @return {Int32}\n */\nvar Int32 = function(value) {\n  if (!(this instanceof Int32)) return new Int32(value);\n\n  this._bsontype = 'Int32';\n  this.value = value;\n};\n\n/**\n * Access the number value.\n *\n * @method\n * @return {number} returns the wrapped int32 number.\n */\nInt32.prototype.valueOf = function() {\n  return this.value;\n};\n\n/**\n * @ignore\n */\nInt32.prototype.toJSON = function() {\n  return this.value;\n};\n\nmodule.exports = Int32;\nmodule.exports.Int32 = Int32;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL2Jzb24vbGliL2Jzb24vaW50XzMyLmpzPzQxZDMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgY2xhc3MgcmVwcmVzZW50YXRpb24gb2YgYSBCU09OIEludDMyIHR5cGUuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgdGhlIG51bWJlciB3ZSB3YW50IHRvIHJlcHJlc2VudCBhcyBhbiBpbnQzMi5cbiAqIEByZXR1cm4ge0ludDMyfVxuICovXG52YXIgSW50MzIgPSBmdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSW50MzIpKSByZXR1cm4gbmV3IEludDMyKHZhbHVlKTtcblxuICB0aGlzLl9ic29udHlwZSA9ICdJbnQzMic7XG4gIHRoaXMudmFsdWUgPSB2YWx1ZTtcbn07XG5cbi8qKlxuICogQWNjZXNzIHRoZSBudW1iZXIgdmFsdWUuXG4gKlxuICogQG1ldGhvZFxuICogQHJldHVybiB7bnVtYmVyfSByZXR1cm5zIHRoZSB3cmFwcGVkIGludDMyIG51bWJlci5cbiAqL1xuSW50MzIucHJvdG90eXBlLnZhbHVlT2YgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMudmFsdWU7XG59O1xuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuSW50MzIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy52YWx1ZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50MzI7XG5tb2R1bGUuZXhwb3J0cy5JbnQzMiA9IEludDMyO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/***/ (function(module, exports) {

eval("/**\n * A class representation of the BSON Code type.\n *\n * @class\n * @param {(string|function)} code a string or function.\n * @param {Object} [scope] an optional scope for the function.\n * @return {Code}\n */\nvar Code = function Code(code, scope) {\n  if (!(this instanceof Code)) return new Code(code, scope);\n  this._bsontype = 'Code';\n  this.code = code;\n  this.scope = scope;\n};\n\n/**\n * @ignore\n */\nCode.prototype.toJSON = function() {\n  return { scope: this.scope, code: this.code };\n};\n\nmodule.exports = Code;\nmodule.exports.Code = Code;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL2Jzb24vbGliL2Jzb24vY29kZS5qcz9lNzUyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxrQkFBa0I7QUFDN0IsV0FBVyxPQUFPO0FBQ2xCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjs7QUFFQTtBQUNBIiwiZmlsZSI6IjE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIGNsYXNzIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBCU09OIENvZGUgdHlwZS5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7KHN0cmluZ3xmdW5jdGlvbil9IGNvZGUgYSBzdHJpbmcgb3IgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge09iamVjdH0gW3Njb3BlXSBhbiBvcHRpb25hbCBzY29wZSBmb3IgdGhlIGZ1bmN0aW9uLlxuICogQHJldHVybiB7Q29kZX1cbiAqL1xudmFyIENvZGUgPSBmdW5jdGlvbiBDb2RlKGNvZGUsIHNjb3BlKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBDb2RlKSkgcmV0dXJuIG5ldyBDb2RlKGNvZGUsIHNjb3BlKTtcbiAgdGhpcy5fYnNvbnR5cGUgPSAnQ29kZSc7XG4gIHRoaXMuY29kZSA9IGNvZGU7XG4gIHRoaXMuc2NvcGUgPSBzY29wZTtcbn07XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5Db2RlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHsgc2NvcGU6IHRoaXMuc2NvcGUsIGNvZGU6IHRoaXMuY29kZSB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb2RlO1xubW9kdWxlLmV4cG9ydHMuQ29kZSA9IENvZGU7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Long = __webpack_require__(7);\n\nvar PARSE_STRING_REGEXP = /^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$/;\nvar PARSE_INF_REGEXP = /^(\\+|-)?(Infinity|inf)$/i;\nvar PARSE_NAN_REGEXP = /^(\\+|-)?NaN$/i;\n\nvar EXPONENT_MAX = 6111;\nvar EXPONENT_MIN = -6176;\nvar EXPONENT_BIAS = 6176;\nvar MAX_DIGITS = 34;\n\n// Nan value bits as 32 bit values (due to lack of longs)\nvar NAN_BUFFER = [\n  0x7c,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00\n].reverse();\n// Infinity value bits 32 bit values (due to lack of longs)\nvar INF_NEGATIVE_BUFFER = [\n  0xf8,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00\n].reverse();\nvar INF_POSITIVE_BUFFER = [\n  0x78,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00\n].reverse();\n\nvar EXPONENT_REGEX = /^([-+])?(\\d+)?$/;\n\nvar utils = __webpack_require__(11);\n\n// Detect if the value is a digit\nvar isDigit = function(value) {\n  return !isNaN(parseInt(value, 10));\n};\n\n// Divide two uint128 values\nvar divideu128 = function(value) {\n  var DIVISOR = Long.fromNumber(1000 * 1000 * 1000);\n  var _rem = Long.fromNumber(0);\n  var i = 0;\n\n  if (!value.parts[0] && !value.parts[1] && !value.parts[2] && !value.parts[3]) {\n    return { quotient: value, rem: _rem };\n  }\n\n  for (i = 0; i <= 3; i++) {\n    // Adjust remainder to match value of next dividend\n    _rem = _rem.shiftLeft(32);\n    // Add the divided to _rem\n    _rem = _rem.add(new Long(value.parts[i], 0));\n    value.parts[i] = _rem.div(DIVISOR).low_;\n    _rem = _rem.modulo(DIVISOR);\n  }\n\n  return { quotient: value, rem: _rem };\n};\n\n// Multiply two Long values and return the 128 bit value\nvar multiply64x2 = function(left, right) {\n  if (!left && !right) {\n    return { high: Long.fromNumber(0), low: Long.fromNumber(0) };\n  }\n\n  var leftHigh = left.shiftRightUnsigned(32);\n  var leftLow = new Long(left.getLowBits(), 0);\n  var rightHigh = right.shiftRightUnsigned(32);\n  var rightLow = new Long(right.getLowBits(), 0);\n\n  var productHigh = leftHigh.multiply(rightHigh);\n  var productMid = leftHigh.multiply(rightLow);\n  var productMid2 = leftLow.multiply(rightHigh);\n  var productLow = leftLow.multiply(rightLow);\n\n  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n  productMid = new Long(productMid.getLowBits(), 0)\n    .add(productMid2)\n    .add(productLow.shiftRightUnsigned(32));\n\n  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n  productLow = productMid.shiftLeft(32).add(new Long(productLow.getLowBits(), 0));\n\n  // Return the 128 bit result\n  return { high: productHigh, low: productLow };\n};\n\nvar lessThan = function(left, right) {\n  // Make values unsigned\n  var uhleft = left.high_ >>> 0;\n  var uhright = right.high_ >>> 0;\n\n  // Compare high bits first\n  if (uhleft < uhright) {\n    return true;\n  } else if (uhleft === uhright) {\n    var ulleft = left.low_ >>> 0;\n    var ulright = right.low_ >>> 0;\n    if (ulleft < ulright) return true;\n  }\n\n  return false;\n};\n\n// var longtoHex = function(value) {\n//   var buffer = utils.allocBuffer(8);\n//   var index = 0;\n//   // Encode the low 64 bits of the decimal\n//   // Encode low bits\n//   buffer[index++] = value.low_ & 0xff;\n//   buffer[index++] = (value.low_ >> 8) & 0xff;\n//   buffer[index++] = (value.low_ >> 16) & 0xff;\n//   buffer[index++] = (value.low_ >> 24) & 0xff;\n//   // Encode high bits\n//   buffer[index++] = value.high_ & 0xff;\n//   buffer[index++] = (value.high_ >> 8) & 0xff;\n//   buffer[index++] = (value.high_ >> 16) & 0xff;\n//   buffer[index++] = (value.high_ >> 24) & 0xff;\n//   return buffer.reverse().toString('hex');\n// };\n\n// var int32toHex = function(value) {\n//   var buffer = utils.allocBuffer(4);\n//   var index = 0;\n//   // Encode the low 64 bits of the decimal\n//   // Encode low bits\n//   buffer[index++] = value & 0xff;\n//   buffer[index++] = (value >> 8) & 0xff;\n//   buffer[index++] = (value >> 16) & 0xff;\n//   buffer[index++] = (value >> 24) & 0xff;\n//   return buffer.reverse().toString('hex');\n// };\n\n/**\n * A class representation of the BSON Decimal128 type.\n *\n * @class\n * @param {Buffer} bytes a buffer containing the raw Decimal128 bytes.\n * @return {Double}\n */\nvar Decimal128 = function(bytes) {\n  this._bsontype = 'Decimal128';\n  this.bytes = bytes;\n};\n\n/**\n * Create a Decimal128 instance from a string representation\n *\n * @method\n * @param {string} string a numeric string representation.\n * @return {Decimal128} returns a Decimal128 instance.\n */\nDecimal128.fromString = function(string) {\n  // Parse state tracking\n  var isNegative = false;\n  var sawRadix = false;\n  var foundNonZero = false;\n\n  // Total number of significant digits (no leading or trailing zero)\n  var significantDigits = 0;\n  // Total number of significand digits read\n  var nDigitsRead = 0;\n  // Total number of digits (no leading zeros)\n  var nDigits = 0;\n  // The number of the digits after radix\n  var radixPosition = 0;\n  // The index of the first non-zero in *str*\n  var firstNonZero = 0;\n\n  // Digits Array\n  var digits = [0];\n  // The number of digits in digits\n  var nDigitsStored = 0;\n  // Insertion pointer for digits\n  var digitsInsert = 0;\n  // The index of the first non-zero digit\n  var firstDigit = 0;\n  // The index of the last digit\n  var lastDigit = 0;\n\n  // Exponent\n  var exponent = 0;\n  // loop index over array\n  var i = 0;\n  // The high 17 digits of the significand\n  var significandHigh = [0, 0];\n  // The low 17 digits of the significand\n  var significandLow = [0, 0];\n  // The biased exponent\n  var biasedExponent = 0;\n\n  // Read index\n  var index = 0;\n\n  // Trim the string\n  string = string.trim();\n\n  // Naively prevent against REDOS attacks.\n  // TODO: implementing a custom parsing for this, or refactoring the regex would yield\n  //       further gains.\n  if (string.length >= 7000) {\n    throw new Error('' + string + ' not a valid Decimal128 string');\n  }\n\n  // Results\n  var stringMatch = string.match(PARSE_STRING_REGEXP);\n  var infMatch = string.match(PARSE_INF_REGEXP);\n  var nanMatch = string.match(PARSE_NAN_REGEXP);\n\n  // Validate the string\n  if ((!stringMatch && !infMatch && !nanMatch) || string.length === 0) {\n    throw new Error('' + string + ' not a valid Decimal128 string');\n  }\n\n  // Check if we have an illegal exponent format\n  if (stringMatch && stringMatch[4] && stringMatch[2] === undefined) {\n    throw new Error('' + string + ' not a valid Decimal128 string');\n  }\n\n  // Get the negative or positive sign\n  if (string[index] === '+' || string[index] === '-') {\n    isNegative = string[index++] === '-';\n  }\n\n  // Check if user passed Infinity or NaN\n  if (!isDigit(string[index]) && string[index] !== '.') {\n    if (string[index] === 'i' || string[index] === 'I') {\n      return new Decimal128(utils.toBuffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n    } else if (string[index] === 'N') {\n      return new Decimal128(utils.toBuffer(NAN_BUFFER));\n    }\n  }\n\n  // Read all the digits\n  while (isDigit(string[index]) || string[index] === '.') {\n    if (string[index] === '.') {\n      if (sawRadix) {\n        return new Decimal128(utils.toBuffer(NAN_BUFFER));\n      }\n\n      sawRadix = true;\n      index = index + 1;\n      continue;\n    }\n\n    if (nDigitsStored < 34) {\n      if (string[index] !== '0' || foundNonZero) {\n        if (!foundNonZero) {\n          firstNonZero = nDigitsRead;\n        }\n\n        foundNonZero = true;\n\n        // Only store 34 digits\n        digits[digitsInsert++] = parseInt(string[index], 10);\n        nDigitsStored = nDigitsStored + 1;\n      }\n    }\n\n    if (foundNonZero) {\n      nDigits = nDigits + 1;\n    }\n\n    if (sawRadix) {\n      radixPosition = radixPosition + 1;\n    }\n\n    nDigitsRead = nDigitsRead + 1;\n    index = index + 1;\n  }\n\n  if (sawRadix && !nDigitsRead) {\n    throw new Error('' + string + ' not a valid Decimal128 string');\n  }\n\n  // Read exponent if exists\n  if (string[index] === 'e' || string[index] === 'E') {\n    // Read exponent digits\n    var match = string.substr(++index).match(EXPONENT_REGEX);\n\n    // No digits read\n    if (!match || !match[2]) {\n      return new Decimal128(utils.toBuffer(NAN_BUFFER));\n    }\n\n    // Get exponent\n    exponent = parseInt(match[0], 10);\n\n    // Adjust the index\n    index = index + match[0].length;\n  }\n\n  // Return not a number\n  if (string[index]) {\n    return new Decimal128(utils.toBuffer(NAN_BUFFER));\n  }\n\n  // Done reading input\n  // Find first non-zero digit in digits\n  firstDigit = 0;\n\n  if (!nDigitsStored) {\n    firstDigit = 0;\n    lastDigit = 0;\n    digits[0] = 0;\n    nDigits = 1;\n    nDigitsStored = 1;\n    significantDigits = 0;\n  } else {\n    lastDigit = nDigitsStored - 1;\n    significantDigits = nDigits;\n\n    if (exponent !== 0 && significantDigits !== 1) {\n      while (string[firstNonZero + significantDigits - 1] === '0') {\n        significantDigits = significantDigits - 1;\n      }\n    }\n  }\n\n  // Normalization of exponent\n  // Correct exponent based on radix position, and shift significand as needed\n  // to represent user input\n\n  // Overflow prevention\n  if (exponent <= radixPosition && radixPosition - exponent > 1 << 14) {\n    exponent = EXPONENT_MIN;\n  } else {\n    exponent = exponent - radixPosition;\n  }\n\n  // Attempt to normalize the exponent\n  while (exponent > EXPONENT_MAX) {\n    // Shift exponent to significand and decrease\n    lastDigit = lastDigit + 1;\n\n    if (lastDigit - firstDigit > MAX_DIGITS) {\n      // Check if we have a zero then just hard clamp, otherwise fail\n      var digitsString = digits.join('');\n      if (digitsString.match(/^0+$/)) {\n        exponent = EXPONENT_MAX;\n        break;\n      } else {\n        return new Decimal128(utils.toBuffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n      }\n    }\n\n    exponent = exponent - 1;\n  }\n\n  while (exponent < EXPONENT_MIN || nDigitsStored < nDigits) {\n    // Shift last digit\n    if (lastDigit === 0) {\n      exponent = EXPONENT_MIN;\n      significantDigits = 0;\n      break;\n    }\n\n    if (nDigitsStored < nDigits) {\n      // adjust to match digits not stored\n      nDigits = nDigits - 1;\n    } else {\n      // adjust to round\n      lastDigit = lastDigit - 1;\n    }\n\n    if (exponent < EXPONENT_MAX) {\n      exponent = exponent + 1;\n    } else {\n      // Check if we have a zero then just hard clamp, otherwise fail\n      digitsString = digits.join('');\n      if (digitsString.match(/^0+$/)) {\n        exponent = EXPONENT_MAX;\n        break;\n      } else {\n        return new Decimal128(utils.toBuffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n      }\n    }\n  }\n\n  // Round\n  // We've normalized the exponent, but might still need to round.\n  if (lastDigit - firstDigit + 1 < significantDigits && string[significantDigits] !== '0') {\n    var endOfString = nDigitsRead;\n\n    // If we have seen a radix point, 'string' is 1 longer than we have\n    // documented with ndigits_read, so inc the position of the first nonzero\n    // digit and the position that digits are read to.\n    if (sawRadix && exponent === EXPONENT_MIN) {\n      firstNonZero = firstNonZero + 1;\n      endOfString = endOfString + 1;\n    }\n\n    var roundDigit = parseInt(string[firstNonZero + lastDigit + 1], 10);\n    var roundBit = 0;\n\n    if (roundDigit >= 5) {\n      roundBit = 1;\n\n      if (roundDigit === 5) {\n        roundBit = digits[lastDigit] % 2 === 1;\n\n        for (i = firstNonZero + lastDigit + 2; i < endOfString; i++) {\n          if (parseInt(string[i], 10)) {\n            roundBit = 1;\n            break;\n          }\n        }\n      }\n    }\n\n    if (roundBit) {\n      var dIdx = lastDigit;\n\n      for (; dIdx >= 0; dIdx--) {\n        if (++digits[dIdx] > 9) {\n          digits[dIdx] = 0;\n\n          // overflowed most significant digit\n          if (dIdx === 0) {\n            if (exponent < EXPONENT_MAX) {\n              exponent = exponent + 1;\n              digits[dIdx] = 1;\n            } else {\n              return new Decimal128(\n                utils.toBuffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER)\n              );\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n  // Encode significand\n  // The high 17 digits of the significand\n  significandHigh = Long.fromNumber(0);\n  // The low 17 digits of the significand\n  significandLow = Long.fromNumber(0);\n\n  // read a zero\n  if (significantDigits === 0) {\n    significandHigh = Long.fromNumber(0);\n    significandLow = Long.fromNumber(0);\n  } else if (lastDigit - firstDigit < 17) {\n    dIdx = firstDigit;\n    significandLow = Long.fromNumber(digits[dIdx++]);\n    significandHigh = new Long(0, 0);\n\n    for (; dIdx <= lastDigit; dIdx++) {\n      significandLow = significandLow.multiply(Long.fromNumber(10));\n      significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n    }\n  } else {\n    dIdx = firstDigit;\n    significandHigh = Long.fromNumber(digits[dIdx++]);\n\n    for (; dIdx <= lastDigit - 17; dIdx++) {\n      significandHigh = significandHigh.multiply(Long.fromNumber(10));\n      significandHigh = significandHigh.add(Long.fromNumber(digits[dIdx]));\n    }\n\n    significandLow = Long.fromNumber(digits[dIdx++]);\n\n    for (; dIdx <= lastDigit; dIdx++) {\n      significandLow = significandLow.multiply(Long.fromNumber(10));\n      significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n    }\n  }\n\n  var significand = multiply64x2(significandHigh, Long.fromString('100000000000000000'));\n\n  significand.low = significand.low.add(significandLow);\n\n  if (lessThan(significand.low, significandLow)) {\n    significand.high = significand.high.add(Long.fromNumber(1));\n  }\n\n  // Biased exponent\n  biasedExponent = exponent + EXPONENT_BIAS;\n  var dec = { low: Long.fromNumber(0), high: Long.fromNumber(0) };\n\n  // Encode combination, exponent, and significand.\n  if (\n    significand.high\n      .shiftRightUnsigned(49)\n      .and(Long.fromNumber(1))\n      .equals(Long.fromNumber)\n  ) {\n    // Encode '11' into bits 1 to 3\n    dec.high = dec.high.or(Long.fromNumber(0x3).shiftLeft(61));\n    dec.high = dec.high.or(\n      Long.fromNumber(biasedExponent).and(Long.fromNumber(0x3fff).shiftLeft(47))\n    );\n    dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x7fffffffffff)));\n  } else {\n    dec.high = dec.high.or(Long.fromNumber(biasedExponent & 0x3fff).shiftLeft(49));\n    dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x1ffffffffffff)));\n  }\n\n  dec.low = significand.low;\n\n  // Encode sign\n  if (isNegative) {\n    dec.high = dec.high.or(Long.fromString('9223372036854775808'));\n  }\n\n  // Encode into a buffer\n  var buffer = utils.allocBuffer(16);\n  index = 0;\n\n  // Encode the low 64 bits of the decimal\n  // Encode low bits\n  buffer[index++] = dec.low.low_ & 0xff;\n  buffer[index++] = (dec.low.low_ >> 8) & 0xff;\n  buffer[index++] = (dec.low.low_ >> 16) & 0xff;\n  buffer[index++] = (dec.low.low_ >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = dec.low.high_ & 0xff;\n  buffer[index++] = (dec.low.high_ >> 8) & 0xff;\n  buffer[index++] = (dec.low.high_ >> 16) & 0xff;\n  buffer[index++] = (dec.low.high_ >> 24) & 0xff;\n\n  // Encode the high 64 bits of the decimal\n  // Encode low bits\n  buffer[index++] = dec.high.low_ & 0xff;\n  buffer[index++] = (dec.high.low_ >> 8) & 0xff;\n  buffer[index++] = (dec.high.low_ >> 16) & 0xff;\n  buffer[index++] = (dec.high.low_ >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = dec.high.high_ & 0xff;\n  buffer[index++] = (dec.high.high_ >> 8) & 0xff;\n  buffer[index++] = (dec.high.high_ >> 16) & 0xff;\n  buffer[index++] = (dec.high.high_ >> 24) & 0xff;\n\n  // Return the new Decimal128\n  return new Decimal128(buffer);\n};\n\n// Extract least significant 5 bits\nvar COMBINATION_MASK = 0x1f;\n// Extract least significant 14 bits\nvar EXPONENT_MASK = 0x3fff;\n// Value of combination field for Inf\nvar COMBINATION_INFINITY = 30;\n// Value of combination field for NaN\nvar COMBINATION_NAN = 31;\n// Value of combination field for NaN\n// var COMBINATION_SNAN = 32;\n// decimal128 exponent bias\nEXPONENT_BIAS = 6176;\n\n/**\n * Create a string representation of the raw Decimal128 value\n *\n * @method\n * @return {string} returns a Decimal128 string representation.\n */\nDecimal128.prototype.toString = function() {\n  // Note: bits in this routine are referred to starting at 0,\n  // from the sign bit, towards the coefficient.\n\n  // bits 0 - 31\n  var high;\n  // bits 32 - 63\n  var midh;\n  // bits 64 - 95\n  var midl;\n  // bits 96 - 127\n  var low;\n  // bits 1 - 5\n  var combination;\n  // decoded biased exponent (14 bits)\n  var biased_exponent;\n  // the number of significand digits\n  var significand_digits = 0;\n  // the base-10 digits in the significand\n  var significand = new Array(36);\n  for (var i = 0; i < significand.length; i++) significand[i] = 0;\n  // read pointer into significand\n  var index = 0;\n\n  // unbiased exponent\n  var exponent;\n  // the exponent if scientific notation is used\n  var scientific_exponent;\n\n  // true if the number is zero\n  var is_zero = false;\n\n  // the most signifcant significand bits (50-46)\n  var significand_msb;\n  // temporary storage for significand decoding\n  var significand128 = { parts: new Array(4) };\n  // indexing variables\n  i;\n  var j, k;\n\n  // Output string\n  var string = [];\n\n  // Unpack index\n  index = 0;\n\n  // Buffer reference\n  var buffer = this.bytes;\n\n  // Unpack the low 64bits into a long\n  low =\n    buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n  midl =\n    buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n\n  // Unpack the high 64bits into a long\n  midh =\n    buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n  high =\n    buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n\n  // Unpack index\n  index = 0;\n\n  // Create the state of the decimal\n  var dec = {\n    low: new Long(low, midl),\n    high: new Long(midh, high)\n  };\n\n  if (dec.high.lessThan(Long.ZERO)) {\n    string.push('-');\n  }\n\n  // Decode combination field and exponent\n  combination = (high >> 26) & COMBINATION_MASK;\n\n  if (combination >> 3 === 3) {\n    // Check for 'special' values\n    if (combination === COMBINATION_INFINITY) {\n      return string.join('') + 'Infinity';\n    } else if (combination === COMBINATION_NAN) {\n      return 'NaN';\n    } else {\n      biased_exponent = (high >> 15) & EXPONENT_MASK;\n      significand_msb = 0x08 + ((high >> 14) & 0x01);\n    }\n  } else {\n    significand_msb = (high >> 14) & 0x07;\n    biased_exponent = (high >> 17) & EXPONENT_MASK;\n  }\n\n  exponent = biased_exponent - EXPONENT_BIAS;\n\n  // Create string of significand digits\n\n  // Convert the 114-bit binary number represented by\n  // (significand_high, significand_low) to at most 34 decimal\n  // digits through modulo and division.\n  significand128.parts[0] = (high & 0x3fff) + ((significand_msb & 0xf) << 14);\n  significand128.parts[1] = midh;\n  significand128.parts[2] = midl;\n  significand128.parts[3] = low;\n\n  if (\n    significand128.parts[0] === 0 &&\n    significand128.parts[1] === 0 &&\n    significand128.parts[2] === 0 &&\n    significand128.parts[3] === 0\n  ) {\n    is_zero = true;\n  } else {\n    for (k = 3; k >= 0; k--) {\n      var least_digits = 0;\n      // Peform the divide\n      var result = divideu128(significand128);\n      significand128 = result.quotient;\n      least_digits = result.rem.low_;\n\n      // We now have the 9 least significant digits (in base 2).\n      // Convert and output to string.\n      if (!least_digits) continue;\n\n      for (j = 8; j >= 0; j--) {\n        // significand[k * 9 + j] = Math.round(least_digits % 10);\n        significand[k * 9 + j] = least_digits % 10;\n        // least_digits = Math.round(least_digits / 10);\n        least_digits = Math.floor(least_digits / 10);\n      }\n    }\n  }\n\n  // Output format options:\n  // Scientific - [-]d.dddE(+/-)dd or [-]dE(+/-)dd\n  // Regular    - ddd.ddd\n\n  if (is_zero) {\n    significand_digits = 1;\n    significand[index] = 0;\n  } else {\n    significand_digits = 36;\n    i = 0;\n\n    while (!significand[index]) {\n      i++;\n      significand_digits = significand_digits - 1;\n      index = index + 1;\n    }\n  }\n\n  scientific_exponent = significand_digits - 1 + exponent;\n\n  // The scientific exponent checks are dictated by the string conversion\n  // specification and are somewhat arbitrary cutoffs.\n  //\n  // We must check exponent > 0, because if this is the case, the number\n  // has trailing zeros.  However, we *cannot* output these trailing zeros,\n  // because doing so would change the precision of the value, and would\n  // change stored data if the string converted number is round tripped.\n\n  if (scientific_exponent >= 34 || scientific_exponent <= -7 || exponent > 0) {\n    // Scientific format\n    string.push(significand[index++]);\n    significand_digits = significand_digits - 1;\n\n    if (significand_digits) {\n      string.push('.');\n    }\n\n    for (i = 0; i < significand_digits; i++) {\n      string.push(significand[index++]);\n    }\n\n    // Exponent\n    string.push('E');\n    if (scientific_exponent > 0) {\n      string.push('+' + scientific_exponent);\n    } else {\n      string.push(scientific_exponent);\n    }\n  } else {\n    // Regular format with no decimal place\n    if (exponent >= 0) {\n      for (i = 0; i < significand_digits; i++) {\n        string.push(significand[index++]);\n      }\n    } else {\n      var radix_position = significand_digits + exponent;\n\n      // non-zero digits before radix\n      if (radix_position > 0) {\n        for (i = 0; i < radix_position; i++) {\n          string.push(significand[index++]);\n        }\n      } else {\n        string.push('0');\n      }\n\n      string.push('.');\n      // add leading zeros after radix\n      while (radix_position++ < 0) {\n        string.push('0');\n      }\n\n      for (i = 0; i < significand_digits - Math.max(radix_position - 1, 0); i++) {\n        string.push(significand[index++]);\n      }\n    }\n  }\n\n  return string.join('');\n};\n\nDecimal128.prototype.toJSON = function() {\n  return { $numberDecimal: this.toString() };\n};\n\nmodule.exports = Decimal128;\nmodule.exports.Decimal128 = Decimal128;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/***/ (function(module, exports) {

eval("/**\n * A class representation of the BSON MinKey type.\n *\n * @class\n * @return {MinKey} A MinKey instance\n */\nfunction MinKey() {\n  if (!(this instanceof MinKey)) return new MinKey();\n\n  this._bsontype = 'MinKey';\n}\n\nmodule.exports = MinKey;\nmodule.exports.MinKey = MinKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL2Jzb24vbGliL2Jzb24vbWluX2tleS5qcz8zMDQyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EiLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgY2xhc3MgcmVwcmVzZW50YXRpb24gb2YgdGhlIEJTT04gTWluS2V5IHR5cGUuXG4gKlxuICogQGNsYXNzXG4gKiBAcmV0dXJuIHtNaW5LZXl9IEEgTWluS2V5IGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIE1pbktleSgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE1pbktleSkpIHJldHVybiBuZXcgTWluS2V5KCk7XG5cbiAgdGhpcy5fYnNvbnR5cGUgPSAnTWluS2V5Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNaW5LZXk7XG5tb2R1bGUuZXhwb3J0cy5NaW5LZXkgPSBNaW5LZXk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/***/ (function(module, exports) {

eval("/**\n * A class representation of the BSON MaxKey type.\n *\n * @class\n * @return {MaxKey} A MaxKey instance\n */\nfunction MaxKey() {\n  if (!(this instanceof MaxKey)) return new MaxKey();\n\n  this._bsontype = 'MaxKey';\n}\n\nmodule.exports = MaxKey;\nmodule.exports.MaxKey = MaxKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL2Jzb24vbGliL2Jzb24vbWF4X2tleS5qcz9kNTU4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EiLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgY2xhc3MgcmVwcmVzZW50YXRpb24gb2YgdGhlIEJTT04gTWF4S2V5IHR5cGUuXG4gKlxuICogQGNsYXNzXG4gKiBAcmV0dXJuIHtNYXhLZXl9IEEgTWF4S2V5IGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIE1heEtleSgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE1heEtleSkpIHJldHVybiBuZXcgTWF4S2V5KCk7XG5cbiAgdGhpcy5fYnNvbnR5cGUgPSAnTWF4S2V5Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNYXhLZXk7XG5tb2R1bGUuZXhwb3J0cy5NYXhLZXkgPSBNYXhLZXk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, exports) {

eval("/**\n * A class representation of the BSON DBRef type.\n *\n * @class\n * @param {string} namespace the collection name.\n * @param {ObjectID} oid the reference ObjectID.\n * @param {string} [db] optional db name, if omitted the reference is local to the current db.\n * @return {DBRef}\n */\nfunction DBRef(namespace, oid, db) {\n  if (!(this instanceof DBRef)) return new DBRef(namespace, oid, db);\n\n  this._bsontype = 'DBRef';\n  this.namespace = namespace;\n  this.oid = oid;\n  this.db = db;\n}\n\n/**\n * @ignore\n * @api private\n */\nDBRef.prototype.toJSON = function() {\n  return {\n    $ref: this.namespace,\n    $id: this.oid,\n    $db: this.db == null ? '' : this.db\n  };\n};\n\nmodule.exports = DBRef;\nmodule.exports.DBRef = DBRef;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL2Jzb24vbGliL2Jzb24vZGJfcmVmLmpzPzY2MjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsT0FBTztBQUNsQixZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwiZmlsZSI6IjIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIGNsYXNzIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBCU09OIERCUmVmIHR5cGUuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZXNwYWNlIHRoZSBjb2xsZWN0aW9uIG5hbWUuXG4gKiBAcGFyYW0ge09iamVjdElEfSBvaWQgdGhlIHJlZmVyZW5jZSBPYmplY3RJRC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbZGJdIG9wdGlvbmFsIGRiIG5hbWUsIGlmIG9taXR0ZWQgdGhlIHJlZmVyZW5jZSBpcyBsb2NhbCB0byB0aGUgY3VycmVudCBkYi5cbiAqIEByZXR1cm4ge0RCUmVmfVxuICovXG5mdW5jdGlvbiBEQlJlZihuYW1lc3BhY2UsIG9pZCwgZGIpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIERCUmVmKSkgcmV0dXJuIG5ldyBEQlJlZihuYW1lc3BhY2UsIG9pZCwgZGIpO1xuXG4gIHRoaXMuX2Jzb250eXBlID0gJ0RCUmVmJztcbiAgdGhpcy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gIHRoaXMub2lkID0gb2lkO1xuICB0aGlzLmRiID0gZGI7XG59XG5cbi8qKlxuICogQGlnbm9yZVxuICogQGFwaSBwcml2YXRlXG4gKi9cbkRCUmVmLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICAkcmVmOiB0aGlzLm5hbWVzcGFjZSxcbiAgICAkaWQ6IHRoaXMub2lkLFxuICAgICRkYjogdGhpcy5kYiA9PSBudWxsID8gJycgOiB0aGlzLmRiXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERCUmVmO1xubW9kdWxlLmV4cG9ydHMuREJSZWYgPSBEQlJlZjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Module dependencies.\n * @ignore\n */\n\n// Test if we're in Node via presence of \"global\" not absence of \"window\"\n// to support hybrid environments like Electron\nif (typeof global !== 'undefined') {\n  var Buffer = __webpack_require__(22).Buffer; // TODO just use global Buffer\n}\n\nvar utils = __webpack_require__(11);\n\n/**\n * A class representation of the BSON Binary type.\n *\n * Sub types\n *  - **BSON.BSON_BINARY_SUBTYPE_DEFAULT**, default BSON type.\n *  - **BSON.BSON_BINARY_SUBTYPE_FUNCTION**, BSON function type.\n *  - **BSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY**, BSON byte array type.\n *  - **BSON.BSON_BINARY_SUBTYPE_UUID**, BSON uuid type.\n *  - **BSON.BSON_BINARY_SUBTYPE_MD5**, BSON md5 type.\n *  - **BSON.BSON_BINARY_SUBTYPE_USER_DEFINED**, BSON user defined type.\n *\n * @class\n * @param {Buffer} buffer a buffer object containing the binary data.\n * @param {Number} [subType] the option binary type.\n * @return {Binary}\n */\nfunction Binary(buffer, subType) {\n  if (!(this instanceof Binary)) return new Binary(buffer, subType);\n\n  if (\n    buffer != null &&\n    !(typeof buffer === 'string') &&\n    !Buffer.isBuffer(buffer) &&\n    !(buffer instanceof Uint8Array) &&\n    !Array.isArray(buffer)\n  ) {\n    throw new Error('only String, Buffer, Uint8Array or Array accepted');\n  }\n\n  this._bsontype = 'Binary';\n\n  if (buffer instanceof Number) {\n    this.sub_type = buffer;\n    this.position = 0;\n  } else {\n    this.sub_type = subType == null ? BSON_BINARY_SUBTYPE_DEFAULT : subType;\n    this.position = 0;\n  }\n\n  if (buffer != null && !(buffer instanceof Number)) {\n    // Only accept Buffer, Uint8Array or Arrays\n    if (typeof buffer === 'string') {\n      // Different ways of writing the length of the string for the different types\n      if (typeof Buffer !== 'undefined') {\n        this.buffer = utils.toBuffer(buffer);\n      } else if (\n        typeof Uint8Array !== 'undefined' ||\n        Object.prototype.toString.call(buffer) === '[object Array]'\n      ) {\n        this.buffer = writeStringToArray(buffer);\n      } else {\n        throw new Error('only String, Buffer, Uint8Array or Array accepted');\n      }\n    } else {\n      this.buffer = buffer;\n    }\n    this.position = buffer.length;\n  } else {\n    if (typeof Buffer !== 'undefined') {\n      this.buffer = utils.allocBuffer(Binary.BUFFER_SIZE);\n    } else if (typeof Uint8Array !== 'undefined') {\n      this.buffer = new Uint8Array(new ArrayBuffer(Binary.BUFFER_SIZE));\n    } else {\n      this.buffer = new Array(Binary.BUFFER_SIZE);\n    }\n    // Set position to start of buffer\n    this.position = 0;\n  }\n}\n\n/**\n * Updates this binary with byte_value.\n *\n * @method\n * @param {string} byte_value a single byte we wish to write.\n */\nBinary.prototype.put = function put(byte_value) {\n  // If it's a string and a has more than one character throw an error\n  if (byte_value['length'] != null && typeof byte_value !== 'number' && byte_value.length !== 1)\n    throw new Error('only accepts single character String, Uint8Array or Array');\n  if ((typeof byte_value !== 'number' && byte_value < 0) || byte_value > 255)\n    throw new Error('only accepts number in a valid unsigned byte range 0-255');\n\n  // Decode the byte value once\n  var decoded_byte = null;\n  if (typeof byte_value === 'string') {\n    decoded_byte = byte_value.charCodeAt(0);\n  } else if (byte_value['length'] != null) {\n    decoded_byte = byte_value[0];\n  } else {\n    decoded_byte = byte_value;\n  }\n\n  if (this.buffer.length > this.position) {\n    this.buffer[this.position++] = decoded_byte;\n  } else {\n    if (typeof Buffer !== 'undefined' && Buffer.isBuffer(this.buffer)) {\n      // Create additional overflow buffer\n      var buffer = utils.allocBuffer(Binary.BUFFER_SIZE + this.buffer.length);\n      // Combine the two buffers together\n      this.buffer.copy(buffer, 0, 0, this.buffer.length);\n      this.buffer = buffer;\n      this.buffer[this.position++] = decoded_byte;\n    } else {\n      buffer = null;\n      // Create a new buffer (typed or normal array)\n      if (Object.prototype.toString.call(this.buffer) === '[object Uint8Array]') {\n        buffer = new Uint8Array(new ArrayBuffer(Binary.BUFFER_SIZE + this.buffer.length));\n      } else {\n        buffer = new Array(Binary.BUFFER_SIZE + this.buffer.length);\n      }\n\n      // We need to copy all the content to the new array\n      for (var i = 0; i < this.buffer.length; i++) {\n        buffer[i] = this.buffer[i];\n      }\n\n      // Reassign the buffer\n      this.buffer = buffer;\n      // Write the byte\n      this.buffer[this.position++] = decoded_byte;\n    }\n  }\n};\n\n/**\n * Writes a buffer or string to the binary.\n *\n * @method\n * @param {(Buffer|string)} string a string or buffer to be written to the Binary BSON object.\n * @param {number} offset specify the binary of where to write the content.\n * @return {null}\n */\nBinary.prototype.write = function write(string, offset) {\n  offset = typeof offset === 'number' ? offset : this.position;\n\n  // If the buffer is to small let's extend the buffer\n  if (this.buffer.length < offset + string.length) {\n    var buffer = null;\n    // If we are in node.js\n    if (typeof Buffer !== 'undefined' && Buffer.isBuffer(this.buffer)) {\n      buffer = utils.allocBuffer(this.buffer.length + string.length);\n      this.buffer.copy(buffer, 0, 0, this.buffer.length);\n    } else if (Object.prototype.toString.call(this.buffer) === '[object Uint8Array]') {\n      // Create a new buffer\n      buffer = new Uint8Array(new ArrayBuffer(this.buffer.length + string.length));\n      // Copy the content\n      for (var i = 0; i < this.position; i++) {\n        buffer[i] = this.buffer[i];\n      }\n    }\n\n    // Assign the new buffer\n    this.buffer = buffer;\n  }\n\n  if (typeof Buffer !== 'undefined' && Buffer.isBuffer(string) && Buffer.isBuffer(this.buffer)) {\n    string.copy(this.buffer, offset, 0, string.length);\n    this.position = offset + string.length > this.position ? offset + string.length : this.position;\n    // offset = string.length\n  } else if (\n    typeof Buffer !== 'undefined' &&\n    typeof string === 'string' &&\n    Buffer.isBuffer(this.buffer)\n  ) {\n    this.buffer.write(string, offset, 'binary');\n    this.position = offset + string.length > this.position ? offset + string.length : this.position;\n    // offset = string.length;\n  } else if (\n    Object.prototype.toString.call(string) === '[object Uint8Array]' ||\n    (Object.prototype.toString.call(string) === '[object Array]' && typeof string !== 'string')\n  ) {\n    for (i = 0; i < string.length; i++) {\n      this.buffer[offset++] = string[i];\n    }\n\n    this.position = offset > this.position ? offset : this.position;\n  } else if (typeof string === 'string') {\n    for (i = 0; i < string.length; i++) {\n      this.buffer[offset++] = string.charCodeAt(i);\n    }\n\n    this.position = offset > this.position ? offset : this.position;\n  }\n};\n\n/**\n * Reads **length** bytes starting at **position**.\n *\n * @method\n * @param {number} position read from the given position in the Binary.\n * @param {number} length the number of bytes to read.\n * @return {Buffer}\n */\nBinary.prototype.read = function read(position, length) {\n  length = length && length > 0 ? length : this.position;\n\n  // Let's return the data based on the type we have\n  if (this.buffer['slice']) {\n    return this.buffer.slice(position, position + length);\n  } else {\n    // Create a buffer to keep the result\n    var buffer =\n      typeof Uint8Array !== 'undefined'\n        ? new Uint8Array(new ArrayBuffer(length))\n        : new Array(length);\n    for (var i = 0; i < length; i++) {\n      buffer[i] = this.buffer[position++];\n    }\n  }\n  // Return the buffer\n  return buffer;\n};\n\n/**\n * Returns the value of this binary as a string.\n *\n * @method\n * @return {string}\n */\nBinary.prototype.value = function value(asRaw) {\n  asRaw = asRaw == null ? false : asRaw;\n\n  // Optimize to serialize for the situation where the data == size of buffer\n  if (\n    asRaw &&\n    typeof Buffer !== 'undefined' &&\n    Buffer.isBuffer(this.buffer) &&\n    this.buffer.length === this.position\n  )\n    return this.buffer;\n\n  // If it's a node.js buffer object\n  if (typeof Buffer !== 'undefined' && Buffer.isBuffer(this.buffer)) {\n    return asRaw\n      ? this.buffer.slice(0, this.position)\n      : this.buffer.toString('binary', 0, this.position);\n  } else {\n    if (asRaw) {\n      // we support the slice command use it\n      if (this.buffer['slice'] != null) {\n        return this.buffer.slice(0, this.position);\n      } else {\n        // Create a new buffer to copy content to\n        var newBuffer =\n          Object.prototype.toString.call(this.buffer) === '[object Uint8Array]'\n            ? new Uint8Array(new ArrayBuffer(this.position))\n            : new Array(this.position);\n        // Copy content\n        for (var i = 0; i < this.position; i++) {\n          newBuffer[i] = this.buffer[i];\n        }\n        // Return the buffer\n        return newBuffer;\n      }\n    } else {\n      return convertArraytoUtf8BinaryString(this.buffer, 0, this.position);\n    }\n  }\n};\n\n/**\n * Length.\n *\n * @method\n * @return {number} the length of the binary.\n */\nBinary.prototype.length = function length() {\n  return this.position;\n};\n\n/**\n * @ignore\n */\nBinary.prototype.toJSON = function() {\n  return this.buffer != null ? this.buffer.toString('base64') : '';\n};\n\n/**\n * @ignore\n */\nBinary.prototype.toString = function(format) {\n  return this.buffer != null ? this.buffer.slice(0, this.position).toString(format) : '';\n};\n\n/**\n * Binary default subtype\n * @ignore\n */\nvar BSON_BINARY_SUBTYPE_DEFAULT = 0;\n\n/**\n * @ignore\n */\nvar writeStringToArray = function(data) {\n  // Create a buffer\n  var buffer =\n    typeof Uint8Array !== 'undefined'\n      ? new Uint8Array(new ArrayBuffer(data.length))\n      : new Array(data.length);\n  // Write the content to the buffer\n  for (var i = 0; i < data.length; i++) {\n    buffer[i] = data.charCodeAt(i);\n  }\n  // Write the string to the buffer\n  return buffer;\n};\n\n/**\n * Convert Array ot Uint8Array to Binary String\n *\n * @ignore\n */\nvar convertArraytoUtf8BinaryString = function(byteArray, startIndex, endIndex) {\n  var result = '';\n  for (var i = startIndex; i < endIndex; i++) {\n    result = result + String.fromCharCode(byteArray[i]);\n  }\n  return result;\n};\n\nBinary.BUFFER_SIZE = 256;\n\n/**\n * Default BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_DEFAULT = 0;\n/**\n * Function BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_FUNCTION = 1;\n/**\n * Byte Array BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_BYTE_ARRAY = 2;\n/**\n * OLD UUID BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_UUID_OLD = 3;\n/**\n * UUID BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_UUID = 4;\n/**\n * MD5 BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_MD5 = 5;\n/**\n * User BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_USER_DEFINED = 128;\n\n/**\n * Expose.\n */\nmodule.exports = Binary;\nmodule.exports.Binary = Binary;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/***/ (function(module, exports) {

eval("module.exports = require(\"buffer\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0L2V4dGVybmFsIFwiYnVmZmVyXCI/YmZmYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIyMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImJ1ZmZlclwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Long = __webpack_require__(7).Long,\n  Double = __webpack_require__(8).Double,\n  Timestamp = __webpack_require__(9).Timestamp,\n  ObjectID = __webpack_require__(10).ObjectID,\n  Symbol = __webpack_require__(14).Symbol,\n  Code = __webpack_require__(16).Code,\n  MinKey = __webpack_require__(18).MinKey,\n  MaxKey = __webpack_require__(19).MaxKey,\n  Decimal128 = __webpack_require__(17),\n  Int32 = __webpack_require__(15),\n  DBRef = __webpack_require__(20).DBRef,\n  BSONRegExp = __webpack_require__(13).BSONRegExp,\n  Binary = __webpack_require__(21).Binary;\n\nvar utils = __webpack_require__(11);\n\nvar deserialize = function(buffer, options, isArray) {\n  options = options == null ? {} : options;\n  var index = options && options.index ? options.index : 0;\n  // Read the document size\n  var size =\n    buffer[index] |\n    (buffer[index + 1] << 8) |\n    (buffer[index + 2] << 16) |\n    (buffer[index + 3] << 24);\n\n  // Ensure buffer is valid size\n  if (size < 5 || buffer.length < size || size + index > buffer.length) {\n    throw new Error('corrupt bson message');\n  }\n\n  // Illegal end value\n  if (buffer[index + size - 1] !== 0) {\n    throw new Error(\"One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00\");\n  }\n\n  // Start deserializtion\n  return deserializeObject(buffer, index, options, isArray);\n};\n\nvar deserializeObject = function(buffer, index, options, isArray) {\n  var evalFunctions = options['evalFunctions'] == null ? false : options['evalFunctions'];\n  var cacheFunctions = options['cacheFunctions'] == null ? false : options['cacheFunctions'];\n  var cacheFunctionsCrc32 =\n    options['cacheFunctionsCrc32'] == null ? false : options['cacheFunctionsCrc32'];\n\n  if (!cacheFunctionsCrc32) var crc32 = null;\n\n  var fieldsAsRaw = options['fieldsAsRaw'] == null ? null : options['fieldsAsRaw'];\n\n  // Return raw bson buffer instead of parsing it\n  var raw = options['raw'] == null ? false : options['raw'];\n\n  // Return BSONRegExp objects instead of native regular expressions\n  var bsonRegExp = typeof options['bsonRegExp'] === 'boolean' ? options['bsonRegExp'] : false;\n\n  // Controls the promotion of values vs wrapper classes\n  var promoteBuffers = options['promoteBuffers'] == null ? false : options['promoteBuffers'];\n  var promoteLongs = options['promoteLongs'] == null ? true : options['promoteLongs'];\n  var promoteValues = options['promoteValues'] == null ? true : options['promoteValues'];\n\n  // Set the start index\n  var startIndex = index;\n\n  // Validate that we have at least 4 bytes of buffer\n  if (buffer.length < 5) throw new Error('corrupt bson message < 5 bytes long');\n\n  // Read the document size\n  var size =\n    buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n\n  // Ensure buffer is valid size\n  if (size < 5 || size > buffer.length) throw new Error('corrupt bson message');\n\n  // Create holding object\n  var object = isArray ? [] : {};\n  // Used for arrays to skip having to perform utf8 decoding\n  var arrayIndex = 0;\n\n  var done = false;\n\n  // While we have more left data left keep parsing\n  // while (buffer[index + 1] !== 0) {\n  while (!done) {\n    // Read the type\n    var elementType = buffer[index++];\n    // If we get a zero it's the last byte, exit\n    if (elementType === 0) break;\n\n    // Get the start search index\n    var i = index;\n    // Locate the end of the c string\n    while (buffer[i] !== 0x00 && i < buffer.length) {\n      i++;\n    }\n\n    // If are at the end of the buffer there is a problem with the document\n    if (i >= buffer.length) throw new Error('Bad BSON Document: illegal CString');\n    var name = isArray ? arrayIndex++ : buffer.toString('utf8', index, i);\n\n    index = i + 1;\n\n    if (elementType === BSON.BSON_DATA_STRING) {\n      var stringSize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      if (\n        stringSize <= 0 ||\n        stringSize > buffer.length - index ||\n        buffer[index + stringSize - 1] !== 0\n      )\n        throw new Error('bad string length in bson');\n      object[name] = buffer.toString('utf8', index, index + stringSize - 1);\n      index = index + stringSize;\n    } else if (elementType === BSON.BSON_DATA_OID) {\n      var oid = utils.allocBuffer(12);\n      buffer.copy(oid, 0, index, index + 12);\n      object[name] = new ObjectID(oid);\n      index = index + 12;\n    } else if (elementType === BSON.BSON_DATA_INT && promoteValues === false) {\n      object[name] = new Int32(\n        buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24)\n      );\n    } else if (elementType === BSON.BSON_DATA_INT) {\n      object[name] =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n    } else if (elementType === BSON.BSON_DATA_NUMBER && promoteValues === false) {\n      object[name] = new Double(buffer.readDoubleLE(index));\n      index = index + 8;\n    } else if (elementType === BSON.BSON_DATA_NUMBER) {\n      object[name] = buffer.readDoubleLE(index);\n      index = index + 8;\n    } else if (elementType === BSON.BSON_DATA_DATE) {\n      var lowBits =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      var highBits =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      object[name] = new Date(new Long(lowBits, highBits).toNumber());\n    } else if (elementType === BSON.BSON_DATA_BOOLEAN) {\n      if (buffer[index] !== 0 && buffer[index] !== 1) throw new Error('illegal boolean type value');\n      object[name] = buffer[index++] === 1;\n    } else if (elementType === BSON.BSON_DATA_OBJECT) {\n      var _index = index;\n      var objectSize =\n        buffer[index] |\n        (buffer[index + 1] << 8) |\n        (buffer[index + 2] << 16) |\n        (buffer[index + 3] << 24);\n      if (objectSize <= 0 || objectSize > buffer.length - index)\n        throw new Error('bad embedded document length in bson');\n\n      // We have a raw value\n      if (raw) {\n        object[name] = buffer.slice(index, index + objectSize);\n      } else {\n        object[name] = deserializeObject(buffer, _index, options, false);\n      }\n\n      index = index + objectSize;\n    } else if (elementType === BSON.BSON_DATA_ARRAY) {\n      _index = index;\n      objectSize =\n        buffer[index] |\n        (buffer[index + 1] << 8) |\n        (buffer[index + 2] << 16) |\n        (buffer[index + 3] << 24);\n      var arrayOptions = options;\n\n      // Stop index\n      var stopIndex = index + objectSize;\n\n      // All elements of array to be returned as raw bson\n      if (fieldsAsRaw && fieldsAsRaw[name]) {\n        arrayOptions = {};\n        for (var n in options) arrayOptions[n] = options[n];\n        arrayOptions['raw'] = true;\n      }\n\n      object[name] = deserializeObject(buffer, _index, arrayOptions, true);\n      index = index + objectSize;\n\n      if (buffer[index - 1] !== 0) throw new Error('invalid array terminator byte');\n      if (index !== stopIndex) throw new Error('corrupted array bson');\n    } else if (elementType === BSON.BSON_DATA_UNDEFINED) {\n      object[name] = undefined;\n    } else if (elementType === BSON.BSON_DATA_NULL) {\n      object[name] = null;\n    } else if (elementType === BSON.BSON_DATA_LONG) {\n      // Unpack the low and high bits\n      lowBits =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      highBits =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      var long = new Long(lowBits, highBits);\n      // Promote the long if possible\n      if (promoteLongs && promoteValues === true) {\n        object[name] =\n          long.lessThanOrEqual(JS_INT_MAX_LONG) && long.greaterThanOrEqual(JS_INT_MIN_LONG)\n            ? long.toNumber()\n            : long;\n      } else {\n        object[name] = long;\n      }\n    } else if (elementType === BSON.BSON_DATA_DECIMAL128) {\n      // Buffer to contain the decimal bytes\n      var bytes = utils.allocBuffer(16);\n      // Copy the next 16 bytes into the bytes buffer\n      buffer.copy(bytes, 0, index, index + 16);\n      // Update index\n      index = index + 16;\n      // Assign the new Decimal128 value\n      var decimal128 = new Decimal128(bytes);\n      // If we have an alternative mapper use that\n      object[name] = decimal128.toObject ? decimal128.toObject() : decimal128;\n    } else if (elementType === BSON.BSON_DATA_BINARY) {\n      var binarySize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      var totalBinarySize = binarySize;\n      var subType = buffer[index++];\n\n      // Did we have a negative binary size, throw\n      if (binarySize < 0) throw new Error('Negative binary type element size found');\n\n      // Is the length longer than the document\n      if (binarySize > buffer.length) throw new Error('Binary type size larger than document size');\n\n      // Decode as raw Buffer object if options specifies it\n      if (buffer['slice'] != null) {\n        // If we have subtype 2 skip the 4 bytes for the size\n        if (subType === Binary.SUBTYPE_BYTE_ARRAY) {\n          binarySize =\n            buffer[index++] |\n            (buffer[index++] << 8) |\n            (buffer[index++] << 16) |\n            (buffer[index++] << 24);\n          if (binarySize < 0)\n            throw new Error('Negative binary type element size found for subtype 0x02');\n          if (binarySize > totalBinarySize - 4)\n            throw new Error('Binary type with subtype 0x02 contains to long binary size');\n          if (binarySize < totalBinarySize - 4)\n            throw new Error('Binary type with subtype 0x02 contains to short binary size');\n        }\n\n        if (promoteBuffers && promoteValues) {\n          object[name] = buffer.slice(index, index + binarySize);\n        } else {\n          object[name] = new Binary(buffer.slice(index, index + binarySize), subType);\n        }\n      } else {\n        var _buffer =\n          typeof Uint8Array !== 'undefined'\n            ? new Uint8Array(new ArrayBuffer(binarySize))\n            : new Array(binarySize);\n        // If we have subtype 2 skip the 4 bytes for the size\n        if (subType === Binary.SUBTYPE_BYTE_ARRAY) {\n          binarySize =\n            buffer[index++] |\n            (buffer[index++] << 8) |\n            (buffer[index++] << 16) |\n            (buffer[index++] << 24);\n          if (binarySize < 0)\n            throw new Error('Negative binary type element size found for subtype 0x02');\n          if (binarySize > totalBinarySize - 4)\n            throw new Error('Binary type with subtype 0x02 contains to long binary size');\n          if (binarySize < totalBinarySize - 4)\n            throw new Error('Binary type with subtype 0x02 contains to short binary size');\n        }\n\n        // Copy the data\n        for (i = 0; i < binarySize; i++) {\n          _buffer[i] = buffer[index + i];\n        }\n\n        if (promoteBuffers && promoteValues) {\n          object[name] = _buffer;\n        } else {\n          object[name] = new Binary(_buffer, subType);\n        }\n      }\n\n      // Update the index\n      index = index + binarySize;\n    } else if (elementType === BSON.BSON_DATA_REGEXP && bsonRegExp === false) {\n      // Get the start search index\n      i = index;\n      // Locate the end of the c string\n      while (buffer[i] !== 0x00 && i < buffer.length) {\n        i++;\n      }\n      // If are at the end of the buffer there is a problem with the document\n      if (i >= buffer.length) throw new Error('Bad BSON Document: illegal CString');\n      // Return the C string\n      var source = buffer.toString('utf8', index, i);\n      // Create the regexp\n      index = i + 1;\n\n      // Get the start search index\n      i = index;\n      // Locate the end of the c string\n      while (buffer[i] !== 0x00 && i < buffer.length) {\n        i++;\n      }\n      // If are at the end of the buffer there is a problem with the document\n      if (i >= buffer.length) throw new Error('Bad BSON Document: illegal CString');\n      // Return the C string\n      var regExpOptions = buffer.toString('utf8', index, i);\n      index = i + 1;\n\n      // For each option add the corresponding one for javascript\n      var optionsArray = new Array(regExpOptions.length);\n\n      // Parse options\n      for (i = 0; i < regExpOptions.length; i++) {\n        switch (regExpOptions[i]) {\n          case 'm':\n            optionsArray[i] = 'm';\n            break;\n          case 's':\n            optionsArray[i] = 'g';\n            break;\n          case 'i':\n            optionsArray[i] = 'i';\n            break;\n        }\n      }\n\n      object[name] = new RegExp(source, optionsArray.join(''));\n    } else if (elementType === BSON.BSON_DATA_REGEXP && bsonRegExp === true) {\n      // Get the start search index\n      i = index;\n      // Locate the end of the c string\n      while (buffer[i] !== 0x00 && i < buffer.length) {\n        i++;\n      }\n      // If are at the end of the buffer there is a problem with the document\n      if (i >= buffer.length) throw new Error('Bad BSON Document: illegal CString');\n      // Return the C string\n      source = buffer.toString('utf8', index, i);\n      index = i + 1;\n\n      // Get the start search index\n      i = index;\n      // Locate the end of the c string\n      while (buffer[i] !== 0x00 && i < buffer.length) {\n        i++;\n      }\n      // If are at the end of the buffer there is a problem with the document\n      if (i >= buffer.length) throw new Error('Bad BSON Document: illegal CString');\n      // Return the C string\n      regExpOptions = buffer.toString('utf8', index, i);\n      index = i + 1;\n\n      // Set the object\n      object[name] = new BSONRegExp(source, regExpOptions);\n    } else if (elementType === BSON.BSON_DATA_SYMBOL) {\n      stringSize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      if (\n        stringSize <= 0 ||\n        stringSize > buffer.length - index ||\n        buffer[index + stringSize - 1] !== 0\n      )\n        throw new Error('bad string length in bson');\n      object[name] = new Symbol(buffer.toString('utf8', index, index + stringSize - 1));\n      index = index + stringSize;\n    } else if (elementType === BSON.BSON_DATA_TIMESTAMP) {\n      lowBits =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      highBits =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      object[name] = new Timestamp(lowBits, highBits);\n    } else if (elementType === BSON.BSON_DATA_MIN_KEY) {\n      object[name] = new MinKey();\n    } else if (elementType === BSON.BSON_DATA_MAX_KEY) {\n      object[name] = new MaxKey();\n    } else if (elementType === BSON.BSON_DATA_CODE) {\n      stringSize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      if (\n        stringSize <= 0 ||\n        stringSize > buffer.length - index ||\n        buffer[index + stringSize - 1] !== 0\n      )\n        throw new Error('bad string length in bson');\n      var functionString = buffer.toString('utf8', index, index + stringSize - 1);\n\n      // If we are evaluating the functions\n      if (evalFunctions) {\n        // If we have cache enabled let's look for the md5 of the function in the cache\n        if (cacheFunctions) {\n          var hash = cacheFunctionsCrc32 ? crc32(functionString) : functionString;\n          // Got to do this to avoid V8 deoptimizing the call due to finding eval\n          object[name] = isolateEvalWithHash(functionCache, hash, functionString, object);\n        } else {\n          object[name] = isolateEval(functionString);\n        }\n      } else {\n        object[name] = new Code(functionString);\n      }\n\n      // Update parse index position\n      index = index + stringSize;\n    } else if (elementType === BSON.BSON_DATA_CODE_W_SCOPE) {\n      var totalSize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n\n      // Element cannot be shorter than totalSize + stringSize + documentSize + terminator\n      if (totalSize < 4 + 4 + 4 + 1) {\n        throw new Error('code_w_scope total size shorter minimum expected length');\n      }\n\n      // Get the code string size\n      stringSize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      // Check if we have a valid string\n      if (\n        stringSize <= 0 ||\n        stringSize > buffer.length - index ||\n        buffer[index + stringSize - 1] !== 0\n      )\n        throw new Error('bad string length in bson');\n\n      // Javascript function\n      functionString = buffer.toString('utf8', index, index + stringSize - 1);\n      // Update parse index position\n      index = index + stringSize;\n      // Parse the element\n      _index = index;\n      // Decode the size of the object document\n      objectSize =\n        buffer[index] |\n        (buffer[index + 1] << 8) |\n        (buffer[index + 2] << 16) |\n        (buffer[index + 3] << 24);\n      // Decode the scope object\n      var scopeObject = deserializeObject(buffer, _index, options, false);\n      // Adjust the index\n      index = index + objectSize;\n\n      // Check if field length is to short\n      if (totalSize < 4 + 4 + objectSize + stringSize) {\n        throw new Error('code_w_scope total size is to short, truncating scope');\n      }\n\n      // Check if totalSize field is to long\n      if (totalSize > 4 + 4 + objectSize + stringSize) {\n        throw new Error('code_w_scope total size is to long, clips outer document');\n      }\n\n      // If we are evaluating the functions\n      if (evalFunctions) {\n        // If we have cache enabled let's look for the md5 of the function in the cache\n        if (cacheFunctions) {\n          hash = cacheFunctionsCrc32 ? crc32(functionString) : functionString;\n          // Got to do this to avoid V8 deoptimizing the call due to finding eval\n          object[name] = isolateEvalWithHash(functionCache, hash, functionString, object);\n        } else {\n          object[name] = isolateEval(functionString);\n        }\n\n        object[name].scope = scopeObject;\n      } else {\n        object[name] = new Code(functionString, scopeObject);\n      }\n    } else if (elementType === BSON.BSON_DATA_DBPOINTER) {\n      // Get the code string size\n      stringSize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      // Check if we have a valid string\n      if (\n        stringSize <= 0 ||\n        stringSize > buffer.length - index ||\n        buffer[index + stringSize - 1] !== 0\n      )\n        throw new Error('bad string length in bson');\n      // Namespace\n      var namespace = buffer.toString('utf8', index, index + stringSize - 1);\n      // Update parse index position\n      index = index + stringSize;\n\n      // Read the oid\n      var oidBuffer = utils.allocBuffer(12);\n      buffer.copy(oidBuffer, 0, index, index + 12);\n      oid = new ObjectID(oidBuffer);\n\n      // Update the index\n      index = index + 12;\n\n      // Split the namespace\n      var parts = namespace.split('.');\n      var db = parts.shift();\n      var collection = parts.join('.');\n      // Upgrade to DBRef type\n      object[name] = new DBRef(collection, oid, db);\n    } else {\n      throw new Error(\n        'Detected unknown BSON type ' +\n          elementType.toString(16) +\n          ' for fieldname \"' +\n          name +\n          '\", are you using the latest BSON parser'\n      );\n    }\n  }\n\n  // Check if the deserialization was against a valid array/object\n  if (size !== index - startIndex) {\n    if (isArray) throw new Error('corrupt array bson');\n    throw new Error('corrupt object bson');\n  }\n\n  // Check if we have a db ref object\n  if (object['$id'] != null) object = new DBRef(object['$ref'], object['$id'], object['$db']);\n  return object;\n};\n\n/**\n * Ensure eval is isolated.\n *\n * @ignore\n * @api private\n */\nvar isolateEvalWithHash = function(functionCache, hash, functionString, object) {\n  // Contains the value we are going to set\n  var value = null;\n\n  // Check for cache hit, eval if missing and return cached function\n  if (functionCache[hash] == null) {\n    eval('value = ' + functionString);\n    functionCache[hash] = value;\n  }\n  // Set the object\n  return functionCache[hash].bind(object);\n};\n\n/**\n * Ensure eval is isolated.\n *\n * @ignore\n * @api private\n */\nvar isolateEval = function(functionString) {\n  // Contains the value we are going to set\n  var value = null;\n  // Eval the function\n  eval('value = ' + functionString);\n  return value;\n};\n\nvar BSON = {};\n\n/**\n * Contains the function cache if we have that enable to allow for avoiding the eval step on each deserialization, comparison is by md5\n *\n * @ignore\n * @api private\n */\nvar functionCache = (BSON.functionCache = {});\n\n/**\n * Number BSON Type\n *\n * @classconstant BSON_DATA_NUMBER\n **/\nBSON.BSON_DATA_NUMBER = 1;\n/**\n * String BSON Type\n *\n * @classconstant BSON_DATA_STRING\n **/\nBSON.BSON_DATA_STRING = 2;\n/**\n * Object BSON Type\n *\n * @classconstant BSON_DATA_OBJECT\n **/\nBSON.BSON_DATA_OBJECT = 3;\n/**\n * Array BSON Type\n *\n * @classconstant BSON_DATA_ARRAY\n **/\nBSON.BSON_DATA_ARRAY = 4;\n/**\n * Binary BSON Type\n *\n * @classconstant BSON_DATA_BINARY\n **/\nBSON.BSON_DATA_BINARY = 5;\n/**\n * Binary BSON Type\n *\n * @classconstant BSON_DATA_UNDEFINED\n **/\nBSON.BSON_DATA_UNDEFINED = 6;\n/**\n * ObjectID BSON Type\n *\n * @classconstant BSON_DATA_OID\n **/\nBSON.BSON_DATA_OID = 7;\n/**\n * Boolean BSON Type\n *\n * @classconstant BSON_DATA_BOOLEAN\n **/\nBSON.BSON_DATA_BOOLEAN = 8;\n/**\n * Date BSON Type\n *\n * @classconstant BSON_DATA_DATE\n **/\nBSON.BSON_DATA_DATE = 9;\n/**\n * null BSON Type\n *\n * @classconstant BSON_DATA_NULL\n **/\nBSON.BSON_DATA_NULL = 10;\n/**\n * RegExp BSON Type\n *\n * @classconstant BSON_DATA_REGEXP\n **/\nBSON.BSON_DATA_REGEXP = 11;\n/**\n * Code BSON Type\n *\n * @classconstant BSON_DATA_DBPOINTER\n **/\nBSON.BSON_DATA_DBPOINTER = 12;\n/**\n * Code BSON Type\n *\n * @classconstant BSON_DATA_CODE\n **/\nBSON.BSON_DATA_CODE = 13;\n/**\n * Symbol BSON Type\n *\n * @classconstant BSON_DATA_SYMBOL\n **/\nBSON.BSON_DATA_SYMBOL = 14;\n/**\n * Code with Scope BSON Type\n *\n * @classconstant BSON_DATA_CODE_W_SCOPE\n **/\nBSON.BSON_DATA_CODE_W_SCOPE = 15;\n/**\n * 32 bit Integer BSON Type\n *\n * @classconstant BSON_DATA_INT\n **/\nBSON.BSON_DATA_INT = 16;\n/**\n * Timestamp BSON Type\n *\n * @classconstant BSON_DATA_TIMESTAMP\n **/\nBSON.BSON_DATA_TIMESTAMP = 17;\n/**\n * Long BSON Type\n *\n * @classconstant BSON_DATA_LONG\n **/\nBSON.BSON_DATA_LONG = 18;\n/**\n * Long BSON Type\n *\n * @classconstant BSON_DATA_DECIMAL128\n **/\nBSON.BSON_DATA_DECIMAL128 = 19;\n/**\n * MinKey BSON Type\n *\n * @classconstant BSON_DATA_MIN_KEY\n **/\nBSON.BSON_DATA_MIN_KEY = 0xff;\n/**\n * MaxKey BSON Type\n *\n * @classconstant BSON_DATA_MAX_KEY\n **/\nBSON.BSON_DATA_MAX_KEY = 0x7f;\n\n/**\n * Binary Default Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_DEFAULT\n **/\nBSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;\n/**\n * Binary Function Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_FUNCTION\n **/\nBSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;\n/**\n * Binary Byte Array Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY\n **/\nBSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;\n/**\n * Binary UUID Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_UUID\n **/\nBSON.BSON_BINARY_SUBTYPE_UUID = 3;\n/**\n * Binary MD5 Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_MD5\n **/\nBSON.BSON_BINARY_SUBTYPE_MD5 = 4;\n/**\n * Binary User Defined Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED\n **/\nBSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;\n\n// BSON MAX VALUES\nBSON.BSON_INT32_MAX = 0x7fffffff;\nBSON.BSON_INT32_MIN = -0x80000000;\n\nBSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;\nBSON.BSON_INT64_MIN = -Math.pow(2, 63);\n\n// JS MAX PRECISE VALUES\nBSON.JS_INT_MAX = 0x20000000000000; // Any integer up to 2^53 can be precisely represented by a double.\nBSON.JS_INT_MIN = -0x20000000000000; // Any integer down to -2^53 can be precisely represented by a double.\n\n// Internal long versions\nvar JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000); // Any integer up to 2^53 can be precisely represented by a double.\nvar JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000); // Any integer down to -2^53 can be precisely represented by a double.\n\nmodule.exports = deserialize;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar writeIEEE754 = __webpack_require__(25).writeIEEE754,\n  Long = __webpack_require__(7).Long,\n  Map = __webpack_require__(6),\n  Binary = __webpack_require__(21).Binary;\n\nvar normalizedFunctionString = __webpack_require__(11).normalizedFunctionString;\n\n// try {\n//   var _Buffer = Uint8Array;\n// } catch (e) {\n//   _Buffer = Buffer;\n// }\n\nvar regexp = /\\x00/; // eslint-disable-line no-control-regex\nvar ignoreKeys = ['$db', '$ref', '$id', '$clusterTime'];\n\n// To ensure that 0.4 of node works correctly\nvar isDate = function isDate(d) {\n  return typeof d === 'object' && Object.prototype.toString.call(d) === '[object Date]';\n};\n\nvar isRegExp = function isRegExp(d) {\n  return Object.prototype.toString.call(d) === '[object RegExp]';\n};\n\nvar serializeString = function(buffer, key, value, index, isArray) {\n  // Encode String type\n  buffer[index++] = BSON.BSON_DATA_STRING;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes + 1;\n  buffer[index - 1] = 0;\n  // Write the string\n  var size = buffer.write(value, index + 4, 'utf8');\n  // Write the size of the string to buffer\n  buffer[index + 3] = ((size + 1) >> 24) & 0xff;\n  buffer[index + 2] = ((size + 1) >> 16) & 0xff;\n  buffer[index + 1] = ((size + 1) >> 8) & 0xff;\n  buffer[index] = (size + 1) & 0xff;\n  // Update index\n  index = index + 4 + size;\n  // Write zero\n  buffer[index++] = 0;\n  return index;\n};\n\nvar serializeNumber = function(buffer, key, value, index, isArray) {\n  // We have an integer value\n  if (Math.floor(value) === value && value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {\n    // If the value fits in 32 bits encode as int, if it fits in a double\n    // encode it as a double, otherwise long\n    if (value >= BSON.BSON_INT32_MIN && value <= BSON.BSON_INT32_MAX) {\n      // Set int type 32 bits or less\n      buffer[index++] = BSON.BSON_DATA_INT;\n      // Number of written bytes\n      var numberOfWrittenBytes = !isArray\n        ? buffer.write(key, index, 'utf8')\n        : buffer.write(key, index, 'ascii');\n      // Encode the name\n      index = index + numberOfWrittenBytes;\n      buffer[index++] = 0;\n      // Write the int value\n      buffer[index++] = value & 0xff;\n      buffer[index++] = (value >> 8) & 0xff;\n      buffer[index++] = (value >> 16) & 0xff;\n      buffer[index++] = (value >> 24) & 0xff;\n    } else if (value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {\n      // Encode as double\n      buffer[index++] = BSON.BSON_DATA_NUMBER;\n      // Number of written bytes\n      numberOfWrittenBytes = !isArray\n        ? buffer.write(key, index, 'utf8')\n        : buffer.write(key, index, 'ascii');\n      // Encode the name\n      index = index + numberOfWrittenBytes;\n      buffer[index++] = 0;\n      // Write float\n      writeIEEE754(buffer, value, index, 'little', 52, 8);\n      // Ajust index\n      index = index + 8;\n    } else {\n      // Set long type\n      buffer[index++] = BSON.BSON_DATA_LONG;\n      // Number of written bytes\n      numberOfWrittenBytes = !isArray\n        ? buffer.write(key, index, 'utf8')\n        : buffer.write(key, index, 'ascii');\n      // Encode the name\n      index = index + numberOfWrittenBytes;\n      buffer[index++] = 0;\n      var longVal = Long.fromNumber(value);\n      var lowBits = longVal.getLowBits();\n      var highBits = longVal.getHighBits();\n      // Encode low bits\n      buffer[index++] = lowBits & 0xff;\n      buffer[index++] = (lowBits >> 8) & 0xff;\n      buffer[index++] = (lowBits >> 16) & 0xff;\n      buffer[index++] = (lowBits >> 24) & 0xff;\n      // Encode high bits\n      buffer[index++] = highBits & 0xff;\n      buffer[index++] = (highBits >> 8) & 0xff;\n      buffer[index++] = (highBits >> 16) & 0xff;\n      buffer[index++] = (highBits >> 24) & 0xff;\n    }\n  } else {\n    // Encode as double\n    buffer[index++] = BSON.BSON_DATA_NUMBER;\n    // Number of written bytes\n    numberOfWrittenBytes = !isArray\n      ? buffer.write(key, index, 'utf8')\n      : buffer.write(key, index, 'ascii');\n    // Encode the name\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    // Write float\n    writeIEEE754(buffer, value, index, 'little', 52, 8);\n    // Ajust index\n    index = index + 8;\n  }\n\n  return index;\n};\n\nvar serializeNull = function(buffer, key, value, index, isArray) {\n  // Set long type\n  buffer[index++] = BSON.BSON_DATA_NULL;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  return index;\n};\n\nvar serializeBoolean = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_BOOLEAN;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Encode the boolean value\n  buffer[index++] = value ? 1 : 0;\n  return index;\n};\n\nvar serializeDate = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_DATE;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  // Write the date\n  var dateInMilis = Long.fromNumber(value.getTime());\n  var lowBits = dateInMilis.getLowBits();\n  var highBits = dateInMilis.getHighBits();\n  // Encode low bits\n  buffer[index++] = lowBits & 0xff;\n  buffer[index++] = (lowBits >> 8) & 0xff;\n  buffer[index++] = (lowBits >> 16) & 0xff;\n  buffer[index++] = (lowBits >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = highBits & 0xff;\n  buffer[index++] = (highBits >> 8) & 0xff;\n  buffer[index++] = (highBits >> 16) & 0xff;\n  buffer[index++] = (highBits >> 24) & 0xff;\n  return index;\n};\n\nvar serializeRegExp = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_REGEXP;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  if (value.source && value.source.match(regexp) != null) {\n    throw Error('value ' + value.source + ' must not contain null bytes');\n  }\n  // Adjust the index\n  index = index + buffer.write(value.source, index, 'utf8');\n  // Write zero\n  buffer[index++] = 0x00;\n  // Write the parameters\n  if (value.global) buffer[index++] = 0x73; // s\n  if (value.ignoreCase) buffer[index++] = 0x69; // i\n  if (value.multiline) buffer[index++] = 0x6d; // m\n  // Add ending zero\n  buffer[index++] = 0x00;\n  return index;\n};\n\nvar serializeBSONRegExp = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_REGEXP;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  // Check the pattern for 0 bytes\n  if (value.pattern.match(regexp) != null) {\n    // The BSON spec doesn't allow keys with null bytes because keys are\n    // null-terminated.\n    throw Error('pattern ' + value.pattern + ' must not contain null bytes');\n  }\n\n  // Adjust the index\n  index = index + buffer.write(value.pattern, index, 'utf8');\n  // Write zero\n  buffer[index++] = 0x00;\n  // Write the options\n  index =\n    index +\n    buffer.write(\n      value.options\n        .split('')\n        .sort()\n        .join(''),\n      index,\n      'utf8'\n    );\n  // Add ending zero\n  buffer[index++] = 0x00;\n  return index;\n};\n\nvar serializeMinMax = function(buffer, key, value, index, isArray) {\n  // Write the type of either min or max key\n  if (value === null) {\n    buffer[index++] = BSON.BSON_DATA_NULL;\n  } else if (value._bsontype === 'MinKey') {\n    buffer[index++] = BSON.BSON_DATA_MIN_KEY;\n  } else {\n    buffer[index++] = BSON.BSON_DATA_MAX_KEY;\n  }\n\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  return index;\n};\n\nvar serializeObjectId = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_OID;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  // Write the objectId into the shared buffer\n  if (typeof value.id === 'string') {\n    buffer.write(value.id, index, 'binary');\n  } else if (value.id && value.id.copy) {\n    value.id.copy(buffer, index, 0, 12);\n  } else {\n    throw new Error('object [' + JSON.stringify(value) + '] is not a valid ObjectId');\n  }\n\n  // Ajust index\n  return index + 12;\n};\n\nvar serializeBuffer = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_BINARY;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Get size of the buffer (current write point)\n  var size = value.length;\n  // Write the size of the string to buffer\n  buffer[index++] = size & 0xff;\n  buffer[index++] = (size >> 8) & 0xff;\n  buffer[index++] = (size >> 16) & 0xff;\n  buffer[index++] = (size >> 24) & 0xff;\n  // Write the default subtype\n  buffer[index++] = BSON.BSON_BINARY_SUBTYPE_DEFAULT;\n  // Copy the content form the binary field to the buffer\n  value.copy(buffer, index, 0, size);\n  // Adjust the index\n  index = index + size;\n  return index;\n};\n\nvar serializeObject = function(\n  buffer,\n  key,\n  value,\n  index,\n  checkKeys,\n  depth,\n  serializeFunctions,\n  ignoreUndefined,\n  isArray,\n  path\n) {\n  for (var i = 0; i < path.length; i++) {\n    if (path[i] === value) throw new Error('cyclic dependency detected');\n  }\n\n  // Push value to stack\n  path.push(value);\n  // Write the type\n  buffer[index++] = Array.isArray(value) ? BSON.BSON_DATA_ARRAY : BSON.BSON_DATA_OBJECT;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  var endIndex = serializeInto(\n    buffer,\n    value,\n    checkKeys,\n    index,\n    depth + 1,\n    serializeFunctions,\n    ignoreUndefined,\n    path\n  );\n  // Pop stack\n  path.pop();\n  // Write size\n  return endIndex;\n};\n\nvar serializeDecimal128 = function(buffer, key, value, index, isArray) {\n  buffer[index++] = BSON.BSON_DATA_DECIMAL128;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write the data from the value\n  value.bytes.copy(buffer, index, 0, 16);\n  return index + 16;\n};\n\nvar serializeLong = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = value._bsontype === 'Long' ? BSON.BSON_DATA_LONG : BSON.BSON_DATA_TIMESTAMP;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write the date\n  var lowBits = value.getLowBits();\n  var highBits = value.getHighBits();\n  // Encode low bits\n  buffer[index++] = lowBits & 0xff;\n  buffer[index++] = (lowBits >> 8) & 0xff;\n  buffer[index++] = (lowBits >> 16) & 0xff;\n  buffer[index++] = (lowBits >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = highBits & 0xff;\n  buffer[index++] = (highBits >> 8) & 0xff;\n  buffer[index++] = (highBits >> 16) & 0xff;\n  buffer[index++] = (highBits >> 24) & 0xff;\n  return index;\n};\n\nvar serializeInt32 = function(buffer, key, value, index, isArray) {\n  // Set int type 32 bits or less\n  buffer[index++] = BSON.BSON_DATA_INT;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write the int value\n  buffer[index++] = value & 0xff;\n  buffer[index++] = (value >> 8) & 0xff;\n  buffer[index++] = (value >> 16) & 0xff;\n  buffer[index++] = (value >> 24) & 0xff;\n  return index;\n};\n\nvar serializeDouble = function(buffer, key, value, index, isArray) {\n  // Encode as double\n  buffer[index++] = BSON.BSON_DATA_NUMBER;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write float\n  writeIEEE754(buffer, value, index, 'little', 52, 8);\n  // Ajust index\n  index = index + 8;\n  return index;\n};\n\nvar serializeFunction = function(buffer, key, value, index, checkKeys, depth, isArray) {\n  buffer[index++] = BSON.BSON_DATA_CODE;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Function string\n  var functionString = normalizedFunctionString(value);\n\n  // Write the string\n  var size = buffer.write(functionString, index + 4, 'utf8') + 1;\n  // Write the size of the string to buffer\n  buffer[index] = size & 0xff;\n  buffer[index + 1] = (size >> 8) & 0xff;\n  buffer[index + 2] = (size >> 16) & 0xff;\n  buffer[index + 3] = (size >> 24) & 0xff;\n  // Update index\n  index = index + 4 + size - 1;\n  // Write zero\n  buffer[index++] = 0;\n  return index;\n};\n\nvar serializeCode = function(\n  buffer,\n  key,\n  value,\n  index,\n  checkKeys,\n  depth,\n  serializeFunctions,\n  ignoreUndefined,\n  isArray\n) {\n  if (value.scope && typeof value.scope === 'object') {\n    // Write the type\n    buffer[index++] = BSON.BSON_DATA_CODE_W_SCOPE;\n    // Number of written bytes\n    var numberOfWrittenBytes = !isArray\n      ? buffer.write(key, index, 'utf8')\n      : buffer.write(key, index, 'ascii');\n    // Encode the name\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n\n    // Starting index\n    var startIndex = index;\n\n    // Serialize the function\n    // Get the function string\n    var functionString = typeof value.code === 'string' ? value.code : value.code.toString();\n    // Index adjustment\n    index = index + 4;\n    // Write string into buffer\n    var codeSize = buffer.write(functionString, index + 4, 'utf8') + 1;\n    // Write the size of the string to buffer\n    buffer[index] = codeSize & 0xff;\n    buffer[index + 1] = (codeSize >> 8) & 0xff;\n    buffer[index + 2] = (codeSize >> 16) & 0xff;\n    buffer[index + 3] = (codeSize >> 24) & 0xff;\n    // Write end 0\n    buffer[index + 4 + codeSize - 1] = 0;\n    // Write the\n    index = index + codeSize + 4;\n\n    //\n    // Serialize the scope value\n    var endIndex = serializeInto(\n      buffer,\n      value.scope,\n      checkKeys,\n      index,\n      depth + 1,\n      serializeFunctions,\n      ignoreUndefined\n    );\n    index = endIndex - 1;\n\n    // Writ the total\n    var totalSize = endIndex - startIndex;\n\n    // Write the total size of the object\n    buffer[startIndex++] = totalSize & 0xff;\n    buffer[startIndex++] = (totalSize >> 8) & 0xff;\n    buffer[startIndex++] = (totalSize >> 16) & 0xff;\n    buffer[startIndex++] = (totalSize >> 24) & 0xff;\n    // Write trailing zero\n    buffer[index++] = 0;\n  } else {\n    buffer[index++] = BSON.BSON_DATA_CODE;\n    // Number of written bytes\n    numberOfWrittenBytes = !isArray\n      ? buffer.write(key, index, 'utf8')\n      : buffer.write(key, index, 'ascii');\n    // Encode the name\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    // Function string\n    functionString = value.code.toString();\n    // Write the string\n    var size = buffer.write(functionString, index + 4, 'utf8') + 1;\n    // Write the size of the string to buffer\n    buffer[index] = size & 0xff;\n    buffer[index + 1] = (size >> 8) & 0xff;\n    buffer[index + 2] = (size >> 16) & 0xff;\n    buffer[index + 3] = (size >> 24) & 0xff;\n    // Update index\n    index = index + 4 + size - 1;\n    // Write zero\n    buffer[index++] = 0;\n  }\n\n  return index;\n};\n\nvar serializeBinary = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_BINARY;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Extract the buffer\n  var data = value.value(true);\n  // Calculate size\n  var size = value.position;\n  // Add the deprecated 02 type 4 bytes of size to total\n  if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY) size = size + 4;\n  // Write the size of the string to buffer\n  buffer[index++] = size & 0xff;\n  buffer[index++] = (size >> 8) & 0xff;\n  buffer[index++] = (size >> 16) & 0xff;\n  buffer[index++] = (size >> 24) & 0xff;\n  // Write the subtype to the buffer\n  buffer[index++] = value.sub_type;\n\n  // If we have binary type 2 the 4 first bytes are the size\n  if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY) {\n    size = size - 4;\n    buffer[index++] = size & 0xff;\n    buffer[index++] = (size >> 8) & 0xff;\n    buffer[index++] = (size >> 16) & 0xff;\n    buffer[index++] = (size >> 24) & 0xff;\n  }\n\n  // Write the data to the object\n  data.copy(buffer, index, 0, value.position);\n  // Adjust the index\n  index = index + value.position;\n  return index;\n};\n\nvar serializeSymbol = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_SYMBOL;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write the string\n  var size = buffer.write(value.value, index + 4, 'utf8') + 1;\n  // Write the size of the string to buffer\n  buffer[index] = size & 0xff;\n  buffer[index + 1] = (size >> 8) & 0xff;\n  buffer[index + 2] = (size >> 16) & 0xff;\n  buffer[index + 3] = (size >> 24) & 0xff;\n  // Update index\n  index = index + 4 + size - 1;\n  // Write zero\n  buffer[index++] = 0x00;\n  return index;\n};\n\nvar serializeDBRef = function(buffer, key, value, index, depth, serializeFunctions, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_OBJECT;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  var startIndex = index;\n  var endIndex;\n\n  // Serialize object\n  if (null != value.db) {\n    endIndex = serializeInto(\n      buffer,\n      {\n        $ref: value.namespace,\n        $id: value.oid,\n        $db: value.db\n      },\n      false,\n      index,\n      depth + 1,\n      serializeFunctions\n    );\n  } else {\n    endIndex = serializeInto(\n      buffer,\n      {\n        $ref: value.namespace,\n        $id: value.oid\n      },\n      false,\n      index,\n      depth + 1,\n      serializeFunctions\n    );\n  }\n\n  // Calculate object size\n  var size = endIndex - startIndex;\n  // Write the size\n  buffer[startIndex++] = size & 0xff;\n  buffer[startIndex++] = (size >> 8) & 0xff;\n  buffer[startIndex++] = (size >> 16) & 0xff;\n  buffer[startIndex++] = (size >> 24) & 0xff;\n  // Set index\n  return endIndex;\n};\n\nvar serializeInto = function serializeInto(\n  buffer,\n  object,\n  checkKeys,\n  startingIndex,\n  depth,\n  serializeFunctions,\n  ignoreUndefined,\n  path\n) {\n  startingIndex = startingIndex || 0;\n  path = path || [];\n\n  // Push the object to the path\n  path.push(object);\n\n  // Start place to serialize into\n  var index = startingIndex + 4;\n  // var self = this;\n\n  // Special case isArray\n  if (Array.isArray(object)) {\n    // Get object keys\n    for (var i = 0; i < object.length; i++) {\n      var key = '' + i;\n      var value = object[i];\n\n      // Is there an override value\n      if (value && value.toBSON) {\n        if (typeof value.toBSON !== 'function') throw new Error('toBSON is not a function');\n        value = value.toBSON();\n      }\n\n      var type = typeof value;\n      if (type === 'string') {\n        index = serializeString(buffer, key, value, index, true);\n      } else if (type === 'number') {\n        index = serializeNumber(buffer, key, value, index, true);\n      } else if (type === 'boolean') {\n        index = serializeBoolean(buffer, key, value, index, true);\n      } else if (value instanceof Date || isDate(value)) {\n        index = serializeDate(buffer, key, value, index, true);\n      } else if (value === undefined) {\n        index = serializeNull(buffer, key, value, index, true);\n      } else if (value === null) {\n        index = serializeNull(buffer, key, value, index, true);\n      } else if (value['_bsontype'] === 'ObjectID' || value['_bsontype'] === 'ObjectId') {\n        index = serializeObjectId(buffer, key, value, index, true);\n      } else if (Buffer.isBuffer(value)) {\n        index = serializeBuffer(buffer, key, value, index, true);\n      } else if (value instanceof RegExp || isRegExp(value)) {\n        index = serializeRegExp(buffer, key, value, index, true);\n      } else if (type === 'object' && value['_bsontype'] == null) {\n        index = serializeObject(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          ignoreUndefined,\n          true,\n          path\n        );\n      } else if (type === 'object' && value['_bsontype'] === 'Decimal128') {\n        index = serializeDecimal128(buffer, key, value, index, true);\n      } else if (value['_bsontype'] === 'Long' || value['_bsontype'] === 'Timestamp') {\n        index = serializeLong(buffer, key, value, index, true);\n      } else if (value['_bsontype'] === 'Double') {\n        index = serializeDouble(buffer, key, value, index, true);\n      } else if (typeof value === 'function' && serializeFunctions) {\n        index = serializeFunction(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          true\n        );\n      } else if (value['_bsontype'] === 'Code') {\n        index = serializeCode(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          ignoreUndefined,\n          true\n        );\n      } else if (value['_bsontype'] === 'Binary') {\n        index = serializeBinary(buffer, key, value, index, true);\n      } else if (value['_bsontype'] === 'Symbol') {\n        index = serializeSymbol(buffer, key, value, index, true);\n      } else if (value['_bsontype'] === 'DBRef') {\n        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, true);\n      } else if (value['_bsontype'] === 'BSONRegExp') {\n        index = serializeBSONRegExp(buffer, key, value, index, true);\n      } else if (value['_bsontype'] === 'Int32') {\n        index = serializeInt32(buffer, key, value, index, true);\n      } else if (value['_bsontype'] === 'MinKey' || value['_bsontype'] === 'MaxKey') {\n        index = serializeMinMax(buffer, key, value, index, true);\n      }\n    }\n  } else if (object instanceof Map) {\n    var iterator = object.entries();\n    var done = false;\n\n    while (!done) {\n      // Unpack the next entry\n      var entry = iterator.next();\n      done = entry.done;\n      // Are we done, then skip and terminate\n      if (done) continue;\n\n      // Get the entry values\n      key = entry.value[0];\n      value = entry.value[1];\n\n      // Check the type of the value\n      type = typeof value;\n\n      // Check the key and throw error if it's illegal\n      if (typeof key === 'string' && ignoreKeys.indexOf(key) === -1) {\n        if (key.match(regexp) != null) {\n          // The BSON spec doesn't allow keys with null bytes because keys are\n          // null-terminated.\n          throw Error('key ' + key + ' must not contain null bytes');\n        }\n\n        if (checkKeys) {\n          if ('$' === key[0]) {\n            throw Error('key ' + key + \" must not start with '$'\");\n          } else if (~key.indexOf('.')) {\n            throw Error('key ' + key + \" must not contain '.'\");\n          }\n        }\n      }\n\n      if (type === 'string') {\n        index = serializeString(buffer, key, value, index);\n      } else if (type === 'number') {\n        index = serializeNumber(buffer, key, value, index);\n      } else if (type === 'boolean') {\n        index = serializeBoolean(buffer, key, value, index);\n      } else if (value instanceof Date || isDate(value)) {\n        index = serializeDate(buffer, key, value, index);\n        // } else if (value === undefined && ignoreUndefined === true) {\n      } else if (value === null || (value === undefined && ignoreUndefined === false)) {\n        index = serializeNull(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'ObjectID' || value['_bsontype'] === 'ObjectId') {\n        index = serializeObjectId(buffer, key, value, index);\n      } else if (Buffer.isBuffer(value)) {\n        index = serializeBuffer(buffer, key, value, index);\n      } else if (value instanceof RegExp || isRegExp(value)) {\n        index = serializeRegExp(buffer, key, value, index);\n      } else if (type === 'object' && value['_bsontype'] == null) {\n        index = serializeObject(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          ignoreUndefined,\n          false,\n          path\n        );\n      } else if (type === 'object' && value['_bsontype'] === 'Decimal128') {\n        index = serializeDecimal128(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Long' || value['_bsontype'] === 'Timestamp') {\n        index = serializeLong(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Double') {\n        index = serializeDouble(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Code') {\n        index = serializeCode(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          ignoreUndefined\n        );\n      } else if (typeof value === 'function' && serializeFunctions) {\n        index = serializeFunction(buffer, key, value, index, checkKeys, depth, serializeFunctions);\n      } else if (value['_bsontype'] === 'Binary') {\n        index = serializeBinary(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Symbol') {\n        index = serializeSymbol(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'DBRef') {\n        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions);\n      } else if (value['_bsontype'] === 'BSONRegExp') {\n        index = serializeBSONRegExp(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Int32') {\n        index = serializeInt32(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'MinKey' || value['_bsontype'] === 'MaxKey') {\n        index = serializeMinMax(buffer, key, value, index);\n      }\n    }\n  } else {\n    // Did we provide a custom serialization method\n    if (object.toBSON) {\n      if (typeof object.toBSON !== 'function') throw new Error('toBSON is not a function');\n      object = object.toBSON();\n      if (object != null && typeof object !== 'object')\n        throw new Error('toBSON function did not return an object');\n    }\n\n    // Iterate over all the keys\n    for (key in object) {\n      value = object[key];\n      // Is there an override value\n      if (value && value.toBSON) {\n        if (typeof value.toBSON !== 'function') throw new Error('toBSON is not a function');\n        value = value.toBSON();\n      }\n\n      // Check the type of the value\n      type = typeof value;\n\n      // Check the key and throw error if it's illegal\n      if (typeof key === 'string' && ignoreKeys.indexOf(key) === -1) {\n        if (key.match(regexp) != null) {\n          // The BSON spec doesn't allow keys with null bytes because keys are\n          // null-terminated.\n          throw Error('key ' + key + ' must not contain null bytes');\n        }\n\n        if (checkKeys) {\n          if ('$' === key[0]) {\n            throw Error('key ' + key + \" must not start with '$'\");\n          } else if (~key.indexOf('.')) {\n            throw Error('key ' + key + \" must not contain '.'\");\n          }\n        }\n      }\n\n      if (type === 'string') {\n        index = serializeString(buffer, key, value, index);\n      } else if (type === 'number') {\n        index = serializeNumber(buffer, key, value, index);\n      } else if (type === 'boolean') {\n        index = serializeBoolean(buffer, key, value, index);\n      } else if (value instanceof Date || isDate(value)) {\n        index = serializeDate(buffer, key, value, index);\n      } else if (value === undefined) {\n        if (ignoreUndefined === false) index = serializeNull(buffer, key, value, index);\n      } else if (value === null) {\n        index = serializeNull(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'ObjectID' || value['_bsontype'] === 'ObjectId') {\n        index = serializeObjectId(buffer, key, value, index);\n      } else if (Buffer.isBuffer(value)) {\n        index = serializeBuffer(buffer, key, value, index);\n      } else if (value instanceof RegExp || isRegExp(value)) {\n        index = serializeRegExp(buffer, key, value, index);\n      } else if (type === 'object' && value['_bsontype'] == null) {\n        index = serializeObject(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          ignoreUndefined,\n          false,\n          path\n        );\n      } else if (type === 'object' && value['_bsontype'] === 'Decimal128') {\n        index = serializeDecimal128(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Long' || value['_bsontype'] === 'Timestamp') {\n        index = serializeLong(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Double') {\n        index = serializeDouble(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Code') {\n        index = serializeCode(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          ignoreUndefined\n        );\n      } else if (typeof value === 'function' && serializeFunctions) {\n        index = serializeFunction(buffer, key, value, index, checkKeys, depth, serializeFunctions);\n      } else if (value['_bsontype'] === 'Binary') {\n        index = serializeBinary(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Symbol') {\n        index = serializeSymbol(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'DBRef') {\n        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions);\n      } else if (value['_bsontype'] === 'BSONRegExp') {\n        index = serializeBSONRegExp(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Int32') {\n        index = serializeInt32(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'MinKey' || value['_bsontype'] === 'MaxKey') {\n        index = serializeMinMax(buffer, key, value, index);\n      }\n    }\n  }\n\n  // Remove the path\n  path.pop();\n\n  // Final padding byte for object\n  buffer[index++] = 0x00;\n\n  // Final size\n  var size = index - startingIndex;\n  // Write the size of the object\n  buffer[startingIndex++] = size & 0xff;\n  buffer[startingIndex++] = (size >> 8) & 0xff;\n  buffer[startingIndex++] = (size >> 16) & 0xff;\n  buffer[startingIndex++] = (size >> 24) & 0xff;\n  return index;\n};\n\nvar BSON = {};\n\n/**\n * Contains the function cache if we have that enable to allow for avoiding the eval step on each deserialization, comparison is by md5\n *\n * @ignore\n * @api private\n */\n// var functionCache = (BSON.functionCache = {});\n\n/**\n * Number BSON Type\n *\n * @classconstant BSON_DATA_NUMBER\n **/\nBSON.BSON_DATA_NUMBER = 1;\n/**\n * String BSON Type\n *\n * @classconstant BSON_DATA_STRING\n **/\nBSON.BSON_DATA_STRING = 2;\n/**\n * Object BSON Type\n *\n * @classconstant BSON_DATA_OBJECT\n **/\nBSON.BSON_DATA_OBJECT = 3;\n/**\n * Array BSON Type\n *\n * @classconstant BSON_DATA_ARRAY\n **/\nBSON.BSON_DATA_ARRAY = 4;\n/**\n * Binary BSON Type\n *\n * @classconstant BSON_DATA_BINARY\n **/\nBSON.BSON_DATA_BINARY = 5;\n/**\n * ObjectID BSON Type, deprecated\n *\n * @classconstant BSON_DATA_UNDEFINED\n **/\nBSON.BSON_DATA_UNDEFINED = 6;\n/**\n * ObjectID BSON Type\n *\n * @classconstant BSON_DATA_OID\n **/\nBSON.BSON_DATA_OID = 7;\n/**\n * Boolean BSON Type\n *\n * @classconstant BSON_DATA_BOOLEAN\n **/\nBSON.BSON_DATA_BOOLEAN = 8;\n/**\n * Date BSON Type\n *\n * @classconstant BSON_DATA_DATE\n **/\nBSON.BSON_DATA_DATE = 9;\n/**\n * null BSON Type\n *\n * @classconstant BSON_DATA_NULL\n **/\nBSON.BSON_DATA_NULL = 10;\n/**\n * RegExp BSON Type\n *\n * @classconstant BSON_DATA_REGEXP\n **/\nBSON.BSON_DATA_REGEXP = 11;\n/**\n * Code BSON Type\n *\n * @classconstant BSON_DATA_CODE\n **/\nBSON.BSON_DATA_CODE = 13;\n/**\n * Symbol BSON Type\n *\n * @classconstant BSON_DATA_SYMBOL\n **/\nBSON.BSON_DATA_SYMBOL = 14;\n/**\n * Code with Scope BSON Type\n *\n * @classconstant BSON_DATA_CODE_W_SCOPE\n **/\nBSON.BSON_DATA_CODE_W_SCOPE = 15;\n/**\n * 32 bit Integer BSON Type\n *\n * @classconstant BSON_DATA_INT\n **/\nBSON.BSON_DATA_INT = 16;\n/**\n * Timestamp BSON Type\n *\n * @classconstant BSON_DATA_TIMESTAMP\n **/\nBSON.BSON_DATA_TIMESTAMP = 17;\n/**\n * Long BSON Type\n *\n * @classconstant BSON_DATA_LONG\n **/\nBSON.BSON_DATA_LONG = 18;\n/**\n * Long BSON Type\n *\n * @classconstant BSON_DATA_DECIMAL128\n **/\nBSON.BSON_DATA_DECIMAL128 = 19;\n/**\n * MinKey BSON Type\n *\n * @classconstant BSON_DATA_MIN_KEY\n **/\nBSON.BSON_DATA_MIN_KEY = 0xff;\n/**\n * MaxKey BSON Type\n *\n * @classconstant BSON_DATA_MAX_KEY\n **/\nBSON.BSON_DATA_MAX_KEY = 0x7f;\n/**\n * Binary Default Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_DEFAULT\n **/\nBSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;\n/**\n * Binary Function Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_FUNCTION\n **/\nBSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;\n/**\n * Binary Byte Array Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY\n **/\nBSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;\n/**\n * Binary UUID Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_UUID\n **/\nBSON.BSON_BINARY_SUBTYPE_UUID = 3;\n/**\n * Binary MD5 Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_MD5\n **/\nBSON.BSON_BINARY_SUBTYPE_MD5 = 4;\n/**\n * Binary User Defined Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED\n **/\nBSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;\n\n// BSON MAX VALUES\nBSON.BSON_INT32_MAX = 0x7fffffff;\nBSON.BSON_INT32_MIN = -0x80000000;\n\nBSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;\nBSON.BSON_INT64_MIN = -Math.pow(2, 63);\n\n// JS MAX PRECISE VALUES\nBSON.JS_INT_MAX = 0x20000000000000; // Any integer up to 2^53 can be precisely represented by a double.\nBSON.JS_INT_MIN = -0x20000000000000; // Any integer down to -2^53 can be precisely represented by a double.\n\n// Internal long versions\n// var JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000); // Any integer up to 2^53 can be precisely represented by a double.\n// var JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000); // Any integer down to -2^53 can be precisely represented by a double.\n\nmodule.exports = serializeInto;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/***/ (function(module, exports) {

eval("// Copyright (c) 2008, Fair Oaks Labs, Inc.\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n//  * Redistributions of source code must retain the above copyright notice,\n//    this list of conditions and the following disclaimer.\n//\n//  * Redistributions in binary form must reproduce the above copyright notice,\n//    this list of conditions and the following disclaimer in the documentation\n//    and/or other materials provided with the distribution.\n//\n//  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors\n//    may be used to endorse or promote products derived from this software\n//    without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n//\n//\n// Modifications to writeIEEE754 to support negative zeroes made by Brian White\n\nvar readIEEE754 = function(buffer, offset, endian, mLen, nBytes) {\n  var e,\n    m,\n    bBE = endian === 'big',\n    eLen = nBytes * 8 - mLen - 1,\n    eMax = (1 << eLen) - 1,\n    eBias = eMax >> 1,\n    nBits = -7,\n    i = bBE ? 0 : nBytes - 1,\n    d = bBE ? 1 : -1,\n    s = buffer[offset + i];\n\n  i += d;\n\n  e = s & ((1 << -nBits) - 1);\n  s >>= -nBits;\n  nBits += eLen;\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\n\n  m = e & ((1 << -nBits) - 1);\n  e >>= -nBits;\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : (s ? -1 : 1) * Infinity;\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\n\nvar writeIEEE754 = function(buffer, value, offset, endian, mLen, nBytes) {\n  var e,\n    m,\n    c,\n    bBE = endian === 'big',\n    eLen = nBytes * 8 - mLen - 1,\n    eMax = (1 << eLen) - 1,\n    eBias = eMax >> 1,\n    rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0,\n    i = bBE ? nBytes - 1 : 0,\n    d = bBE ? -1 : 1,\n    s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\n\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);\n\n  e = (e << mLen) | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);\n\n  buffer[offset + i - d] |= s * 128;\n};\n\nexports.readIEEE754 = readIEEE754;\nexports.writeIEEE754 = writeIEEE754;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL2Jzb24vbGliL2Jzb24vZmxvYXRfcGFyc2VyLmpzPzkyNDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQywrQkFBK0I7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLFdBQVc7O0FBRW5CO0FBQ0E7QUFDQTtBQUNBLFFBQVEsV0FBVzs7QUFFbkI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsV0FBVzs7QUFFbkI7QUFDQTtBQUNBLFFBQVEsVUFBVTs7QUFFbEI7QUFDQTs7QUFFQTtBQUNBIiwiZmlsZSI6IjI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDA4LCBGYWlyIE9ha3MgTGFicywgSW5jLlxuLy8gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vXG4vLyBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbi8vIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy9cbi8vICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbi8vICAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vL1xuLy8gICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuLy8gICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvblxuLy8gICAgYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vL1xuLy8gICogTmVpdGhlciB0aGUgbmFtZSBvZiBGYWlyIE9ha3MgTGFicywgSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbi8vICAgIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuLy8gICAgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4vL1xuLy8gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbi8vIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbi8vIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4vLyBBUkUgRElTQ0xBSU1FRC4gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4vLyBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4vLyBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuLy8gU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4vLyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuLy8gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbi8vIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4vLyBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbi8vXG4vL1xuLy8gTW9kaWZpY2F0aW9ucyB0byB3cml0ZUlFRUU3NTQgdG8gc3VwcG9ydCBuZWdhdGl2ZSB6ZXJvZXMgbWFkZSBieSBCcmlhbiBXaGl0ZVxuXG52YXIgcmVhZElFRUU3NTQgPSBmdW5jdGlvbihidWZmZXIsIG9mZnNldCwgZW5kaWFuLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsXG4gICAgbSxcbiAgICBiQkUgPSBlbmRpYW4gPT09ICdiaWcnLFxuICAgIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDEsXG4gICAgZU1heCA9ICgxIDw8IGVMZW4pIC0gMSxcbiAgICBlQmlhcyA9IGVNYXggPj4gMSxcbiAgICBuQml0cyA9IC03LFxuICAgIGkgPSBiQkUgPyAwIDogbkJ5dGVzIC0gMSxcbiAgICBkID0gYkJFID8gMSA6IC0xLFxuICAgIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV07XG5cbiAgaSArPSBkO1xuXG4gIGUgPSBzICYgKCgxIDw8IC1uQml0cykgLSAxKTtcbiAgcyA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBlTGVuO1xuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KTtcblxuICBtID0gZSAmICgoMSA8PCAtbkJpdHMpIC0gMSk7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCk7XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzO1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6IChzID8gLTEgOiAxKSAqIEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKTtcbn07XG5cbnZhciB3cml0ZUlFRUU3NTQgPSBmdW5jdGlvbihidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGVuZGlhbiwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLFxuICAgIG0sXG4gICAgYyxcbiAgICBiQkUgPSBlbmRpYW4gPT09ICdiaWcnLFxuICAgIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDEsXG4gICAgZU1heCA9ICgxIDw8IGVMZW4pIC0gMSxcbiAgICBlQmlhcyA9IGVNYXggPj4gMSxcbiAgICBydCA9IG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwLFxuICAgIGkgPSBiQkUgPyBuQnl0ZXMgLSAxIDogMCxcbiAgICBkID0gYkJFID8gLTEgOiAxLFxuICAgIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDA7XG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSk7XG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDA7XG4gICAgZSA9IGVNYXg7XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpO1xuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMDtcbiAgICAgIGUgPSBlTWF4O1xuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSBlICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSAwO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpO1xuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KTtcblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjg7XG59O1xuXG5leHBvcnRzLnJlYWRJRUVFNzU0ID0gcmVhZElFRUU3NTQ7XG5leHBvcnRzLndyaXRlSUVFRTc1NCA9IHdyaXRlSUVFRTc1NDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Long = __webpack_require__(7).Long,\n  Double = __webpack_require__(8).Double,\n  Timestamp = __webpack_require__(9).Timestamp,\n  ObjectID = __webpack_require__(10).ObjectID,\n  Symbol = __webpack_require__(14).Symbol,\n  BSONRegExp = __webpack_require__(13).BSONRegExp,\n  Code = __webpack_require__(16).Code,\n  Decimal128 = __webpack_require__(17),\n  MinKey = __webpack_require__(18).MinKey,\n  MaxKey = __webpack_require__(19).MaxKey,\n  DBRef = __webpack_require__(20).DBRef,\n  Binary = __webpack_require__(21).Binary;\n\nvar normalizedFunctionString = __webpack_require__(11).normalizedFunctionString;\n\n// To ensure that 0.4 of node works correctly\nvar isDate = function isDate(d) {\n  return typeof d === 'object' && Object.prototype.toString.call(d) === '[object Date]';\n};\n\nvar calculateObjectSize = function calculateObjectSize(\n  object,\n  serializeFunctions,\n  ignoreUndefined\n) {\n  var totalLength = 4 + 1;\n\n  if (Array.isArray(object)) {\n    for (var i = 0; i < object.length; i++) {\n      totalLength += calculateElement(\n        i.toString(),\n        object[i],\n        serializeFunctions,\n        true,\n        ignoreUndefined\n      );\n    }\n  } else {\n    // If we have toBSON defined, override the current object\n    if (object.toBSON) {\n      object = object.toBSON();\n    }\n\n    // Calculate size\n    for (var key in object) {\n      totalLength += calculateElement(key, object[key], serializeFunctions, false, ignoreUndefined);\n    }\n  }\n\n  return totalLength;\n};\n\n/**\n * @ignore\n * @api private\n */\nfunction calculateElement(name, value, serializeFunctions, isArray, ignoreUndefined) {\n  // If we have toBSON defined, override the current object\n  if (value && value.toBSON) {\n    value = value.toBSON();\n  }\n\n  switch (typeof value) {\n    case 'string':\n      return 1 + Buffer.byteLength(name, 'utf8') + 1 + 4 + Buffer.byteLength(value, 'utf8') + 1;\n    case 'number':\n      if (Math.floor(value) === value && value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {\n        if (value >= BSON.BSON_INT32_MIN && value <= BSON.BSON_INT32_MAX) {\n          // 32 bit\n          return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (4 + 1);\n        } else {\n          return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);\n        }\n      } else {\n        // 64 bit\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);\n      }\n    case 'undefined':\n      if (isArray || !ignoreUndefined)\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + 1;\n      return 0;\n    case 'boolean':\n      return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (1 + 1);\n    case 'object':\n      if (\n        value == null ||\n        value instanceof MinKey ||\n        value instanceof MaxKey ||\n        value['_bsontype'] === 'MinKey' ||\n        value['_bsontype'] === 'MaxKey'\n      ) {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + 1;\n      } else if (value instanceof ObjectID || value['_bsontype'] === 'ObjectID' || value['_bsontype'] === 'ObjectId') {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (12 + 1);\n      } else if (value instanceof Date || isDate(value)) {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);\n      } else if (typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {\n        return (\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (1 + 4 + 1) + value.length\n        );\n      } else if (\n        value instanceof Long ||\n        value instanceof Double ||\n        value instanceof Timestamp ||\n        value['_bsontype'] === 'Long' ||\n        value['_bsontype'] === 'Double' ||\n        value['_bsontype'] === 'Timestamp'\n      ) {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);\n      } else if (value instanceof Decimal128 || value['_bsontype'] === 'Decimal128') {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (16 + 1);\n      } else if (value instanceof Code || value['_bsontype'] === 'Code') {\n        // Calculate size depending on the availability of a scope\n        if (value.scope != null && Object.keys(value.scope).length > 0) {\n          return (\n            (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n            1 +\n            4 +\n            4 +\n            Buffer.byteLength(value.code.toString(), 'utf8') +\n            1 +\n            calculateObjectSize(value.scope, serializeFunctions, ignoreUndefined)\n          );\n        } else {\n          return (\n            (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n            1 +\n            4 +\n            Buffer.byteLength(value.code.toString(), 'utf8') +\n            1\n          );\n        }\n      } else if (value instanceof Binary || value['_bsontype'] === 'Binary') {\n        // Check what kind of subtype we have\n        if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY) {\n          return (\n            (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n            (value.position + 1 + 4 + 1 + 4)\n          );\n        } else {\n          return (\n            (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (value.position + 1 + 4 + 1)\n          );\n        }\n      } else if (value instanceof Symbol || value['_bsontype'] === 'Symbol') {\n        return (\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n          Buffer.byteLength(value.value, 'utf8') +\n          4 +\n          1 +\n          1\n        );\n      } else if (value instanceof DBRef || value['_bsontype'] === 'DBRef') {\n        // Set up correct object for serialization\n        var ordered_values = {\n          $ref: value.namespace,\n          $id: value.oid\n        };\n\n        // Add db reference if it exists\n        if (null != value.db) {\n          ordered_values['$db'] = value.db;\n        }\n\n        return (\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n          1 +\n          calculateObjectSize(ordered_values, serializeFunctions, ignoreUndefined)\n        );\n      } else if (\n        value instanceof RegExp ||\n        Object.prototype.toString.call(value) === '[object RegExp]'\n      ) {\n        return (\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n          1 +\n          Buffer.byteLength(value.source, 'utf8') +\n          1 +\n          (value.global ? 1 : 0) +\n          (value.ignoreCase ? 1 : 0) +\n          (value.multiline ? 1 : 0) +\n          1\n        );\n      } else if (value instanceof BSONRegExp || value['_bsontype'] === 'BSONRegExp') {\n        return (\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n          1 +\n          Buffer.byteLength(value.pattern, 'utf8') +\n          1 +\n          Buffer.byteLength(value.options, 'utf8') +\n          1\n        );\n      } else {\n        return (\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n          calculateObjectSize(value, serializeFunctions, ignoreUndefined) +\n          1\n        );\n      }\n    case 'function':\n      // WTF for 0.4.X where typeof /someregexp/ === 'function'\n      if (\n        value instanceof RegExp ||\n        Object.prototype.toString.call(value) === '[object RegExp]' ||\n        String.call(value) === '[object RegExp]'\n      ) {\n        return (\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n          1 +\n          Buffer.byteLength(value.source, 'utf8') +\n          1 +\n          (value.global ? 1 : 0) +\n          (value.ignoreCase ? 1 : 0) +\n          (value.multiline ? 1 : 0) +\n          1\n        );\n      } else {\n        if (serializeFunctions && value.scope != null && Object.keys(value.scope).length > 0) {\n          return (\n            (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n            1 +\n            4 +\n            4 +\n            Buffer.byteLength(normalizedFunctionString(value), 'utf8') +\n            1 +\n            calculateObjectSize(value.scope, serializeFunctions, ignoreUndefined)\n          );\n        } else if (serializeFunctions) {\n          return (\n            (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n            1 +\n            4 +\n            Buffer.byteLength(normalizedFunctionString(value), 'utf8') +\n            1\n          );\n        }\n      }\n  }\n\n  return 0;\n}\n\nvar BSON = {};\n\n// BSON MAX VALUES\nBSON.BSON_INT32_MAX = 0x7fffffff;\nBSON.BSON_INT32_MIN = -0x80000000;\n\n// JS MAX PRECISE VALUES\nBSON.JS_INT_MAX = 0x20000000000000; // Any integer up to 2^53 can be precisely represented by a double.\nBSON.JS_INT_MIN = -0x20000000000000; // Any integer down to -2^53 can be precisely represented by a double.\n\nmodule.exports = calculateObjectSize;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26\n");

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var path = __webpack_require__(29),\n  fs = __webpack_require__(30),\n  f = __webpack_require__(12).format,\n  resolveFrom = __webpack_require__(31),\n  semver = __webpack_require__(33);\n\nvar exists = fs.existsSync || path.existsSync;\n\n// Find the location of a package.json file near or above the given location\nvar find_package_json = function(location) {\n  var found = false;\n\n  while(!found) {\n    if (exists(location + '/package.json')) {\n      found = location;\n    } else if (location !== '/') {\n      location = path.dirname(location);\n    } else {\n      return false;\n    }\n  }\n\n  return location;\n}\n\n// Find the package.json object of the module closest up the module call tree that contains name in that module's peerOptionalDependencies\nvar find_package_json_with_name = function(name) {\n  // Walk up the module call tree until we find a module containing name in its peerOptionalDependencies\n  var currentModule = module;\n  var found = false;\n  while (currentModule) {\n    // Check currentModule has a package.json\n    location = currentModule.filename;\n    var location = find_package_json(location)\n    if (!location) {\n      currentModule = currentModule.parent;\n      continue;\n    }\n\n    // Read the package.json file\n    var object = JSON.parse(fs.readFileSync(f('%s/package.json', location)));\n    // Is the name defined by interal file references\n    var parts = name.split(/\\//);\n\n    // Check whether this package.json contains peerOptionalDependencies containing the name we're searching for\n    if (!object.peerOptionalDependencies || (object.peerOptionalDependencies && !object.peerOptionalDependencies[parts[0]])) {\n      currentModule = currentModule.parent;\n      continue;\n    }\n    found = true;\n    break;\n  }\n\n  // Check whether name has been found in currentModule's peerOptionalDependencies\n  if (!found) {\n    throw new Error(f('no optional dependency [%s] defined in peerOptionalDependencies in any package.json', parts[0]));\n  }\n\n  return {\n    object: object,\n    parts: parts\n  }\n}\n\nvar require_optional = function(name, options) {\n  options = options || {};\n  options.strict = typeof options.strict == 'boolean' ? options.strict : true;\n\n  var res = find_package_json_with_name(name)\n  var object = res.object;\n  var parts = res.parts;\n\n  // Unpack the expected version\n  var expectedVersions = object.peerOptionalDependencies[parts[0]];\n  // The resolved package\n  var moduleEntry = undefined;\n  // Module file\n  var moduleEntryFile = name;\n\n  try {\n    // Validate if it's possible to read the module\n    moduleEntry = __webpack_require__(34)(moduleEntryFile);\n  } catch(err) {\n    // Attempt to resolve in top level package\n    try {\n      // Get the module entry file\n      moduleEntryFile = resolveFrom(process.cwd(), name);\n      if(moduleEntryFile == null) return undefined;\n      // Attempt to resolve the module\n      moduleEntry = __webpack_require__(34)(moduleEntryFile);\n    } catch(err) {\n      if(err.code === 'MODULE_NOT_FOUND') return undefined;\n    }\n  }\n\n  // Resolve the location of the module's package.json file\n  var location = find_package_json(/*require.resolve*/(__webpack_require__(34).resolve(moduleEntryFile)));\n  if(!location) {\n    throw new Error('package.json can not be located');\n  }\n\n  // Read the module file\n  var dependentOnModule = JSON.parse(fs.readFileSync(f('%s/package.json', location)));\n  // Get the version\n  var version = dependentOnModule.version;\n  // Validate if the found module satisfies the version id\n  if(semver.satisfies(version, expectedVersions) == false\n    && options.strict) {\n      var error = new Error(f('optional dependency [%s] found but version [%s] did not satisfy constraint [%s]', parts[0], version, expectedVersions));\n      error.code = 'OPTIONAL_MODULE_NOT_FOUND';\n      throw error;\n  }\n\n  // Satifies the module requirement\n  return moduleEntry;\n}\n\nrequire_optional.exists = function(name) {\n  try {\n    var m = require_optional(name);\n    if(m === undefined) return false;\n    return true;\n  } catch(err) {\n    return false;\n  }\n}\n\nmodule.exports = require_optional;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(28)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL3JlcXVpcmVfb3B0aW9uYWwvaW5kZXguanM/MTk2MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx5REFBVyxtQkFBTyxDQUFDLEVBQU07QUFDekIsT0FBTyxtQkFBTyxDQUFDLEVBQUk7QUFDbkIsTUFBTSxtQkFBTyxDQUFDLEVBQU07QUFDcEIsZ0JBQWdCLG1CQUFPLENBQUMsRUFBYztBQUN0QyxXQUFXLG1CQUFPLENBQUMsRUFBUTs7QUFFM0I7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQix3QkFBUSxlQUFlLENBQUM7QUFDMUMsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix3QkFBUSxlQUFlLENBQUM7QUFDNUMsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1DQUFtQyxtQkFBZSxDQUFDLCtDQUFlO0FBQ2xFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIyNy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpLFxuICBmcyA9IHJlcXVpcmUoJ2ZzJyksXG4gIGYgPSByZXF1aXJlKCd1dGlsJykuZm9ybWF0LFxuICByZXNvbHZlRnJvbSA9IHJlcXVpcmUoJ3Jlc29sdmUtZnJvbScpLFxuICBzZW12ZXIgPSByZXF1aXJlKCdzZW12ZXInKTtcblxudmFyIGV4aXN0cyA9IGZzLmV4aXN0c1N5bmMgfHwgcGF0aC5leGlzdHNTeW5jO1xuXG4vLyBGaW5kIHRoZSBsb2NhdGlvbiBvZiBhIHBhY2thZ2UuanNvbiBmaWxlIG5lYXIgb3IgYWJvdmUgdGhlIGdpdmVuIGxvY2F0aW9uXG52YXIgZmluZF9wYWNrYWdlX2pzb24gPSBmdW5jdGlvbihsb2NhdGlvbikge1xuICB2YXIgZm91bmQgPSBmYWxzZTtcblxuICB3aGlsZSghZm91bmQpIHtcbiAgICBpZiAoZXhpc3RzKGxvY2F0aW9uICsgJy9wYWNrYWdlLmpzb24nKSkge1xuICAgICAgZm91bmQgPSBsb2NhdGlvbjtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uID0gcGF0aC5kaXJuYW1lKGxvY2F0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsb2NhdGlvbjtcbn1cblxuLy8gRmluZCB0aGUgcGFja2FnZS5qc29uIG9iamVjdCBvZiB0aGUgbW9kdWxlIGNsb3Nlc3QgdXAgdGhlIG1vZHVsZSBjYWxsIHRyZWUgdGhhdCBjb250YWlucyBuYW1lIGluIHRoYXQgbW9kdWxlJ3MgcGVlck9wdGlvbmFsRGVwZW5kZW5jaWVzXG52YXIgZmluZF9wYWNrYWdlX2pzb25fd2l0aF9uYW1lID0gZnVuY3Rpb24obmFtZSkge1xuICAvLyBXYWxrIHVwIHRoZSBtb2R1bGUgY2FsbCB0cmVlIHVudGlsIHdlIGZpbmQgYSBtb2R1bGUgY29udGFpbmluZyBuYW1lIGluIGl0cyBwZWVyT3B0aW9uYWxEZXBlbmRlbmNpZXNcbiAgdmFyIGN1cnJlbnRNb2R1bGUgPSBtb2R1bGU7XG4gIHZhciBmb3VuZCA9IGZhbHNlO1xuICB3aGlsZSAoY3VycmVudE1vZHVsZSkge1xuICAgIC8vIENoZWNrIGN1cnJlbnRNb2R1bGUgaGFzIGEgcGFja2FnZS5qc29uXG4gICAgbG9jYXRpb24gPSBjdXJyZW50TW9kdWxlLmZpbGVuYW1lO1xuICAgIHZhciBsb2NhdGlvbiA9IGZpbmRfcGFja2FnZV9qc29uKGxvY2F0aW9uKVxuICAgIGlmICghbG9jYXRpb24pIHtcbiAgICAgIGN1cnJlbnRNb2R1bGUgPSBjdXJyZW50TW9kdWxlLnBhcmVudDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIFJlYWQgdGhlIHBhY2thZ2UuanNvbiBmaWxlXG4gICAgdmFyIG9iamVjdCA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKGYoJyVzL3BhY2thZ2UuanNvbicsIGxvY2F0aW9uKSkpO1xuICAgIC8vIElzIHRoZSBuYW1lIGRlZmluZWQgYnkgaW50ZXJhbCBmaWxlIHJlZmVyZW5jZXNcbiAgICB2YXIgcGFydHMgPSBuYW1lLnNwbGl0KC9cXC8vKTtcblxuICAgIC8vIENoZWNrIHdoZXRoZXIgdGhpcyBwYWNrYWdlLmpzb24gY29udGFpbnMgcGVlck9wdGlvbmFsRGVwZW5kZW5jaWVzIGNvbnRhaW5pbmcgdGhlIG5hbWUgd2UncmUgc2VhcmNoaW5nIGZvclxuICAgIGlmICghb2JqZWN0LnBlZXJPcHRpb25hbERlcGVuZGVuY2llcyB8fCAob2JqZWN0LnBlZXJPcHRpb25hbERlcGVuZGVuY2llcyAmJiAhb2JqZWN0LnBlZXJPcHRpb25hbERlcGVuZGVuY2llc1twYXJ0c1swXV0pKSB7XG4gICAgICBjdXJyZW50TW9kdWxlID0gY3VycmVudE1vZHVsZS5wYXJlbnQ7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgZm91bmQgPSB0cnVlO1xuICAgIGJyZWFrO1xuICB9XG5cbiAgLy8gQ2hlY2sgd2hldGhlciBuYW1lIGhhcyBiZWVuIGZvdW5kIGluIGN1cnJlbnRNb2R1bGUncyBwZWVyT3B0aW9uYWxEZXBlbmRlbmNpZXNcbiAgaWYgKCFmb3VuZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihmKCdubyBvcHRpb25hbCBkZXBlbmRlbmN5IFslc10gZGVmaW5lZCBpbiBwZWVyT3B0aW9uYWxEZXBlbmRlbmNpZXMgaW4gYW55IHBhY2thZ2UuanNvbicsIHBhcnRzWzBdKSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9iamVjdDogb2JqZWN0LFxuICAgIHBhcnRzOiBwYXJ0c1xuICB9XG59XG5cbnZhciByZXF1aXJlX29wdGlvbmFsID0gZnVuY3Rpb24obmFtZSwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5zdHJpY3QgPSB0eXBlb2Ygb3B0aW9ucy5zdHJpY3QgPT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5zdHJpY3QgOiB0cnVlO1xuXG4gIHZhciByZXMgPSBmaW5kX3BhY2thZ2VfanNvbl93aXRoX25hbWUobmFtZSlcbiAgdmFyIG9iamVjdCA9IHJlcy5vYmplY3Q7XG4gIHZhciBwYXJ0cyA9IHJlcy5wYXJ0cztcblxuICAvLyBVbnBhY2sgdGhlIGV4cGVjdGVkIHZlcnNpb25cbiAgdmFyIGV4cGVjdGVkVmVyc2lvbnMgPSBvYmplY3QucGVlck9wdGlvbmFsRGVwZW5kZW5jaWVzW3BhcnRzWzBdXTtcbiAgLy8gVGhlIHJlc29sdmVkIHBhY2thZ2VcbiAgdmFyIG1vZHVsZUVudHJ5ID0gdW5kZWZpbmVkO1xuICAvLyBNb2R1bGUgZmlsZVxuICB2YXIgbW9kdWxlRW50cnlGaWxlID0gbmFtZTtcblxuICB0cnkge1xuICAgIC8vIFZhbGlkYXRlIGlmIGl0J3MgcG9zc2libGUgdG8gcmVhZCB0aGUgbW9kdWxlXG4gICAgbW9kdWxlRW50cnkgPSByZXF1aXJlKG1vZHVsZUVudHJ5RmlsZSk7XG4gIH0gY2F0Y2goZXJyKSB7XG4gICAgLy8gQXR0ZW1wdCB0byByZXNvbHZlIGluIHRvcCBsZXZlbCBwYWNrYWdlXG4gICAgdHJ5IHtcbiAgICAgIC8vIEdldCB0aGUgbW9kdWxlIGVudHJ5IGZpbGVcbiAgICAgIG1vZHVsZUVudHJ5RmlsZSA9IHJlc29sdmVGcm9tKHByb2Nlc3MuY3dkKCksIG5hbWUpO1xuICAgICAgaWYobW9kdWxlRW50cnlGaWxlID09IG51bGwpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAvLyBBdHRlbXB0IHRvIHJlc29sdmUgdGhlIG1vZHVsZVxuICAgICAgbW9kdWxlRW50cnkgPSByZXF1aXJlKG1vZHVsZUVudHJ5RmlsZSk7XG4gICAgfSBjYXRjaChlcnIpIHtcbiAgICAgIGlmKGVyci5jb2RlID09PSAnTU9EVUxFX05PVF9GT1VORCcpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgLy8gUmVzb2x2ZSB0aGUgbG9jYXRpb24gb2YgdGhlIG1vZHVsZSdzIHBhY2thZ2UuanNvbiBmaWxlXG4gIHZhciBsb2NhdGlvbiA9IGZpbmRfcGFja2FnZV9qc29uKHJlcXVpcmUucmVzb2x2ZShtb2R1bGVFbnRyeUZpbGUpKTtcbiAgaWYoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwYWNrYWdlLmpzb24gY2FuIG5vdCBiZSBsb2NhdGVkJyk7XG4gIH1cblxuICAvLyBSZWFkIHRoZSBtb2R1bGUgZmlsZVxuICB2YXIgZGVwZW5kZW50T25Nb2R1bGUgPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhmKCclcy9wYWNrYWdlLmpzb24nLCBsb2NhdGlvbikpKTtcbiAgLy8gR2V0IHRoZSB2ZXJzaW9uXG4gIHZhciB2ZXJzaW9uID0gZGVwZW5kZW50T25Nb2R1bGUudmVyc2lvbjtcbiAgLy8gVmFsaWRhdGUgaWYgdGhlIGZvdW5kIG1vZHVsZSBzYXRpc2ZpZXMgdGhlIHZlcnNpb24gaWRcbiAgaWYoc2VtdmVyLnNhdGlzZmllcyh2ZXJzaW9uLCBleHBlY3RlZFZlcnNpb25zKSA9PSBmYWxzZVxuICAgICYmIG9wdGlvbnMuc3RyaWN0KSB7XG4gICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoZignb3B0aW9uYWwgZGVwZW5kZW5jeSBbJXNdIGZvdW5kIGJ1dCB2ZXJzaW9uIFslc10gZGlkIG5vdCBzYXRpc2Z5IGNvbnN0cmFpbnQgWyVzXScsIHBhcnRzWzBdLCB2ZXJzaW9uLCBleHBlY3RlZFZlcnNpb25zKSk7XG4gICAgICBlcnJvci5jb2RlID0gJ09QVElPTkFMX01PRFVMRV9OT1RfRk9VTkQnO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gIH1cblxuICAvLyBTYXRpZmllcyB0aGUgbW9kdWxlIHJlcXVpcmVtZW50XG4gIHJldHVybiBtb2R1bGVFbnRyeTtcbn1cblxucmVxdWlyZV9vcHRpb25hbC5leGlzdHMgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHRyeSB7XG4gICAgdmFyIG0gPSByZXF1aXJlX29wdGlvbmFsKG5hbWUpO1xuICAgIGlmKG0gPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoKGVycikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmVfb3B0aW9uYWw7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///27\n");

/***/ }),
/* 28 */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Lyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcz9jZWQyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///28\n");

/***/ }),
/* 29 */
/***/ (function(module, exports) {

eval("module.exports = require(\"path\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0L2V4dGVybmFsIFwicGF0aFwiPzc0YmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJwYXRoXCIpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///29\n");

/***/ }),
/* 30 */
/***/ (function(module, exports) {

eval("module.exports = require(\"fs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0L2V4dGVybmFsIFwiZnNcIj9hNDBkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjMwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZnNcIik7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///30\n");

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar path = __webpack_require__(29);\nvar Module = __webpack_require__(32);\n\nmodule.exports = function (fromDir, moduleId) {\n\tif (typeof fromDir !== 'string' || typeof moduleId !== 'string') {\n\t\tthrow new TypeError('Expected `fromDir` and `moduleId` to be a string');\n\t}\n\n\tfromDir = path.resolve(fromDir);\n\n\tvar fromFile = path.join(fromDir, 'noop.js');\n\n\ttry {\n\t\treturn Module._resolveFilename(moduleId, {\n\t\t\tid: fromFile,\n\t\t\tfilename: fromFile,\n\t\t\tpaths: Module._nodeModulePaths(fromDir)\n\t\t});\n\t} catch (err) {\n\t\treturn null;\n\t}\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL3Jlc29sdmUtZnJvbS9pbmRleC5qcz81MjdmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsV0FBVyxtQkFBTyxDQUFDLEVBQU07QUFDekIsYUFBYSxtQkFBTyxDQUFDLEVBQVE7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTtBQUNGO0FBQ0E7QUFDQSIsImZpbGUiOiIzMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xudmFyIE1vZHVsZSA9IHJlcXVpcmUoJ21vZHVsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmcm9tRGlyLCBtb2R1bGVJZCkge1xuXHRpZiAodHlwZW9mIGZyb21EaXIgIT09ICdzdHJpbmcnIHx8IHR5cGVvZiBtb2R1bGVJZCAhPT0gJ3N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBgZnJvbURpcmAgYW5kIGBtb2R1bGVJZGAgdG8gYmUgYSBzdHJpbmcnKTtcblx0fVxuXG5cdGZyb21EaXIgPSBwYXRoLnJlc29sdmUoZnJvbURpcik7XG5cblx0dmFyIGZyb21GaWxlID0gcGF0aC5qb2luKGZyb21EaXIsICdub29wLmpzJyk7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gTW9kdWxlLl9yZXNvbHZlRmlsZW5hbWUobW9kdWxlSWQsIHtcblx0XHRcdGlkOiBmcm9tRmlsZSxcblx0XHRcdGZpbGVuYW1lOiBmcm9tRmlsZSxcblx0XHRcdHBhdGhzOiBNb2R1bGUuX25vZGVNb2R1bGVQYXRocyhmcm9tRGlyKVxuXHRcdH0pO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///31\n");

/***/ }),
/* 32 */
/***/ (function(module, exports) {

eval("module.exports = require(\"module\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0L2V4dGVybmFsIFwibW9kdWxlXCI/N2M0OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIzMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm1vZHVsZVwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///32\n");

/***/ }),
/* 33 */
/***/ (function(module, exports) {

eval("exports = module.exports = SemVer\n\nvar debug\n/* istanbul ignore next */\nif (typeof process === 'object' &&\n    process.env &&\n    process.env.NODE_DEBUG &&\n    /\\bsemver\\b/i.test(process.env.NODE_DEBUG)) {\n  debug = function () {\n    var args = Array.prototype.slice.call(arguments, 0)\n    args.unshift('SEMVER')\n    console.log.apply(console, args)\n  }\n} else {\n  debug = function () {}\n}\n\n// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nexports.SEMVER_SPEC_VERSION = '2.0.0'\n\nvar MAX_LENGTH = 256\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||\n  /* istanbul ignore next */ 9007199254740991\n\n// Max safe segment length for coercion.\nvar MAX_SAFE_COMPONENT_LENGTH = 16\n\n// The actual regexps go on exports.re\nvar re = exports.re = []\nvar src = exports.src = []\nvar R = 0\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\nvar NUMERICIDENTIFIER = R++\nsrc[NUMERICIDENTIFIER] = '0|[1-9]\\\\d*'\nvar NUMERICIDENTIFIERLOOSE = R++\nsrc[NUMERICIDENTIFIERLOOSE] = '[0-9]+'\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\nvar NONNUMERICIDENTIFIER = R++\nsrc[NONNUMERICIDENTIFIER] = '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*'\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\nvar MAINVERSION = R++\nsrc[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[NUMERICIDENTIFIER] + ')'\n\nvar MAINVERSIONLOOSE = R++\nsrc[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')'\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\nvar PRERELEASEIDENTIFIER = R++\nsrc[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +\n                            '|' + src[NONNUMERICIDENTIFIER] + ')'\n\nvar PRERELEASEIDENTIFIERLOOSE = R++\nsrc[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +\n                                 '|' + src[NONNUMERICIDENTIFIER] + ')'\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\nvar PRERELEASE = R++\nsrc[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +\n                  '(?:\\\\.' + src[PRERELEASEIDENTIFIER] + ')*))'\n\nvar PRERELEASELOOSE = R++\nsrc[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +\n                       '(?:\\\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))'\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\nvar BUILDIDENTIFIER = R++\nsrc[BUILDIDENTIFIER] = '[0-9A-Za-z-]+'\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\nvar BUILD = R++\nsrc[BUILD] = '(?:\\\\+(' + src[BUILDIDENTIFIER] +\n             '(?:\\\\.' + src[BUILDIDENTIFIER] + ')*))'\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\nvar FULL = R++\nvar FULLPLAIN = 'v?' + src[MAINVERSION] +\n                src[PRERELEASE] + '?' +\n                src[BUILD] + '?'\n\nsrc[FULL] = '^' + FULLPLAIN + '$'\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\nvar LOOSEPLAIN = '[v=\\\\s]*' + src[MAINVERSIONLOOSE] +\n                 src[PRERELEASELOOSE] + '?' +\n                 src[BUILD] + '?'\n\nvar LOOSE = R++\nsrc[LOOSE] = '^' + LOOSEPLAIN + '$'\n\nvar GTLT = R++\nsrc[GTLT] = '((?:<|>)?=?)'\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\nvar XRANGEIDENTIFIERLOOSE = R++\nsrc[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\\\*'\nvar XRANGEIDENTIFIER = R++\nsrc[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\\\*'\n\nvar XRANGEPLAIN = R++\nsrc[XRANGEPLAIN] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:' + src[PRERELEASE] + ')?' +\n                   src[BUILD] + '?' +\n                   ')?)?'\n\nvar XRANGEPLAINLOOSE = R++\nsrc[XRANGEPLAINLOOSE] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:' + src[PRERELEASELOOSE] + ')?' +\n                        src[BUILD] + '?' +\n                        ')?)?'\n\nvar XRANGE = R++\nsrc[XRANGE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAIN] + '$'\nvar XRANGELOOSE = R++\nsrc[XRANGELOOSE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAINLOOSE] + '$'\n\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\nvar COERCE = R++\nsrc[COERCE] = '(?:^|[^\\\\d])' +\n              '(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' +\n              '(?:\\\\.(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +\n              '(?:\\\\.(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +\n              '(?:$|[^\\\\d])'\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\nvar LONETILDE = R++\nsrc[LONETILDE] = '(?:~>?)'\n\nvar TILDETRIM = R++\nsrc[TILDETRIM] = '(\\\\s*)' + src[LONETILDE] + '\\\\s+'\nre[TILDETRIM] = new RegExp(src[TILDETRIM], 'g')\nvar tildeTrimReplace = '$1~'\n\nvar TILDE = R++\nsrc[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$'\nvar TILDELOOSE = R++\nsrc[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$'\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\nvar LONECARET = R++\nsrc[LONECARET] = '(?:\\\\^)'\n\nvar CARETTRIM = R++\nsrc[CARETTRIM] = '(\\\\s*)' + src[LONECARET] + '\\\\s+'\nre[CARETTRIM] = new RegExp(src[CARETTRIM], 'g')\nvar caretTrimReplace = '$1^'\n\nvar CARET = R++\nsrc[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$'\nvar CARETLOOSE = R++\nsrc[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$'\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\nvar COMPARATORLOOSE = R++\nsrc[COMPARATORLOOSE] = '^' + src[GTLT] + '\\\\s*(' + LOOSEPLAIN + ')$|^$'\nvar COMPARATOR = R++\nsrc[COMPARATOR] = '^' + src[GTLT] + '\\\\s*(' + FULLPLAIN + ')$|^$'\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\nvar COMPARATORTRIM = R++\nsrc[COMPARATORTRIM] = '(\\\\s*)' + src[GTLT] +\n                      '\\\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')'\n\n// this one has to use the /g flag\nre[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g')\nvar comparatorTrimReplace = '$1$2$3'\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\nvar HYPHENRANGE = R++\nsrc[HYPHENRANGE] = '^\\\\s*(' + src[XRANGEPLAIN] + ')' +\n                   '\\\\s+-\\\\s+' +\n                   '(' + src[XRANGEPLAIN] + ')' +\n                   '\\\\s*$'\n\nvar HYPHENRANGELOOSE = R++\nsrc[HYPHENRANGELOOSE] = '^\\\\s*(' + src[XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s+-\\\\s+' +\n                        '(' + src[XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s*$'\n\n// Star ranges basically just allow anything at all.\nvar STAR = R++\nsrc[STAR] = '(<|>)?=?\\\\s*\\\\*'\n\n// Compile to actual regexp objects.\n// All are flag-free, unless they were created above with a flag.\nfor (var i = 0; i < R; i++) {\n  debug(i, src[i])\n  if (!re[i]) {\n    re[i] = new RegExp(src[i])\n  }\n}\n\nexports.parse = parse\nfunction parse (version, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  if (version.length > MAX_LENGTH) {\n    return null\n  }\n\n  var r = options.loose ? re[LOOSE] : re[FULL]\n  if (!r.test(version)) {\n    return null\n  }\n\n  try {\n    return new SemVer(version, options)\n  } catch (er) {\n    return null\n  }\n}\n\nexports.valid = valid\nfunction valid (version, options) {\n  var v = parse(version, options)\n  return v ? v.version : null\n}\n\nexports.clean = clean\nfunction clean (version, options) {\n  var s = parse(version.trim().replace(/^[=v]+/, ''), options)\n  return s ? s.version : null\n}\n\nexports.SemVer = SemVer\n\nfunction SemVer (version, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n  if (version instanceof SemVer) {\n    if (version.loose === options.loose) {\n      return version\n    } else {\n      version = version.version\n    }\n  } else if (typeof version !== 'string') {\n    throw new TypeError('Invalid Version: ' + version)\n  }\n\n  if (version.length > MAX_LENGTH) {\n    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')\n  }\n\n  if (!(this instanceof SemVer)) {\n    return new SemVer(version, options)\n  }\n\n  debug('SemVer', version, options)\n  this.options = options\n  this.loose = !!options.loose\n\n  var m = version.trim().match(options.loose ? re[LOOSE] : re[FULL])\n\n  if (!m) {\n    throw new TypeError('Invalid Version: ' + version)\n  }\n\n  this.raw = version\n\n  // these are actually numbers\n  this.major = +m[1]\n  this.minor = +m[2]\n  this.patch = +m[3]\n\n  if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n    throw new TypeError('Invalid major version')\n  }\n\n  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n    throw new TypeError('Invalid minor version')\n  }\n\n  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n    throw new TypeError('Invalid patch version')\n  }\n\n  // numberify any prerelease numeric ids\n  if (!m[4]) {\n    this.prerelease = []\n  } else {\n    this.prerelease = m[4].split('.').map(function (id) {\n      if (/^[0-9]+$/.test(id)) {\n        var num = +id\n        if (num >= 0 && num < MAX_SAFE_INTEGER) {\n          return num\n        }\n      }\n      return id\n    })\n  }\n\n  this.build = m[5] ? m[5].split('.') : []\n  this.format()\n}\n\nSemVer.prototype.format = function () {\n  this.version = this.major + '.' + this.minor + '.' + this.patch\n  if (this.prerelease.length) {\n    this.version += '-' + this.prerelease.join('.')\n  }\n  return this.version\n}\n\nSemVer.prototype.toString = function () {\n  return this.version\n}\n\nSemVer.prototype.compare = function (other) {\n  debug('SemVer.compare', this.version, this.options, other)\n  if (!(other instanceof SemVer)) {\n    other = new SemVer(other, this.options)\n  }\n\n  return this.compareMain(other) || this.comparePre(other)\n}\n\nSemVer.prototype.compareMain = function (other) {\n  if (!(other instanceof SemVer)) {\n    other = new SemVer(other, this.options)\n  }\n\n  return compareIdentifiers(this.major, other.major) ||\n         compareIdentifiers(this.minor, other.minor) ||\n         compareIdentifiers(this.patch, other.patch)\n}\n\nSemVer.prototype.comparePre = function (other) {\n  if (!(other instanceof SemVer)) {\n    other = new SemVer(other, this.options)\n  }\n\n  // NOT having a prerelease is > having one\n  if (this.prerelease.length && !other.prerelease.length) {\n    return -1\n  } else if (!this.prerelease.length && other.prerelease.length) {\n    return 1\n  } else if (!this.prerelease.length && !other.prerelease.length) {\n    return 0\n  }\n\n  var i = 0\n  do {\n    var a = this.prerelease[i]\n    var b = other.prerelease[i]\n    debug('prerelease compare', i, a, b)\n    if (a === undefined && b === undefined) {\n      return 0\n    } else if (b === undefined) {\n      return 1\n    } else if (a === undefined) {\n      return -1\n    } else if (a === b) {\n      continue\n    } else {\n      return compareIdentifiers(a, b)\n    }\n  } while (++i)\n}\n\n// preminor will bump the version up to the next minor release, and immediately\n// down to pre-release. premajor and prepatch work the same way.\nSemVer.prototype.inc = function (release, identifier) {\n  switch (release) {\n    case 'premajor':\n      this.prerelease.length = 0\n      this.patch = 0\n      this.minor = 0\n      this.major++\n      this.inc('pre', identifier)\n      break\n    case 'preminor':\n      this.prerelease.length = 0\n      this.patch = 0\n      this.minor++\n      this.inc('pre', identifier)\n      break\n    case 'prepatch':\n      // If this is already a prerelease, it will bump to the next version\n      // drop any prereleases that might already exist, since they are not\n      // relevant at this point.\n      this.prerelease.length = 0\n      this.inc('patch', identifier)\n      this.inc('pre', identifier)\n      break\n    // If the input is a non-prerelease version, this acts the same as\n    // prepatch.\n    case 'prerelease':\n      if (this.prerelease.length === 0) {\n        this.inc('patch', identifier)\n      }\n      this.inc('pre', identifier)\n      break\n\n    case 'major':\n      // If this is a pre-major version, bump up to the same major version.\n      // Otherwise increment major.\n      // 1.0.0-5 bumps to 1.0.0\n      // 1.1.0 bumps to 2.0.0\n      if (this.minor !== 0 ||\n          this.patch !== 0 ||\n          this.prerelease.length === 0) {\n        this.major++\n      }\n      this.minor = 0\n      this.patch = 0\n      this.prerelease = []\n      break\n    case 'minor':\n      // If this is a pre-minor version, bump up to the same minor version.\n      // Otherwise increment minor.\n      // 1.2.0-5 bumps to 1.2.0\n      // 1.2.1 bumps to 1.3.0\n      if (this.patch !== 0 || this.prerelease.length === 0) {\n        this.minor++\n      }\n      this.patch = 0\n      this.prerelease = []\n      break\n    case 'patch':\n      // If this is not a pre-release version, it will increment the patch.\n      // If it is a pre-release it will bump up to the same patch version.\n      // 1.2.0-5 patches to 1.2.0\n      // 1.2.0 patches to 1.2.1\n      if (this.prerelease.length === 0) {\n        this.patch++\n      }\n      this.prerelease = []\n      break\n    // This probably shouldn't be used publicly.\n    // 1.0.0 \"pre\" would become 1.0.0-0 which is the wrong direction.\n    case 'pre':\n      if (this.prerelease.length === 0) {\n        this.prerelease = [0]\n      } else {\n        var i = this.prerelease.length\n        while (--i >= 0) {\n          if (typeof this.prerelease[i] === 'number') {\n            this.prerelease[i]++\n            i = -2\n          }\n        }\n        if (i === -1) {\n          // didn't increment anything\n          this.prerelease.push(0)\n        }\n      }\n      if (identifier) {\n        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n        if (this.prerelease[0] === identifier) {\n          if (isNaN(this.prerelease[1])) {\n            this.prerelease = [identifier, 0]\n          }\n        } else {\n          this.prerelease = [identifier, 0]\n        }\n      }\n      break\n\n    default:\n      throw new Error('invalid increment argument: ' + release)\n  }\n  this.format()\n  this.raw = this.version\n  return this\n}\n\nexports.inc = inc\nfunction inc (version, release, loose, identifier) {\n  if (typeof (loose) === 'string') {\n    identifier = loose\n    loose = undefined\n  }\n\n  try {\n    return new SemVer(version, loose).inc(release, identifier).version\n  } catch (er) {\n    return null\n  }\n}\n\nexports.diff = diff\nfunction diff (version1, version2) {\n  if (eq(version1, version2)) {\n    return null\n  } else {\n    var v1 = parse(version1)\n    var v2 = parse(version2)\n    var prefix = ''\n    if (v1.prerelease.length || v2.prerelease.length) {\n      prefix = 'pre'\n      var defaultResult = 'prerelease'\n    }\n    for (var key in v1) {\n      if (key === 'major' || key === 'minor' || key === 'patch') {\n        if (v1[key] !== v2[key]) {\n          return prefix + key\n        }\n      }\n    }\n    return defaultResult // may be undefined\n  }\n}\n\nexports.compareIdentifiers = compareIdentifiers\n\nvar numeric = /^[0-9]+$/\nfunction compareIdentifiers (a, b) {\n  var anum = numeric.test(a)\n  var bnum = numeric.test(b)\n\n  if (anum && bnum) {\n    a = +a\n    b = +b\n  }\n\n  return a === b ? 0\n    : (anum && !bnum) ? -1\n    : (bnum && !anum) ? 1\n    : a < b ? -1\n    : 1\n}\n\nexports.rcompareIdentifiers = rcompareIdentifiers\nfunction rcompareIdentifiers (a, b) {\n  return compareIdentifiers(b, a)\n}\n\nexports.major = major\nfunction major (a, loose) {\n  return new SemVer(a, loose).major\n}\n\nexports.minor = minor\nfunction minor (a, loose) {\n  return new SemVer(a, loose).minor\n}\n\nexports.patch = patch\nfunction patch (a, loose) {\n  return new SemVer(a, loose).patch\n}\n\nexports.compare = compare\nfunction compare (a, b, loose) {\n  return new SemVer(a, loose).compare(new SemVer(b, loose))\n}\n\nexports.compareLoose = compareLoose\nfunction compareLoose (a, b) {\n  return compare(a, b, true)\n}\n\nexports.rcompare = rcompare\nfunction rcompare (a, b, loose) {\n  return compare(b, a, loose)\n}\n\nexports.sort = sort\nfunction sort (list, loose) {\n  return list.sort(function (a, b) {\n    return exports.compare(a, b, loose)\n  })\n}\n\nexports.rsort = rsort\nfunction rsort (list, loose) {\n  return list.sort(function (a, b) {\n    return exports.rcompare(a, b, loose)\n  })\n}\n\nexports.gt = gt\nfunction gt (a, b, loose) {\n  return compare(a, b, loose) > 0\n}\n\nexports.lt = lt\nfunction lt (a, b, loose) {\n  return compare(a, b, loose) < 0\n}\n\nexports.eq = eq\nfunction eq (a, b, loose) {\n  return compare(a, b, loose) === 0\n}\n\nexports.neq = neq\nfunction neq (a, b, loose) {\n  return compare(a, b, loose) !== 0\n}\n\nexports.gte = gte\nfunction gte (a, b, loose) {\n  return compare(a, b, loose) >= 0\n}\n\nexports.lte = lte\nfunction lte (a, b, loose) {\n  return compare(a, b, loose) <= 0\n}\n\nexports.cmp = cmp\nfunction cmp (a, op, b, loose) {\n  switch (op) {\n    case '===':\n      if (typeof a === 'object')\n        a = a.version\n      if (typeof b === 'object')\n        b = b.version\n      return a === b\n\n    case '!==':\n      if (typeof a === 'object')\n        a = a.version\n      if (typeof b === 'object')\n        b = b.version\n      return a !== b\n\n    case '':\n    case '=':\n    case '==':\n      return eq(a, b, loose)\n\n    case '!=':\n      return neq(a, b, loose)\n\n    case '>':\n      return gt(a, b, loose)\n\n    case '>=':\n      return gte(a, b, loose)\n\n    case '<':\n      return lt(a, b, loose)\n\n    case '<=':\n      return lte(a, b, loose)\n\n    default:\n      throw new TypeError('Invalid operator: ' + op)\n  }\n}\n\nexports.Comparator = Comparator\nfunction Comparator (comp, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n\n  if (comp instanceof Comparator) {\n    if (comp.loose === !!options.loose) {\n      return comp\n    } else {\n      comp = comp.value\n    }\n  }\n\n  if (!(this instanceof Comparator)) {\n    return new Comparator(comp, options)\n  }\n\n  debug('comparator', comp, options)\n  this.options = options\n  this.loose = !!options.loose\n  this.parse(comp)\n\n  if (this.semver === ANY) {\n    this.value = ''\n  } else {\n    this.value = this.operator + this.semver.version\n  }\n\n  debug('comp', this)\n}\n\nvar ANY = {}\nComparator.prototype.parse = function (comp) {\n  var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR]\n  var m = comp.match(r)\n\n  if (!m) {\n    throw new TypeError('Invalid comparator: ' + comp)\n  }\n\n  this.operator = m[1]\n  if (this.operator === '=') {\n    this.operator = ''\n  }\n\n  // if it literally is just '>' or '' then allow anything.\n  if (!m[2]) {\n    this.semver = ANY\n  } else {\n    this.semver = new SemVer(m[2], this.options.loose)\n  }\n}\n\nComparator.prototype.toString = function () {\n  return this.value\n}\n\nComparator.prototype.test = function (version) {\n  debug('Comparator.test', version, this.options.loose)\n\n  if (this.semver === ANY) {\n    return true\n  }\n\n  if (typeof version === 'string') {\n    version = new SemVer(version, this.options)\n  }\n\n  return cmp(version, this.operator, this.semver, this.options)\n}\n\nComparator.prototype.intersects = function (comp, options) {\n  if (!(comp instanceof Comparator)) {\n    throw new TypeError('a Comparator is required')\n  }\n\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n\n  var rangeTmp\n\n  if (this.operator === '') {\n    rangeTmp = new Range(comp.value, options)\n    return satisfies(this.value, rangeTmp, options)\n  } else if (comp.operator === '') {\n    rangeTmp = new Range(this.value, options)\n    return satisfies(comp.semver, rangeTmp, options)\n  }\n\n  var sameDirectionIncreasing =\n    (this.operator === '>=' || this.operator === '>') &&\n    (comp.operator === '>=' || comp.operator === '>')\n  var sameDirectionDecreasing =\n    (this.operator === '<=' || this.operator === '<') &&\n    (comp.operator === '<=' || comp.operator === '<')\n  var sameSemVer = this.semver.version === comp.semver.version\n  var differentDirectionsInclusive =\n    (this.operator === '>=' || this.operator === '<=') &&\n    (comp.operator === '>=' || comp.operator === '<=')\n  var oppositeDirectionsLessThan =\n    cmp(this.semver, '<', comp.semver, options) &&\n    ((this.operator === '>=' || this.operator === '>') &&\n    (comp.operator === '<=' || comp.operator === '<'))\n  var oppositeDirectionsGreaterThan =\n    cmp(this.semver, '>', comp.semver, options) &&\n    ((this.operator === '<=' || this.operator === '<') &&\n    (comp.operator === '>=' || comp.operator === '>'))\n\n  return sameDirectionIncreasing || sameDirectionDecreasing ||\n    (sameSemVer && differentDirectionsInclusive) ||\n    oppositeDirectionsLessThan || oppositeDirectionsGreaterThan\n}\n\nexports.Range = Range\nfunction Range (range, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n\n  if (range instanceof Range) {\n    if (range.loose === !!options.loose &&\n        range.includePrerelease === !!options.includePrerelease) {\n      return range\n    } else {\n      return new Range(range.raw, options)\n    }\n  }\n\n  if (range instanceof Comparator) {\n    return new Range(range.value, options)\n  }\n\n  if (!(this instanceof Range)) {\n    return new Range(range, options)\n  }\n\n  this.options = options\n  this.loose = !!options.loose\n  this.includePrerelease = !!options.includePrerelease\n\n  // First, split based on boolean or ||\n  this.raw = range\n  this.set = range.split(/\\s*\\|\\|\\s*/).map(function (range) {\n    return this.parseRange(range.trim())\n  }, this).filter(function (c) {\n    // throw out any that are not relevant for whatever reason\n    return c.length\n  })\n\n  if (!this.set.length) {\n    throw new TypeError('Invalid SemVer Range: ' + range)\n  }\n\n  this.format()\n}\n\nRange.prototype.format = function () {\n  this.range = this.set.map(function (comps) {\n    return comps.join(' ').trim()\n  }).join('||').trim()\n  return this.range\n}\n\nRange.prototype.toString = function () {\n  return this.range\n}\n\nRange.prototype.parseRange = function (range) {\n  var loose = this.options.loose\n  range = range.trim()\n  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE]\n  range = range.replace(hr, hyphenReplace)\n  debug('hyphen replace', range)\n  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace)\n  debug('comparator trim', range, re[COMPARATORTRIM])\n\n  // `~ 1.2.3` => `~1.2.3`\n  range = range.replace(re[TILDETRIM], tildeTrimReplace)\n\n  // `^ 1.2.3` => `^1.2.3`\n  range = range.replace(re[CARETTRIM], caretTrimReplace)\n\n  // normalize spaces\n  range = range.split(/\\s+/).join(' ')\n\n  // At this point, the range is completely trimmed and\n  // ready to be split into comparators.\n\n  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR]\n  var set = range.split(' ').map(function (comp) {\n    return parseComparator(comp, this.options)\n  }, this).join(' ').split(/\\s+/)\n  if (this.options.loose) {\n    // in loose mode, throw out any that are not valid comparators\n    set = set.filter(function (comp) {\n      return !!comp.match(compRe)\n    })\n  }\n  set = set.map(function (comp) {\n    return new Comparator(comp, this.options)\n  }, this)\n\n  return set\n}\n\nRange.prototype.intersects = function (range, options) {\n  if (!(range instanceof Range)) {\n    throw new TypeError('a Range is required')\n  }\n\n  return this.set.some(function (thisComparators) {\n    return thisComparators.every(function (thisComparator) {\n      return range.set.some(function (rangeComparators) {\n        return rangeComparators.every(function (rangeComparator) {\n          return thisComparator.intersects(rangeComparator, options)\n        })\n      })\n    })\n  })\n}\n\n// Mostly just for testing and legacy API reasons\nexports.toComparators = toComparators\nfunction toComparators (range, options) {\n  return new Range(range, options).set.map(function (comp) {\n    return comp.map(function (c) {\n      return c.value\n    }).join(' ').trim().split(' ')\n  })\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nfunction parseComparator (comp, options) {\n  debug('comp', comp, options)\n  comp = replaceCarets(comp, options)\n  debug('caret', comp)\n  comp = replaceTildes(comp, options)\n  debug('tildes', comp)\n  comp = replaceXRanges(comp, options)\n  debug('xrange', comp)\n  comp = replaceStars(comp, options)\n  debug('stars', comp)\n  return comp\n}\n\nfunction isX (id) {\n  return !id || id.toLowerCase() === 'x' || id === '*'\n}\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0\nfunction replaceTildes (comp, options) {\n  return comp.trim().split(/\\s+/).map(function (comp) {\n    return replaceTilde(comp, options)\n  }).join(' ')\n}\n\nfunction replaceTilde (comp, options) {\n  var r = options.loose ? re[TILDELOOSE] : re[TILDE]\n  return comp.replace(r, function (_, M, m, p, pr) {\n    debug('tilde', comp, _, M, m, p, pr)\n    var ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'\n    } else if (pr) {\n      debug('replaceTilde pr', pr)\n      ret = '>=' + M + '.' + m + '.' + p + '-' + pr +\n            ' <' + M + '.' + (+m + 1) + '.0'\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0\n      ret = '>=' + M + '.' + m + '.' + p +\n            ' <' + M + '.' + (+m + 1) + '.0'\n    }\n\n    debug('tilde return', ret)\n    return ret\n  })\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0\n// ^1.2.3 --> >=1.2.3 <2.0.0\n// ^1.2.0 --> >=1.2.0 <2.0.0\nfunction replaceCarets (comp, options) {\n  return comp.trim().split(/\\s+/).map(function (comp) {\n    return replaceCaret(comp, options)\n  }).join(' ')\n}\n\nfunction replaceCaret (comp, options) {\n  debug('caret', comp, options)\n  var r = options.loose ? re[CARETLOOSE] : re[CARET]\n  return comp.replace(r, function (_, M, m, p, pr) {\n    debug('caret', comp, _, M, m, p, pr)\n    var ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'\n      } else {\n        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0'\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr)\n      if (M === '0') {\n        if (m === '0') {\n          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +\n                ' <' + M + '.' + m + '.' + (+p + 1)\n        } else {\n          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +\n                ' <' + M + '.' + (+m + 1) + '.0'\n        }\n      } else {\n        ret = '>=' + M + '.' + m + '.' + p + '-' + pr +\n              ' <' + (+M + 1) + '.0.0'\n      }\n    } else {\n      debug('no pr')\n      if (M === '0') {\n        if (m === '0') {\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + m + '.' + (+p + 1)\n        } else {\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + (+m + 1) + '.0'\n        }\n      } else {\n        ret = '>=' + M + '.' + m + '.' + p +\n              ' <' + (+M + 1) + '.0.0'\n      }\n    }\n\n    debug('caret return', ret)\n    return ret\n  })\n}\n\nfunction replaceXRanges (comp, options) {\n  debug('replaceXRanges', comp, options)\n  return comp.split(/\\s+/).map(function (comp) {\n    return replaceXRange(comp, options)\n  }).join(' ')\n}\n\nfunction replaceXRange (comp, options) {\n  comp = comp.trim()\n  var r = options.loose ? re[XRANGELOOSE] : re[XRANGE]\n  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr)\n    var xM = isX(M)\n    var xm = xM || isX(m)\n    var xp = xm || isX(p)\n    var anyX = xp\n\n    if (gtlt === '=' && anyX) {\n      gtlt = ''\n    }\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0'\n      } else {\n        // nothing is forbidden\n        ret = '*'\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0\n      }\n      p = 0\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        // >1.2.3 => >= 1.2.4\n        gtlt = '>='\n        if (xm) {\n          M = +M + 1\n          m = 0\n          p = 0\n        } else {\n          m = +m + 1\n          p = 0\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm) {\n          M = +M + 1\n        } else {\n          m = +m + 1\n        }\n      }\n\n      ret = gtlt + M + '.' + m + '.' + p\n    } else if (xm) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'\n    } else if (xp) {\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'\n    }\n\n    debug('xRange return', ret)\n\n    return ret\n  })\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nfunction replaceStars (comp, options) {\n  debug('replaceStars', comp, options)\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(re[STAR], '')\n}\n\n// This function is passed to string.replace(re[HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0\nfunction hyphenReplace ($0,\n  from, fM, fm, fp, fpr, fb,\n  to, tM, tm, tp, tpr, tb) {\n  if (isX(fM)) {\n    from = ''\n  } else if (isX(fm)) {\n    from = '>=' + fM + '.0.0'\n  } else if (isX(fp)) {\n    from = '>=' + fM + '.' + fm + '.0'\n  } else {\n    from = '>=' + from\n  }\n\n  if (isX(tM)) {\n    to = ''\n  } else if (isX(tm)) {\n    to = '<' + (+tM + 1) + '.0.0'\n  } else if (isX(tp)) {\n    to = '<' + tM + '.' + (+tm + 1) + '.0'\n  } else if (tpr) {\n    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr\n  } else {\n    to = '<=' + to\n  }\n\n  return (from + ' ' + to).trim()\n}\n\n// if ANY of the sets match ALL of its comparators, then pass\nRange.prototype.test = function (version) {\n  if (!version) {\n    return false\n  }\n\n  if (typeof version === 'string') {\n    version = new SemVer(version, this.options)\n  }\n\n  for (var i = 0; i < this.set.length; i++) {\n    if (testSet(this.set[i], version, this.options)) {\n      return true\n    }\n  }\n  return false\n}\n\nfunction testSet (set, version, options) {\n  for (var i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (i = 0; i < set.length; i++) {\n      debug(set[i].semver)\n      if (set[i].semver === ANY) {\n        continue\n      }\n\n      if (set[i].semver.prerelease.length > 0) {\n        var allowed = set[i].semver\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch) {\n          return true\n        }\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false\n  }\n\n  return true\n}\n\nexports.satisfies = satisfies\nfunction satisfies (version, range, options) {\n  try {\n    range = new Range(range, options)\n  } catch (er) {\n    return false\n  }\n  return range.test(version)\n}\n\nexports.maxSatisfying = maxSatisfying\nfunction maxSatisfying (versions, range, options) {\n  var max = null\n  var maxSV = null\n  try {\n    var rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach(function (v) {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!max || maxSV.compare(v) === -1) {\n        // compare(max, v, true)\n        max = v\n        maxSV = new SemVer(max, options)\n      }\n    }\n  })\n  return max\n}\n\nexports.minSatisfying = minSatisfying\nfunction minSatisfying (versions, range, options) {\n  var min = null\n  var minSV = null\n  try {\n    var rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach(function (v) {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!min || minSV.compare(v) === 1) {\n        // compare(min, v, true)\n        min = v\n        minSV = new SemVer(min, options)\n      }\n    }\n  })\n  return min\n}\n\nexports.minVersion = minVersion\nfunction minVersion (range, loose) {\n  range = new Range(range, loose)\n\n  var minver = new SemVer('0.0.0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = new SemVer('0.0.0-0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = null\n  for (var i = 0; i < range.set.length; ++i) {\n    var comparators = range.set[i]\n\n    comparators.forEach(function (comparator) {\n      // Clone to avoid manipulating the comparator's semver object.\n      var compver = new SemVer(comparator.semver.version)\n      switch (comparator.operator) {\n        case '>':\n          if (compver.prerelease.length === 0) {\n            compver.patch++\n          } else {\n            compver.prerelease.push(0)\n          }\n          compver.raw = compver.format()\n          /* fallthrough */\n        case '':\n        case '>=':\n          if (!minver || gt(minver, compver)) {\n            minver = compver\n          }\n          break\n        case '<':\n        case '<=':\n          /* Ignore maximum versions */\n          break\n        /* istanbul ignore next */\n        default:\n          throw new Error('Unexpected operation: ' + comparator.operator)\n      }\n    })\n  }\n\n  if (minver && range.test(minver)) {\n    return minver\n  }\n\n  return null\n}\n\nexports.validRange = validRange\nfunction validRange (range, options) {\n  try {\n    // Return '*' instead of '' so that truthiness works.\n    // This will throw if it's invalid anyway\n    return new Range(range, options).range || '*'\n  } catch (er) {\n    return null\n  }\n}\n\n// Determine if version is less than all the versions possible in the range\nexports.ltr = ltr\nfunction ltr (version, range, options) {\n  return outside(version, range, '<', options)\n}\n\n// Determine if version is greater than all the versions possible in the range.\nexports.gtr = gtr\nfunction gtr (version, range, options) {\n  return outside(version, range, '>', options)\n}\n\nexports.outside = outside\nfunction outside (version, range, hilo, options) {\n  version = new SemVer(version, options)\n  range = new Range(range, options)\n\n  var gtfn, ltefn, ltfn, comp, ecomp\n  switch (hilo) {\n    case '>':\n      gtfn = gt\n      ltefn = lte\n      ltfn = lt\n      comp = '>'\n      ecomp = '>='\n      break\n    case '<':\n      gtfn = lt\n      ltefn = gte\n      ltfn = gt\n      comp = '<'\n      ecomp = '<='\n      break\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"')\n  }\n\n  // If it satisifes the range it is not outside\n  if (satisfies(version, range, options)) {\n    return false\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (var i = 0; i < range.set.length; ++i) {\n    var comparators = range.set[i]\n\n    var high = null\n    var low = null\n\n    comparators.forEach(function (comparator) {\n      if (comparator.semver === ANY) {\n        comparator = new Comparator('>=0.0.0')\n      }\n      high = high || comparator\n      low = low || comparator\n      if (gtfn(comparator.semver, high.semver, options)) {\n        high = comparator\n      } else if (ltfn(comparator.semver, low.semver, options)) {\n        low = comparator\n      }\n    })\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false\n    }\n  }\n  return true\n}\n\nexports.prerelease = prerelease\nfunction prerelease (version, options) {\n  var parsed = parse(version, options)\n  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null\n}\n\nexports.intersects = intersects\nfunction intersects (r1, r2, options) {\n  r1 = new Range(r1, options)\n  r2 = new Range(r2, options)\n  return r1.intersects(r2)\n}\n\nexports.coerce = coerce\nfunction coerce (version) {\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  var match = version.match(re[COERCE])\n\n  if (match == null) {\n    return null\n  }\n\n  return parse(match[1] +\n    '.' + (match[2] || '0') +\n    '.' + (match[3] || '0'))\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///33\n");

/***/ }),
/* 34 */
/***/ (function(module, exports) {

eval("function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 34;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL3JlcXVpcmVfb3B0aW9uYWwgc3luYz9lZTcxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsV0FBVztBQUNsRDtBQUNBO0FBQ0EiLCJmaWxlIjoiMzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiB3ZWJwYWNrRW1wdHlDb250ZXh0KHJlcSkge1xuXHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0dGhyb3cgZTtcbn1cbndlYnBhY2tFbXB0eUNvbnRleHQua2V5cyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gW107IH07XG53ZWJwYWNrRW1wdHlDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrRW1wdHlDb250ZXh0O1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrRW1wdHlDb250ZXh0O1xud2VicGFja0VtcHR5Q29udGV4dC5pZCA9IDM0OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///34\n");

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst crypto = __webpack_require__(36);\nconst requireOptional = __webpack_require__(27);\n\n/**\n * Generate a UUIDv4\n */\nconst uuidV4 = () => {\n  const result = crypto.randomBytes(16);\n  result[6] = (result[6] & 0x0f) | 0x40;\n  result[8] = (result[8] & 0x3f) | 0x80;\n  return result;\n};\n\n/**\n * Returns the duration calculated from two high resolution timers in milliseconds\n *\n * @param {Object} started A high resolution timestamp created from `process.hrtime()`\n * @returns {Number} The duration in milliseconds\n */\nconst calculateDurationInMs = started => {\n  const hrtime = process.hrtime(started);\n  return (hrtime[0] * 1e9 + hrtime[1]) / 1e6;\n};\n\n/**\n * Relays events for a given listener and emitter\n *\n * @param {EventEmitter} listener the EventEmitter to listen to the events from\n * @param {EventEmitter} emitter the EventEmitter to relay the events to\n */\nfunction relayEvents(listener, emitter, events) {\n  events.forEach(eventName => listener.on(eventName, event => emitter.emit(eventName, event)));\n}\n\nfunction retrieveKerberos() {\n  let kerberos;\n\n  try {\n    kerberos = requireOptional('kerberos');\n  } catch (err) {\n    if (err.code === 'MODULE_NOT_FOUND') {\n      throw new Error('The `kerberos` module was not found. Please install it and try again.');\n    }\n\n    throw err;\n  }\n\n  return kerberos;\n}\n\n// Throw an error if an attempt to use EJSON is made when it is not installed\nconst noEJSONError = function() {\n  throw new Error('The `mongodb-extjson` module was not found. Please install it and try again.');\n};\n\n// Facilitate loading EJSON optionally\nfunction retrieveEJSON() {\n  let EJSON = null;\n  try {\n    EJSON = requireOptional('mongodb-extjson');\n  } catch (error) {} // eslint-disable-line\n  if (!EJSON) {\n    EJSON = {\n      parse: noEJSONError,\n      deserialize: noEJSONError,\n      serialize: noEJSONError,\n      stringify: noEJSONError,\n      setBSONModule: noEJSONError,\n      BSON: noEJSONError\n    };\n  }\n\n  return EJSON;\n}\n\n/**\n * A helper function for determining `maxWireVersion` between legacy and new topology\n * instances\n *\n * @private\n * @param {(Topology|Server)} topologyOrServer\n */\nfunction maxWireVersion(topologyOrServer) {\n  if (topologyOrServer.ismaster) {\n    return topologyOrServer.ismaster.maxWireVersion;\n  }\n\n  if (typeof topologyOrServer.lastIsMaster === 'function') {\n    const lastIsMaster = topologyOrServer.lastIsMaster();\n    if (lastIsMaster) {\n      return lastIsMaster.maxWireVersion;\n    }\n  }\n\n  if (topologyOrServer.description) {\n    return topologyOrServer.description.maxWireVersion;\n  }\n\n  return null;\n}\n\n/*\n * Checks that collation is supported by server.\n *\n * @param {Server} [server] to check against\n * @param {object} [cmd] object where collation may be specified\n * @param {function} [callback] callback function\n * @return true if server does not support collation\n */\nfunction collationNotSupported(server, cmd) {\n  return cmd && cmd.collation && maxWireVersion(server) < 5;\n}\n\n/**\n * Checks if a given value is a Promise\n *\n * @param {*} maybePromise\n * @return true if the provided value is a Promise\n */\nfunction isPromiseLike(maybePromise) {\n  return maybePromise && typeof maybePromise.then === 'function';\n}\n\n/**\n * Applies the function `eachFn` to each item in `arr`, in parallel.\n *\n * @param {array} arr an array of items to asynchronusly iterate over\n * @param {function} eachFn A function to call on each item of the array. The callback signature is `(item, callback)`, where the callback indicates iteration is complete.\n * @param {function} callback The callback called after every item has been iterated\n */\nfunction eachAsync(arr, eachFn, callback) {\n  if (arr.length === 0) {\n    callback(null);\n    return;\n  }\n\n  const length = arr.length;\n  let completed = 0;\n  function eachCallback(err) {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n\n    if (++completed === length) {\n      callback(null);\n    }\n  }\n\n  for (let idx = 0; idx < length; ++idx) {\n    try {\n      eachFn(arr[idx], eachCallback);\n    } catch (err) {\n      callback(err);\n      return;\n    }\n  }\n}\n\nfunction isUnifiedTopology(topology) {\n  return topology.description != null;\n}\n\nmodule.exports = {\n  uuidV4,\n  calculateDurationInMs,\n  relayEvents,\n  collationNotSupported,\n  retrieveEJSON,\n  retrieveKerberos,\n  maxWireVersion,\n  isPromiseLike,\n  eachAsync,\n  isUnifiedTopology\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NvcmUvdXRpbHMuanM/Y2Q5ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixlQUFlLG1CQUFPLENBQUMsRUFBUTtBQUMvQix3QkFBd0IsbUJBQU8sQ0FBQyxFQUFrQjs7QUFFbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGFBQWE7QUFDeEIsV0FBVyxhQUFhO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLGlCQUFpQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGtCQUFrQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQixjQUFjO0FBQ2pDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjM1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbmNvbnN0IHJlcXVpcmVPcHRpb25hbCA9IHJlcXVpcmUoJ3JlcXVpcmVfb3B0aW9uYWwnKTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIFVVSUR2NFxuICovXG5jb25zdCB1dWlkVjQgPSAoKSA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IGNyeXB0by5yYW5kb21CeXRlcygxNik7XG4gIHJlc3VsdFs2XSA9IChyZXN1bHRbNl0gJiAweDBmKSB8IDB4NDA7XG4gIHJlc3VsdFs4XSA9IChyZXN1bHRbOF0gJiAweDNmKSB8IDB4ODA7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGR1cmF0aW9uIGNhbGN1bGF0ZWQgZnJvbSB0d28gaGlnaCByZXNvbHV0aW9uIHRpbWVycyBpbiBtaWxsaXNlY29uZHNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhcnRlZCBBIGhpZ2ggcmVzb2x1dGlvbiB0aW1lc3RhbXAgY3JlYXRlZCBmcm9tIGBwcm9jZXNzLmhydGltZSgpYFxuICogQHJldHVybnMge051bWJlcn0gVGhlIGR1cmF0aW9uIGluIG1pbGxpc2Vjb25kc1xuICovXG5jb25zdCBjYWxjdWxhdGVEdXJhdGlvbkluTXMgPSBzdGFydGVkID0+IHtcbiAgY29uc3QgaHJ0aW1lID0gcHJvY2Vzcy5ocnRpbWUoc3RhcnRlZCk7XG4gIHJldHVybiAoaHJ0aW1lWzBdICogMWU5ICsgaHJ0aW1lWzFdKSAvIDFlNjtcbn07XG5cbi8qKlxuICogUmVsYXlzIGV2ZW50cyBmb3IgYSBnaXZlbiBsaXN0ZW5lciBhbmQgZW1pdHRlclxuICpcbiAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSBsaXN0ZW5lciB0aGUgRXZlbnRFbWl0dGVyIHRvIGxpc3RlbiB0byB0aGUgZXZlbnRzIGZyb21cbiAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSBlbWl0dGVyIHRoZSBFdmVudEVtaXR0ZXIgdG8gcmVsYXkgdGhlIGV2ZW50cyB0b1xuICovXG5mdW5jdGlvbiByZWxheUV2ZW50cyhsaXN0ZW5lciwgZW1pdHRlciwgZXZlbnRzKSB7XG4gIGV2ZW50cy5mb3JFYWNoKGV2ZW50TmFtZSA9PiBsaXN0ZW5lci5vbihldmVudE5hbWUsIGV2ZW50ID0+IGVtaXR0ZXIuZW1pdChldmVudE5hbWUsIGV2ZW50KSkpO1xufVxuXG5mdW5jdGlvbiByZXRyaWV2ZUtlcmJlcm9zKCkge1xuICBsZXQga2VyYmVyb3M7XG5cbiAgdHJ5IHtcbiAgICBrZXJiZXJvcyA9IHJlcXVpcmVPcHRpb25hbCgna2VyYmVyb3MnKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKGVyci5jb2RlID09PSAnTU9EVUxFX05PVF9GT1VORCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGBrZXJiZXJvc2AgbW9kdWxlIHdhcyBub3QgZm91bmQuIFBsZWFzZSBpbnN0YWxsIGl0IGFuZCB0cnkgYWdhaW4uJyk7XG4gICAgfVxuXG4gICAgdGhyb3cgZXJyO1xuICB9XG5cbiAgcmV0dXJuIGtlcmJlcm9zO1xufVxuXG4vLyBUaHJvdyBhbiBlcnJvciBpZiBhbiBhdHRlbXB0IHRvIHVzZSBFSlNPTiBpcyBtYWRlIHdoZW4gaXQgaXMgbm90IGluc3RhbGxlZFxuY29uc3Qgbm9FSlNPTkVycm9yID0gZnVuY3Rpb24oKSB7XG4gIHRocm93IG5ldyBFcnJvcignVGhlIGBtb25nb2RiLWV4dGpzb25gIG1vZHVsZSB3YXMgbm90IGZvdW5kLiBQbGVhc2UgaW5zdGFsbCBpdCBhbmQgdHJ5IGFnYWluLicpO1xufTtcblxuLy8gRmFjaWxpdGF0ZSBsb2FkaW5nIEVKU09OIG9wdGlvbmFsbHlcbmZ1bmN0aW9uIHJldHJpZXZlRUpTT04oKSB7XG4gIGxldCBFSlNPTiA9IG51bGw7XG4gIHRyeSB7XG4gICAgRUpTT04gPSByZXF1aXJlT3B0aW9uYWwoJ21vbmdvZGItZXh0anNvbicpO1xuICB9IGNhdGNoIChlcnJvcikge30gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBpZiAoIUVKU09OKSB7XG4gICAgRUpTT04gPSB7XG4gICAgICBwYXJzZTogbm9FSlNPTkVycm9yLFxuICAgICAgZGVzZXJpYWxpemU6IG5vRUpTT05FcnJvcixcbiAgICAgIHNlcmlhbGl6ZTogbm9FSlNPTkVycm9yLFxuICAgICAgc3RyaW5naWZ5OiBub0VKU09ORXJyb3IsXG4gICAgICBzZXRCU09OTW9kdWxlOiBub0VKU09ORXJyb3IsXG4gICAgICBCU09OOiBub0VKU09ORXJyb3JcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIEVKU09OO1xufVxuXG4vKipcbiAqIEEgaGVscGVyIGZ1bmN0aW9uIGZvciBkZXRlcm1pbmluZyBgbWF4V2lyZVZlcnNpb25gIGJldHdlZW4gbGVnYWN5IGFuZCBuZXcgdG9wb2xvZ3lcbiAqIGluc3RhbmNlc1xuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyhUb3BvbG9neXxTZXJ2ZXIpfSB0b3BvbG9neU9yU2VydmVyXG4gKi9cbmZ1bmN0aW9uIG1heFdpcmVWZXJzaW9uKHRvcG9sb2d5T3JTZXJ2ZXIpIHtcbiAgaWYgKHRvcG9sb2d5T3JTZXJ2ZXIuaXNtYXN0ZXIpIHtcbiAgICByZXR1cm4gdG9wb2xvZ3lPclNlcnZlci5pc21hc3Rlci5tYXhXaXJlVmVyc2lvbjtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdG9wb2xvZ3lPclNlcnZlci5sYXN0SXNNYXN0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zdCBsYXN0SXNNYXN0ZXIgPSB0b3BvbG9neU9yU2VydmVyLmxhc3RJc01hc3RlcigpO1xuICAgIGlmIChsYXN0SXNNYXN0ZXIpIHtcbiAgICAgIHJldHVybiBsYXN0SXNNYXN0ZXIubWF4V2lyZVZlcnNpb247XG4gICAgfVxuICB9XG5cbiAgaWYgKHRvcG9sb2d5T3JTZXJ2ZXIuZGVzY3JpcHRpb24pIHtcbiAgICByZXR1cm4gdG9wb2xvZ3lPclNlcnZlci5kZXNjcmlwdGlvbi5tYXhXaXJlVmVyc2lvbjtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG4vKlxuICogQ2hlY2tzIHRoYXQgY29sbGF0aW9uIGlzIHN1cHBvcnRlZCBieSBzZXJ2ZXIuXG4gKlxuICogQHBhcmFtIHtTZXJ2ZXJ9IFtzZXJ2ZXJdIHRvIGNoZWNrIGFnYWluc3RcbiAqIEBwYXJhbSB7b2JqZWN0fSBbY21kXSBvYmplY3Qgd2hlcmUgY29sbGF0aW9uIG1heSBiZSBzcGVjaWZpZWRcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja10gY2FsbGJhY2sgZnVuY3Rpb25cbiAqIEByZXR1cm4gdHJ1ZSBpZiBzZXJ2ZXIgZG9lcyBub3Qgc3VwcG9ydCBjb2xsYXRpb25cbiAqL1xuZnVuY3Rpb24gY29sbGF0aW9uTm90U3VwcG9ydGVkKHNlcnZlciwgY21kKSB7XG4gIHJldHVybiBjbWQgJiYgY21kLmNvbGxhdGlvbiAmJiBtYXhXaXJlVmVyc2lvbihzZXJ2ZXIpIDwgNTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiB2YWx1ZSBpcyBhIFByb21pc2VcbiAqXG4gKiBAcGFyYW0geyp9IG1heWJlUHJvbWlzZVxuICogQHJldHVybiB0cnVlIGlmIHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBhIFByb21pc2VcbiAqL1xuZnVuY3Rpb24gaXNQcm9taXNlTGlrZShtYXliZVByb21pc2UpIHtcbiAgcmV0dXJuIG1heWJlUHJvbWlzZSAmJiB0eXBlb2YgbWF5YmVQcm9taXNlLnRoZW4gPT09ICdmdW5jdGlvbic7XG59XG5cbi8qKlxuICogQXBwbGllcyB0aGUgZnVuY3Rpb24gYGVhY2hGbmAgdG8gZWFjaCBpdGVtIGluIGBhcnJgLCBpbiBwYXJhbGxlbC5cbiAqXG4gKiBAcGFyYW0ge2FycmF5fSBhcnIgYW4gYXJyYXkgb2YgaXRlbXMgdG8gYXN5bmNocm9udXNseSBpdGVyYXRlIG92ZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGVhY2hGbiBBIGZ1bmN0aW9uIHRvIGNhbGwgb24gZWFjaCBpdGVtIG9mIHRoZSBhcnJheS4gVGhlIGNhbGxiYWNrIHNpZ25hdHVyZSBpcyBgKGl0ZW0sIGNhbGxiYWNrKWAsIHdoZXJlIHRoZSBjYWxsYmFjayBpbmRpY2F0ZXMgaXRlcmF0aW9uIGlzIGNvbXBsZXRlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGNhbGxlZCBhZnRlciBldmVyeSBpdGVtIGhhcyBiZWVuIGl0ZXJhdGVkXG4gKi9cbmZ1bmN0aW9uIGVhY2hBc3luYyhhcnIsIGVhY2hGbiwgY2FsbGJhY2spIHtcbiAgaWYgKGFyci5sZW5ndGggPT09IDApIHtcbiAgICBjYWxsYmFjayhudWxsKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBsZW5ndGggPSBhcnIubGVuZ3RoO1xuICBsZXQgY29tcGxldGVkID0gMDtcbiAgZnVuY3Rpb24gZWFjaENhbGxiYWNrKGVycikge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGNhbGxiYWNrKGVyciwgbnVsbCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCsrY29tcGxldGVkID09PSBsZW5ndGgpIHtcbiAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGxlbmd0aDsgKytpZHgpIHtcbiAgICB0cnkge1xuICAgICAgZWFjaEZuKGFycltpZHhdLCBlYWNoQ2FsbGJhY2spO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNVbmlmaWVkVG9wb2xvZ3kodG9wb2xvZ3kpIHtcbiAgcmV0dXJuIHRvcG9sb2d5LmRlc2NyaXB0aW9uICE9IG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB1dWlkVjQsXG4gIGNhbGN1bGF0ZUR1cmF0aW9uSW5NcyxcbiAgcmVsYXlFdmVudHMsXG4gIGNvbGxhdGlvbk5vdFN1cHBvcnRlZCxcbiAgcmV0cmlldmVFSlNPTixcbiAgcmV0cmlldmVLZXJiZXJvcyxcbiAgbWF4V2lyZVZlcnNpb24sXG4gIGlzUHJvbWlzZUxpa2UsXG4gIGVhY2hBc3luYyxcbiAgaXNVbmlmaWVkVG9wb2xvZ3lcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///35\n");

/***/ }),
/* 36 */
/***/ (function(module, exports) {

eval("module.exports = require(\"crypto\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0L2V4dGVybmFsIFwiY3J5cHRvXCI/NGM3NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIzNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNyeXB0b1wiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///36\n");

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst mongoErrorContextSymbol = Symbol('mongoErrorContextSymbol');\nconst maxWireVersion = __webpack_require__(35).maxWireVersion;\n\n/**\n * Creates a new MongoError\n *\n * @augments Error\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {string} stack The error call stack\n */\nclass MongoError extends Error {\n  constructor(message) {\n    if (message instanceof Error) {\n      super(message.message);\n      this.stack = message.stack;\n    } else {\n      if (typeof message === 'string') {\n        super(message);\n      } else {\n        super(message.message || message.errmsg || message.$err || 'n/a');\n        for (var name in message) {\n          this[name] = message[name];\n        }\n      }\n\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    this.name = 'MongoError';\n    this[mongoErrorContextSymbol] = this[mongoErrorContextSymbol] || {};\n  }\n\n  /**\n   * Creates a new MongoError object\n   *\n   * @param {Error|string|object} options The options used to create the error.\n   * @return {MongoError} A MongoError instance\n   * @deprecated Use `new MongoError()` instead.\n   */\n  static create(options) {\n    return new MongoError(options);\n  }\n\n  hasErrorLabel(label) {\n    return this.errorLabels && this.errorLabels.indexOf(label) !== -1;\n  }\n}\n\n/**\n * Creates a new MongoNetworkError\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {string} stack The error call stack\n */\nclass MongoNetworkError extends MongoError {\n  constructor(message) {\n    super(message);\n    this.name = 'MongoNetworkError';\n\n    // This is added as part of the transactions specification\n    this.errorLabels = ['TransientTransactionError'];\n  }\n}\n\n/**\n * An error used when attempting to parse a value (like a connection string)\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n */\nclass MongoParseError extends MongoError {\n  constructor(message) {\n    super(message);\n    this.name = 'MongoParseError';\n  }\n}\n\n/**\n * An error signifying a timeout event\n *\n * @param {Error|string|object} message The error message\n * @param {string|object} [reason] The reason the timeout occured\n * @property {string} message The error message\n * @property {string} [reason] An optional reason context for the timeout, generally an error saved during flow of monitoring and selecting servers\n */\nclass MongoTimeoutError extends MongoError {\n  constructor(message, reason) {\n    super(message);\n    this.name = 'MongoTimeoutError';\n    if (reason != null) {\n      this.reason = reason;\n    }\n  }\n}\n\nfunction makeWriteConcernResultObject(input) {\n  const output = Object.assign({}, input);\n\n  if (output.ok === 0) {\n    output.ok = 1;\n    delete output.errmsg;\n    delete output.code;\n    delete output.codeName;\n  }\n\n  return output;\n}\n\n/**\n * An error thrown when the server reports a writeConcernError\n *\n * @param {Error|string|object} message The error message\n * @param {object} result The result document (provided if ok: 1)\n * @property {string} message The error message\n * @property {object} [result] The result document (provided if ok: 1)\n */\nclass MongoWriteConcernError extends MongoError {\n  constructor(message, result) {\n    super(message);\n    this.name = 'MongoWriteConcernError';\n\n    if (result != null) {\n      this.result = makeWriteConcernResultObject(result);\n    }\n  }\n}\n\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\nconst RETRYABLE_ERROR_CODES = new Set([\n  6, // HostUnreachable\n  7, // HostNotFound\n  89, // NetworkTimeout\n  91, // ShutdownInProgress\n  189, // PrimarySteppedDown\n  9001, // SocketException\n  10107, // NotMaster\n  11600, // InterruptedAtShutdown\n  11602, // InterruptedDueToReplStateChange\n  13435, // NotMasterNoSlaveOk\n  13436 // NotMasterOrSecondary\n]);\n\n/**\n * Determines whether an error is something the driver should attempt to retry\n *\n * @param {MongoError|Error} error\n */\nfunction isRetryableError(error) {\n  return (\n    RETRYABLE_ERROR_CODES.has(error.code) ||\n    error instanceof MongoNetworkError ||\n    error.message.match(/not master/) ||\n    error.message.match(/node is recovering/)\n  );\n}\n\nconst SDAM_RECOVERING_CODES = new Set([\n  91, // ShutdownInProgress\n  189, // PrimarySteppedDown\n  11600, // InterruptedAtShutdown\n  11602, // InterruptedDueToReplStateChange\n  13436 // NotMasterOrSecondary\n]);\n\nconst SDAM_NOTMASTER_CODES = new Set([\n  10107, // NotMaster\n  13435 // NotMasterNoSlaveOk\n]);\n\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([\n  11600, // InterruptedAtShutdown\n  91 // ShutdownInProgress\n]);\n\nfunction isRecoveringError(err) {\n  if (err.code && SDAM_RECOVERING_CODES.has(err.code)) {\n    return true;\n  }\n\n  return err.message.match(/not master or secondary/) || err.message.match(/node is recovering/);\n}\n\nfunction isNotMasterError(err) {\n  if (err.code && SDAM_NOTMASTER_CODES.has(err.code)) {\n    return true;\n  }\n\n  if (isRecoveringError(err)) {\n    return false;\n  }\n\n  return err.message.match(/not master/);\n}\n\nfunction isNodeShuttingDownError(err) {\n  return err.code && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code);\n}\n\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n * @param {MongoError|Error} error\n * @param {Server} server\n */\nfunction isSDAMUnrecoverableError(error, server) {\n  if (error instanceof MongoParseError) {\n    return true;\n  }\n\n  if (isRecoveringError(error) || isNotMasterError(error)) {\n    if (maxWireVersion(server) >= 8 && !isNodeShuttingDownError(error)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nmodule.exports = {\n  MongoError,\n  MongoNetworkError,\n  MongoParseError,\n  MongoTimeoutError,\n  MongoWriteConcernError,\n  mongoErrorContextSymbol,\n  isRetryableError,\n  isSDAMUnrecoverableError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///37\n");

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst EventEmitter = __webpack_require__(39).EventEmitter;\nconst crypto = __webpack_require__(36);\nconst debugOptions = __webpack_require__(40).debugOptions;\nconst parseHeader = __webpack_require__(41).parseHeader;\nconst decompress = __webpack_require__(46).decompress;\nconst Response = __webpack_require__(48).Response;\nconst BinMsg = __webpack_require__(50).BinMsg;\nconst MongoNetworkError = __webpack_require__(37).MongoNetworkError;\nconst MongoError = __webpack_require__(37).MongoError;\nconst Logger = __webpack_require__(51);\nconst OP_COMPRESSED = __webpack_require__(41).opcodes.OP_COMPRESSED;\nconst OP_MSG = __webpack_require__(41).opcodes.OP_MSG;\nconst MESSAGE_HEADER_SIZE = __webpack_require__(41).MESSAGE_HEADER_SIZE;\nconst Buffer = __webpack_require__(49).Buffer;\n\nlet _id = 0;\n\nconst DEFAULT_MAX_BSON_MESSAGE_SIZE = 1024 * 1024 * 16 * 4;\nconst DEBUG_FIELDS = [\n  'host',\n  'port',\n  'size',\n  'keepAlive',\n  'keepAliveInitialDelay',\n  'noDelay',\n  'connectionTimeout',\n  'socketTimeout',\n  'ssl',\n  'ca',\n  'crl',\n  'cert',\n  'rejectUnauthorized',\n  'promoteLongs',\n  'promoteValues',\n  'promoteBuffers',\n  'checkServerIdentity'\n];\n\nlet connectionAccountingSpy = undefined;\nlet connectionAccounting = false;\nlet connections = {};\n\n/**\n * A class representing a single connection to a MongoDB server\n *\n * @fires Connection#connect\n * @fires Connection#close\n * @fires Connection#error\n * @fires Connection#timeout\n * @fires Connection#parseError\n * @fires Connection#message\n */\nclass Connection extends EventEmitter {\n  /**\n   * Creates a new Connection instance\n   *\n   * **NOTE**: Internal class, do not instantiate directly\n   *\n   * @param {Socket} socket The socket this connection wraps\n   * @param {Object} options Various settings\n   * @param {object} options.bson An implementation of bson serialize and deserialize\n   * @param {string} [options.host='localhost'] The host the socket is connected to\n   * @param {number} [options.port=27017] The port used for the socket connection\n   * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n   * @param {number} [options.keepAliveInitialDelay=300000] Initial delay before TCP keep alive enabled\n   * @param {number} [options.connectionTimeout=30000] TCP Connection timeout setting\n   * @param {number} [options.socketTimeout=360000] TCP Socket timeout setting\n   * @param {boolean} [options.promoteLongs] Convert Long values from the db into Numbers if they fit into 53 bits\n   * @param {boolean} [options.promoteValues] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n   * @param {boolean} [options.promoteBuffers] Promotes Binary BSON values to native Node Buffers.\n   * @param {number} [options.maxBsonMessageSize=0x4000000] Largest possible size of a BSON message (for legacy purposes)\n   */\n  constructor(socket, options) {\n    super();\n\n    options = options || {};\n    if (!options.bson) {\n      throw new TypeError('must pass in valid bson parser');\n    }\n\n    this.id = _id++;\n    this.options = options;\n    this.logger = Logger('Connection', options);\n    this.bson = options.bson;\n    this.tag = options.tag;\n    this.maxBsonMessageSize = options.maxBsonMessageSize || DEFAULT_MAX_BSON_MESSAGE_SIZE;\n\n    this.port = options.port || 27017;\n    this.host = options.host || 'localhost';\n    this.socketTimeout = typeof options.socketTimeout === 'number' ? options.socketTimeout : 360000;\n\n    // These values are inspected directly in tests, but maybe not necessary to keep around\n    this.keepAlive = typeof options.keepAlive === 'boolean' ? options.keepAlive : true;\n    this.keepAliveInitialDelay =\n      typeof options.keepAliveInitialDelay === 'number' ? options.keepAliveInitialDelay : 300000;\n    this.connectionTimeout =\n      typeof options.connectionTimeout === 'number' ? options.connectionTimeout : 30000;\n    if (this.keepAliveInitialDelay > this.socketTimeout) {\n      this.keepAliveInitialDelay = Math.round(this.socketTimeout / 2);\n    }\n\n    // Debug information\n    if (this.logger.isDebug()) {\n      this.logger.debug(\n        `creating connection ${this.id} with options [${JSON.stringify(\n          debugOptions(DEBUG_FIELDS, options)\n        )}]`\n      );\n    }\n\n    // Response options\n    this.responseOptions = {\n      promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n      promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n      promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false\n    };\n\n    // Flushing\n    this.flushing = false;\n    this.queue = [];\n\n    // Internal state\n    this.writeStream = null;\n    this.destroyed = false;\n\n    // Create hash method\n    const hash = crypto.createHash('sha1');\n    hash.update(this.address);\n    this.hashedName = hash.digest('hex');\n\n    // All operations in flight on the connection\n    this.workItems = [];\n\n    // setup socket\n    this.socket = socket;\n    this.socket.once('error', errorHandler(this));\n    this.socket.once('timeout', timeoutHandler(this));\n    this.socket.once('close', closeHandler(this));\n    this.socket.on('data', dataHandler(this));\n\n    if (connectionAccounting) {\n      addConnection(this.id, this);\n    }\n  }\n\n  setSocketTimeout(value) {\n    if (this.socket) {\n      this.socket.setTimeout(value);\n    }\n  }\n\n  resetSocketTimeout() {\n    if (this.socket) {\n      this.socket.setTimeout(this.socketTimeout);\n    }\n  }\n\n  static enableConnectionAccounting(spy) {\n    if (spy) {\n      connectionAccountingSpy = spy;\n    }\n\n    connectionAccounting = true;\n    connections = {};\n  }\n\n  static disableConnectionAccounting() {\n    connectionAccounting = false;\n    connectionAccountingSpy = undefined;\n  }\n\n  static connections() {\n    return connections;\n  }\n\n  get address() {\n    return `${this.host}:${this.port}`;\n  }\n\n  /**\n   * Unref this connection\n   * @method\n   * @return {boolean}\n   */\n  unref() {\n    if (this.socket == null) {\n      this.once('connect', () => this.socket.unref());\n      return;\n    }\n\n    this.socket.unref();\n  }\n\n  /**\n   * Destroy connection\n   * @method\n   */\n  destroy(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = Object.assign({ force: false }, options);\n\n    if (connectionAccounting) {\n      deleteConnection(this.id);\n    }\n\n    if (this.socket == null) {\n      this.destroyed = true;\n      return;\n    }\n\n    if (options.force) {\n      this.socket.destroy();\n      this.destroyed = true;\n      if (typeof callback === 'function') callback(null, null);\n      return;\n    }\n\n    this.socket.end(err => {\n      this.destroyed = true;\n      if (typeof callback === 'function') callback(err, null);\n    });\n  }\n\n  /**\n   * Write to connection\n   * @method\n   * @param {Command} command Command to write out need to implement toBin and toBinUnified\n   */\n  write(buffer) {\n    // Debug Log\n    if (this.logger.isDebug()) {\n      if (!Array.isArray(buffer)) {\n        this.logger.debug(`writing buffer [${buffer.toString('hex')}] to ${this.address}`);\n      } else {\n        for (let i = 0; i < buffer.length; i++)\n          this.logger.debug(`writing buffer [${buffer[i].toString('hex')}] to ${this.address}`);\n      }\n    }\n\n    // Double check that the connection is not destroyed\n    if (this.socket.destroyed === false) {\n      // Write out the command\n      if (!Array.isArray(buffer)) {\n        this.socket.write(buffer, 'binary');\n        return true;\n      }\n\n      // Iterate over all buffers and write them in order to the socket\n      for (let i = 0; i < buffer.length; i++) {\n        this.socket.write(buffer[i], 'binary');\n      }\n\n      return true;\n    }\n\n    // Connection is destroyed return write failed\n    return false;\n  }\n\n  /**\n   * Return id of connection as a string\n   * @method\n   * @return {string}\n   */\n  toString() {\n    return '' + this.id;\n  }\n\n  /**\n   * Return json object of connection\n   * @method\n   * @return {object}\n   */\n  toJSON() {\n    return { id: this.id, host: this.host, port: this.port };\n  }\n\n  /**\n   * Is the connection connected\n   * @method\n   * @return {boolean}\n   */\n  isConnected() {\n    if (this.destroyed) return false;\n    return !this.socket.destroyed && this.socket.writable;\n  }\n}\n\nfunction deleteConnection(id) {\n  // console.log(\"=== deleted connection \" + id + \" :: \" + (connections[id] ? connections[id].port : ''))\n  delete connections[id];\n\n  if (connectionAccountingSpy) {\n    connectionAccountingSpy.deleteConnection(id);\n  }\n}\n\nfunction addConnection(id, connection) {\n  // console.log(\"=== added connection \" + id + \" :: \" + connection.port)\n  connections[id] = connection;\n\n  if (connectionAccountingSpy) {\n    connectionAccountingSpy.addConnection(id, connection);\n  }\n}\n\n//\n// Connection handlers\nfunction errorHandler(conn) {\n  return function(err) {\n    if (connectionAccounting) deleteConnection(conn.id);\n    // Debug information\n    if (conn.logger.isDebug()) {\n      conn.logger.debug(\n        `connection ${conn.id} for [${conn.address}] errored out with [${JSON.stringify(err)}]`\n      );\n    }\n\n    conn.emit('error', new MongoNetworkError(err), conn);\n  };\n}\n\nfunction timeoutHandler(conn) {\n  return function() {\n    if (connectionAccounting) deleteConnection(conn.id);\n\n    if (conn.logger.isDebug()) {\n      conn.logger.debug(`connection ${conn.id} for [${conn.address}] timed out`);\n    }\n\n    conn.emit(\n      'timeout',\n      new MongoNetworkError(`connection ${conn.id} to ${conn.address} timed out`),\n      conn\n    );\n  };\n}\n\nfunction closeHandler(conn) {\n  return function(hadError) {\n    if (connectionAccounting) deleteConnection(conn.id);\n\n    if (conn.logger.isDebug()) {\n      conn.logger.debug(`connection ${conn.id} with for [${conn.address}] closed`);\n    }\n\n    if (!hadError) {\n      conn.emit(\n        'close',\n        new MongoNetworkError(`connection ${conn.id} to ${conn.address} closed`),\n        conn\n      );\n    }\n  };\n}\n\n// Handle a message once it is received\nfunction processMessage(conn, message) {\n  const msgHeader = parseHeader(message);\n  if (msgHeader.opCode !== OP_COMPRESSED) {\n    const ResponseConstructor = msgHeader.opCode === OP_MSG ? BinMsg : Response;\n    conn.emit(\n      'message',\n      new ResponseConstructor(\n        conn.bson,\n        message,\n        msgHeader,\n        message.slice(MESSAGE_HEADER_SIZE),\n        conn.responseOptions\n      ),\n      conn\n    );\n\n    return;\n  }\n\n  msgHeader.fromCompressed = true;\n  let index = MESSAGE_HEADER_SIZE;\n  msgHeader.opCode = message.readInt32LE(index);\n  index += 4;\n  msgHeader.length = message.readInt32LE(index);\n  index += 4;\n  const compressorID = message[index];\n  index++;\n\n  decompress(compressorID, message.slice(index), (err, decompressedMsgBody) => {\n    if (err) {\n      conn.emit('error', err);\n      return;\n    }\n\n    if (decompressedMsgBody.length !== msgHeader.length) {\n      conn.emit(\n        'error',\n        new MongoError(\n          'Decompressing a compressed message from the server failed. The message is corrupt.'\n        )\n      );\n\n      return;\n    }\n\n    const ResponseConstructor = msgHeader.opCode === OP_MSG ? BinMsg : Response;\n    conn.emit(\n      'message',\n      new ResponseConstructor(\n        conn.bson,\n        message,\n        msgHeader,\n        decompressedMsgBody,\n        conn.responseOptions\n      ),\n      conn\n    );\n  });\n}\n\nfunction dataHandler(conn) {\n  return function(data) {\n    // Parse until we are done with the data\n    while (data.length > 0) {\n      // If we still have bytes to read on the current message\n      if (conn.bytesRead > 0 && conn.sizeOfMessage > 0) {\n        // Calculate the amount of remaining bytes\n        const remainingBytesToRead = conn.sizeOfMessage - conn.bytesRead;\n        // Check if the current chunk contains the rest of the message\n        if (remainingBytesToRead > data.length) {\n          // Copy the new data into the exiting buffer (should have been allocated when we know the message size)\n          data.copy(conn.buffer, conn.bytesRead);\n          // Adjust the number of bytes read so it point to the correct index in the buffer\n          conn.bytesRead = conn.bytesRead + data.length;\n\n          // Reset state of buffer\n          data = Buffer.alloc(0);\n        } else {\n          // Copy the missing part of the data into our current buffer\n          data.copy(conn.buffer, conn.bytesRead, 0, remainingBytesToRead);\n          // Slice the overflow into a new buffer that we will then re-parse\n          data = data.slice(remainingBytesToRead);\n\n          // Emit current complete message\n          const emitBuffer = conn.buffer;\n          // Reset state of buffer\n          conn.buffer = null;\n          conn.sizeOfMessage = 0;\n          conn.bytesRead = 0;\n          conn.stubBuffer = null;\n\n          processMessage(conn, emitBuffer);\n        }\n      } else {\n        // Stub buffer is kept in case we don't get enough bytes to determine the\n        // size of the message (< 4 bytes)\n        if (conn.stubBuffer != null && conn.stubBuffer.length > 0) {\n          // If we have enough bytes to determine the message size let's do it\n          if (conn.stubBuffer.length + data.length > 4) {\n            // Prepad the data\n            const newData = Buffer.alloc(conn.stubBuffer.length + data.length);\n            conn.stubBuffer.copy(newData, 0);\n            data.copy(newData, conn.stubBuffer.length);\n            // Reassign for parsing\n            data = newData;\n\n            // Reset state of buffer\n            conn.buffer = null;\n            conn.sizeOfMessage = 0;\n            conn.bytesRead = 0;\n            conn.stubBuffer = null;\n          } else {\n            // Add the the bytes to the stub buffer\n            const newStubBuffer = Buffer.alloc(conn.stubBuffer.length + data.length);\n            // Copy existing stub buffer\n            conn.stubBuffer.copy(newStubBuffer, 0);\n            // Copy missing part of the data\n            data.copy(newStubBuffer, conn.stubBuffer.length);\n            // Exit parsing loop\n            data = Buffer.alloc(0);\n          }\n        } else {\n          if (data.length > 4) {\n            // Retrieve the message size\n            const sizeOfMessage = data[0] | (data[1] << 8) | (data[2] << 16) | (data[3] << 24);\n            // If we have a negative sizeOfMessage emit error and return\n            if (sizeOfMessage < 0 || sizeOfMessage > conn.maxBsonMessageSize) {\n              const errorObject = {\n                err: 'socketHandler',\n                trace: '',\n                bin: conn.buffer,\n                parseState: {\n                  sizeOfMessage: sizeOfMessage,\n                  bytesRead: conn.bytesRead,\n                  stubBuffer: conn.stubBuffer\n                }\n              };\n              // We got a parse Error fire it off then keep going\n              conn.emit('parseError', errorObject, conn);\n              return;\n            }\n\n            // Ensure that the size of message is larger than 0 and less than the max allowed\n            if (\n              sizeOfMessage > 4 &&\n              sizeOfMessage < conn.maxBsonMessageSize &&\n              sizeOfMessage > data.length\n            ) {\n              conn.buffer = Buffer.alloc(sizeOfMessage);\n              // Copy all the data into the buffer\n              data.copy(conn.buffer, 0);\n              // Update bytes read\n              conn.bytesRead = data.length;\n              // Update sizeOfMessage\n              conn.sizeOfMessage = sizeOfMessage;\n              // Ensure stub buffer is null\n              conn.stubBuffer = null;\n              // Exit parsing loop\n              data = Buffer.alloc(0);\n            } else if (\n              sizeOfMessage > 4 &&\n              sizeOfMessage < conn.maxBsonMessageSize &&\n              sizeOfMessage === data.length\n            ) {\n              const emitBuffer = data;\n              // Reset state of buffer\n              conn.buffer = null;\n              conn.sizeOfMessage = 0;\n              conn.bytesRead = 0;\n              conn.stubBuffer = null;\n              // Exit parsing loop\n              data = Buffer.alloc(0);\n              // Emit the message\n              processMessage(conn, emitBuffer);\n            } else if (sizeOfMessage <= 4 || sizeOfMessage > conn.maxBsonMessageSize) {\n              const errorObject = {\n                err: 'socketHandler',\n                trace: null,\n                bin: data,\n                parseState: {\n                  sizeOfMessage: sizeOfMessage,\n                  bytesRead: 0,\n                  buffer: null,\n                  stubBuffer: null\n                }\n              };\n              // We got a parse Error fire it off then keep going\n              conn.emit('parseError', errorObject, conn);\n\n              // Clear out the state of the parser\n              conn.buffer = null;\n              conn.sizeOfMessage = 0;\n              conn.bytesRead = 0;\n              conn.stubBuffer = null;\n              // Exit parsing loop\n              data = Buffer.alloc(0);\n            } else {\n              const emitBuffer = data.slice(0, sizeOfMessage);\n              // Reset state of buffer\n              conn.buffer = null;\n              conn.sizeOfMessage = 0;\n              conn.bytesRead = 0;\n              conn.stubBuffer = null;\n              // Copy rest of message\n              data = data.slice(sizeOfMessage);\n              // Emit the message\n              processMessage(conn, emitBuffer);\n            }\n          } else {\n            // Create a buffer that contains the space for the non-complete message\n            conn.stubBuffer = Buffer.alloc(data.length);\n            // Copy the data to the stub buffer\n            data.copy(conn.stubBuffer, 0);\n            // Exit parsing loop\n            data = Buffer.alloc(0);\n          }\n        }\n      }\n    }\n  };\n}\n\n/**\n * A server connect event, used to verify that the connection is up and running\n *\n * @event Connection#connect\n * @type {Connection}\n */\n\n/**\n * The server connection closed, all pool connections closed\n *\n * @event Connection#close\n * @type {Connection}\n */\n\n/**\n * The server connection caused an error, all pool connections closed\n *\n * @event Connection#error\n * @type {Connection}\n */\n\n/**\n * The server connection timed out, all pool connections closed\n *\n * @event Connection#timeout\n * @type {Connection}\n */\n\n/**\n * The driver experienced an invalid message, all pool connections closed\n *\n * @event Connection#parseError\n * @type {Connection}\n */\n\n/**\n * An event emitted each time the connection receives a parsed message from the wire\n *\n * @event Connection#message\n * @type {Connection}\n */\n\nmodule.exports = Connection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///38\n");

/***/ }),
/* 39 */
/***/ (function(module, exports) {

eval("module.exports = require(\"events\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0L2V4dGVybmFsIFwiZXZlbnRzXCI/N2E3ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIzOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImV2ZW50c1wiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///39\n");

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst require_optional = __webpack_require__(27);\n\nfunction debugOptions(debugFields, options) {\n  var finaloptions = {};\n  debugFields.forEach(function(n) {\n    finaloptions[n] = options[n];\n  });\n\n  return finaloptions;\n}\n\nfunction retrieveBSON() {\n  var BSON = __webpack_require__(4);\n  BSON.native = false;\n\n  try {\n    var optionalBSON = require_optional('bson-ext');\n    if (optionalBSON) {\n      optionalBSON.native = true;\n      return optionalBSON;\n    }\n  } catch (err) {} // eslint-disable-line\n\n  return BSON;\n}\n\n// Throw an error if an attempt to use Snappy is made when Snappy is not installed\nfunction noSnappyWarning() {\n  throw new Error(\n    'Attempted to use Snappy compression, but Snappy is not installed. Install or disable Snappy compression and try again.'\n  );\n}\n\n// Facilitate loading Snappy optionally\nfunction retrieveSnappy() {\n  var snappy = null;\n  try {\n    snappy = require_optional('snappy');\n  } catch (error) {} // eslint-disable-line\n  if (!snappy) {\n    snappy = {\n      compress: noSnappyWarning,\n      uncompress: noSnappyWarning,\n      compressSync: noSnappyWarning,\n      uncompressSync: noSnappyWarning\n    };\n  }\n  return snappy;\n}\n\nmodule.exports = {\n  debugOptions,\n  retrieveBSON,\n  retrieveSnappy\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NvcmUvY29ubmVjdGlvbi91dGlscy5qcz9jYjQ0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLHlCQUF5QixtQkFBTyxDQUFDLEVBQWtCOztBQUVuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBLGFBQWEsbUJBQU8sQ0FBQyxDQUFNO0FBQzNCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsZUFBZTs7QUFFbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsaUJBQWlCO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNDAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHJlcXVpcmVfb3B0aW9uYWwgPSByZXF1aXJlKCdyZXF1aXJlX29wdGlvbmFsJyk7XG5cbmZ1bmN0aW9uIGRlYnVnT3B0aW9ucyhkZWJ1Z0ZpZWxkcywgb3B0aW9ucykge1xuICB2YXIgZmluYWxvcHRpb25zID0ge307XG4gIGRlYnVnRmllbGRzLmZvckVhY2goZnVuY3Rpb24obikge1xuICAgIGZpbmFsb3B0aW9uc1tuXSA9IG9wdGlvbnNbbl07XG4gIH0pO1xuXG4gIHJldHVybiBmaW5hbG9wdGlvbnM7XG59XG5cbmZ1bmN0aW9uIHJldHJpZXZlQlNPTigpIHtcbiAgdmFyIEJTT04gPSByZXF1aXJlKCdic29uJyk7XG4gIEJTT04ubmF0aXZlID0gZmFsc2U7XG5cbiAgdHJ5IHtcbiAgICB2YXIgb3B0aW9uYWxCU09OID0gcmVxdWlyZV9vcHRpb25hbCgnYnNvbi1leHQnKTtcbiAgICBpZiAob3B0aW9uYWxCU09OKSB7XG4gICAgICBvcHRpb25hbEJTT04ubmF0aXZlID0gdHJ1ZTtcbiAgICAgIHJldHVybiBvcHRpb25hbEJTT047XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICByZXR1cm4gQlNPTjtcbn1cblxuLy8gVGhyb3cgYW4gZXJyb3IgaWYgYW4gYXR0ZW1wdCB0byB1c2UgU25hcHB5IGlzIG1hZGUgd2hlbiBTbmFwcHkgaXMgbm90IGluc3RhbGxlZFxuZnVuY3Rpb24gbm9TbmFwcHlXYXJuaW5nKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ0F0dGVtcHRlZCB0byB1c2UgU25hcHB5IGNvbXByZXNzaW9uLCBidXQgU25hcHB5IGlzIG5vdCBpbnN0YWxsZWQuIEluc3RhbGwgb3IgZGlzYWJsZSBTbmFwcHkgY29tcHJlc3Npb24gYW5kIHRyeSBhZ2Fpbi4nXG4gICk7XG59XG5cbi8vIEZhY2lsaXRhdGUgbG9hZGluZyBTbmFwcHkgb3B0aW9uYWxseVxuZnVuY3Rpb24gcmV0cmlldmVTbmFwcHkoKSB7XG4gIHZhciBzbmFwcHkgPSBudWxsO1xuICB0cnkge1xuICAgIHNuYXBweSA9IHJlcXVpcmVfb3B0aW9uYWwoJ3NuYXBweScpO1xuICB9IGNhdGNoIChlcnJvcikge30gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBpZiAoIXNuYXBweSkge1xuICAgIHNuYXBweSA9IHtcbiAgICAgIGNvbXByZXNzOiBub1NuYXBweVdhcm5pbmcsXG4gICAgICB1bmNvbXByZXNzOiBub1NuYXBweVdhcm5pbmcsXG4gICAgICBjb21wcmVzc1N5bmM6IG5vU25hcHB5V2FybmluZyxcbiAgICAgIHVuY29tcHJlc3NTeW5jOiBub1NuYXBweVdhcm5pbmdcbiAgICB9O1xuICB9XG4gIHJldHVybiBzbmFwcHk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkZWJ1Z09wdGlvbnMsXG4gIHJldHJpZXZlQlNPTixcbiAgcmV0cmlldmVTbmFwcHlcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///40\n");

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst ReadPreference = __webpack_require__(42);\nconst MongoError = __webpack_require__(37).MongoError;\nconst ServerType = __webpack_require__(43).ServerType;\nconst TopologyDescription = __webpack_require__(44).TopologyDescription;\n\nconst MESSAGE_HEADER_SIZE = 16;\nconst COMPRESSION_DETAILS_SIZE = 9; // originalOpcode + uncompressedSize, compressorID\n\n// OPCODE Numbers\n// Defined at https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#request-opcodes\nvar opcodes = {\n  OP_REPLY: 1,\n  OP_UPDATE: 2001,\n  OP_INSERT: 2002,\n  OP_QUERY: 2004,\n  OP_GETMORE: 2005,\n  OP_DELETE: 2006,\n  OP_KILL_CURSORS: 2007,\n  OP_COMPRESSED: 2012,\n  OP_MSG: 2013\n};\n\nvar getReadPreference = function(cmd, options) {\n  // Default to command version of the readPreference\n  var readPreference = cmd.readPreference || new ReadPreference('primary');\n  // If we have an option readPreference override the command one\n  if (options.readPreference) {\n    readPreference = options.readPreference;\n  }\n\n  if (typeof readPreference === 'string') {\n    readPreference = new ReadPreference(readPreference);\n  }\n\n  if (!(readPreference instanceof ReadPreference)) {\n    throw new MongoError('read preference must be a ReadPreference instance');\n  }\n\n  return readPreference;\n};\n\n// Parses the header of a wire protocol message\nvar parseHeader = function(message) {\n  return {\n    length: message.readInt32LE(0),\n    requestId: message.readInt32LE(4),\n    responseTo: message.readInt32LE(8),\n    opCode: message.readInt32LE(12)\n  };\n};\n\nfunction applyCommonQueryOptions(queryOptions, options) {\n  Object.assign(queryOptions, {\n    raw: typeof options.raw === 'boolean' ? options.raw : false,\n    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\n    monitoring: typeof options.monitoring === 'boolean' ? options.monitoring : false,\n    fullResult: typeof options.fullResult === 'boolean' ? options.fullResult : false\n  });\n\n  if (typeof options.socketTimeout === 'number') {\n    queryOptions.socketTimeout = options.socketTimeout;\n  }\n\n  if (options.session) {\n    queryOptions.session = options.session;\n  }\n\n  if (typeof options.documentsReturnedIn === 'string') {\n    queryOptions.documentsReturnedIn = options.documentsReturnedIn;\n  }\n\n  return queryOptions;\n}\n\nfunction isSharded(topologyOrServer) {\n  if (topologyOrServer.type === 'mongos') return true;\n  if (topologyOrServer.description && topologyOrServer.description.type === ServerType.Mongos) {\n    return true;\n  }\n\n  // NOTE: This is incredibly inefficient, and should be removed once command construction\n  //       happens based on `Server` not `Topology`.\n  if (topologyOrServer.description && topologyOrServer.description instanceof TopologyDescription) {\n    const servers = Array.from(topologyOrServer.description.servers.values());\n    return servers.some(server => server.type === ServerType.Mongos);\n  }\n\n  return false;\n}\n\nfunction databaseNamespace(ns) {\n  return ns.split('.')[0];\n}\nfunction collectionNamespace(ns) {\n  return ns\n    .split('.')\n    .slice(1)\n    .join('.');\n}\n\nmodule.exports = {\n  getReadPreference,\n  MESSAGE_HEADER_SIZE,\n  COMPRESSION_DETAILS_SIZE,\n  opcodes,\n  parseHeader,\n  applyCommonQueryOptions,\n  isSharded,\n  databaseNamespace,\n  collectionNamespace\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NvcmUvd2lyZXByb3RvY29sL3NoYXJlZC5qcz8xNjY2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLHVCQUF1QixtQkFBTyxDQUFDLEVBQStCO0FBQzlELG1CQUFtQixtQkFBTyxDQUFDLEVBQVU7QUFDckMsbUJBQW1CLG1CQUFPLENBQUMsRUFBNEI7QUFDdkQsNEJBQTRCLG1CQUFPLENBQUMsRUFBOEI7O0FBRWxFO0FBQ0EsbUNBQW1DOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI0MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgUmVhZFByZWZlcmVuY2UgPSByZXF1aXJlKCcuLi90b3BvbG9naWVzL3JlYWRfcHJlZmVyZW5jZScpO1xuY29uc3QgTW9uZ29FcnJvciA9IHJlcXVpcmUoJy4uL2Vycm9yJykuTW9uZ29FcnJvcjtcbmNvbnN0IFNlcnZlclR5cGUgPSByZXF1aXJlKCcuLi9zZGFtL3NlcnZlcl9kZXNjcmlwdGlvbicpLlNlcnZlclR5cGU7XG5jb25zdCBUb3BvbG9neURlc2NyaXB0aW9uID0gcmVxdWlyZSgnLi4vc2RhbS90b3BvbG9neV9kZXNjcmlwdGlvbicpLlRvcG9sb2d5RGVzY3JpcHRpb247XG5cbmNvbnN0IE1FU1NBR0VfSEVBREVSX1NJWkUgPSAxNjtcbmNvbnN0IENPTVBSRVNTSU9OX0RFVEFJTFNfU0laRSA9IDk7IC8vIG9yaWdpbmFsT3Bjb2RlICsgdW5jb21wcmVzc2VkU2l6ZSwgY29tcHJlc3NvcklEXG5cbi8vIE9QQ09ERSBOdW1iZXJzXG4vLyBEZWZpbmVkIGF0IGh0dHBzOi8vZG9jcy5tb25nb2RiLmNvbS9tYW51YWwvcmVmZXJlbmNlL21vbmdvZGItd2lyZS1wcm90b2NvbC8jcmVxdWVzdC1vcGNvZGVzXG52YXIgb3Bjb2RlcyA9IHtcbiAgT1BfUkVQTFk6IDEsXG4gIE9QX1VQREFURTogMjAwMSxcbiAgT1BfSU5TRVJUOiAyMDAyLFxuICBPUF9RVUVSWTogMjAwNCxcbiAgT1BfR0VUTU9SRTogMjAwNSxcbiAgT1BfREVMRVRFOiAyMDA2LFxuICBPUF9LSUxMX0NVUlNPUlM6IDIwMDcsXG4gIE9QX0NPTVBSRVNTRUQ6IDIwMTIsXG4gIE9QX01TRzogMjAxM1xufTtcblxudmFyIGdldFJlYWRQcmVmZXJlbmNlID0gZnVuY3Rpb24oY21kLCBvcHRpb25zKSB7XG4gIC8vIERlZmF1bHQgdG8gY29tbWFuZCB2ZXJzaW9uIG9mIHRoZSByZWFkUHJlZmVyZW5jZVxuICB2YXIgcmVhZFByZWZlcmVuY2UgPSBjbWQucmVhZFByZWZlcmVuY2UgfHwgbmV3IFJlYWRQcmVmZXJlbmNlKCdwcmltYXJ5Jyk7XG4gIC8vIElmIHdlIGhhdmUgYW4gb3B0aW9uIHJlYWRQcmVmZXJlbmNlIG92ZXJyaWRlIHRoZSBjb21tYW5kIG9uZVxuICBpZiAob3B0aW9ucy5yZWFkUHJlZmVyZW5jZSkge1xuICAgIHJlYWRQcmVmZXJlbmNlID0gb3B0aW9ucy5yZWFkUHJlZmVyZW5jZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVhZFByZWZlcmVuY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgcmVhZFByZWZlcmVuY2UgPSBuZXcgUmVhZFByZWZlcmVuY2UocmVhZFByZWZlcmVuY2UpO1xuICB9XG5cbiAgaWYgKCEocmVhZFByZWZlcmVuY2UgaW5zdGFuY2VvZiBSZWFkUHJlZmVyZW5jZSkpIHtcbiAgICB0aHJvdyBuZXcgTW9uZ29FcnJvcigncmVhZCBwcmVmZXJlbmNlIG11c3QgYmUgYSBSZWFkUHJlZmVyZW5jZSBpbnN0YW5jZScpO1xuICB9XG5cbiAgcmV0dXJuIHJlYWRQcmVmZXJlbmNlO1xufTtcblxuLy8gUGFyc2VzIHRoZSBoZWFkZXIgb2YgYSB3aXJlIHByb3RvY29sIG1lc3NhZ2VcbnZhciBwYXJzZUhlYWRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgcmV0dXJuIHtcbiAgICBsZW5ndGg6IG1lc3NhZ2UucmVhZEludDMyTEUoMCksXG4gICAgcmVxdWVzdElkOiBtZXNzYWdlLnJlYWRJbnQzMkxFKDQpLFxuICAgIHJlc3BvbnNlVG86IG1lc3NhZ2UucmVhZEludDMyTEUoOCksXG4gICAgb3BDb2RlOiBtZXNzYWdlLnJlYWRJbnQzMkxFKDEyKVxuICB9O1xufTtcblxuZnVuY3Rpb24gYXBwbHlDb21tb25RdWVyeU9wdGlvbnMocXVlcnlPcHRpb25zLCBvcHRpb25zKSB7XG4gIE9iamVjdC5hc3NpZ24ocXVlcnlPcHRpb25zLCB7XG4gICAgcmF3OiB0eXBlb2Ygb3B0aW9ucy5yYXcgPT09ICdib29sZWFuJyA/IG9wdGlvbnMucmF3IDogZmFsc2UsXG4gICAgcHJvbW90ZUxvbmdzOiB0eXBlb2Ygb3B0aW9ucy5wcm9tb3RlTG9uZ3MgPT09ICdib29sZWFuJyA/IG9wdGlvbnMucHJvbW90ZUxvbmdzIDogdHJ1ZSxcbiAgICBwcm9tb3RlVmFsdWVzOiB0eXBlb2Ygb3B0aW9ucy5wcm9tb3RlVmFsdWVzID09PSAnYm9vbGVhbicgPyBvcHRpb25zLnByb21vdGVWYWx1ZXMgOiB0cnVlLFxuICAgIHByb21vdGVCdWZmZXJzOiB0eXBlb2Ygb3B0aW9ucy5wcm9tb3RlQnVmZmVycyA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5wcm9tb3RlQnVmZmVycyA6IGZhbHNlLFxuICAgIG1vbml0b3Jpbmc6IHR5cGVvZiBvcHRpb25zLm1vbml0b3JpbmcgPT09ICdib29sZWFuJyA/IG9wdGlvbnMubW9uaXRvcmluZyA6IGZhbHNlLFxuICAgIGZ1bGxSZXN1bHQ6IHR5cGVvZiBvcHRpb25zLmZ1bGxSZXN1bHQgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuZnVsbFJlc3VsdCA6IGZhbHNlXG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5zb2NrZXRUaW1lb3V0ID09PSAnbnVtYmVyJykge1xuICAgIHF1ZXJ5T3B0aW9ucy5zb2NrZXRUaW1lb3V0ID0gb3B0aW9ucy5zb2NrZXRUaW1lb3V0O1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuc2Vzc2lvbikge1xuICAgIHF1ZXJ5T3B0aW9ucy5zZXNzaW9uID0gb3B0aW9ucy5zZXNzaW9uO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmRvY3VtZW50c1JldHVybmVkSW4gPT09ICdzdHJpbmcnKSB7XG4gICAgcXVlcnlPcHRpb25zLmRvY3VtZW50c1JldHVybmVkSW4gPSBvcHRpb25zLmRvY3VtZW50c1JldHVybmVkSW47XG4gIH1cblxuICByZXR1cm4gcXVlcnlPcHRpb25zO1xufVxuXG5mdW5jdGlvbiBpc1NoYXJkZWQodG9wb2xvZ3lPclNlcnZlcikge1xuICBpZiAodG9wb2xvZ3lPclNlcnZlci50eXBlID09PSAnbW9uZ29zJykgcmV0dXJuIHRydWU7XG4gIGlmICh0b3BvbG9neU9yU2VydmVyLmRlc2NyaXB0aW9uICYmIHRvcG9sb2d5T3JTZXJ2ZXIuZGVzY3JpcHRpb24udHlwZSA9PT0gU2VydmVyVHlwZS5Nb25nb3MpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIE5PVEU6IFRoaXMgaXMgaW5jcmVkaWJseSBpbmVmZmljaWVudCwgYW5kIHNob3VsZCBiZSByZW1vdmVkIG9uY2UgY29tbWFuZCBjb25zdHJ1Y3Rpb25cbiAgLy8gICAgICAgaGFwcGVucyBiYXNlZCBvbiBgU2VydmVyYCBub3QgYFRvcG9sb2d5YC5cbiAgaWYgKHRvcG9sb2d5T3JTZXJ2ZXIuZGVzY3JpcHRpb24gJiYgdG9wb2xvZ3lPclNlcnZlci5kZXNjcmlwdGlvbiBpbnN0YW5jZW9mIFRvcG9sb2d5RGVzY3JpcHRpb24pIHtcbiAgICBjb25zdCBzZXJ2ZXJzID0gQXJyYXkuZnJvbSh0b3BvbG9neU9yU2VydmVyLmRlc2NyaXB0aW9uLnNlcnZlcnMudmFsdWVzKCkpO1xuICAgIHJldHVybiBzZXJ2ZXJzLnNvbWUoc2VydmVyID0+IHNlcnZlci50eXBlID09PSBTZXJ2ZXJUeXBlLk1vbmdvcyk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGRhdGFiYXNlTmFtZXNwYWNlKG5zKSB7XG4gIHJldHVybiBucy5zcGxpdCgnLicpWzBdO1xufVxuZnVuY3Rpb24gY29sbGVjdGlvbk5hbWVzcGFjZShucykge1xuICByZXR1cm4gbnNcbiAgICAuc3BsaXQoJy4nKVxuICAgIC5zbGljZSgxKVxuICAgIC5qb2luKCcuJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRSZWFkUHJlZmVyZW5jZSxcbiAgTUVTU0FHRV9IRUFERVJfU0laRSxcbiAgQ09NUFJFU1NJT05fREVUQUlMU19TSVpFLFxuICBvcGNvZGVzLFxuICBwYXJzZUhlYWRlcixcbiAgYXBwbHlDb21tb25RdWVyeU9wdGlvbnMsXG4gIGlzU2hhcmRlZCxcbiAgZGF0YWJhc2VOYW1lc3BhY2UsXG4gIGNvbGxlY3Rpb25OYW1lc3BhY2Vcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///41\n");

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @class\n * @param {string} mode A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n * @param {array} tags The tags object\n * @param {object} [options] Additional read preference options\n * @param {number} [options.maxStalenessSeconds] Max secondary read staleness in seconds, Minimum value is 90 seconds.\n * @see https://docs.mongodb.com/manual/core/read-preference/\n * @return {ReadPreference}\n */\nconst ReadPreference = function(mode, tags, options) {\n  if (!ReadPreference.isValid(mode)) {\n    throw new TypeError(`Invalid read preference mode ${mode}`);\n  }\n\n  // TODO(major): tags MUST be an array of tagsets\n  if (tags && !Array.isArray(tags)) {\n    console.warn(\n      'ReadPreference tags must be an array, this will change in the next major version'\n    );\n\n    if (typeof tags.maxStalenessSeconds !== 'undefined') {\n      // this is likely an options object\n      options = tags;\n      tags = undefined;\n    } else {\n      tags = [tags];\n    }\n  }\n\n  this.mode = mode;\n  this.tags = tags;\n\n  options = options || {};\n  if (options.maxStalenessSeconds != null) {\n    if (options.maxStalenessSeconds <= 0) {\n      throw new TypeError('maxStalenessSeconds must be a positive integer');\n    }\n\n    this.maxStalenessSeconds = options.maxStalenessSeconds;\n\n    // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n    //       topology has a lower value then a MongoError will be thrown during server selection.\n    this.minWireVersion = 5;\n  }\n\n  if (this.mode === ReadPreference.PRIMARY) {\n    if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n      throw new TypeError('Primary read preference cannot be combined with tags');\n    }\n\n    if (this.maxStalenessSeconds) {\n      throw new TypeError('Primary read preference cannot be combined with maxStalenessSeconds');\n    }\n  }\n};\n\n// Support the deprecated `preference` property introduced in the porcelain layer\nObject.defineProperty(ReadPreference.prototype, 'preference', {\n  enumerable: true,\n  get: function() {\n    return this.mode;\n  }\n});\n\n/*\n * Read preference mode constants\n */\nReadPreference.PRIMARY = 'primary';\nReadPreference.PRIMARY_PREFERRED = 'primaryPreferred';\nReadPreference.SECONDARY = 'secondary';\nReadPreference.SECONDARY_PREFERRED = 'secondaryPreferred';\nReadPreference.NEAREST = 'nearest';\n\nconst VALID_MODES = [\n  ReadPreference.PRIMARY,\n  ReadPreference.PRIMARY_PREFERRED,\n  ReadPreference.SECONDARY,\n  ReadPreference.SECONDARY_PREFERRED,\n  ReadPreference.NEAREST,\n  null\n];\n\n/**\n * Construct a ReadPreference given an options object.\n *\n * @param {object} options The options object from which to extract the read preference.\n * @return {ReadPreference}\n */\nReadPreference.fromOptions = function(options) {\n  const readPreference = options.readPreference;\n  const readPreferenceTags = options.readPreferenceTags;\n\n  if (readPreference == null) {\n    return null;\n  }\n\n  if (typeof readPreference === 'string') {\n    return new ReadPreference(readPreference, readPreferenceTags);\n  } else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n    const mode = readPreference.mode || readPreference.preference;\n    if (mode && typeof mode === 'string') {\n      return new ReadPreference(mode, readPreference.tags, {\n        maxStalenessSeconds: readPreference.maxStalenessSeconds\n      });\n    }\n  }\n\n  return readPreference;\n};\n\n/**\n * Validate if a mode is legal\n *\n * @method\n * @param {string} mode The string representing the read preference mode.\n * @return {boolean} True if a mode is valid\n */\nReadPreference.isValid = function(mode) {\n  return VALID_MODES.indexOf(mode) !== -1;\n};\n\n/**\n * Validate if a mode is legal\n *\n * @method\n * @param {string} mode The string representing the read preference mode.\n * @return {boolean} True if a mode is valid\n */\nReadPreference.prototype.isValid = function(mode) {\n  return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n};\n\nconst needSlaveOk = ['primaryPreferred', 'secondary', 'secondaryPreferred', 'nearest'];\n\n/**\n * Indicates that this readPreference needs the \"slaveOk\" bit when sent over the wire\n * @method\n * @return {boolean}\n * @see https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#op-query\n */\nReadPreference.prototype.slaveOk = function() {\n  return needSlaveOk.indexOf(this.mode) !== -1;\n};\n\n/**\n * Are the two read preference equal\n * @method\n * @param {ReadPreference} readPreference The read preference with which to check equality\n * @return {boolean} True if the two ReadPreferences are equivalent\n */\nReadPreference.prototype.equals = function(readPreference) {\n  return readPreference.mode === this.mode;\n};\n\n/**\n * Return JSON representation\n * @method\n * @return {Object} A JSON representation of the ReadPreference\n */\nReadPreference.prototype.toJSON = function() {\n  const readPreference = { mode: this.mode };\n  if (Array.isArray(this.tags)) readPreference.tags = this.tags;\n  if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n  return readPreference;\n};\n\n/**\n * Primary read preference\n * @member\n * @type {ReadPreference}\n */\nReadPreference.primary = new ReadPreference('primary');\n/**\n * Primary Preferred read preference\n * @member\n * @type {ReadPreference}\n */\nReadPreference.primaryPreferred = new ReadPreference('primaryPreferred');\n/**\n * Secondary read preference\n * @member\n * @type {ReadPreference}\n */\nReadPreference.secondary = new ReadPreference('secondary');\n/**\n * Secondary Preferred read preference\n * @member\n * @type {ReadPreference}\n */\nReadPreference.secondaryPreferred = new ReadPreference('secondaryPreferred');\n/**\n * Nearest read preference\n * @member\n * @type {ReadPreference}\n */\nReadPreference.nearest = new ReadPreference('nearest');\n\nmodule.exports = ReadPreference;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///42\n");

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// An enumeration of server types we know about\nconst ServerType = {\n  Standalone: 'Standalone',\n  Mongos: 'Mongos',\n  PossiblePrimary: 'PossiblePrimary',\n  RSPrimary: 'RSPrimary',\n  RSSecondary: 'RSSecondary',\n  RSArbiter: 'RSArbiter',\n  RSOther: 'RSOther',\n  RSGhost: 'RSGhost',\n  Unknown: 'Unknown'\n};\n\nconst WRITABLE_SERVER_TYPES = new Set([\n  ServerType.RSPrimary,\n  ServerType.Standalone,\n  ServerType.Mongos\n]);\n\nconst DATA_BEARING_SERVER_TYPES = new Set([\n  ServerType.RSPrimary,\n  ServerType.RSSecondary,\n  ServerType.Mongos,\n  ServerType.Standalone\n]);\n\nconst ISMASTER_FIELDS = [\n  'minWireVersion',\n  'maxWireVersion',\n  'maxBsonObjectSize',\n  'maxMessageSizeBytes',\n  'maxWriteBatchSize',\n  'compression',\n  'me',\n  'hosts',\n  'passives',\n  'arbiters',\n  'tags',\n  'setName',\n  'setVersion',\n  'electionId',\n  'primary',\n  'logicalSessionTimeoutMinutes',\n  'saslSupportedMechs',\n  '__nodejs_mock_server__',\n  '$clusterTime'\n];\n\n/**\n * The client's view of a single server, based on the most recent ismaster outcome.\n *\n * Internal type, not meant to be directly instantiated\n */\nclass ServerDescription {\n  /**\n   * Create a ServerDescription\n   * @param {String} address The address of the server\n   * @param {Object} [ismaster] An optional ismaster response for this server\n   * @param {Object} [options] Optional settings\n   * @param {Number} [options.roundTripTime] The round trip time to ping this server (in ms)\n   */\n  constructor(address, ismaster, options) {\n    options = options || {};\n    ismaster = Object.assign(\n      {\n        minWireVersion: 0,\n        maxWireVersion: 0,\n        hosts: [],\n        passives: [],\n        arbiters: [],\n        tags: []\n      },\n      ismaster\n    );\n\n    this.address = address;\n    this.error = options.error || null;\n    this.roundTripTime = options.roundTripTime || 0;\n    this.lastUpdateTime = Date.now();\n    this.lastWriteDate = ismaster.lastWrite ? ismaster.lastWrite.lastWriteDate : null;\n    this.opTime = ismaster.lastWrite ? ismaster.lastWrite.opTime : null;\n    this.type = parseServerType(ismaster);\n\n    // direct mappings\n    ISMASTER_FIELDS.forEach(field => {\n      if (typeof ismaster[field] !== 'undefined') this[field] = ismaster[field];\n    });\n\n    // normalize case for hosts\n    if (this.me) this.me = this.me.toLowerCase();\n    this.hosts = this.hosts.map(host => host.toLowerCase());\n    this.passives = this.passives.map(host => host.toLowerCase());\n    this.arbiters = this.arbiters.map(host => host.toLowerCase());\n  }\n\n  get allHosts() {\n    return this.hosts.concat(this.arbiters).concat(this.passives);\n  }\n\n  /**\n   * @return {Boolean} Is this server available for reads\n   */\n  get isReadable() {\n    return this.type === ServerType.RSSecondary || this.isWritable;\n  }\n\n  /**\n   * @return {Boolean} Is this server data bearing\n   */\n  get isDataBearing() {\n    return DATA_BEARING_SERVER_TYPES.has(this.type);\n  }\n\n  /**\n   * @return {Boolean} Is this server available for writes\n   */\n  get isWritable() {\n    return WRITABLE_SERVER_TYPES.has(this.type);\n  }\n}\n\n/**\n * Parses an `ismaster` message and determines the server type\n *\n * @param {Object} ismaster The `ismaster` message to parse\n * @return {ServerType}\n */\nfunction parseServerType(ismaster) {\n  if (!ismaster || !ismaster.ok) {\n    return ServerType.Unknown;\n  }\n\n  if (ismaster.isreplicaset) {\n    return ServerType.RSGhost;\n  }\n\n  if (ismaster.msg && ismaster.msg === 'isdbgrid') {\n    return ServerType.Mongos;\n  }\n\n  if (ismaster.setName) {\n    if (ismaster.hidden) {\n      return ServerType.RSOther;\n    } else if (ismaster.ismaster) {\n      return ServerType.RSPrimary;\n    } else if (ismaster.secondary) {\n      return ServerType.RSSecondary;\n    } else if (ismaster.arbiterOnly) {\n      return ServerType.RSArbiter;\n    } else {\n      return ServerType.RSOther;\n    }\n  }\n\n  return ServerType.Standalone;\n}\n\nmodule.exports = {\n  ServerDescription,\n  ServerType\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NvcmUvc2RhbS9zZXJ2ZXJfZGVzY3JpcHRpb24uanM/ODExNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI0My5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gQW4gZW51bWVyYXRpb24gb2Ygc2VydmVyIHR5cGVzIHdlIGtub3cgYWJvdXRcbmNvbnN0IFNlcnZlclR5cGUgPSB7XG4gIFN0YW5kYWxvbmU6ICdTdGFuZGFsb25lJyxcbiAgTW9uZ29zOiAnTW9uZ29zJyxcbiAgUG9zc2libGVQcmltYXJ5OiAnUG9zc2libGVQcmltYXJ5JyxcbiAgUlNQcmltYXJ5OiAnUlNQcmltYXJ5JyxcbiAgUlNTZWNvbmRhcnk6ICdSU1NlY29uZGFyeScsXG4gIFJTQXJiaXRlcjogJ1JTQXJiaXRlcicsXG4gIFJTT3RoZXI6ICdSU090aGVyJyxcbiAgUlNHaG9zdDogJ1JTR2hvc3QnLFxuICBVbmtub3duOiAnVW5rbm93bidcbn07XG5cbmNvbnN0IFdSSVRBQkxFX1NFUlZFUl9UWVBFUyA9IG5ldyBTZXQoW1xuICBTZXJ2ZXJUeXBlLlJTUHJpbWFyeSxcbiAgU2VydmVyVHlwZS5TdGFuZGFsb25lLFxuICBTZXJ2ZXJUeXBlLk1vbmdvc1xuXSk7XG5cbmNvbnN0IERBVEFfQkVBUklOR19TRVJWRVJfVFlQRVMgPSBuZXcgU2V0KFtcbiAgU2VydmVyVHlwZS5SU1ByaW1hcnksXG4gIFNlcnZlclR5cGUuUlNTZWNvbmRhcnksXG4gIFNlcnZlclR5cGUuTW9uZ29zLFxuICBTZXJ2ZXJUeXBlLlN0YW5kYWxvbmVcbl0pO1xuXG5jb25zdCBJU01BU1RFUl9GSUVMRFMgPSBbXG4gICdtaW5XaXJlVmVyc2lvbicsXG4gICdtYXhXaXJlVmVyc2lvbicsXG4gICdtYXhCc29uT2JqZWN0U2l6ZScsXG4gICdtYXhNZXNzYWdlU2l6ZUJ5dGVzJyxcbiAgJ21heFdyaXRlQmF0Y2hTaXplJyxcbiAgJ2NvbXByZXNzaW9uJyxcbiAgJ21lJyxcbiAgJ2hvc3RzJyxcbiAgJ3Bhc3NpdmVzJyxcbiAgJ2FyYml0ZXJzJyxcbiAgJ3RhZ3MnLFxuICAnc2V0TmFtZScsXG4gICdzZXRWZXJzaW9uJyxcbiAgJ2VsZWN0aW9uSWQnLFxuICAncHJpbWFyeScsXG4gICdsb2dpY2FsU2Vzc2lvblRpbWVvdXRNaW51dGVzJyxcbiAgJ3Nhc2xTdXBwb3J0ZWRNZWNocycsXG4gICdfX25vZGVqc19tb2NrX3NlcnZlcl9fJyxcbiAgJyRjbHVzdGVyVGltZSdcbl07XG5cbi8qKlxuICogVGhlIGNsaWVudCdzIHZpZXcgb2YgYSBzaW5nbGUgc2VydmVyLCBiYXNlZCBvbiB0aGUgbW9zdCByZWNlbnQgaXNtYXN0ZXIgb3V0Y29tZS5cbiAqXG4gKiBJbnRlcm5hbCB0eXBlLCBub3QgbWVhbnQgdG8gYmUgZGlyZWN0bHkgaW5zdGFudGlhdGVkXG4gKi9cbmNsYXNzIFNlcnZlckRlc2NyaXB0aW9uIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIFNlcnZlckRlc2NyaXB0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBhZGRyZXNzIFRoZSBhZGRyZXNzIG9mIHRoZSBzZXJ2ZXJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtpc21hc3Rlcl0gQW4gb3B0aW9uYWwgaXNtYXN0ZXIgcmVzcG9uc2UgZm9yIHRoaXMgc2VydmVyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9uYWwgc2V0dGluZ3NcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnJvdW5kVHJpcFRpbWVdIFRoZSByb3VuZCB0cmlwIHRpbWUgdG8gcGluZyB0aGlzIHNlcnZlciAoaW4gbXMpXG4gICAqL1xuICBjb25zdHJ1Y3RvcihhZGRyZXNzLCBpc21hc3Rlciwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIGlzbWFzdGVyID0gT2JqZWN0LmFzc2lnbihcbiAgICAgIHtcbiAgICAgICAgbWluV2lyZVZlcnNpb246IDAsXG4gICAgICAgIG1heFdpcmVWZXJzaW9uOiAwLFxuICAgICAgICBob3N0czogW10sXG4gICAgICAgIHBhc3NpdmVzOiBbXSxcbiAgICAgICAgYXJiaXRlcnM6IFtdLFxuICAgICAgICB0YWdzOiBbXVxuICAgICAgfSxcbiAgICAgIGlzbWFzdGVyXG4gICAgKTtcblxuICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgdGhpcy5lcnJvciA9IG9wdGlvbnMuZXJyb3IgfHwgbnVsbDtcbiAgICB0aGlzLnJvdW5kVHJpcFRpbWUgPSBvcHRpb25zLnJvdW5kVHJpcFRpbWUgfHwgMDtcbiAgICB0aGlzLmxhc3RVcGRhdGVUaW1lID0gRGF0ZS5ub3coKTtcbiAgICB0aGlzLmxhc3RXcml0ZURhdGUgPSBpc21hc3Rlci5sYXN0V3JpdGUgPyBpc21hc3Rlci5sYXN0V3JpdGUubGFzdFdyaXRlRGF0ZSA6IG51bGw7XG4gICAgdGhpcy5vcFRpbWUgPSBpc21hc3Rlci5sYXN0V3JpdGUgPyBpc21hc3Rlci5sYXN0V3JpdGUub3BUaW1lIDogbnVsbDtcbiAgICB0aGlzLnR5cGUgPSBwYXJzZVNlcnZlclR5cGUoaXNtYXN0ZXIpO1xuXG4gICAgLy8gZGlyZWN0IG1hcHBpbmdzXG4gICAgSVNNQVNURVJfRklFTERTLmZvckVhY2goZmllbGQgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBpc21hc3RlcltmaWVsZF0gIT09ICd1bmRlZmluZWQnKSB0aGlzW2ZpZWxkXSA9IGlzbWFzdGVyW2ZpZWxkXTtcbiAgICB9KTtcblxuICAgIC8vIG5vcm1hbGl6ZSBjYXNlIGZvciBob3N0c1xuICAgIGlmICh0aGlzLm1lKSB0aGlzLm1lID0gdGhpcy5tZS50b0xvd2VyQ2FzZSgpO1xuICAgIHRoaXMuaG9zdHMgPSB0aGlzLmhvc3RzLm1hcChob3N0ID0+IGhvc3QudG9Mb3dlckNhc2UoKSk7XG4gICAgdGhpcy5wYXNzaXZlcyA9IHRoaXMucGFzc2l2ZXMubWFwKGhvc3QgPT4gaG9zdC50b0xvd2VyQ2FzZSgpKTtcbiAgICB0aGlzLmFyYml0ZXJzID0gdGhpcy5hcmJpdGVycy5tYXAoaG9zdCA9PiBob3N0LnRvTG93ZXJDYXNlKCkpO1xuICB9XG5cbiAgZ2V0IGFsbEhvc3RzKCkge1xuICAgIHJldHVybiB0aGlzLmhvc3RzLmNvbmNhdCh0aGlzLmFyYml0ZXJzKS5jb25jYXQodGhpcy5wYXNzaXZlcyk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gSXMgdGhpcyBzZXJ2ZXIgYXZhaWxhYmxlIGZvciByZWFkc1xuICAgKi9cbiAgZ2V0IGlzUmVhZGFibGUoKSB7XG4gICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gU2VydmVyVHlwZS5SU1NlY29uZGFyeSB8fCB0aGlzLmlzV3JpdGFibGU7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gSXMgdGhpcyBzZXJ2ZXIgZGF0YSBiZWFyaW5nXG4gICAqL1xuICBnZXQgaXNEYXRhQmVhcmluZygpIHtcbiAgICByZXR1cm4gREFUQV9CRUFSSU5HX1NFUlZFUl9UWVBFUy5oYXModGhpcy50eXBlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSBJcyB0aGlzIHNlcnZlciBhdmFpbGFibGUgZm9yIHdyaXRlc1xuICAgKi9cbiAgZ2V0IGlzV3JpdGFibGUoKSB7XG4gICAgcmV0dXJuIFdSSVRBQkxFX1NFUlZFUl9UWVBFUy5oYXModGhpcy50eXBlKTtcbiAgfVxufVxuXG4vKipcbiAqIFBhcnNlcyBhbiBgaXNtYXN0ZXJgIG1lc3NhZ2UgYW5kIGRldGVybWluZXMgdGhlIHNlcnZlciB0eXBlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGlzbWFzdGVyIFRoZSBgaXNtYXN0ZXJgIG1lc3NhZ2UgdG8gcGFyc2VcbiAqIEByZXR1cm4ge1NlcnZlclR5cGV9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlU2VydmVyVHlwZShpc21hc3Rlcikge1xuICBpZiAoIWlzbWFzdGVyIHx8ICFpc21hc3Rlci5vaykge1xuICAgIHJldHVybiBTZXJ2ZXJUeXBlLlVua25vd247XG4gIH1cblxuICBpZiAoaXNtYXN0ZXIuaXNyZXBsaWNhc2V0KSB7XG4gICAgcmV0dXJuIFNlcnZlclR5cGUuUlNHaG9zdDtcbiAgfVxuXG4gIGlmIChpc21hc3Rlci5tc2cgJiYgaXNtYXN0ZXIubXNnID09PSAnaXNkYmdyaWQnKSB7XG4gICAgcmV0dXJuIFNlcnZlclR5cGUuTW9uZ29zO1xuICB9XG5cbiAgaWYgKGlzbWFzdGVyLnNldE5hbWUpIHtcbiAgICBpZiAoaXNtYXN0ZXIuaGlkZGVuKSB7XG4gICAgICByZXR1cm4gU2VydmVyVHlwZS5SU090aGVyO1xuICAgIH0gZWxzZSBpZiAoaXNtYXN0ZXIuaXNtYXN0ZXIpIHtcbiAgICAgIHJldHVybiBTZXJ2ZXJUeXBlLlJTUHJpbWFyeTtcbiAgICB9IGVsc2UgaWYgKGlzbWFzdGVyLnNlY29uZGFyeSkge1xuICAgICAgcmV0dXJuIFNlcnZlclR5cGUuUlNTZWNvbmRhcnk7XG4gICAgfSBlbHNlIGlmIChpc21hc3Rlci5hcmJpdGVyT25seSkge1xuICAgICAgcmV0dXJuIFNlcnZlclR5cGUuUlNBcmJpdGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gU2VydmVyVHlwZS5SU090aGVyO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBTZXJ2ZXJUeXBlLlN0YW5kYWxvbmU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBTZXJ2ZXJEZXNjcmlwdGlvbixcbiAgU2VydmVyVHlwZVxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///43\n");

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst ServerType = __webpack_require__(43).ServerType;\nconst ServerDescription = __webpack_require__(43).ServerDescription;\nconst WIRE_CONSTANTS = __webpack_require__(45);\n\n// contstants related to compatability checks\nconst MIN_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_SERVER_VERSION;\nconst MAX_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_SERVER_VERSION;\nconst MIN_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_WIRE_VERSION;\nconst MAX_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_WIRE_VERSION;\n\n// An enumeration of topology types we know about\nconst TopologyType = {\n  Single: 'Single',\n  ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n  ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n  Sharded: 'Sharded',\n  Unknown: 'Unknown'\n};\n\n// Representation of a deployment of servers\nclass TopologyDescription {\n  /**\n   * Create a TopologyDescription\n   *\n   * @param {string} topologyType\n   * @param {Map<string, ServerDescription>} serverDescriptions the a map of address to ServerDescription\n   * @param {string} setName\n   * @param {number} maxSetVersion\n   * @param {ObjectId} maxElectionId\n   */\n  constructor(\n    topologyType,\n    serverDescriptions,\n    setName,\n    maxSetVersion,\n    maxElectionId,\n    commonWireVersion,\n    options,\n    error\n  ) {\n    options = options || {};\n\n    // TODO: consider assigning all these values to a temporary value `s` which\n    //       we use `Object.freeze` on, ensuring the internal state of this type\n    //       is immutable.\n    this.type = topologyType || TopologyType.Unknown;\n    this.setName = setName || null;\n    this.maxSetVersion = maxSetVersion || null;\n    this.maxElectionId = maxElectionId || null;\n    this.servers = serverDescriptions || new Map();\n    this.stale = false;\n    this.compatible = true;\n    this.compatibilityError = null;\n    this.logicalSessionTimeoutMinutes = null;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS || 0;\n    this.localThresholdMS = options.localThresholdMS || 0;\n    this.options = options;\n    this.error = error;\n    this.commonWireVersion = commonWireVersion || null;\n\n    // determine server compatibility\n    for (const serverDescription of this.servers.values()) {\n      if (serverDescription.type === ServerType.Unknown) continue;\n\n      if (serverDescription.minWireVersion > MAX_SUPPORTED_WIRE_VERSION) {\n        this.compatible = false;\n        this.compatibilityError = `Server at ${serverDescription.address} requires wire version ${\n          serverDescription.minWireVersion\n        }, but this version of the driver only supports up to ${MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${MAX_SUPPORTED_SERVER_VERSION})`;\n      }\n\n      if (serverDescription.maxWireVersion < MIN_SUPPORTED_WIRE_VERSION) {\n        this.compatible = false;\n        this.compatibilityError = `Server at ${serverDescription.address} reports wire version ${\n          serverDescription.maxWireVersion\n        }, but this version of the driver requires at least ${MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${MIN_SUPPORTED_SERVER_VERSION}).`;\n        break;\n      }\n    }\n\n    // Whenever a client updates the TopologyDescription from an ismaster response, it MUST set\n    // TopologyDescription.logicalSessionTimeoutMinutes to the smallest logicalSessionTimeoutMinutes\n    // value among ServerDescriptions of all data-bearing server types. If any have a null\n    // logicalSessionTimeoutMinutes, then TopologyDescription.logicalSessionTimeoutMinutes MUST be\n    // set to null.\n    const readableServers = Array.from(this.servers.values()).filter(s => s.isReadable);\n    this.logicalSessionTimeoutMinutes = readableServers.reduce((result, server) => {\n      if (server.logicalSessionTimeoutMinutes == null) return null;\n      if (result == null) return server.logicalSessionTimeoutMinutes;\n      return Math.min(result, server.logicalSessionTimeoutMinutes);\n    }, null);\n  }\n\n  /**\n   * Returns a new TopologyDescription based on the SrvPollingEvent\n   * @param {SrvPollingEvent} ev The event\n   */\n  updateFromSrvPollingEvent(ev) {\n    const newAddresses = ev.addresses();\n    const serverDescriptions = new Map(this.servers);\n    for (const server of this.servers) {\n      if (newAddresses.has(server[0])) {\n        newAddresses.delete(server[0]);\n      } else {\n        serverDescriptions.delete(server[0]);\n      }\n    }\n\n    if (serverDescriptions.size === this.servers.size && newAddresses.size === 0) {\n      return this;\n    }\n\n    for (const address of newAddresses) {\n      serverDescriptions.set(address, new ServerDescription(address));\n    }\n\n    return new TopologyDescription(\n      this.type,\n      serverDescriptions,\n      this.setName,\n      this.maxSetVersion,\n      this.maxElectionId,\n      this.commonWireVersion,\n      this.options,\n      null\n    );\n  }\n\n  /**\n   * Returns a copy of this description updated with a given ServerDescription\n   *\n   * @param {ServerDescription} serverDescription\n   */\n  update(serverDescription) {\n    const address = serverDescription.address;\n    // NOTE: there are a number of prime targets for refactoring here\n    //       once we support destructuring assignments\n\n    // potentially mutated values\n    let topologyType = this.type;\n    let setName = this.setName;\n    let maxSetVersion = this.maxSetVersion;\n    let maxElectionId = this.maxElectionId;\n    let commonWireVersion = this.commonWireVersion;\n    let error = serverDescription.error || this.error;\n\n    const serverType = serverDescription.type;\n    let serverDescriptions = new Map(this.servers);\n\n    // update common wire version\n    if (serverDescription.maxWireVersion !== 0) {\n      if (commonWireVersion == null) {\n        commonWireVersion = serverDescription.maxWireVersion;\n      } else {\n        commonWireVersion = Math.min(commonWireVersion, serverDescription.maxWireVersion);\n      }\n    }\n\n    // update the actual server description\n    serverDescriptions.set(address, serverDescription);\n\n    if (topologyType === TopologyType.Single) {\n      // once we are defined as single, that never changes\n      return new TopologyDescription(\n        TopologyType.Single,\n        serverDescriptions,\n        setName,\n        maxSetVersion,\n        maxElectionId,\n        commonWireVersion,\n        this.options,\n        error\n      );\n    }\n\n    if (topologyType === TopologyType.Unknown) {\n      if (serverType === ServerType.Standalone) {\n        serverDescriptions.delete(address);\n      } else {\n        topologyType = topologyTypeForServerType(serverType);\n      }\n    }\n\n    if (topologyType === TopologyType.Sharded) {\n      if ([ServerType.Mongos, ServerType.Unknown].indexOf(serverType) === -1) {\n        serverDescriptions.delete(address);\n      }\n    }\n\n    if (topologyType === TopologyType.ReplicaSetNoPrimary) {\n      if ([ServerType.Mongos, ServerType.Unknown].indexOf(serverType) >= 0) {\n        serverDescriptions.delete(address);\n      }\n\n      if (serverType === ServerType.RSPrimary) {\n        const result = updateRsFromPrimary(\n          serverDescriptions,\n          setName,\n          serverDescription,\n          maxSetVersion,\n          maxElectionId\n        );\n\n        (topologyType = result[0]),\n          (setName = result[1]),\n          (maxSetVersion = result[2]),\n          (maxElectionId = result[3]);\n      } else if (\n        [ServerType.RSSecondary, ServerType.RSArbiter, ServerType.RSOther].indexOf(serverType) >= 0\n      ) {\n        const result = updateRsNoPrimaryFromMember(serverDescriptions, setName, serverDescription);\n        (topologyType = result[0]), (setName = result[1]);\n      }\n    }\n\n    if (topologyType === TopologyType.ReplicaSetWithPrimary) {\n      if ([ServerType.Standalone, ServerType.Mongos].indexOf(serverType) >= 0) {\n        serverDescriptions.delete(address);\n        topologyType = checkHasPrimary(serverDescriptions);\n      } else if (serverType === ServerType.RSPrimary) {\n        const result = updateRsFromPrimary(\n          serverDescriptions,\n          setName,\n          serverDescription,\n          maxSetVersion,\n          maxElectionId\n        );\n\n        (topologyType = result[0]),\n          (setName = result[1]),\n          (maxSetVersion = result[2]),\n          (maxElectionId = result[3]);\n      } else if (\n        [ServerType.RSSecondary, ServerType.RSArbiter, ServerType.RSOther].indexOf(serverType) >= 0\n      ) {\n        topologyType = updateRsWithPrimaryFromMember(\n          serverDescriptions,\n          setName,\n          serverDescription\n        );\n      } else {\n        topologyType = checkHasPrimary(serverDescriptions);\n      }\n    }\n\n    return new TopologyDescription(\n      topologyType,\n      serverDescriptions,\n      setName,\n      maxSetVersion,\n      maxElectionId,\n      commonWireVersion,\n      this.options,\n      error\n    );\n  }\n\n  /**\n   * Determines if the topology description has any known servers\n   */\n  get hasKnownServers() {\n    return Array.from(this.servers.values()).some(sd => sd.type !== ServerDescription.Unknown);\n  }\n\n  /**\n   * Determines if this topology description has a data-bearing server available.\n   */\n  get hasDataBearingServers() {\n    return Array.from(this.servers.values()).some(sd => sd.isDataBearing);\n  }\n\n  /**\n   * Determines if the topology has a definition for the provided address\n   *\n   * @param {String} address\n   * @return {Boolean} Whether the topology knows about this server\n   */\n  hasServer(address) {\n    return this.servers.has(address);\n  }\n}\n\nfunction topologyTypeForServerType(serverType) {\n  if (serverType === ServerType.Mongos) return TopologyType.Sharded;\n  if (serverType === ServerType.RSPrimary) return TopologyType.ReplicaSetWithPrimary;\n  return TopologyType.ReplicaSetNoPrimary;\n}\n\nfunction updateRsFromPrimary(\n  serverDescriptions,\n  setName,\n  serverDescription,\n  maxSetVersion,\n  maxElectionId\n) {\n  setName = setName || serverDescription.setName;\n  if (setName !== serverDescription.setName) {\n    serverDescriptions.delete(serverDescription.address);\n    return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n  }\n\n  const electionIdOID = serverDescription.electionId ? serverDescription.electionId.$oid : null;\n  const maxElectionIdOID = maxElectionId ? maxElectionId.$oid : null;\n  if (serverDescription.setVersion != null && electionIdOID != null) {\n    if (maxSetVersion != null && maxElectionIdOID != null) {\n      if (maxSetVersion > serverDescription.setVersion || maxElectionIdOID > electionIdOID) {\n        // this primary is stale, we must remove it\n        serverDescriptions.set(\n          serverDescription.address,\n          new ServerDescription(serverDescription.address)\n        );\n\n        return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n      }\n    }\n\n    maxElectionId = serverDescription.electionId;\n  }\n\n  if (\n    serverDescription.setVersion != null &&\n    (maxSetVersion == null || serverDescription.setVersion > maxSetVersion)\n  ) {\n    maxSetVersion = serverDescription.setVersion;\n  }\n\n  // We've heard from the primary. Is it the same primary as before?\n  for (const address of serverDescriptions.keys()) {\n    const server = serverDescriptions.get(address);\n\n    if (server.type === ServerType.RSPrimary && server.address !== serverDescription.address) {\n      // Reset old primary's type to Unknown.\n      serverDescriptions.set(address, new ServerDescription(server.address));\n\n      // There can only be one primary\n      break;\n    }\n  }\n\n  // Discover new hosts from this primary's response.\n  serverDescription.allHosts.forEach(address => {\n    if (!serverDescriptions.has(address)) {\n      serverDescriptions.set(address, new ServerDescription(address));\n    }\n  });\n\n  // Remove hosts not in the response.\n  const currentAddresses = Array.from(serverDescriptions.keys());\n  const responseAddresses = serverDescription.allHosts;\n  currentAddresses.filter(addr => responseAddresses.indexOf(addr) === -1).forEach(address => {\n    serverDescriptions.delete(address);\n  });\n\n  return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n}\n\nfunction updateRsWithPrimaryFromMember(serverDescriptions, setName, serverDescription) {\n  if (setName == null) {\n    throw new TypeError('setName is required');\n  }\n\n  if (\n    setName !== serverDescription.setName ||\n    (serverDescription.me && serverDescription.address !== serverDescription.me)\n  ) {\n    serverDescriptions.delete(serverDescription.address);\n  }\n\n  return checkHasPrimary(serverDescriptions);\n}\n\nfunction updateRsNoPrimaryFromMember(serverDescriptions, setName, serverDescription) {\n  let topologyType = TopologyType.ReplicaSetNoPrimary;\n\n  setName = setName || serverDescription.setName;\n  if (setName !== serverDescription.setName) {\n    serverDescriptions.delete(serverDescription.address);\n    return [topologyType, setName];\n  }\n\n  serverDescription.allHosts.forEach(address => {\n    if (!serverDescriptions.has(address)) {\n      serverDescriptions.set(address, new ServerDescription(address));\n    }\n  });\n\n  if (serverDescription.me && serverDescription.address !== serverDescription.me) {\n    serverDescriptions.delete(serverDescription.address);\n  }\n\n  return [topologyType, setName];\n}\n\nfunction checkHasPrimary(serverDescriptions) {\n  for (const addr of serverDescriptions.keys()) {\n    if (serverDescriptions.get(addr).type === ServerType.RSPrimary) {\n      return TopologyType.ReplicaSetWithPrimary;\n    }\n  }\n\n  return TopologyType.ReplicaSetNoPrimary;\n}\n\nmodule.exports = {\n  TopologyType,\n  TopologyDescription\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///44\n");

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst MIN_SUPPORTED_SERVER_VERSION = '2.6';\nconst MAX_SUPPORTED_SERVER_VERSION = '4.2';\nconst MIN_SUPPORTED_WIRE_VERSION = 2;\nconst MAX_SUPPORTED_WIRE_VERSION = 8;\n\nmodule.exports = {\n  MIN_SUPPORTED_SERVER_VERSION,\n  MAX_SUPPORTED_SERVER_VERSION,\n  MIN_SUPPORTED_WIRE_VERSION,\n  MAX_SUPPORTED_WIRE_VERSION\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NvcmUvd2lyZXByb3RvY29sL2NvbnN0YW50cy5qcz85MDdkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI0NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgTUlOX1NVUFBPUlRFRF9TRVJWRVJfVkVSU0lPTiA9ICcyLjYnO1xuY29uc3QgTUFYX1NVUFBPUlRFRF9TRVJWRVJfVkVSU0lPTiA9ICc0LjInO1xuY29uc3QgTUlOX1NVUFBPUlRFRF9XSVJFX1ZFUlNJT04gPSAyO1xuY29uc3QgTUFYX1NVUFBPUlRFRF9XSVJFX1ZFUlNJT04gPSA4O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgTUlOX1NVUFBPUlRFRF9TRVJWRVJfVkVSU0lPTixcbiAgTUFYX1NVUFBPUlRFRF9TRVJWRVJfVkVSU0lPTixcbiAgTUlOX1NVUFBPUlRFRF9XSVJFX1ZFUlNJT04sXG4gIE1BWF9TVVBQT1JURURfV0lSRV9WRVJTSU9OXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///45\n");

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Snappy = __webpack_require__(40).retrieveSnappy(),\n  zlib = __webpack_require__(47);\n\nvar compressorIDs = {\n  snappy: 1,\n  zlib: 2\n};\n\nvar uncompressibleCommands = [\n  'ismaster',\n  'saslStart',\n  'saslContinue',\n  'getnonce',\n  'authenticate',\n  'createUser',\n  'updateUser',\n  'copydbSaslStart',\n  'copydbgetnonce',\n  'copydb'\n];\n\n// Facilitate compressing a message using an agreed compressor\nvar compress = function(self, dataToBeCompressed, callback) {\n  switch (self.options.agreedCompressor) {\n    case 'snappy':\n      Snappy.compress(dataToBeCompressed, callback);\n      break;\n    case 'zlib':\n      // Determine zlibCompressionLevel\n      var zlibOptions = {};\n      if (self.options.zlibCompressionLevel) {\n        zlibOptions.level = self.options.zlibCompressionLevel;\n      }\n      zlib.deflate(dataToBeCompressed, zlibOptions, callback);\n      break;\n    default:\n      throw new Error(\n        'Attempt to compress message using unknown compressor \"' +\n          self.options.agreedCompressor +\n          '\".'\n      );\n  }\n};\n\n// Decompress a message using the given compressor\nvar decompress = function(compressorID, compressedData, callback) {\n  if (compressorID < 0 || compressorID > compressorIDs.length) {\n    throw new Error(\n      'Server sent message compressed using an unsupported compressor. (Received compressor ID ' +\n        compressorID +\n        ')'\n    );\n  }\n  switch (compressorID) {\n    case compressorIDs.snappy:\n      Snappy.uncompress(compressedData, callback);\n      break;\n    case compressorIDs.zlib:\n      zlib.inflate(compressedData, callback);\n      break;\n    default:\n      callback(null, compressedData);\n  }\n};\n\nmodule.exports = {\n  compressorIDs: compressorIDs,\n  uncompressibleCommands: uncompressibleCommands,\n  compress: compress,\n  decompress: decompress\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NvcmUvd2lyZXByb3RvY29sL2NvbXByZXNzaW9uLmpzPzExMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsYUFBYSxtQkFBTyxDQUFDLEVBQXFCO0FBQzFDLFNBQVMsbUJBQU8sQ0FBQyxFQUFNOztBQUV2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNDYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBTbmFwcHkgPSByZXF1aXJlKCcuLi9jb25uZWN0aW9uL3V0aWxzJykucmV0cmlldmVTbmFwcHkoKSxcbiAgemxpYiA9IHJlcXVpcmUoJ3psaWInKTtcblxudmFyIGNvbXByZXNzb3JJRHMgPSB7XG4gIHNuYXBweTogMSxcbiAgemxpYjogMlxufTtcblxudmFyIHVuY29tcHJlc3NpYmxlQ29tbWFuZHMgPSBbXG4gICdpc21hc3RlcicsXG4gICdzYXNsU3RhcnQnLFxuICAnc2FzbENvbnRpbnVlJyxcbiAgJ2dldG5vbmNlJyxcbiAgJ2F1dGhlbnRpY2F0ZScsXG4gICdjcmVhdGVVc2VyJyxcbiAgJ3VwZGF0ZVVzZXInLFxuICAnY29weWRiU2FzbFN0YXJ0JyxcbiAgJ2NvcHlkYmdldG5vbmNlJyxcbiAgJ2NvcHlkYidcbl07XG5cbi8vIEZhY2lsaXRhdGUgY29tcHJlc3NpbmcgYSBtZXNzYWdlIHVzaW5nIGFuIGFncmVlZCBjb21wcmVzc29yXG52YXIgY29tcHJlc3MgPSBmdW5jdGlvbihzZWxmLCBkYXRhVG9CZUNvbXByZXNzZWQsIGNhbGxiYWNrKSB7XG4gIHN3aXRjaCAoc2VsZi5vcHRpb25zLmFncmVlZENvbXByZXNzb3IpIHtcbiAgICBjYXNlICdzbmFwcHknOlxuICAgICAgU25hcHB5LmNvbXByZXNzKGRhdGFUb0JlQ29tcHJlc3NlZCwgY2FsbGJhY2spO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnemxpYic6XG4gICAgICAvLyBEZXRlcm1pbmUgemxpYkNvbXByZXNzaW9uTGV2ZWxcbiAgICAgIHZhciB6bGliT3B0aW9ucyA9IHt9O1xuICAgICAgaWYgKHNlbGYub3B0aW9ucy56bGliQ29tcHJlc3Npb25MZXZlbCkge1xuICAgICAgICB6bGliT3B0aW9ucy5sZXZlbCA9IHNlbGYub3B0aW9ucy56bGliQ29tcHJlc3Npb25MZXZlbDtcbiAgICAgIH1cbiAgICAgIHpsaWIuZGVmbGF0ZShkYXRhVG9CZUNvbXByZXNzZWQsIHpsaWJPcHRpb25zLCBjYWxsYmFjayk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQXR0ZW1wdCB0byBjb21wcmVzcyBtZXNzYWdlIHVzaW5nIHVua25vd24gY29tcHJlc3NvciBcIicgK1xuICAgICAgICAgIHNlbGYub3B0aW9ucy5hZ3JlZWRDb21wcmVzc29yICtcbiAgICAgICAgICAnXCIuJ1xuICAgICAgKTtcbiAgfVxufTtcblxuLy8gRGVjb21wcmVzcyBhIG1lc3NhZ2UgdXNpbmcgdGhlIGdpdmVuIGNvbXByZXNzb3JcbnZhciBkZWNvbXByZXNzID0gZnVuY3Rpb24oY29tcHJlc3NvcklELCBjb21wcmVzc2VkRGF0YSwgY2FsbGJhY2spIHtcbiAgaWYgKGNvbXByZXNzb3JJRCA8IDAgfHwgY29tcHJlc3NvcklEID4gY29tcHJlc3NvcklEcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnU2VydmVyIHNlbnQgbWVzc2FnZSBjb21wcmVzc2VkIHVzaW5nIGFuIHVuc3VwcG9ydGVkIGNvbXByZXNzb3IuIChSZWNlaXZlZCBjb21wcmVzc29yIElEICcgK1xuICAgICAgICBjb21wcmVzc29ySUQgK1xuICAgICAgICAnKSdcbiAgICApO1xuICB9XG4gIHN3aXRjaCAoY29tcHJlc3NvcklEKSB7XG4gICAgY2FzZSBjb21wcmVzc29ySURzLnNuYXBweTpcbiAgICAgIFNuYXBweS51bmNvbXByZXNzKGNvbXByZXNzZWREYXRhLCBjYWxsYmFjayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIGNvbXByZXNzb3JJRHMuemxpYjpcbiAgICAgIHpsaWIuaW5mbGF0ZShjb21wcmVzc2VkRGF0YSwgY2FsbGJhY2spO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGNhbGxiYWNrKG51bGwsIGNvbXByZXNzZWREYXRhKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNvbXByZXNzb3JJRHM6IGNvbXByZXNzb3JJRHMsXG4gIHVuY29tcHJlc3NpYmxlQ29tbWFuZHM6IHVuY29tcHJlc3NpYmxlQ29tbWFuZHMsXG4gIGNvbXByZXNzOiBjb21wcmVzcyxcbiAgZGVjb21wcmVzczogZGVjb21wcmVzc1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///46\n");

/***/ }),
/* 47 */
/***/ (function(module, exports) {

eval("module.exports = require(\"zlib\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0L2V4dGVybmFsIFwiemxpYlwiP2U1OTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ6bGliXCIpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///47\n");

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar retrieveBSON = __webpack_require__(40).retrieveBSON;\nvar BSON = retrieveBSON();\nvar Long = BSON.Long;\nconst Buffer = __webpack_require__(49).Buffer;\n\n// Incrementing request id\nvar _requestId = 0;\n\n// Wire command operation ids\nvar opcodes = __webpack_require__(41).opcodes;\n\n// Query flags\nvar OPTS_TAILABLE_CURSOR = 2;\nvar OPTS_SLAVE = 4;\nvar OPTS_OPLOG_REPLAY = 8;\nvar OPTS_NO_CURSOR_TIMEOUT = 16;\nvar OPTS_AWAIT_DATA = 32;\nvar OPTS_EXHAUST = 64;\nvar OPTS_PARTIAL = 128;\n\n// Response flags\nvar CURSOR_NOT_FOUND = 1;\nvar QUERY_FAILURE = 2;\nvar SHARD_CONFIG_STALE = 4;\nvar AWAIT_CAPABLE = 8;\n\n/**************************************************************\n * QUERY\n **************************************************************/\nvar Query = function(bson, ns, query, options) {\n  var self = this;\n  // Basic options needed to be passed in\n  if (ns == null) throw new Error('ns must be specified for query');\n  if (query == null) throw new Error('query must be specified for query');\n\n  // Validate that we are not passing 0x00 in the collection name\n  if (ns.indexOf('\\x00') !== -1) {\n    throw new Error('namespace cannot contain a null character');\n  }\n\n  // Basic options\n  this.bson = bson;\n  this.ns = ns;\n  this.query = query;\n\n  // Additional options\n  this.numberToSkip = options.numberToSkip || 0;\n  this.numberToReturn = options.numberToReturn || 0;\n  this.returnFieldSelector = options.returnFieldSelector || null;\n  this.requestId = Query.getRequestId();\n\n  // special case for pre-3.2 find commands, delete ASAP\n  this.pre32Limit = options.pre32Limit;\n\n  // Serialization option\n  this.serializeFunctions =\n    typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  this.ignoreUndefined =\n    typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n  this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n  this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : true;\n  this.batchSize = self.numberToReturn;\n\n  // Flags\n  this.tailable = false;\n  this.slaveOk = typeof options.slaveOk === 'boolean' ? options.slaveOk : false;\n  this.oplogReplay = false;\n  this.noCursorTimeout = false;\n  this.awaitData = false;\n  this.exhaust = false;\n  this.partial = false;\n};\n\n//\n// Assign a new request Id\nQuery.prototype.incRequestId = function() {\n  this.requestId = _requestId++;\n};\n\n//\n// Assign a new request Id\nQuery.nextRequestId = function() {\n  return _requestId + 1;\n};\n\n//\n// Uses a single allocated buffer for the process, avoiding multiple memory allocations\nQuery.prototype.toBin = function() {\n  var self = this;\n  var buffers = [];\n  var projection = null;\n\n  // Set up the flags\n  var flags = 0;\n  if (this.tailable) {\n    flags |= OPTS_TAILABLE_CURSOR;\n  }\n\n  if (this.slaveOk) {\n    flags |= OPTS_SLAVE;\n  }\n\n  if (this.oplogReplay) {\n    flags |= OPTS_OPLOG_REPLAY;\n  }\n\n  if (this.noCursorTimeout) {\n    flags |= OPTS_NO_CURSOR_TIMEOUT;\n  }\n\n  if (this.awaitData) {\n    flags |= OPTS_AWAIT_DATA;\n  }\n\n  if (this.exhaust) {\n    flags |= OPTS_EXHAUST;\n  }\n\n  if (this.partial) {\n    flags |= OPTS_PARTIAL;\n  }\n\n  // If batchSize is different to self.numberToReturn\n  if (self.batchSize !== self.numberToReturn) self.numberToReturn = self.batchSize;\n\n  // Allocate write protocol header buffer\n  var header = Buffer.alloc(\n    4 * 4 + // Header\n    4 + // Flags\n    Buffer.byteLength(self.ns) +\n    1 + // namespace\n    4 + // numberToSkip\n      4 // numberToReturn\n  );\n\n  // Add header to buffers\n  buffers.push(header);\n\n  // Serialize the query\n  var query = self.bson.serialize(this.query, {\n    checkKeys: this.checkKeys,\n    serializeFunctions: this.serializeFunctions,\n    ignoreUndefined: this.ignoreUndefined\n  });\n\n  // Add query document\n  buffers.push(query);\n\n  if (self.returnFieldSelector && Object.keys(self.returnFieldSelector).length > 0) {\n    // Serialize the projection document\n    projection = self.bson.serialize(this.returnFieldSelector, {\n      checkKeys: this.checkKeys,\n      serializeFunctions: this.serializeFunctions,\n      ignoreUndefined: this.ignoreUndefined\n    });\n    // Add projection document\n    buffers.push(projection);\n  }\n\n  // Total message size\n  var totalLength = header.length + query.length + (projection ? projection.length : 0);\n\n  // Set up the index\n  var index = 4;\n\n  // Write total document length\n  header[3] = (totalLength >> 24) & 0xff;\n  header[2] = (totalLength >> 16) & 0xff;\n  header[1] = (totalLength >> 8) & 0xff;\n  header[0] = totalLength & 0xff;\n\n  // Write header information requestId\n  header[index + 3] = (this.requestId >> 24) & 0xff;\n  header[index + 2] = (this.requestId >> 16) & 0xff;\n  header[index + 1] = (this.requestId >> 8) & 0xff;\n  header[index] = this.requestId & 0xff;\n  index = index + 4;\n\n  // Write header information responseTo\n  header[index + 3] = (0 >> 24) & 0xff;\n  header[index + 2] = (0 >> 16) & 0xff;\n  header[index + 1] = (0 >> 8) & 0xff;\n  header[index] = 0 & 0xff;\n  index = index + 4;\n\n  // Write header information OP_QUERY\n  header[index + 3] = (opcodes.OP_QUERY >> 24) & 0xff;\n  header[index + 2] = (opcodes.OP_QUERY >> 16) & 0xff;\n  header[index + 1] = (opcodes.OP_QUERY >> 8) & 0xff;\n  header[index] = opcodes.OP_QUERY & 0xff;\n  index = index + 4;\n\n  // Write header information flags\n  header[index + 3] = (flags >> 24) & 0xff;\n  header[index + 2] = (flags >> 16) & 0xff;\n  header[index + 1] = (flags >> 8) & 0xff;\n  header[index] = flags & 0xff;\n  index = index + 4;\n\n  // Write collection name\n  index = index + header.write(this.ns, index, 'utf8') + 1;\n  header[index - 1] = 0;\n\n  // Write header information flags numberToSkip\n  header[index + 3] = (this.numberToSkip >> 24) & 0xff;\n  header[index + 2] = (this.numberToSkip >> 16) & 0xff;\n  header[index + 1] = (this.numberToSkip >> 8) & 0xff;\n  header[index] = this.numberToSkip & 0xff;\n  index = index + 4;\n\n  // Write header information flags numberToReturn\n  header[index + 3] = (this.numberToReturn >> 24) & 0xff;\n  header[index + 2] = (this.numberToReturn >> 16) & 0xff;\n  header[index + 1] = (this.numberToReturn >> 8) & 0xff;\n  header[index] = this.numberToReturn & 0xff;\n  index = index + 4;\n\n  // Return the buffers\n  return buffers;\n};\n\nQuery.getRequestId = function() {\n  return ++_requestId;\n};\n\n/**************************************************************\n * GETMORE\n **************************************************************/\nvar GetMore = function(bson, ns, cursorId, opts) {\n  opts = opts || {};\n  this.numberToReturn = opts.numberToReturn || 0;\n  this.requestId = _requestId++;\n  this.bson = bson;\n  this.ns = ns;\n  this.cursorId = cursorId;\n};\n\n//\n// Uses a single allocated buffer for the process, avoiding multiple memory allocations\nGetMore.prototype.toBin = function() {\n  var length = 4 + Buffer.byteLength(this.ns) + 1 + 4 + 8 + 4 * 4;\n  // Create command buffer\n  var index = 0;\n  // Allocate buffer\n  var _buffer = Buffer.alloc(length);\n\n  // Write header information\n  // index = write32bit(index, _buffer, length);\n  _buffer[index + 3] = (length >> 24) & 0xff;\n  _buffer[index + 2] = (length >> 16) & 0xff;\n  _buffer[index + 1] = (length >> 8) & 0xff;\n  _buffer[index] = length & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, requestId);\n  _buffer[index + 3] = (this.requestId >> 24) & 0xff;\n  _buffer[index + 2] = (this.requestId >> 16) & 0xff;\n  _buffer[index + 1] = (this.requestId >> 8) & 0xff;\n  _buffer[index] = this.requestId & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, 0);\n  _buffer[index + 3] = (0 >> 24) & 0xff;\n  _buffer[index + 2] = (0 >> 16) & 0xff;\n  _buffer[index + 1] = (0 >> 8) & 0xff;\n  _buffer[index] = 0 & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, OP_GETMORE);\n  _buffer[index + 3] = (opcodes.OP_GETMORE >> 24) & 0xff;\n  _buffer[index + 2] = (opcodes.OP_GETMORE >> 16) & 0xff;\n  _buffer[index + 1] = (opcodes.OP_GETMORE >> 8) & 0xff;\n  _buffer[index] = opcodes.OP_GETMORE & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, 0);\n  _buffer[index + 3] = (0 >> 24) & 0xff;\n  _buffer[index + 2] = (0 >> 16) & 0xff;\n  _buffer[index + 1] = (0 >> 8) & 0xff;\n  _buffer[index] = 0 & 0xff;\n  index = index + 4;\n\n  // Write collection name\n  index = index + _buffer.write(this.ns, index, 'utf8') + 1;\n  _buffer[index - 1] = 0;\n\n  // Write batch size\n  // index = write32bit(index, _buffer, numberToReturn);\n  _buffer[index + 3] = (this.numberToReturn >> 24) & 0xff;\n  _buffer[index + 2] = (this.numberToReturn >> 16) & 0xff;\n  _buffer[index + 1] = (this.numberToReturn >> 8) & 0xff;\n  _buffer[index] = this.numberToReturn & 0xff;\n  index = index + 4;\n\n  // Write cursor id\n  // index = write32bit(index, _buffer, cursorId.getLowBits());\n  _buffer[index + 3] = (this.cursorId.getLowBits() >> 24) & 0xff;\n  _buffer[index + 2] = (this.cursorId.getLowBits() >> 16) & 0xff;\n  _buffer[index + 1] = (this.cursorId.getLowBits() >> 8) & 0xff;\n  _buffer[index] = this.cursorId.getLowBits() & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, cursorId.getHighBits());\n  _buffer[index + 3] = (this.cursorId.getHighBits() >> 24) & 0xff;\n  _buffer[index + 2] = (this.cursorId.getHighBits() >> 16) & 0xff;\n  _buffer[index + 1] = (this.cursorId.getHighBits() >> 8) & 0xff;\n  _buffer[index] = this.cursorId.getHighBits() & 0xff;\n  index = index + 4;\n\n  // Return buffer\n  return _buffer;\n};\n\n/**************************************************************\n * KILLCURSOR\n **************************************************************/\nvar KillCursor = function(bson, ns, cursorIds) {\n  this.ns = ns;\n  this.requestId = _requestId++;\n  this.cursorIds = cursorIds;\n};\n\n//\n// Uses a single allocated buffer for the process, avoiding multiple memory allocations\nKillCursor.prototype.toBin = function() {\n  var length = 4 + 4 + 4 * 4 + this.cursorIds.length * 8;\n\n  // Create command buffer\n  var index = 0;\n  var _buffer = Buffer.alloc(length);\n\n  // Write header information\n  // index = write32bit(index, _buffer, length);\n  _buffer[index + 3] = (length >> 24) & 0xff;\n  _buffer[index + 2] = (length >> 16) & 0xff;\n  _buffer[index + 1] = (length >> 8) & 0xff;\n  _buffer[index] = length & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, requestId);\n  _buffer[index + 3] = (this.requestId >> 24) & 0xff;\n  _buffer[index + 2] = (this.requestId >> 16) & 0xff;\n  _buffer[index + 1] = (this.requestId >> 8) & 0xff;\n  _buffer[index] = this.requestId & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, 0);\n  _buffer[index + 3] = (0 >> 24) & 0xff;\n  _buffer[index + 2] = (0 >> 16) & 0xff;\n  _buffer[index + 1] = (0 >> 8) & 0xff;\n  _buffer[index] = 0 & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, OP_KILL_CURSORS);\n  _buffer[index + 3] = (opcodes.OP_KILL_CURSORS >> 24) & 0xff;\n  _buffer[index + 2] = (opcodes.OP_KILL_CURSORS >> 16) & 0xff;\n  _buffer[index + 1] = (opcodes.OP_KILL_CURSORS >> 8) & 0xff;\n  _buffer[index] = opcodes.OP_KILL_CURSORS & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, 0);\n  _buffer[index + 3] = (0 >> 24) & 0xff;\n  _buffer[index + 2] = (0 >> 16) & 0xff;\n  _buffer[index + 1] = (0 >> 8) & 0xff;\n  _buffer[index] = 0 & 0xff;\n  index = index + 4;\n\n  // Write batch size\n  // index = write32bit(index, _buffer, this.cursorIds.length);\n  _buffer[index + 3] = (this.cursorIds.length >> 24) & 0xff;\n  _buffer[index + 2] = (this.cursorIds.length >> 16) & 0xff;\n  _buffer[index + 1] = (this.cursorIds.length >> 8) & 0xff;\n  _buffer[index] = this.cursorIds.length & 0xff;\n  index = index + 4;\n\n  // Write all the cursor ids into the array\n  for (var i = 0; i < this.cursorIds.length; i++) {\n    // Write cursor id\n    // index = write32bit(index, _buffer, cursorIds[i].getLowBits());\n    _buffer[index + 3] = (this.cursorIds[i].getLowBits() >> 24) & 0xff;\n    _buffer[index + 2] = (this.cursorIds[i].getLowBits() >> 16) & 0xff;\n    _buffer[index + 1] = (this.cursorIds[i].getLowBits() >> 8) & 0xff;\n    _buffer[index] = this.cursorIds[i].getLowBits() & 0xff;\n    index = index + 4;\n\n    // index = write32bit(index, _buffer, cursorIds[i].getHighBits());\n    _buffer[index + 3] = (this.cursorIds[i].getHighBits() >> 24) & 0xff;\n    _buffer[index + 2] = (this.cursorIds[i].getHighBits() >> 16) & 0xff;\n    _buffer[index + 1] = (this.cursorIds[i].getHighBits() >> 8) & 0xff;\n    _buffer[index] = this.cursorIds[i].getHighBits() & 0xff;\n    index = index + 4;\n  }\n\n  // Return buffer\n  return _buffer;\n};\n\nvar Response = function(bson, message, msgHeader, msgBody, opts) {\n  opts = opts || { promoteLongs: true, promoteValues: true, promoteBuffers: false };\n  this.parsed = false;\n  this.raw = message;\n  this.data = msgBody;\n  this.bson = bson;\n  this.opts = opts;\n\n  // Read the message header\n  this.length = msgHeader.length;\n  this.requestId = msgHeader.requestId;\n  this.responseTo = msgHeader.responseTo;\n  this.opCode = msgHeader.opCode;\n  this.fromCompressed = msgHeader.fromCompressed;\n\n  // Read the message body\n  this.responseFlags = msgBody.readInt32LE(0);\n  this.cursorId = new Long(msgBody.readInt32LE(4), msgBody.readInt32LE(8));\n  this.startingFrom = msgBody.readInt32LE(12);\n  this.numberReturned = msgBody.readInt32LE(16);\n\n  // Preallocate document array\n  this.documents = new Array(this.numberReturned);\n\n  // Flag values\n  this.cursorNotFound = (this.responseFlags & CURSOR_NOT_FOUND) !== 0;\n  this.queryFailure = (this.responseFlags & QUERY_FAILURE) !== 0;\n  this.shardConfigStale = (this.responseFlags & SHARD_CONFIG_STALE) !== 0;\n  this.awaitCapable = (this.responseFlags & AWAIT_CAPABLE) !== 0;\n  this.promoteLongs = typeof opts.promoteLongs === 'boolean' ? opts.promoteLongs : true;\n  this.promoteValues = typeof opts.promoteValues === 'boolean' ? opts.promoteValues : true;\n  this.promoteBuffers = typeof opts.promoteBuffers === 'boolean' ? opts.promoteBuffers : false;\n};\n\nResponse.prototype.isParsed = function() {\n  return this.parsed;\n};\n\nResponse.prototype.parse = function(options) {\n  // Don't parse again if not needed\n  if (this.parsed) return;\n  options = options || {};\n\n  // Allow the return of raw documents instead of parsing\n  var raw = options.raw || false;\n  var documentsReturnedIn = options.documentsReturnedIn || null;\n  var promoteLongs =\n    typeof options.promoteLongs === 'boolean' ? options.promoteLongs : this.opts.promoteLongs;\n  var promoteValues =\n    typeof options.promoteValues === 'boolean' ? options.promoteValues : this.opts.promoteValues;\n  var promoteBuffers =\n    typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : this.opts.promoteBuffers;\n  var bsonSize, _options;\n\n  // Set up the options\n  _options = {\n    promoteLongs: promoteLongs,\n    promoteValues: promoteValues,\n    promoteBuffers: promoteBuffers\n  };\n\n  // Position within OP_REPLY at which documents start\n  // (See https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#wire-op-reply)\n  this.index = 20;\n\n  //\n  // Parse Body\n  //\n  for (var i = 0; i < this.numberReturned; i++) {\n    bsonSize =\n      this.data[this.index] |\n      (this.data[this.index + 1] << 8) |\n      (this.data[this.index + 2] << 16) |\n      (this.data[this.index + 3] << 24);\n\n    // If we have raw results specified slice the return document\n    if (raw) {\n      this.documents[i] = this.data.slice(this.index, this.index + bsonSize);\n    } else {\n      this.documents[i] = this.bson.deserialize(\n        this.data.slice(this.index, this.index + bsonSize),\n        _options\n      );\n    }\n\n    // Adjust the index\n    this.index = this.index + bsonSize;\n  }\n\n  if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n    const fieldsAsRaw = {};\n    fieldsAsRaw[documentsReturnedIn] = true;\n    _options.fieldsAsRaw = fieldsAsRaw;\n\n    const doc = this.bson.deserialize(this.documents[0], _options);\n    this.documents = [doc];\n  }\n\n  // Set parsed\n  this.parsed = true;\n};\n\nmodule.exports = {\n  Query: Query,\n  GetMore: GetMore,\n  Response: Response,\n  KillCursor: KillCursor\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///48\n");

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* eslint-disable node/no-deprecated-api */\nvar buffer = __webpack_require__(22)\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL3NhZmUtYnVmZmVyL2luZGV4LmpzPzFmODQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxhQUFhLG1CQUFPLENBQUMsRUFBUTtBQUM3Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI0OS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuU2FmZUJ1ZmZlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEJ1ZmZlci5wcm90b3R5cGUpXG5cbi8vIENvcHkgc3RhdGljIG1ldGhvZHMgZnJvbSBCdWZmZXJcbmNvcHlQcm9wcyhCdWZmZXIsIFNhZmVCdWZmZXIpXG5cblNhZmVCdWZmZXIuZnJvbSA9IGZ1bmN0aW9uIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuU2FmZUJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgdmFyIGJ1ZiA9IEJ1ZmZlcihzaXplKVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgIH0gZWxzZSB7XG4gICAgICBidWYuZmlsbChmaWxsKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBidWYuZmlsbCgwKVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKHNpemUpXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBidWZmZXIuU2xvd0J1ZmZlcihzaXplKVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///49\n");

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// Implementation of OP_MSG spec:\n// https://github.com/mongodb/specifications/blob/master/source/message/OP_MSG.rst\n//\n// struct Section {\n//   uint8 payloadType;\n//   union payload {\n//       document  document; // payloadType == 0\n//       struct sequence { // payloadType == 1\n//           int32      size;\n//           cstring    identifier;\n//           document*  documents;\n//       };\n//   };\n// };\n\n// struct OP_MSG {\n//   struct MsgHeader {\n//       int32  messageLength;\n//       int32  requestID;\n//       int32  responseTo;\n//       int32  opCode = 2013;\n//   };\n//   uint32      flagBits;\n//   Section+    sections;\n//   [uint32     checksum;]\n// };\n\nconst Buffer = __webpack_require__(49).Buffer;\nconst opcodes = __webpack_require__(41).opcodes;\nconst databaseNamespace = __webpack_require__(41).databaseNamespace;\nconst ReadPreference = __webpack_require__(42);\n\n// Incrementing request id\nlet _requestId = 0;\n\n// Msg Flags\nconst OPTS_CHECKSUM_PRESENT = 1;\nconst OPTS_MORE_TO_COME = 2;\nconst OPTS_EXHAUST_ALLOWED = 1 << 16;\n\nclass Msg {\n  constructor(bson, ns, command, options) {\n    // Basic options needed to be passed in\n    if (command == null) throw new Error('query must be specified for query');\n\n    // Basic options\n    this.bson = bson;\n    this.ns = ns;\n    this.command = command;\n    this.command.$db = databaseNamespace(ns);\n\n    if (options.readPreference && options.readPreference.mode !== ReadPreference.PRIMARY) {\n      this.command.$readPreference = options.readPreference.toJSON();\n    }\n\n    // Ensure empty options\n    this.options = options || {};\n\n    // Additional options\n    this.requestId = Msg.getRequestId();\n\n    // Serialization option\n    this.serializeFunctions =\n      typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n    this.ignoreUndefined =\n      typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n    this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n    this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n\n    // flags\n    this.checksumPresent = false;\n    this.moreToCome = options.moreToCome || false;\n    this.exhaustAllowed = false;\n  }\n\n  toBin() {\n    const buffers = [];\n    let flags = 0;\n\n    if (this.checksumPresent) {\n      flags |= OPTS_CHECKSUM_PRESENT;\n    }\n\n    if (this.moreToCome) {\n      flags |= OPTS_MORE_TO_COME;\n    }\n\n    if (this.exhaustAllowed) {\n      flags |= OPTS_EXHAUST_ALLOWED;\n    }\n\n    const header = Buffer.alloc(\n      4 * 4 + // Header\n        4 // Flags\n    );\n\n    buffers.push(header);\n\n    let totalLength = header.length;\n    const command = this.command;\n    totalLength += this.makeDocumentSegment(buffers, command);\n\n    header.writeInt32LE(totalLength, 0); // messageLength\n    header.writeInt32LE(this.requestId, 4); // requestID\n    header.writeInt32LE(0, 8); // responseTo\n    header.writeInt32LE(opcodes.OP_MSG, 12); // opCode\n    header.writeUInt32LE(flags, 16); // flags\n    return buffers;\n  }\n\n  makeDocumentSegment(buffers, document) {\n    const payloadTypeBuffer = Buffer.alloc(1);\n    payloadTypeBuffer[0] = 0;\n\n    const documentBuffer = this.serializeBson(document);\n    buffers.push(payloadTypeBuffer);\n    buffers.push(documentBuffer);\n\n    return payloadTypeBuffer.length + documentBuffer.length;\n  }\n\n  serializeBson(document) {\n    return this.bson.serialize(document, {\n      checkKeys: this.checkKeys,\n      serializeFunctions: this.serializeFunctions,\n      ignoreUndefined: this.ignoreUndefined\n    });\n  }\n}\n\nMsg.getRequestId = function() {\n  _requestId = (_requestId + 1) & 0x7fffffff;\n  return _requestId;\n};\n\nclass BinMsg {\n  constructor(bson, message, msgHeader, msgBody, opts) {\n    opts = opts || { promoteLongs: true, promoteValues: true, promoteBuffers: false };\n    this.parsed = false;\n    this.raw = message;\n    this.data = msgBody;\n    this.bson = bson;\n    this.opts = opts;\n\n    // Read the message header\n    this.length = msgHeader.length;\n    this.requestId = msgHeader.requestId;\n    this.responseTo = msgHeader.responseTo;\n    this.opCode = msgHeader.opCode;\n    this.fromCompressed = msgHeader.fromCompressed;\n\n    // Read response flags\n    this.responseFlags = msgBody.readInt32LE(0);\n    this.checksumPresent = (this.responseFlags & OPTS_CHECKSUM_PRESENT) !== 0;\n    this.moreToCome = (this.responseFlags & OPTS_MORE_TO_COME) !== 0;\n    this.exhaustAllowed = (this.responseFlags & OPTS_EXHAUST_ALLOWED) !== 0;\n    this.promoteLongs = typeof opts.promoteLongs === 'boolean' ? opts.promoteLongs : true;\n    this.promoteValues = typeof opts.promoteValues === 'boolean' ? opts.promoteValues : true;\n    this.promoteBuffers = typeof opts.promoteBuffers === 'boolean' ? opts.promoteBuffers : false;\n\n    this.documents = [];\n  }\n\n  isParsed() {\n    return this.parsed;\n  }\n\n  parse(options) {\n    // Don't parse again if not needed\n    if (this.parsed) return;\n    options = options || {};\n\n    this.index = 4;\n    // Allow the return of raw documents instead of parsing\n    const raw = options.raw || false;\n    const documentsReturnedIn = options.documentsReturnedIn || null;\n    const promoteLongs =\n      typeof options.promoteLongs === 'boolean' ? options.promoteLongs : this.opts.promoteLongs;\n    const promoteValues =\n      typeof options.promoteValues === 'boolean' ? options.promoteValues : this.opts.promoteValues;\n    const promoteBuffers =\n      typeof options.promoteBuffers === 'boolean'\n        ? options.promoteBuffers\n        : this.opts.promoteBuffers;\n\n    // Set up the options\n    const _options = {\n      promoteLongs: promoteLongs,\n      promoteValues: promoteValues,\n      promoteBuffers: promoteBuffers\n    };\n\n    while (this.index < this.data.length) {\n      const payloadType = this.data.readUInt8(this.index++);\n      if (payloadType === 1) {\n        console.error('TYPE 1');\n      } else if (payloadType === 0) {\n        const bsonSize = this.data.readUInt32LE(this.index);\n        const bin = this.data.slice(this.index, this.index + bsonSize);\n        this.documents.push(raw ? bin : this.bson.deserialize(bin, _options));\n\n        this.index += bsonSize;\n      }\n    }\n\n    if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n      const fieldsAsRaw = {};\n      fieldsAsRaw[documentsReturnedIn] = true;\n      _options.fieldsAsRaw = fieldsAsRaw;\n\n      const doc = this.bson.deserialize(this.documents[0], _options);\n      this.documents = [doc];\n    }\n\n    this.parsed = true;\n  }\n}\n\nmodule.exports = { Msg, BinMsg };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///50\n");

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar f = __webpack_require__(12).format,\n  MongoError = __webpack_require__(37).MongoError;\n\n// Filters for classes\nvar classFilters = {};\nvar filteredClasses = {};\nvar level = null;\n// Save the process id\nvar pid = process.pid;\n// current logger\nvar currentLogger = null;\n\n/**\n * Creates a new Logger instance\n * @class\n * @param {string} className The Class name associated with the logging instance\n * @param {object} [options=null] Optional settings.\n * @param {Function} [options.logger=null] Custom logger function;\n * @param {string} [options.loggerLevel=error] Override default global log level.\n * @return {Logger} a Logger instance.\n */\nvar Logger = function(className, options) {\n  if (!(this instanceof Logger)) return new Logger(className, options);\n  options = options || {};\n\n  // Current reference\n  this.className = className;\n\n  // Current logger\n  if (options.logger) {\n    currentLogger = options.logger;\n  } else if (currentLogger == null) {\n    currentLogger = console.log;\n  }\n\n  // Set level of logging, default is error\n  if (options.loggerLevel) {\n    level = options.loggerLevel || 'error';\n  }\n\n  // Add all class names\n  if (filteredClasses[this.className] == null) classFilters[this.className] = true;\n};\n\n/**\n * Log a message at the debug level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\nLogger.prototype.debug = function(message, object) {\n  if (\n    this.isDebug() &&\n    ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n      (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n  ) {\n    var dateTime = new Date().getTime();\n    var msg = f('[%s-%s:%s] %s %s', 'DEBUG', this.className, pid, dateTime, message);\n    var state = {\n      type: 'debug',\n      message: message,\n      className: this.className,\n      pid: pid,\n      date: dateTime\n    };\n    if (object) state.meta = object;\n    currentLogger(msg, state);\n  }\n};\n\n/**\n * Log a message at the warn level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\n(Logger.prototype.warn = function(message, object) {\n  if (\n    this.isWarn() &&\n    ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n      (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n  ) {\n    var dateTime = new Date().getTime();\n    var msg = f('[%s-%s:%s] %s %s', 'WARN', this.className, pid, dateTime, message);\n    var state = {\n      type: 'warn',\n      message: message,\n      className: this.className,\n      pid: pid,\n      date: dateTime\n    };\n    if (object) state.meta = object;\n    currentLogger(msg, state);\n  }\n}),\n  /**\n   * Log a message at the info level\n   * @method\n   * @param {string} message The message to log\n   * @param {object} object additional meta data to log\n   * @return {null}\n   */\n  (Logger.prototype.info = function(message, object) {\n    if (\n      this.isInfo() &&\n      ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n        (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n    ) {\n      var dateTime = new Date().getTime();\n      var msg = f('[%s-%s:%s] %s %s', 'INFO', this.className, pid, dateTime, message);\n      var state = {\n        type: 'info',\n        message: message,\n        className: this.className,\n        pid: pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }),\n  /**\n   * Log a message at the error level\n   * @method\n   * @param {string} message The message to log\n   * @param {object} object additional meta data to log\n   * @return {null}\n   */\n  (Logger.prototype.error = function(message, object) {\n    if (\n      this.isError() &&\n      ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n        (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n    ) {\n      var dateTime = new Date().getTime();\n      var msg = f('[%s-%s:%s] %s %s', 'ERROR', this.className, pid, dateTime, message);\n      var state = {\n        type: 'error',\n        message: message,\n        className: this.className,\n        pid: pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }),\n  /**\n   * Is the logger set at info level\n   * @method\n   * @return {boolean}\n   */\n  (Logger.prototype.isInfo = function() {\n    return level === 'info' || level === 'debug';\n  }),\n  /**\n   * Is the logger set at error level\n   * @method\n   * @return {boolean}\n   */\n  (Logger.prototype.isError = function() {\n    return level === 'error' || level === 'info' || level === 'debug';\n  }),\n  /**\n   * Is the logger set at error level\n   * @method\n   * @return {boolean}\n   */\n  (Logger.prototype.isWarn = function() {\n    return level === 'error' || level === 'warn' || level === 'info' || level === 'debug';\n  }),\n  /**\n   * Is the logger set at debug level\n   * @method\n   * @return {boolean}\n   */\n  (Logger.prototype.isDebug = function() {\n    return level === 'debug';\n  });\n\n/**\n * Resets the logger to default settings, error and no filtered classes\n * @method\n * @return {null}\n */\nLogger.reset = function() {\n  level = 'error';\n  filteredClasses = {};\n};\n\n/**\n * Get the current logger function\n * @method\n * @return {function}\n */\nLogger.currentLogger = function() {\n  return currentLogger;\n};\n\n/**\n * Set the current logger function\n * @method\n * @param {function} logger Logger function.\n * @return {null}\n */\nLogger.setCurrentLogger = function(logger) {\n  if (typeof logger !== 'function') throw new MongoError('current logger must be a function');\n  currentLogger = logger;\n};\n\n/**\n * Set what classes to log.\n * @method\n * @param {string} type The type of filter (currently only class)\n * @param {string[]} values The filters to apply\n * @return {null}\n */\nLogger.filter = function(type, values) {\n  if (type === 'class' && Array.isArray(values)) {\n    filteredClasses = {};\n\n    values.forEach(function(x) {\n      filteredClasses[x] = true;\n    });\n  }\n};\n\n/**\n * Set the current log level\n * @method\n * @param {string} level Set current log level (debug, info, error)\n * @return {null}\n */\nLogger.setLevel = function(_level) {\n  if (_level !== 'info' && _level !== 'error' && _level !== 'debug' && _level !== 'warn') {\n    throw new Error(f('%s is an illegal logging level', _level));\n  }\n\n  level = _level;\n};\n\nmodule.exports = Logger;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///51\n");

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar inherits = __webpack_require__(12).inherits,\n  f = __webpack_require__(12).format,\n  EventEmitter = __webpack_require__(39).EventEmitter,\n  ReadPreference = __webpack_require__(42),\n  Logger = __webpack_require__(51),\n  debugOptions = __webpack_require__(40).debugOptions,\n  retrieveBSON = __webpack_require__(40).retrieveBSON,\n  Pool = __webpack_require__(53),\n  MongoError = __webpack_require__(37).MongoError,\n  MongoNetworkError = __webpack_require__(37).MongoNetworkError,\n  wireProtocol = __webpack_require__(76),\n  CoreCursor = __webpack_require__(82).CoreCursor,\n  sdam = __webpack_require__(59),\n  createClientInfo = __webpack_require__(59).createClientInfo,\n  createCompressionInfo = __webpack_require__(59).createCompressionInfo,\n  resolveClusterTime = __webpack_require__(59).resolveClusterTime,\n  SessionMixins = __webpack_require__(59).SessionMixins,\n  relayEvents = __webpack_require__(35).relayEvents;\n\nconst collationNotSupported = __webpack_require__(35).collationNotSupported;\n\n// Used for filtering out fields for loggin\nvar debugFields = [\n  'reconnect',\n  'reconnectTries',\n  'reconnectInterval',\n  'emitError',\n  'cursorFactory',\n  'host',\n  'port',\n  'size',\n  'keepAlive',\n  'keepAliveInitialDelay',\n  'noDelay',\n  'connectionTimeout',\n  'checkServerIdentity',\n  'socketTimeout',\n  'ssl',\n  'ca',\n  'crl',\n  'cert',\n  'key',\n  'rejectUnauthorized',\n  'promoteLongs',\n  'promoteValues',\n  'promoteBuffers',\n  'servername'\n];\n\n// Server instance id\nvar id = 0;\nvar serverAccounting = false;\nvar servers = {};\nvar BSON = retrieveBSON();\n\n/**\n * Creates a new Server instance\n * @class\n * @param {boolean} [options.reconnect=true] Server will attempt to reconnect on loss of connection\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @param {number} [options.monitoring=true] Enable the server state monitoring (calling ismaster at monitoringInterval)\n * @param {number} [options.monitoringInterval=5000] The interval of calling ismaster when monitoring is enabled.\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {string} options.host The server host\n * @param {number} options.port The server port\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=300000] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=30000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=360000] TCP Socket timeout setting\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {string} [options.appname=null] Application name, passed in on ismaster call and logged in mongod server logs. Maximum size 128 bytes.\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology\n * @return {Server} A cursor instance\n * @fires Server#connect\n * @fires Server#close\n * @fires Server#error\n * @fires Server#timeout\n * @fires Server#parseError\n * @fires Server#reconnect\n * @fires Server#reconnectFailed\n * @fires Server#serverHeartbeatStarted\n * @fires Server#serverHeartbeatSucceeded\n * @fires Server#serverHeartbeatFailed\n * @fires Server#topologyOpening\n * @fires Server#topologyClosed\n * @fires Server#topologyDescriptionChanged\n * @property {string} type the topology type.\n * @property {string} parserType the parser type used (c++ or js).\n */\nvar Server = function(options) {\n  options = options || {};\n\n  // Add event listener\n  EventEmitter.call(this);\n\n  // Server instance id\n  this.id = id++;\n\n  // Internal state\n  this.s = {\n    // Options\n    options: options,\n    // Logger\n    logger: Logger('Server', options),\n    // Factory overrides\n    Cursor: options.cursorFactory || CoreCursor,\n    // BSON instance\n    bson:\n      options.bson ||\n      new BSON([\n        BSON.Binary,\n        BSON.Code,\n        BSON.DBRef,\n        BSON.Decimal128,\n        BSON.Double,\n        BSON.Int32,\n        BSON.Long,\n        BSON.Map,\n        BSON.MaxKey,\n        BSON.MinKey,\n        BSON.ObjectId,\n        BSON.BSONRegExp,\n        BSON.Symbol,\n        BSON.Timestamp\n      ]),\n    // Pool\n    pool: null,\n    // Disconnect handler\n    disconnectHandler: options.disconnectHandler,\n    // Monitor thread (keeps the connection alive)\n    monitoring: typeof options.monitoring === 'boolean' ? options.monitoring : true,\n    // Is the server in a topology\n    inTopology: !!options.parent,\n    // Monitoring timeout\n    monitoringInterval:\n      typeof options.monitoringInterval === 'number' ? options.monitoringInterval : 5000,\n    // Topology id\n    topologyId: -1,\n    compression: { compressors: createCompressionInfo(options) },\n    // Optional parent topology\n    parent: options.parent\n  };\n\n  // If this is a single deployment we need to track the clusterTime here\n  if (!this.s.parent) {\n    this.s.clusterTime = null;\n  }\n\n  // Curent ismaster\n  this.ismaster = null;\n  // Current ping time\n  this.lastIsMasterMS = -1;\n  // The monitoringProcessId\n  this.monitoringProcessId = null;\n  // Initial connection\n  this.initialConnect = true;\n  // Default type\n  this._type = 'server';\n  // Set the client info\n  this.clientInfo = createClientInfo(options);\n\n  // Max Stalleness values\n  // last time we updated the ismaster state\n  this.lastUpdateTime = 0;\n  // Last write time\n  this.lastWriteDate = 0;\n  // Stalleness\n  this.staleness = 0;\n};\n\ninherits(Server, EventEmitter);\nObject.assign(Server.prototype, SessionMixins);\n\nObject.defineProperty(Server.prototype, 'type', {\n  enumerable: true,\n  get: function() {\n    return this._type;\n  }\n});\n\nObject.defineProperty(Server.prototype, 'parserType', {\n  enumerable: true,\n  get: function() {\n    return BSON.native ? 'c++' : 'js';\n  }\n});\n\nObject.defineProperty(Server.prototype, 'logicalSessionTimeoutMinutes', {\n  enumerable: true,\n  get: function() {\n    if (!this.ismaster) return null;\n    return this.ismaster.logicalSessionTimeoutMinutes || null;\n  }\n});\n\n// In single server deployments we track the clusterTime directly on the topology, however\n// in Mongos and ReplSet deployments we instead need to delegate the clusterTime up to the\n// tracking objects so we can ensure we are gossiping the maximum time received from the\n// server.\nObject.defineProperty(Server.prototype, 'clusterTime', {\n  enumerable: true,\n  set: function(clusterTime) {\n    const settings = this.s.parent ? this.s.parent : this.s;\n    resolveClusterTime(settings, clusterTime);\n  },\n  get: function() {\n    const settings = this.s.parent ? this.s.parent : this.s;\n    return settings.clusterTime || null;\n  }\n});\n\nServer.enableServerAccounting = function() {\n  serverAccounting = true;\n  servers = {};\n};\n\nServer.disableServerAccounting = function() {\n  serverAccounting = false;\n};\n\nServer.servers = function() {\n  return servers;\n};\n\nObject.defineProperty(Server.prototype, 'name', {\n  enumerable: true,\n  get: function() {\n    return this.s.options.host + ':' + this.s.options.port;\n  }\n});\n\nfunction disconnectHandler(self, type, ns, cmd, options, callback) {\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if (\n    !self.s.pool.isConnected() &&\n    self.s.options.reconnect &&\n    self.s.disconnectHandler != null &&\n    !options.monitoring\n  ) {\n    self.s.disconnectHandler.add(type, ns, cmd, options, callback);\n    return true;\n  }\n\n  // If we have no connection error\n  if (!self.s.pool.isConnected()) {\n    callback(new MongoError(f('no connection available to server %s', self.name)));\n    return true;\n  }\n}\n\nfunction monitoringProcess(self) {\n  return function() {\n    // Pool was destroyed do not continue process\n    if (self.s.pool.isDestroyed()) return;\n    // Emit monitoring Process event\n    self.emit('monitoring', self);\n    // Perform ismaster call\n    // Get start time\n    var start = new Date().getTime();\n\n    // Execute the ismaster query\n    self.command(\n      'admin.$cmd',\n      { ismaster: true },\n      {\n        socketTimeout:\n          typeof self.s.options.connectionTimeout !== 'number'\n            ? 2000\n            : self.s.options.connectionTimeout,\n        monitoring: true\n      },\n      (err, result) => {\n        // Set initial lastIsMasterMS\n        self.lastIsMasterMS = new Date().getTime() - start;\n        if (self.s.pool.isDestroyed()) return;\n        // Update the ismaster view if we have a result\n        if (result) {\n          self.ismaster = result.result;\n        }\n        // Re-schedule the monitoring process\n        self.monitoringProcessId = setTimeout(monitoringProcess(self), self.s.monitoringInterval);\n      }\n    );\n  };\n}\n\nvar eventHandler = function(self, event) {\n  return function(err, conn) {\n    // Log information of received information if in info mode\n    if (self.s.logger.isInfo()) {\n      var object = err instanceof MongoError ? JSON.stringify(err) : {};\n      self.s.logger.info(\n        f('server %s fired event %s out with message %s', self.name, event, object)\n      );\n    }\n\n    // Handle connect event\n    if (event === 'connect') {\n      self.initialConnect = false;\n      self.ismaster = conn.ismaster;\n      self.lastIsMasterMS = conn.lastIsMasterMS;\n      if (conn.agreedCompressor) {\n        self.s.pool.options.agreedCompressor = conn.agreedCompressor;\n      }\n\n      if (conn.zlibCompressionLevel) {\n        self.s.pool.options.zlibCompressionLevel = conn.zlibCompressionLevel;\n      }\n\n      if (conn.ismaster.$clusterTime) {\n        const $clusterTime = conn.ismaster.$clusterTime;\n        self.clusterTime = $clusterTime;\n      }\n\n      // It's a proxy change the type so\n      // the wireprotocol will send $readPreference\n      if (self.ismaster.msg === 'isdbgrid') {\n        self._type = 'mongos';\n      }\n\n      // Have we defined self monitoring\n      if (self.s.monitoring) {\n        self.monitoringProcessId = setTimeout(monitoringProcess(self), self.s.monitoringInterval);\n      }\n\n      // Emit server description changed if something listening\n      sdam.emitServerDescriptionChanged(self, {\n        address: self.name,\n        arbiters: [],\n        hosts: [],\n        passives: [],\n        type: sdam.getTopologyType(self)\n      });\n\n      if (!self.s.inTopology) {\n        // Emit topology description changed if something listening\n        sdam.emitTopologyDescriptionChanged(self, {\n          topologyType: 'Single',\n          servers: [\n            {\n              address: self.name,\n              arbiters: [],\n              hosts: [],\n              passives: [],\n              type: sdam.getTopologyType(self)\n            }\n          ]\n        });\n      }\n\n      // Log the ismaster if available\n      if (self.s.logger.isInfo()) {\n        self.s.logger.info(\n          f('server %s connected with ismaster [%s]', self.name, JSON.stringify(self.ismaster))\n        );\n      }\n\n      // Emit connect\n      self.emit('connect', self);\n    } else if (\n      event === 'error' ||\n      event === 'parseError' ||\n      event === 'close' ||\n      event === 'timeout' ||\n      event === 'reconnect' ||\n      event === 'attemptReconnect' ||\n      'reconnectFailed'\n    ) {\n      // Remove server instance from accounting\n      if (\n        serverAccounting &&\n        ['close', 'timeout', 'error', 'parseError', 'reconnectFailed'].indexOf(event) !== -1\n      ) {\n        // Emit toplogy opening event if not in topology\n        if (!self.s.inTopology) {\n          self.emit('topologyOpening', { topologyId: self.id });\n        }\n\n        delete servers[self.id];\n      }\n\n      if (event === 'close') {\n        // Closing emits a server description changed event going to unknown.\n        sdam.emitServerDescriptionChanged(self, {\n          address: self.name,\n          arbiters: [],\n          hosts: [],\n          passives: [],\n          type: 'Unknown'\n        });\n      }\n\n      // Reconnect failed return error\n      if (event === 'reconnectFailed') {\n        self.emit('reconnectFailed', err);\n        // Emit error if any listeners\n        if (self.listeners('error').length > 0) {\n          self.emit('error', err);\n        }\n        // Terminate\n        return;\n      }\n\n      // On first connect fail\n      if (\n        ['disconnected', 'connecting'].indexOf(self.s.pool.state) !== -1 &&\n        self.initialConnect &&\n        ['close', 'timeout', 'error', 'parseError'].indexOf(event) !== -1\n      ) {\n        self.initialConnect = false;\n        return self.emit(\n          'error',\n          new MongoNetworkError(\n            f('failed to connect to server [%s] on first connect [%s]', self.name, err)\n          )\n        );\n      }\n\n      // Reconnect event, emit the server\n      if (event === 'reconnect') {\n        // Reconnecting emits a server description changed event going from unknown to the\n        // current server type.\n        sdam.emitServerDescriptionChanged(self, {\n          address: self.name,\n          arbiters: [],\n          hosts: [],\n          passives: [],\n          type: sdam.getTopologyType(self)\n        });\n        return self.emit(event, self);\n      }\n\n      // Emit the event\n      self.emit(event, err);\n    }\n  };\n};\n\n/**\n * Initiate server connect\n */\nServer.prototype.connect = function(options) {\n  var self = this;\n  options = options || {};\n\n  // Set the connections\n  if (serverAccounting) servers[this.id] = this;\n\n  // Do not allow connect to be called on anything that's not disconnected\n  if (self.s.pool && !self.s.pool.isDisconnected() && !self.s.pool.isDestroyed()) {\n    throw new MongoError(f('server instance in invalid state %s', self.s.pool.state));\n  }\n\n  // Create a pool\n  self.s.pool = new Pool(this, Object.assign(self.s.options, options, { bson: this.s.bson }));\n\n  // Set up listeners\n  self.s.pool.on('close', eventHandler(self, 'close'));\n  self.s.pool.on('error', eventHandler(self, 'error'));\n  self.s.pool.on('timeout', eventHandler(self, 'timeout'));\n  self.s.pool.on('parseError', eventHandler(self, 'parseError'));\n  self.s.pool.on('connect', eventHandler(self, 'connect'));\n  self.s.pool.on('reconnect', eventHandler(self, 'reconnect'));\n  self.s.pool.on('reconnectFailed', eventHandler(self, 'reconnectFailed'));\n\n  // Set up listeners for command monitoring\n  relayEvents(self.s.pool, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);\n\n  // Emit toplogy opening event if not in topology\n  if (!self.s.inTopology) {\n    this.emit('topologyOpening', { topologyId: self.id });\n  }\n\n  // Emit opening server event\n  self.emit('serverOpening', {\n    topologyId: self.s.topologyId !== -1 ? self.s.topologyId : self.id,\n    address: self.name\n  });\n\n  self.s.pool.connect();\n};\n\n/**\n * Authenticate the topology.\n * @method\n * @param {MongoCredentials} credentials The credentials for authentication we are using\n * @param {authResultCallback} callback A callback function\n */\nServer.prototype.auth = function(credentials, callback) {\n  if (typeof callback === 'function') callback(null, null);\n};\n\n/**\n * Get the server description\n * @method\n * @return {object}\n */\nServer.prototype.getDescription = function() {\n  var ismaster = this.ismaster || {};\n  var description = {\n    type: sdam.getTopologyType(this),\n    address: this.name\n  };\n\n  // Add fields if available\n  if (ismaster.hosts) description.hosts = ismaster.hosts;\n  if (ismaster.arbiters) description.arbiters = ismaster.arbiters;\n  if (ismaster.passives) description.passives = ismaster.passives;\n  if (ismaster.setName) description.setName = ismaster.setName;\n  return description;\n};\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nServer.prototype.lastIsMaster = function() {\n  return this.ismaster;\n};\n\n/**\n * Unref all connections belong to this server\n * @method\n */\nServer.prototype.unref = function() {\n  this.s.pool.unref();\n};\n\n/**\n * Figure out if the server is connected\n * @method\n * @return {boolean}\n */\nServer.prototype.isConnected = function() {\n  if (!this.s.pool) return false;\n  return this.s.pool.isConnected();\n};\n\n/**\n * Figure out if the server instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\nServer.prototype.isDestroyed = function() {\n  if (!this.s.pool) return false;\n  return this.s.pool.isDestroyed();\n};\n\nfunction basicWriteValidations(self) {\n  if (!self.s.pool) return new MongoError('server instance is not connected');\n  if (self.s.pool.isDestroyed()) return new MongoError('server instance pool was destroyed');\n}\n\nfunction basicReadValidations(self, options) {\n  basicWriteValidations(self, options);\n\n  if (options.readPreference && !(options.readPreference instanceof ReadPreference)) {\n    throw new Error('readPreference must be an instance of ReadPreference');\n  }\n}\n\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.checkKeys=false] Specify if the bson parser should validate keys.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {Boolean} [options.fullResult=false] Return the full envelope instead of just the result document.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.command = function(ns, cmd, options, callback) {\n  var self = this;\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  var result = basicReadValidations(self, options);\n  if (result) return callback(result);\n\n  // Clone the options\n  options = Object.assign({}, options, { wireProtocolCommand: false });\n\n  // Debug log\n  if (self.s.logger.isDebug())\n    self.s.logger.debug(\n      f(\n        'executing command [%s] against %s',\n        JSON.stringify({\n          ns: ns,\n          cmd: cmd,\n          options: debugOptions(debugFields, options)\n        }),\n        self.name\n      )\n    );\n\n  // If we are not connected or have a disconnectHandler specified\n  if (disconnectHandler(self, 'command', ns, cmd, options, callback)) return;\n\n  // error if collation not supported\n  if (collationNotSupported(this, cmd)) {\n    return callback(new MongoError(`server ${this.name} does not support collation`));\n  }\n\n  wireProtocol.command(self, ns, cmd, options, callback);\n};\n\n/**\n * Execute a query against the server\n *\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command document for the query\n * @param {object} options Optional settings\n * @param {function} callback\n */\nServer.prototype.query = function(ns, cmd, cursorState, options, callback) {\n  wireProtocol.query(this, ns, cmd, cursorState, options, callback);\n};\n\n/**\n * Execute a `getMore` against the server\n *\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cursorState State data associated with the cursor calling this method\n * @param {object} options Optional settings\n * @param {function} callback\n */\nServer.prototype.getMore = function(ns, cursorState, batchSize, options, callback) {\n  wireProtocol.getMore(this, ns, cursorState, batchSize, options, callback);\n};\n\n/**\n * Execute a `killCursors` command against the server\n *\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cursorState State data associated with the cursor calling this method\n * @param {function} callback\n */\nServer.prototype.killCursors = function(ns, cursorState, callback) {\n  wireProtocol.killCursors(this, ns, cursorState, callback);\n};\n\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.insert = function(ns, ops, options, callback) {\n  var self = this;\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  var result = basicWriteValidations(self, options);\n  if (result) return callback(result);\n\n  // If we are not connected or have a disconnectHandler specified\n  if (disconnectHandler(self, 'insert', ns, ops, options, callback)) return;\n\n  // Setup the docs as an array\n  ops = Array.isArray(ops) ? ops : [ops];\n\n  // Execute write\n  return wireProtocol.insert(self, ns, ops, options, callback);\n};\n\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.update = function(ns, ops, options, callback) {\n  var self = this;\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  var result = basicWriteValidations(self, options);\n  if (result) return callback(result);\n\n  // If we are not connected or have a disconnectHandler specified\n  if (disconnectHandler(self, 'update', ns, ops, options, callback)) return;\n\n  // error if collation not supported\n  if (collationNotSupported(this, options)) {\n    return callback(new MongoError(`server ${this.name} does not support collation`));\n  }\n\n  // Setup the docs as an array\n  ops = Array.isArray(ops) ? ops : [ops];\n  // Execute write\n  return wireProtocol.update(self, ns, ops, options, callback);\n};\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.remove = function(ns, ops, options, callback) {\n  var self = this;\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  var result = basicWriteValidations(self, options);\n  if (result) return callback(result);\n\n  // If we are not connected or have a disconnectHandler specified\n  if (disconnectHandler(self, 'remove', ns, ops, options, callback)) return;\n\n  // error if collation not supported\n  if (collationNotSupported(this, options)) {\n    return callback(new MongoError(`server ${this.name} does not support collation`));\n  }\n\n  // Setup the docs as an array\n  ops = Array.isArray(ops) ? ops : [ops];\n  // Execute write\n  return wireProtocol.remove(self, ns, ops, options, callback);\n};\n\n/**\n * Get a new cursor\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options] Options for the cursor\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {object} [options.topology] The internal topology of the created cursor\n * @returns {Cursor}\n */\nServer.prototype.cursor = function(ns, cmd, options) {\n  options = options || {};\n  const topology = options.topology || this;\n\n  // Set up final cursor type\n  var FinalCursor = options.cursorFactory || this.s.Cursor;\n\n  // Return the cursor\n  return new FinalCursor(topology, ns, cmd, options);\n};\n\n/**\n * Compare two server instances\n * @method\n * @param {Server} server Server to compare equality against\n * @return {boolean}\n */\nServer.prototype.equals = function(server) {\n  if (typeof server === 'string') return this.name.toLowerCase() === server.toLowerCase();\n  if (server.name) return this.name.toLowerCase() === server.name.toLowerCase();\n  return false;\n};\n\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\nServer.prototype.connections = function() {\n  return this.s.pool.allConnections();\n};\n\n/**\n * Selects a server\n * @method\n * @param {function} selector Unused\n * @param {ReadPreference} [options.readPreference] Unused\n * @param {ClientSession} [options.session] Unused\n * @return {Server}\n */\nServer.prototype.selectServer = function(selector, options, callback) {\n  if (typeof selector === 'function' && typeof callback === 'undefined')\n    (callback = selector), (selector = undefined), (options = {});\n  if (typeof options === 'function')\n    (callback = options), (options = selector), (selector = undefined);\n\n  callback(null, this);\n};\n\nvar listeners = ['close', 'error', 'timeout', 'parseError', 'connect'];\n\n/**\n * Destroy the server connection\n * @method\n * @param {boolean} [options.emitClose=false] Emit close event on destroy\n * @param {boolean} [options.emitDestroy=false] Emit destroy event on destroy\n * @param {boolean} [options.force=false] Force destroy the pool\n */\nServer.prototype.destroy = function(options, callback) {\n  if (this._destroyed) {\n    if (typeof callback === 'function') callback(null, null);\n    return;\n  }\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n  var self = this;\n\n  // Set the connections\n  if (serverAccounting) delete servers[this.id];\n\n  // Destroy the monitoring process if any\n  if (this.monitoringProcessId) {\n    clearTimeout(this.monitoringProcessId);\n  }\n\n  // No pool, return\n  if (!self.s.pool) {\n    this._destroyed = true;\n    if (typeof callback === 'function') callback(null, null);\n    return;\n  }\n\n  // Emit close event\n  if (options.emitClose) {\n    self.emit('close', self);\n  }\n\n  // Emit destroy event\n  if (options.emitDestroy) {\n    self.emit('destroy', self);\n  }\n\n  // Remove all listeners\n  listeners.forEach(function(event) {\n    self.s.pool.removeAllListeners(event);\n  });\n\n  // Emit opening server event\n  if (self.listeners('serverClosed').length > 0)\n    self.emit('serverClosed', {\n      topologyId: self.s.topologyId !== -1 ? self.s.topologyId : self.id,\n      address: self.name\n    });\n\n  // Emit toplogy opening event if not in topology\n  if (self.listeners('topologyClosed').length > 0 && !self.s.inTopology) {\n    self.emit('topologyClosed', { topologyId: self.id });\n  }\n\n  if (self.s.logger.isDebug()) {\n    self.s.logger.debug(f('destroy called on server %s', self.name));\n  }\n\n  // Destroy the pool\n  this.s.pool.destroy(options.force, callback);\n  this._destroyed = true;\n};\n\n/**\n * A server connect event, used to verify that the connection is up and running\n *\n * @event Server#connect\n * @type {Server}\n */\n\n/**\n * A server reconnect event, used to verify that the server topology has reconnected\n *\n * @event Server#reconnect\n * @type {Server}\n */\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event Server#serverOpening\n * @type {object}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Server#serverClosed\n * @type {object}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Server#serverDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Server#topologyOpening\n * @type {object}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Server#topologyClosed\n * @type {object}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Server#topologyDescriptionChanged\n * @type {object}\n */\n\n/**\n * Server reconnect failed\n *\n * @event Server#reconnectFailed\n * @type {Error}\n */\n\n/**\n * Server connection pool closed\n *\n * @event Server#close\n * @type {object}\n */\n\n/**\n * Server connection pool caused an error\n *\n * @event Server#error\n * @type {Error}\n */\n\n/**\n * Server destroyed was called\n *\n * @event Server#destroy\n * @type {Server}\n */\n\nmodule.exports = Server;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///52\n");

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst inherits = __webpack_require__(12).inherits;\nconst EventEmitter = __webpack_require__(39).EventEmitter;\nconst MongoError = __webpack_require__(37).MongoError;\nconst MongoTimeoutError = __webpack_require__(37).MongoTimeoutError;\nconst MongoWriteConcernError = __webpack_require__(37).MongoWriteConcernError;\nconst Logger = __webpack_require__(51);\nconst f = __webpack_require__(12).format;\nconst Msg = __webpack_require__(50).Msg;\nconst CommandResult = __webpack_require__(54);\nconst MESSAGE_HEADER_SIZE = __webpack_require__(41).MESSAGE_HEADER_SIZE;\nconst COMPRESSION_DETAILS_SIZE = __webpack_require__(41).COMPRESSION_DETAILS_SIZE;\nconst opcodes = __webpack_require__(41).opcodes;\nconst compress = __webpack_require__(46).compress;\nconst compressorIDs = __webpack_require__(46).compressorIDs;\nconst uncompressibleCommands = __webpack_require__(46).uncompressibleCommands;\nconst apm = __webpack_require__(55);\nconst Buffer = __webpack_require__(49).Buffer;\nconst connect = __webpack_require__(56);\nconst updateSessionFromResponse = __webpack_require__(74).updateSessionFromResponse;\nconst eachAsync = __webpack_require__(35).eachAsync;\n\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar DESTROYING = 'destroying';\nvar DESTROYED = 'destroyed';\n\nconst CONNECTION_EVENTS = new Set([\n  'error',\n  'close',\n  'timeout',\n  'parseError',\n  'connect',\n  'message'\n]);\n\nvar _id = 0;\n\n/**\n * Creates a new Pool instance\n * @class\n * @param {string} options.host The server host\n * @param {number} options.port The server port\n * @param {number} [options.size=5] Max server connection pool size\n * @param {number} [options.minSize=0] Minimum server connection pool size\n * @param {boolean} [options.reconnect=true] Server will attempt to reconnect on loss of connection\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=300000] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=30000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=360000] TCP Socket timeout setting\n * @param {number} [options.monitoringSocketTimeout=30000] TCP Socket timeout setting for replicaset monitoring socket\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {boolean} [options.rejectUnauthorized=false] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @fires Pool#connect\n * @fires Pool#close\n * @fires Pool#error\n * @fires Pool#timeout\n * @fires Pool#parseError\n * @return {Pool} A cursor instance\n */\nvar Pool = function(topology, options) {\n  // Add event listener\n  EventEmitter.call(this);\n\n  // Store topology for later use\n  this.topology = topology;\n\n  // Add the options\n  this.options = Object.assign(\n    {\n      // Host and port settings\n      host: 'localhost',\n      port: 27017,\n      // Pool default max size\n      size: 5,\n      // Pool default min size\n      minSize: 0,\n      // socket settings\n      connectionTimeout: 30000,\n      socketTimeout: 360000,\n      keepAlive: true,\n      keepAliveInitialDelay: 300000,\n      noDelay: true,\n      // SSL Settings\n      ssl: false,\n      checkServerIdentity: true,\n      ca: null,\n      crl: null,\n      cert: null,\n      key: null,\n      passphrase: null,\n      rejectUnauthorized: false,\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: false,\n      // Reconnection options\n      reconnect: true,\n      reconnectInterval: 1000,\n      reconnectTries: 30,\n      // Enable domains\n      domainsEnabled: false,\n      // feature flag for determining if we are running with the unified topology or not\n      legacyCompatMode: true\n    },\n    options\n  );\n\n  // Identification information\n  this.id = _id++;\n  // Current reconnect retries\n  this.retriesLeft = this.options.reconnectTries;\n  this.reconnectId = null;\n  this.reconnectError = null;\n  // No bson parser passed in\n  if (\n    !options.bson ||\n    (options.bson &&\n      (typeof options.bson.serialize !== 'function' ||\n        typeof options.bson.deserialize !== 'function'))\n  ) {\n    throw new Error('must pass in valid bson parser');\n  }\n\n  // Logger instance\n  this.logger = Logger('Pool', options);\n  // Pool state\n  this.state = DISCONNECTED;\n  // Connections\n  this.availableConnections = [];\n  this.inUseConnections = [];\n  this.connectingConnections = 0;\n  // Currently executing\n  this.executing = false;\n  // Operation work queue\n  this.queue = [];\n\n  // Number of consecutive timeouts caught\n  this.numberOfConsecutiveTimeouts = 0;\n  // Current pool Index\n  this.connectionIndex = 0;\n\n  // event handlers\n  const pool = this;\n  this._messageHandler = messageHandler(this);\n  this._connectionCloseHandler = function(err) {\n    const connection = this;\n    connectionFailureHandler(pool, 'close', err, connection);\n  };\n\n  this._connectionErrorHandler = function(err) {\n    const connection = this;\n    connectionFailureHandler(pool, 'error', err, connection);\n  };\n\n  this._connectionTimeoutHandler = function(err) {\n    const connection = this;\n    connectionFailureHandler(pool, 'timeout', err, connection);\n  };\n\n  this._connectionParseErrorHandler = function(err) {\n    const connection = this;\n    connectionFailureHandler(pool, 'parseError', err, connection);\n  };\n};\n\ninherits(Pool, EventEmitter);\n\nObject.defineProperty(Pool.prototype, 'size', {\n  enumerable: true,\n  get: function() {\n    return this.options.size;\n  }\n});\n\nObject.defineProperty(Pool.prototype, 'minSize', {\n  enumerable: true,\n  get: function() {\n    return this.options.minSize;\n  }\n});\n\nObject.defineProperty(Pool.prototype, 'connectionTimeout', {\n  enumerable: true,\n  get: function() {\n    return this.options.connectionTimeout;\n  }\n});\n\nObject.defineProperty(Pool.prototype, 'socketTimeout', {\n  enumerable: true,\n  get: function() {\n    return this.options.socketTimeout;\n  }\n});\n\n// clears all pool state\nfunction resetPoolState(pool) {\n  pool.inUseConnections = [];\n  pool.availableConnections = [];\n  pool.connectingConnections = 0;\n  pool.executing = false;\n  pool.numberOfConsecutiveTimeouts = 0;\n  pool.connectionIndex = 0;\n  pool.retriesLeft = pool.options.reconnectTries;\n  pool.reconnectId = null;\n}\n\nfunction stateTransition(self, newState) {\n  var legalTransitions = {\n    disconnected: [CONNECTING, DESTROYING, DISCONNECTED],\n    connecting: [CONNECTING, DESTROYING, CONNECTED, DISCONNECTED],\n    connected: [CONNECTED, DISCONNECTED, DESTROYING],\n    destroying: [DESTROYING, DESTROYED],\n    destroyed: [DESTROYED]\n  };\n\n  // Get current state\n  var legalStates = legalTransitions[self.state];\n  if (legalStates && legalStates.indexOf(newState) !== -1) {\n    self.emit('stateChanged', self.state, newState);\n    self.state = newState;\n  } else {\n    self.logger.error(\n      f(\n        'Pool with id [%s] failed attempted illegal state transition from [%s] to [%s] only following state allowed [%s]',\n        self.id,\n        self.state,\n        newState,\n        legalStates\n      )\n    );\n  }\n}\n\nfunction connectionFailureHandler(pool, event, err, conn) {\n  if (conn) {\n    if (conn._connectionFailHandled) return;\n    conn._connectionFailHandled = true;\n    conn.destroy();\n\n    // Remove the connection\n    removeConnection(pool, conn);\n\n    // Flush all work Items on this connection\n    while (conn.workItems.length > 0) {\n      const workItem = conn.workItems.shift();\n      if (workItem.cb) workItem.cb(err);\n    }\n  }\n\n  // Did we catch a timeout, increment the numberOfConsecutiveTimeouts\n  if (event === 'timeout') {\n    pool.numberOfConsecutiveTimeouts = pool.numberOfConsecutiveTimeouts + 1;\n\n    // Have we timed out more than reconnectTries in a row ?\n    // Force close the pool as we are trying to connect to tcp sink hole\n    if (pool.numberOfConsecutiveTimeouts > pool.options.reconnectTries) {\n      pool.numberOfConsecutiveTimeouts = 0;\n      // Destroy all connections and pool\n      pool.destroy(true);\n      // Emit close event\n      return pool.emit('close', pool);\n    }\n  }\n\n  // No more socket available propegate the event\n  if (pool.socketCount() === 0) {\n    if (pool.state !== DESTROYED && pool.state !== DESTROYING) {\n      stateTransition(pool, DISCONNECTED);\n    }\n\n    // Do not emit error events, they are always close events\n    // do not trigger the low level error handler in node\n    event = event === 'error' ? 'close' : event;\n    pool.emit(event, err);\n  }\n\n  // Start reconnection attempts\n  if (!pool.reconnectId && pool.options.reconnect) {\n    pool.reconnectError = err;\n    pool.reconnectId = setTimeout(attemptReconnect(pool), pool.options.reconnectInterval);\n  }\n\n  // Do we need to do anything to maintain the minimum pool size\n  const totalConnections = totalConnectionCount(pool);\n  if (totalConnections < pool.minSize) {\n    createConnection(pool);\n  }\n}\n\nfunction attemptReconnect(pool, callback) {\n  return function() {\n    pool.emit('attemptReconnect', pool);\n\n    if (pool.state === DESTROYED || pool.state === DESTROYING) {\n      if (typeof callback === 'function') {\n        callback(new MongoError('Cannot create connection when pool is destroyed'));\n      }\n\n      return;\n    }\n\n    pool.retriesLeft = pool.retriesLeft - 1;\n    if (pool.retriesLeft <= 0) {\n      pool.destroy();\n\n      const error = new MongoTimeoutError(\n        `failed to reconnect after ${pool.options.reconnectTries} attempts with interval ${\n          pool.options.reconnectInterval\n        } ms`,\n        pool.reconnectError\n      );\n\n      pool.emit('reconnectFailed', error);\n      if (typeof callback === 'function') {\n        callback(error);\n      }\n\n      return;\n    }\n\n    // clear the reconnect id on retry\n    pool.reconnectId = null;\n\n    // now retry creating a connection\n    createConnection(pool, (err, conn) => {\n      if (err == null) {\n        pool.reconnectId = null;\n        pool.retriesLeft = pool.options.reconnectTries;\n        pool.emit('reconnect', pool);\n      }\n\n      if (typeof callback === 'function') {\n        callback(err, conn);\n      }\n    });\n  };\n}\n\nfunction moveConnectionBetween(connection, from, to) {\n  var index = from.indexOf(connection);\n  // Move the connection from connecting to available\n  if (index !== -1) {\n    from.splice(index, 1);\n    to.push(connection);\n  }\n}\n\nfunction messageHandler(self) {\n  return function(message, connection) {\n    // workItem to execute\n    var workItem = null;\n\n    // Locate the workItem\n    for (var i = 0; i < connection.workItems.length; i++) {\n      if (connection.workItems[i].requestId === message.responseTo) {\n        // Get the callback\n        workItem = connection.workItems[i];\n        // Remove from list of workItems\n        connection.workItems.splice(i, 1);\n      }\n    }\n\n    if (workItem && workItem.monitoring) {\n      moveConnectionBetween(connection, self.inUseConnections, self.availableConnections);\n    }\n\n    // Reset timeout counter\n    self.numberOfConsecutiveTimeouts = 0;\n\n    // Reset the connection timeout if we modified it for\n    // this operation\n    if (workItem && workItem.socketTimeout) {\n      connection.resetSocketTimeout();\n    }\n\n    // Log if debug enabled\n    if (self.logger.isDebug()) {\n      self.logger.debug(\n        f(\n          'message [%s] received from %s:%s',\n          message.raw.toString('hex'),\n          self.options.host,\n          self.options.port\n        )\n      );\n    }\n\n    function handleOperationCallback(self, cb, err, result) {\n      // No domain enabled\n      if (!self.options.domainsEnabled) {\n        return process.nextTick(function() {\n          return cb(err, result);\n        });\n      }\n\n      // Domain enabled just call the callback\n      cb(err, result);\n    }\n\n    // Keep executing, ensure current message handler does not stop execution\n    if (!self.executing) {\n      process.nextTick(function() {\n        _execute(self)();\n      });\n    }\n\n    // Time to dispatch the message if we have a callback\n    if (workItem && !workItem.immediateRelease) {\n      try {\n        // Parse the message according to the provided options\n        message.parse(workItem);\n      } catch (err) {\n        return handleOperationCallback(self, workItem.cb, new MongoError(err));\n      }\n\n      if (message.documents[0]) {\n        const document = message.documents[0];\n        const session = workItem.session;\n        if (session) {\n          updateSessionFromResponse(session, document);\n        }\n\n        if (document.$clusterTime) {\n          self.topology.clusterTime = document.$clusterTime;\n        }\n      }\n\n      // Establish if we have an error\n      if (workItem.command && message.documents[0]) {\n        const responseDoc = message.documents[0];\n\n        if (responseDoc.writeConcernError) {\n          const err = new MongoWriteConcernError(responseDoc.writeConcernError, responseDoc);\n          return handleOperationCallback(self, workItem.cb, err);\n        }\n\n        if (responseDoc.ok === 0 || responseDoc.$err || responseDoc.errmsg || responseDoc.code) {\n          return handleOperationCallback(self, workItem.cb, new MongoError(responseDoc));\n        }\n      }\n\n      // Add the connection details\n      message.hashedName = connection.hashedName;\n\n      // Return the documents\n      handleOperationCallback(\n        self,\n        workItem.cb,\n        null,\n        new CommandResult(workItem.fullResult ? message : message.documents[0], connection, message)\n      );\n    }\n  };\n}\n\n/**\n * Return the total socket count in the pool.\n * @method\n * @return {Number} The number of socket available.\n */\nPool.prototype.socketCount = function() {\n  return this.availableConnections.length + this.inUseConnections.length;\n  // + this.connectingConnections.length;\n};\n\nfunction totalConnectionCount(pool) {\n  return (\n    pool.availableConnections.length + pool.inUseConnections.length + pool.connectingConnections\n  );\n}\n\n/**\n * Return all pool connections\n * @method\n * @return {Connection[]} The pool connections\n */\nPool.prototype.allConnections = function() {\n  return this.availableConnections.concat(this.inUseConnections);\n};\n\n/**\n * Get a pool connection (round-robin)\n * @method\n * @return {Connection}\n */\nPool.prototype.get = function() {\n  return this.allConnections()[0];\n};\n\n/**\n * Is the pool connected\n * @method\n * @return {boolean}\n */\nPool.prototype.isConnected = function() {\n  // We are in a destroyed state\n  if (this.state === DESTROYED || this.state === DESTROYING) {\n    return false;\n  }\n\n  // Get connections\n  var connections = this.availableConnections.concat(this.inUseConnections);\n\n  // Check if we have any connected connections\n  for (var i = 0; i < connections.length; i++) {\n    if (connections[i].isConnected()) return true;\n  }\n\n  // Not connected\n  return false;\n};\n\n/**\n * Was the pool destroyed\n * @method\n * @return {boolean}\n */\nPool.prototype.isDestroyed = function() {\n  return this.state === DESTROYED || this.state === DESTROYING;\n};\n\n/**\n * Is the pool in a disconnected state\n * @method\n * @return {boolean}\n */\nPool.prototype.isDisconnected = function() {\n  return this.state === DISCONNECTED;\n};\n\n/**\n * Connect pool\n */\nPool.prototype.connect = function() {\n  if (this.state !== DISCONNECTED) {\n    throw new MongoError('connection in unlawful state ' + this.state);\n  }\n\n  stateTransition(this, CONNECTING);\n  createConnection(this, (err, conn) => {\n    if (err) {\n      if (this.state === CONNECTING) {\n        this.emit('error', err);\n      }\n\n      this.destroy();\n      return;\n    }\n\n    stateTransition(this, CONNECTED);\n    this.emit('connect', this, conn);\n\n    // create min connections\n    if (this.minSize) {\n      for (let i = 0; i < this.minSize; i++) {\n        createConnection(this);\n      }\n    }\n  });\n};\n\n/**\n * Authenticate using a specified mechanism\n * @param {authResultCallback} callback A callback function\n */\nPool.prototype.auth = function(credentials, callback) {\n  if (typeof callback === 'function') callback(null, null);\n};\n\n/**\n * Logout all users against a database\n * @param {authResultCallback} callback A callback function\n */\nPool.prototype.logout = function(dbName, callback) {\n  if (typeof callback === 'function') callback(null, null);\n};\n\n/**\n * Unref the pool\n * @method\n */\nPool.prototype.unref = function() {\n  // Get all the known connections\n  var connections = this.availableConnections.concat(this.inUseConnections);\n\n  connections.forEach(function(c) {\n    c.unref();\n  });\n};\n\n// Destroy the connections\nfunction destroy(self, connections, options, callback) {\n  eachAsync(\n    connections,\n    (conn, cb) => {\n      for (const eventName of CONNECTION_EVENTS) {\n        conn.removeAllListeners(eventName);\n      }\n\n      conn.destroy(options, cb);\n    },\n    err => {\n      if (err) {\n        if (typeof callback === 'function') callback(err, null);\n        return;\n      }\n\n      resetPoolState(self);\n      self.queue = [];\n\n      stateTransition(self, DESTROYED);\n      if (typeof callback === 'function') callback(null, null);\n    }\n  );\n}\n\n/**\n * Destroy pool\n * @method\n */\nPool.prototype.destroy = function(force, callback) {\n  var self = this;\n  // Do not try again if the pool is already dead\n  if (this.state === DESTROYED || self.state === DESTROYING) {\n    if (typeof callback === 'function') callback(null, null);\n    return;\n  }\n\n  // Set state to destroyed\n  stateTransition(this, DESTROYING);\n\n  // Are we force closing\n  if (force) {\n    // Get all the known connections\n    var connections = self.availableConnections.concat(self.inUseConnections);\n\n    // Flush any remaining work items with\n    // an error\n    while (self.queue.length > 0) {\n      var workItem = self.queue.shift();\n      if (typeof workItem.cb === 'function') {\n        workItem.cb(new MongoError('Pool was force destroyed'));\n      }\n    }\n\n    // Destroy the topology\n    return destroy(self, connections, { force: true }, callback);\n  }\n\n  // Clear out the reconnect if set\n  if (this.reconnectId) {\n    clearTimeout(this.reconnectId);\n  }\n\n  // Wait for the operations to drain before we close the pool\n  function checkStatus() {\n    flushMonitoringOperations(self.queue);\n\n    if (self.queue.length === 0) {\n      // Get all the known connections\n      var connections = self.availableConnections.concat(self.inUseConnections);\n\n      // Check if we have any in flight operations\n      for (var i = 0; i < connections.length; i++) {\n        // There is an operation still in flight, reschedule a\n        // check waiting for it to drain\n        if (connections[i].workItems.length > 0) {\n          return setTimeout(checkStatus, 1);\n        }\n      }\n\n      destroy(self, connections, { force: false }, callback);\n      // } else if (self.queue.length > 0 && !this.reconnectId) {\n    } else {\n      // Ensure we empty the queue\n      _execute(self)();\n      // Set timeout\n      setTimeout(checkStatus, 1);\n    }\n  }\n\n  // Initiate drain of operations\n  checkStatus();\n};\n\n/**\n * Reset all connections of this pool\n *\n * @param {function} [callback]\n */\nPool.prototype.reset = function(callback) {\n  const connections = this.availableConnections.concat(this.inUseConnections);\n  eachAsync(\n    connections,\n    (conn, cb) => {\n      for (const eventName of CONNECTION_EVENTS) {\n        conn.removeAllListeners(eventName);\n      }\n\n      conn.destroy({ force: true }, cb);\n    },\n    err => {\n      if (err) {\n        if (typeof callback === 'function') {\n          callback(err, null);\n          return;\n        }\n      }\n\n      resetPoolState(this);\n\n      // create an initial connection, and kick off execution again\n      createConnection(this);\n\n      if (typeof callback === 'function') {\n        callback(null, null);\n      }\n    }\n  );\n};\n\n// Prepare the buffer that Pool.prototype.write() uses to send to the server\nfunction serializeCommand(self, command, callback) {\n  const originalCommandBuffer = command.toBin();\n\n  // Check whether we and the server have agreed to use a compressor\n  const shouldCompress = !!self.options.agreedCompressor;\n  if (!shouldCompress || !canCompress(command)) {\n    return callback(null, originalCommandBuffer);\n  }\n\n  // Transform originalCommandBuffer into OP_COMPRESSED\n  const concatenatedOriginalCommandBuffer = Buffer.concat(originalCommandBuffer);\n  const messageToBeCompressed = concatenatedOriginalCommandBuffer.slice(MESSAGE_HEADER_SIZE);\n\n  // Extract information needed for OP_COMPRESSED from the uncompressed message\n  const originalCommandOpCode = concatenatedOriginalCommandBuffer.readInt32LE(12);\n\n  // Compress the message body\n  compress(self, messageToBeCompressed, function(err, compressedMessage) {\n    if (err) return callback(err, null);\n\n    // Create the msgHeader of OP_COMPRESSED\n    const msgHeader = Buffer.alloc(MESSAGE_HEADER_SIZE);\n    msgHeader.writeInt32LE(\n      MESSAGE_HEADER_SIZE + COMPRESSION_DETAILS_SIZE + compressedMessage.length,\n      0\n    ); // messageLength\n    msgHeader.writeInt32LE(command.requestId, 4); // requestID\n    msgHeader.writeInt32LE(0, 8); // responseTo (zero)\n    msgHeader.writeInt32LE(opcodes.OP_COMPRESSED, 12); // opCode\n\n    // Create the compression details of OP_COMPRESSED\n    const compressionDetails = Buffer.alloc(COMPRESSION_DETAILS_SIZE);\n    compressionDetails.writeInt32LE(originalCommandOpCode, 0); // originalOpcode\n    compressionDetails.writeInt32LE(messageToBeCompressed.length, 4); // Size of the uncompressed compressedMessage, excluding the MsgHeader\n    compressionDetails.writeUInt8(compressorIDs[self.options.agreedCompressor], 8); // compressorID\n\n    return callback(null, [msgHeader, compressionDetails, compressedMessage]);\n  });\n}\n\n/**\n * Write a message to MongoDB\n * @method\n * @return {Connection}\n */\nPool.prototype.write = function(command, options, cb) {\n  var self = this;\n  // Ensure we have a callback\n  if (typeof options === 'function') {\n    cb = options;\n  }\n\n  // Always have options\n  options = options || {};\n\n  // We need to have a callback function unless the message returns no response\n  if (!(typeof cb === 'function') && !options.noResponse) {\n    throw new MongoError('write method must provide a callback');\n  }\n\n  // Pool was destroyed error out\n  if (this.state === DESTROYED || this.state === DESTROYING) {\n    // Callback with an error\n    if (cb) {\n      try {\n        cb(new MongoError('pool destroyed'));\n      } catch (err) {\n        process.nextTick(function() {\n          throw err;\n        });\n      }\n    }\n\n    return;\n  }\n\n  if (this.options.domainsEnabled && process.domain && typeof cb === 'function') {\n    // if we have a domain bind to it\n    var oldCb = cb;\n    cb = process.domain.bind(function() {\n      // v8 - argumentsToArray one-liner\n      var args = new Array(arguments.length);\n      for (var i = 0; i < arguments.length; i++) {\n        args[i] = arguments[i];\n      }\n      // bounce off event loop so domain switch takes place\n      process.nextTick(function() {\n        oldCb.apply(null, args);\n      });\n    });\n  }\n\n  // Do we have an operation\n  var operation = {\n    cb: cb,\n    raw: false,\n    promoteLongs: true,\n    promoteValues: true,\n    promoteBuffers: false,\n    fullResult: false\n  };\n\n  // Set the options for the parsing\n  operation.promoteLongs = typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true;\n  operation.promoteValues =\n    typeof options.promoteValues === 'boolean' ? options.promoteValues : true;\n  operation.promoteBuffers =\n    typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false;\n  operation.raw = typeof options.raw === 'boolean' ? options.raw : false;\n  operation.immediateRelease =\n    typeof options.immediateRelease === 'boolean' ? options.immediateRelease : false;\n  operation.documentsReturnedIn = options.documentsReturnedIn;\n  operation.command = typeof options.command === 'boolean' ? options.command : false;\n  operation.fullResult = typeof options.fullResult === 'boolean' ? options.fullResult : false;\n  operation.noResponse = typeof options.noResponse === 'boolean' ? options.noResponse : false;\n  operation.session = options.session || null;\n\n  // Optional per operation socketTimeout\n  operation.socketTimeout = options.socketTimeout;\n  operation.monitoring = options.monitoring;\n  // Custom socket Timeout\n  if (options.socketTimeout) {\n    operation.socketTimeout = options.socketTimeout;\n  }\n\n  // Get the requestId\n  operation.requestId = command.requestId;\n\n  // If command monitoring is enabled we need to modify the callback here\n  if (self.options.monitorCommands) {\n    this.emit('commandStarted', new apm.CommandStartedEvent(this, command));\n\n    operation.started = process.hrtime();\n    operation.cb = (err, reply) => {\n      if (err) {\n        self.emit(\n          'commandFailed',\n          new apm.CommandFailedEvent(this, command, err, operation.started)\n        );\n      } else {\n        if (reply && reply.result && (reply.result.ok === 0 || reply.result.$err)) {\n          self.emit(\n            'commandFailed',\n            new apm.CommandFailedEvent(this, command, reply.result, operation.started)\n          );\n        } else {\n          self.emit(\n            'commandSucceeded',\n            new apm.CommandSucceededEvent(this, command, reply, operation.started)\n          );\n        }\n      }\n\n      if (typeof cb === 'function') cb(err, reply);\n    };\n  }\n\n  // Prepare the operation buffer\n  serializeCommand(self, command, (err, serializedBuffers) => {\n    if (err) throw err;\n\n    // Set the operation's buffer to the serialization of the commands\n    operation.buffer = serializedBuffers;\n\n    // If we have a monitoring operation schedule as the very first operation\n    // Otherwise add to back of queue\n    if (options.monitoring) {\n      self.queue.unshift(operation);\n    } else {\n      self.queue.push(operation);\n    }\n\n    // Attempt to execute the operation\n    if (!self.executing) {\n      process.nextTick(function() {\n        _execute(self)();\n      });\n    }\n  });\n};\n\n// Return whether a command contains an uncompressible command term\n// Will return true if command contains no uncompressible command terms\nfunction canCompress(command) {\n  const commandDoc = command instanceof Msg ? command.command : command.query;\n  const commandName = Object.keys(commandDoc)[0];\n  return uncompressibleCommands.indexOf(commandName) === -1;\n}\n\n// Remove connection method\nfunction remove(connection, connections) {\n  for (var i = 0; i < connections.length; i++) {\n    if (connections[i] === connection) {\n      connections.splice(i, 1);\n      return true;\n    }\n  }\n}\n\nfunction removeConnection(self, connection) {\n  if (remove(connection, self.availableConnections)) return;\n  if (remove(connection, self.inUseConnections)) return;\n}\n\nfunction createConnection(pool, callback) {\n  if (pool.state === DESTROYED || pool.state === DESTROYING) {\n    if (typeof callback === 'function') {\n      callback(new MongoError('Cannot create connection when pool is destroyed'));\n    }\n\n    return;\n  }\n\n  pool.connectingConnections++;\n  connect(pool.options, (err, connection) => {\n    pool.connectingConnections--;\n\n    if (err) {\n      if (pool.logger.isDebug()) {\n        pool.logger.debug(`connection attempt failed with error [${JSON.stringify(err)}]`);\n      }\n\n      if (pool.options.legacyCompatMode === false) {\n        // The unified topology uses the reported `error` from a pool to track what error\n        // reason is returned to the user during selection timeout. We only want to emit\n        // this if the pool is active because the listeners are removed on destruction.\n        if (pool.state !== DESTROYED && pool.state !== DESTROYING) {\n          pool.emit('error', err);\n        }\n      }\n\n      // check if reconnect is enabled, and attempt retry if so\n      if (!pool.reconnectId && pool.options.reconnect) {\n        if (pool.state === CONNECTING && pool.options.legacyCompatMode) {\n          callback(err);\n          return;\n        }\n\n        pool.reconnectError = err;\n        pool.reconnectId = setTimeout(\n          attemptReconnect(pool, callback),\n          pool.options.reconnectInterval\n        );\n\n        return;\n      }\n\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n\n      return;\n    }\n\n    // the pool might have been closed since we started creating the connection\n    if (pool.state === DESTROYED || pool.state === DESTROYING) {\n      if (typeof callback === 'function') {\n        callback(new MongoError('Pool was destroyed after connection creation'));\n      }\n\n      connection.destroy();\n      return;\n    }\n\n    // otherwise, connect relevant event handlers and add it to our available connections\n    connection.on('error', pool._connectionErrorHandler);\n    connection.on('close', pool._connectionCloseHandler);\n    connection.on('timeout', pool._connectionTimeoutHandler);\n    connection.on('parseError', pool._connectionParseErrorHandler);\n    connection.on('message', pool._messageHandler);\n\n    pool.availableConnections.push(connection);\n\n    // if a callback was provided, return the connection\n    if (typeof callback === 'function') {\n      callback(null, connection);\n    }\n\n    // immediately execute any waiting work\n    _execute(pool)();\n  });\n}\n\nfunction flushMonitoringOperations(queue) {\n  for (var i = 0; i < queue.length; i++) {\n    if (queue[i].monitoring) {\n      var workItem = queue[i];\n      queue.splice(i, 1);\n      workItem.cb(\n        new MongoError({ message: 'no connection available for monitoring', driver: true })\n      );\n    }\n  }\n}\n\nfunction _execute(self) {\n  return function() {\n    if (self.state === DESTROYED) return;\n    // Already executing, skip\n    if (self.executing) return;\n    // Set pool as executing\n    self.executing = true;\n\n    // New pool connections are in progress, wait them to finish\n    // before executing any more operation to ensure distribution of\n    // operations\n    if (self.connectingConnections > 0) {\n      self.executing = false;\n      return;\n    }\n\n    // As long as we have available connections\n    // eslint-disable-next-line\n    while (true) {\n      // Total availble connections\n      const totalConnections = totalConnectionCount(self);\n\n      // No available connections available, flush any monitoring ops\n      if (self.availableConnections.length === 0) {\n        // Flush any monitoring operations\n        flushMonitoringOperations(self.queue);\n        break;\n      }\n\n      // No queue break\n      if (self.queue.length === 0) {\n        break;\n      }\n\n      var connection = null;\n      const connections = self.availableConnections.filter(conn => conn.workItems.length === 0);\n\n      // No connection found that has no work on it, just pick one for pipelining\n      if (connections.length === 0) {\n        connection =\n          self.availableConnections[self.connectionIndex++ % self.availableConnections.length];\n      } else {\n        connection = connections[self.connectionIndex++ % connections.length];\n      }\n\n      // Is the connection connected\n      if (!connection.isConnected()) {\n        // Remove the disconnected connection\n        removeConnection(self, connection);\n        // Flush any monitoring operations in the queue, failing fast\n        flushMonitoringOperations(self.queue);\n        break;\n      }\n\n      // Get the next work item\n      var workItem = self.queue.shift();\n\n      // If we are monitoring we need to use a connection that is not\n      // running another operation to avoid socket timeout changes\n      // affecting an existing operation\n      if (workItem.monitoring) {\n        var foundValidConnection = false;\n\n        for (let i = 0; i < self.availableConnections.length; i++) {\n          // If the connection is connected\n          // And there are no pending workItems on it\n          // Then we can safely use it for monitoring.\n          if (\n            self.availableConnections[i].isConnected() &&\n            self.availableConnections[i].workItems.length === 0\n          ) {\n            foundValidConnection = true;\n            connection = self.availableConnections[i];\n            break;\n          }\n        }\n\n        // No safe connection found, attempt to grow the connections\n        // if possible and break from the loop\n        if (!foundValidConnection) {\n          // Put workItem back on the queue\n          self.queue.unshift(workItem);\n\n          // Attempt to grow the pool if it's not yet maxsize\n          if (totalConnections < self.options.size && self.queue.length > 0) {\n            // Create a new connection\n            createConnection(self);\n          }\n\n          // Re-execute the operation\n          setTimeout(function() {\n            _execute(self)();\n          }, 10);\n\n          break;\n        }\n      }\n\n      // Don't execute operation until we have a full pool\n      if (totalConnections < self.options.size) {\n        // Connection has work items, then put it back on the queue\n        // and create a new connection\n        if (connection.workItems.length > 0) {\n          // Lets put the workItem back on the list\n          self.queue.unshift(workItem);\n          // Create a new connection\n          createConnection(self);\n          // Break from the loop\n          break;\n        }\n      }\n\n      // Get actual binary commands\n      var buffer = workItem.buffer;\n\n      // If we are monitoring take the connection of the availableConnections\n      if (workItem.monitoring) {\n        moveConnectionBetween(connection, self.availableConnections, self.inUseConnections);\n      }\n\n      // Track the executing commands on the mongo server\n      // as long as there is an expected response\n      if (!workItem.noResponse) {\n        connection.workItems.push(workItem);\n      }\n\n      // We have a custom socketTimeout\n      if (!workItem.immediateRelease && typeof workItem.socketTimeout === 'number') {\n        connection.setSocketTimeout(workItem.socketTimeout);\n      }\n\n      // Capture if write was successful\n      var writeSuccessful = true;\n\n      // Put operation on the wire\n      if (Array.isArray(buffer)) {\n        for (let i = 0; i < buffer.length; i++) {\n          writeSuccessful = connection.write(buffer[i]);\n        }\n      } else {\n        writeSuccessful = connection.write(buffer);\n      }\n\n      // if the command is designated noResponse, call the callback immeditely\n      if (workItem.noResponse && typeof workItem.cb === 'function') {\n        workItem.cb(null, null);\n      }\n\n      if (writeSuccessful === false) {\n        // If write not successful put back on queue\n        self.queue.unshift(workItem);\n        // Remove the disconnected connection\n        removeConnection(self, connection);\n        // Flush any monitoring operations in the queue, failing fast\n        flushMonitoringOperations(self.queue);\n        break;\n      }\n    }\n\n    self.executing = false;\n  };\n}\n\n// Make execution loop available for testing\nPool._execute = _execute;\n\n/**\n * A server connect event, used to verify that the connection is up and running\n *\n * @event Pool#connect\n * @type {Pool}\n */\n\n/**\n * A server reconnect event, used to verify that pool reconnected.\n *\n * @event Pool#reconnect\n * @type {Pool}\n */\n\n/**\n * The server connection closed, all pool connections closed\n *\n * @event Pool#close\n * @type {Pool}\n */\n\n/**\n * The server connection caused an error, all pool connections closed\n *\n * @event Pool#error\n * @type {Pool}\n */\n\n/**\n * The server connection timed out, all pool connections closed\n *\n * @event Pool#timeout\n * @type {Pool}\n */\n\n/**\n * The driver experienced an invalid message, all pool connections closed\n *\n * @event Pool#parseError\n * @type {Pool}\n */\n\n/**\n * The driver attempted to reconnect\n *\n * @event Pool#attemptReconnect\n * @type {Pool}\n */\n\n/**\n * The driver exhausted all reconnect attempts\n *\n * @event Pool#reconnectFailed\n * @type {Pool}\n */\n\nmodule.exports = Pool;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///53\n");

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Creates a new CommandResult instance\n * @class\n * @param {object} result CommandResult object\n * @param {Connection} connection A connection instance associated with this result\n * @return {CommandResult} A cursor instance\n */\nvar CommandResult = function(result, connection, message) {\n  this.result = result;\n  this.connection = connection;\n  this.message = message;\n};\n\n/**\n * Convert CommandResult to JSON\n * @method\n * @return {object}\n */\nCommandResult.prototype.toJSON = function() {\n  let result = Object.assign({}, this, this.result);\n  delete result.message;\n  return result;\n};\n\n/**\n * Convert CommandResult to String representation\n * @method\n * @return {string}\n */\nCommandResult.prototype.toString = function() {\n  return JSON.stringify(this.toJSON());\n};\n\nmodule.exports = CommandResult;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NvcmUvY29ubmVjdGlvbi9jb21tYW5kX3Jlc3VsdC5qcz8zZTIzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLFdBQVc7QUFDdEIsWUFBWSxjQUFjO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjU0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgQ29tbWFuZFJlc3VsdCBpbnN0YW5jZVxuICogQGNsYXNzXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzdWx0IENvbW1hbmRSZXN1bHQgb2JqZWN0XG4gKiBAcGFyYW0ge0Nvbm5lY3Rpb259IGNvbm5lY3Rpb24gQSBjb25uZWN0aW9uIGluc3RhbmNlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHJlc3VsdFxuICogQHJldHVybiB7Q29tbWFuZFJlc3VsdH0gQSBjdXJzb3IgaW5zdGFuY2VcbiAqL1xudmFyIENvbW1hbmRSZXN1bHQgPSBmdW5jdGlvbihyZXN1bHQsIGNvbm5lY3Rpb24sIG1lc3NhZ2UpIHtcbiAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG4gIHRoaXMuY29ubmVjdGlvbiA9IGNvbm5lY3Rpb247XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgQ29tbWFuZFJlc3VsdCB0byBKU09OXG4gKiBAbWV0aG9kXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbkNvbW1hbmRSZXN1bHQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICBsZXQgcmVzdWx0ID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcywgdGhpcy5yZXN1bHQpO1xuICBkZWxldGUgcmVzdWx0Lm1lc3NhZ2U7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgQ29tbWFuZFJlc3VsdCB0byBTdHJpbmcgcmVwcmVzZW50YXRpb25cbiAqIEBtZXRob2RcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuQ29tbWFuZFJlc3VsdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudG9KU09OKCkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb21tYW5kUmVzdWx0O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///54\n");

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst Msg = __webpack_require__(50).Msg;\nconst KillCursor = __webpack_require__(48).KillCursor;\nconst GetMore = __webpack_require__(48).GetMore;\nconst calculateDurationInMs = __webpack_require__(35).calculateDurationInMs;\n\n/** Commands that we want to redact because of the sensitive nature of their contents */\nconst SENSITIVE_COMMANDS = new Set([\n  'authenticate',\n  'saslStart',\n  'saslContinue',\n  'getnonce',\n  'createUser',\n  'updateUser',\n  'copydbgetnonce',\n  'copydbsaslstart',\n  'copydb'\n]);\n\n// helper methods\nconst extractCommandName = commandDoc => Object.keys(commandDoc)[0];\nconst namespace = command => command.ns;\nconst databaseName = command => command.ns.split('.')[0];\nconst collectionName = command => command.ns.split('.')[1];\nconst generateConnectionId = pool => `${pool.options.host}:${pool.options.port}`;\nconst maybeRedact = (commandName, result) => (SENSITIVE_COMMANDS.has(commandName) ? {} : result);\n\nconst LEGACY_FIND_QUERY_MAP = {\n  $query: 'filter',\n  $orderby: 'sort',\n  $hint: 'hint',\n  $comment: 'comment',\n  $maxScan: 'maxScan',\n  $max: 'max',\n  $min: 'min',\n  $returnKey: 'returnKey',\n  $showDiskLoc: 'showRecordId',\n  $maxTimeMS: 'maxTimeMS',\n  $snapshot: 'snapshot'\n};\n\nconst LEGACY_FIND_OPTIONS_MAP = {\n  numberToSkip: 'skip',\n  numberToReturn: 'batchSize',\n  returnFieldsSelector: 'projection'\n};\n\nconst OP_QUERY_KEYS = [\n  'tailable',\n  'oplogReplay',\n  'noCursorTimeout',\n  'awaitData',\n  'partial',\n  'exhaust'\n];\n\n/**\n * Extract the actual command from the query, possibly upconverting if it's a legacy\n * format\n *\n * @param {Object} command the command\n */\nconst extractCommand = command => {\n  if (command instanceof GetMore) {\n    return {\n      getMore: command.cursorId,\n      collection: collectionName(command),\n      batchSize: command.numberToReturn\n    };\n  }\n\n  if (command instanceof KillCursor) {\n    return {\n      killCursors: collectionName(command),\n      cursors: command.cursorIds\n    };\n  }\n\n  if (command instanceof Msg) {\n    return command.command;\n  }\n\n  if (command.query && command.query.$query) {\n    let result;\n    if (command.ns === 'admin.$cmd') {\n      // upconvert legacy command\n      result = Object.assign({}, command.query.$query);\n    } else {\n      // upconvert legacy find command\n      result = { find: collectionName(command) };\n      Object.keys(LEGACY_FIND_QUERY_MAP).forEach(key => {\n        if (typeof command.query[key] !== 'undefined')\n          result[LEGACY_FIND_QUERY_MAP[key]] = command.query[key];\n      });\n    }\n\n    Object.keys(LEGACY_FIND_OPTIONS_MAP).forEach(key => {\n      if (typeof command[key] !== 'undefined') result[LEGACY_FIND_OPTIONS_MAP[key]] = command[key];\n    });\n\n    OP_QUERY_KEYS.forEach(key => {\n      if (command[key]) result[key] = command[key];\n    });\n\n    if (typeof command.pre32Limit !== 'undefined') {\n      result.limit = command.pre32Limit;\n    }\n\n    if (command.query.$explain) {\n      return { explain: result };\n    }\n\n    return result;\n  }\n\n  return command.query ? command.query : command;\n};\n\nconst extractReply = (command, reply) => {\n  if (command instanceof GetMore) {\n    return {\n      ok: 1,\n      cursor: {\n        id: reply.message.cursorId,\n        ns: namespace(command),\n        nextBatch: reply.message.documents\n      }\n    };\n  }\n\n  if (command instanceof KillCursor) {\n    return {\n      ok: 1,\n      cursorsUnknown: command.cursorIds\n    };\n  }\n\n  // is this a legacy find command?\n  if (command.query && typeof command.query.$query !== 'undefined') {\n    return {\n      ok: 1,\n      cursor: {\n        id: reply.message.cursorId,\n        ns: namespace(command),\n        firstBatch: reply.message.documents\n      }\n    };\n  }\n\n  // in the event of a `noResponse` command, just return\n  if (reply === null) return reply;\n\n  return reply.result;\n};\n\n/** An event indicating the start of a given command */\nclass CommandStartedEvent {\n  /**\n   * Create a started event\n   *\n   * @param {Pool} pool the pool that originated the command\n   * @param {Object} command the command\n   */\n  constructor(pool, command) {\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n\n    // NOTE: remove in major revision, this is not spec behavior\n    if (SENSITIVE_COMMANDS.has(commandName)) {\n      this.commandObj = {};\n      this.commandObj[commandName] = true;\n    }\n\n    Object.assign(this, {\n      command: cmd,\n      databaseName: databaseName(command),\n      commandName,\n      requestId: command.requestId,\n      connectionId: generateConnectionId(pool)\n    });\n  }\n}\n\n/** An event indicating the success of a given command */\nclass CommandSucceededEvent {\n  /**\n   * Create a succeeded event\n   *\n   * @param {Pool} pool the pool that originated the command\n   * @param {Object} command the command\n   * @param {Object} reply the reply for this command from the server\n   * @param {Array} started a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  constructor(pool, command, reply, started) {\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n\n    Object.assign(this, {\n      duration: calculateDurationInMs(started),\n      commandName,\n      reply: maybeRedact(commandName, extractReply(command, reply)),\n      requestId: command.requestId,\n      connectionId: generateConnectionId(pool)\n    });\n  }\n}\n\n/** An event indicating the failure of a given command */\nclass CommandFailedEvent {\n  /**\n   * Create a failure event\n   *\n   * @param {Pool} pool the pool that originated the command\n   * @param {Object} command the command\n   * @param {MongoError|Object} error the generated error or a server error response\n   * @param {Array} started a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  constructor(pool, command, error, started) {\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n\n    Object.assign(this, {\n      duration: calculateDurationInMs(started),\n      commandName,\n      failure: maybeRedact(commandName, error),\n      requestId: command.requestId,\n      connectionId: generateConnectionId(pool)\n    });\n  }\n}\n\nmodule.exports = {\n  CommandStartedEvent,\n  CommandSucceededEvent,\n  CommandFailedEvent\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NvcmUvY29ubmVjdGlvbi9hcG0uanM/ZGQ3MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLFlBQVksbUJBQU8sQ0FBQyxFQUFtQjtBQUN2QyxtQkFBbUIsbUJBQU8sQ0FBQyxFQUF3QjtBQUNuRCxnQkFBZ0IsbUJBQU8sQ0FBQyxFQUF3QjtBQUNoRCw4QkFBOEIsbUJBQU8sQ0FBQyxFQUFVOztBQUVoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxrQkFBa0IsR0FBRyxrQkFBa0I7QUFDL0Usc0ZBQXNGOztBQUV0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsS0FBSztBQUNMO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLEtBQUs7QUFDbEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsS0FBSztBQUNsQixhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxLQUFLO0FBQ2xCLGFBQWEsT0FBTztBQUNwQixhQUFhLGtCQUFrQjtBQUMvQixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI1NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IE1zZyA9IHJlcXVpcmUoJy4uL2Nvbm5lY3Rpb24vbXNnJykuTXNnO1xuY29uc3QgS2lsbEN1cnNvciA9IHJlcXVpcmUoJy4uL2Nvbm5lY3Rpb24vY29tbWFuZHMnKS5LaWxsQ3Vyc29yO1xuY29uc3QgR2V0TW9yZSA9IHJlcXVpcmUoJy4uL2Nvbm5lY3Rpb24vY29tbWFuZHMnKS5HZXRNb3JlO1xuY29uc3QgY2FsY3VsYXRlRHVyYXRpb25Jbk1zID0gcmVxdWlyZSgnLi4vdXRpbHMnKS5jYWxjdWxhdGVEdXJhdGlvbkluTXM7XG5cbi8qKiBDb21tYW5kcyB0aGF0IHdlIHdhbnQgdG8gcmVkYWN0IGJlY2F1c2Ugb2YgdGhlIHNlbnNpdGl2ZSBuYXR1cmUgb2YgdGhlaXIgY29udGVudHMgKi9cbmNvbnN0IFNFTlNJVElWRV9DT01NQU5EUyA9IG5ldyBTZXQoW1xuICAnYXV0aGVudGljYXRlJyxcbiAgJ3Nhc2xTdGFydCcsXG4gICdzYXNsQ29udGludWUnLFxuICAnZ2V0bm9uY2UnLFxuICAnY3JlYXRlVXNlcicsXG4gICd1cGRhdGVVc2VyJyxcbiAgJ2NvcHlkYmdldG5vbmNlJyxcbiAgJ2NvcHlkYnNhc2xzdGFydCcsXG4gICdjb3B5ZGInXG5dKTtcblxuLy8gaGVscGVyIG1ldGhvZHNcbmNvbnN0IGV4dHJhY3RDb21tYW5kTmFtZSA9IGNvbW1hbmREb2MgPT4gT2JqZWN0LmtleXMoY29tbWFuZERvYylbMF07XG5jb25zdCBuYW1lc3BhY2UgPSBjb21tYW5kID0+IGNvbW1hbmQubnM7XG5jb25zdCBkYXRhYmFzZU5hbWUgPSBjb21tYW5kID0+IGNvbW1hbmQubnMuc3BsaXQoJy4nKVswXTtcbmNvbnN0IGNvbGxlY3Rpb25OYW1lID0gY29tbWFuZCA9PiBjb21tYW5kLm5zLnNwbGl0KCcuJylbMV07XG5jb25zdCBnZW5lcmF0ZUNvbm5lY3Rpb25JZCA9IHBvb2wgPT4gYCR7cG9vbC5vcHRpb25zLmhvc3R9OiR7cG9vbC5vcHRpb25zLnBvcnR9YDtcbmNvbnN0IG1heWJlUmVkYWN0ID0gKGNvbW1hbmROYW1lLCByZXN1bHQpID0+IChTRU5TSVRJVkVfQ09NTUFORFMuaGFzKGNvbW1hbmROYW1lKSA/IHt9IDogcmVzdWx0KTtcblxuY29uc3QgTEVHQUNZX0ZJTkRfUVVFUllfTUFQID0ge1xuICAkcXVlcnk6ICdmaWx0ZXInLFxuICAkb3JkZXJieTogJ3NvcnQnLFxuICAkaGludDogJ2hpbnQnLFxuICAkY29tbWVudDogJ2NvbW1lbnQnLFxuICAkbWF4U2NhbjogJ21heFNjYW4nLFxuICAkbWF4OiAnbWF4JyxcbiAgJG1pbjogJ21pbicsXG4gICRyZXR1cm5LZXk6ICdyZXR1cm5LZXknLFxuICAkc2hvd0Rpc2tMb2M6ICdzaG93UmVjb3JkSWQnLFxuICAkbWF4VGltZU1TOiAnbWF4VGltZU1TJyxcbiAgJHNuYXBzaG90OiAnc25hcHNob3QnXG59O1xuXG5jb25zdCBMRUdBQ1lfRklORF9PUFRJT05TX01BUCA9IHtcbiAgbnVtYmVyVG9Ta2lwOiAnc2tpcCcsXG4gIG51bWJlclRvUmV0dXJuOiAnYmF0Y2hTaXplJyxcbiAgcmV0dXJuRmllbGRzU2VsZWN0b3I6ICdwcm9qZWN0aW9uJ1xufTtcblxuY29uc3QgT1BfUVVFUllfS0VZUyA9IFtcbiAgJ3RhaWxhYmxlJyxcbiAgJ29wbG9nUmVwbGF5JyxcbiAgJ25vQ3Vyc29yVGltZW91dCcsXG4gICdhd2FpdERhdGEnLFxuICAncGFydGlhbCcsXG4gICdleGhhdXN0J1xuXTtcblxuLyoqXG4gKiBFeHRyYWN0IHRoZSBhY3R1YWwgY29tbWFuZCBmcm9tIHRoZSBxdWVyeSwgcG9zc2libHkgdXBjb252ZXJ0aW5nIGlmIGl0J3MgYSBsZWdhY3lcbiAqIGZvcm1hdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb21tYW5kIHRoZSBjb21tYW5kXG4gKi9cbmNvbnN0IGV4dHJhY3RDb21tYW5kID0gY29tbWFuZCA9PiB7XG4gIGlmIChjb21tYW5kIGluc3RhbmNlb2YgR2V0TW9yZSkge1xuICAgIHJldHVybiB7XG4gICAgICBnZXRNb3JlOiBjb21tYW5kLmN1cnNvcklkLFxuICAgICAgY29sbGVjdGlvbjogY29sbGVjdGlvbk5hbWUoY29tbWFuZCksXG4gICAgICBiYXRjaFNpemU6IGNvbW1hbmQubnVtYmVyVG9SZXR1cm5cbiAgICB9O1xuICB9XG5cbiAgaWYgKGNvbW1hbmQgaW5zdGFuY2VvZiBLaWxsQ3Vyc29yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbGxDdXJzb3JzOiBjb2xsZWN0aW9uTmFtZShjb21tYW5kKSxcbiAgICAgIGN1cnNvcnM6IGNvbW1hbmQuY3Vyc29ySWRzXG4gICAgfTtcbiAgfVxuXG4gIGlmIChjb21tYW5kIGluc3RhbmNlb2YgTXNnKSB7XG4gICAgcmV0dXJuIGNvbW1hbmQuY29tbWFuZDtcbiAgfVxuXG4gIGlmIChjb21tYW5kLnF1ZXJ5ICYmIGNvbW1hbmQucXVlcnkuJHF1ZXJ5KSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBpZiAoY29tbWFuZC5ucyA9PT0gJ2FkbWluLiRjbWQnKSB7XG4gICAgICAvLyB1cGNvbnZlcnQgbGVnYWN5IGNvbW1hbmRcbiAgICAgIHJlc3VsdCA9IE9iamVjdC5hc3NpZ24oe30sIGNvbW1hbmQucXVlcnkuJHF1ZXJ5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBjb252ZXJ0IGxlZ2FjeSBmaW5kIGNvbW1hbmRcbiAgICAgIHJlc3VsdCA9IHsgZmluZDogY29sbGVjdGlvbk5hbWUoY29tbWFuZCkgfTtcbiAgICAgIE9iamVjdC5rZXlzKExFR0FDWV9GSU5EX1FVRVJZX01BUCkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIGNvbW1hbmQucXVlcnlba2V5XSAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgcmVzdWx0W0xFR0FDWV9GSU5EX1FVRVJZX01BUFtrZXldXSA9IGNvbW1hbmQucXVlcnlba2V5XTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIE9iamVjdC5rZXlzKExFR0FDWV9GSU5EX09QVElPTlNfTUFQKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGNvbW1hbmRba2V5XSAhPT0gJ3VuZGVmaW5lZCcpIHJlc3VsdFtMRUdBQ1lfRklORF9PUFRJT05TX01BUFtrZXldXSA9IGNvbW1hbmRba2V5XTtcbiAgICB9KTtcblxuICAgIE9QX1FVRVJZX0tFWVMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgaWYgKGNvbW1hbmRba2V5XSkgcmVzdWx0W2tleV0gPSBjb21tYW5kW2tleV07XG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGNvbW1hbmQucHJlMzJMaW1pdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJlc3VsdC5saW1pdCA9IGNvbW1hbmQucHJlMzJMaW1pdDtcbiAgICB9XG5cbiAgICBpZiAoY29tbWFuZC5xdWVyeS4kZXhwbGFpbikge1xuICAgICAgcmV0dXJuIHsgZXhwbGFpbjogcmVzdWx0IH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBjb21tYW5kLnF1ZXJ5ID8gY29tbWFuZC5xdWVyeSA6IGNvbW1hbmQ7XG59O1xuXG5jb25zdCBleHRyYWN0UmVwbHkgPSAoY29tbWFuZCwgcmVwbHkpID0+IHtcbiAgaWYgKGNvbW1hbmQgaW5zdGFuY2VvZiBHZXRNb3JlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9rOiAxLFxuICAgICAgY3Vyc29yOiB7XG4gICAgICAgIGlkOiByZXBseS5tZXNzYWdlLmN1cnNvcklkLFxuICAgICAgICBuczogbmFtZXNwYWNlKGNvbW1hbmQpLFxuICAgICAgICBuZXh0QmF0Y2g6IHJlcGx5Lm1lc3NhZ2UuZG9jdW1lbnRzXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGlmIChjb21tYW5kIGluc3RhbmNlb2YgS2lsbEN1cnNvcikge1xuICAgIHJldHVybiB7XG4gICAgICBvazogMSxcbiAgICAgIGN1cnNvcnNVbmtub3duOiBjb21tYW5kLmN1cnNvcklkc1xuICAgIH07XG4gIH1cblxuICAvLyBpcyB0aGlzIGEgbGVnYWN5IGZpbmQgY29tbWFuZD9cbiAgaWYgKGNvbW1hbmQucXVlcnkgJiYgdHlwZW9mIGNvbW1hbmQucXVlcnkuJHF1ZXJ5ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB7XG4gICAgICBvazogMSxcbiAgICAgIGN1cnNvcjoge1xuICAgICAgICBpZDogcmVwbHkubWVzc2FnZS5jdXJzb3JJZCxcbiAgICAgICAgbnM6IG5hbWVzcGFjZShjb21tYW5kKSxcbiAgICAgICAgZmlyc3RCYXRjaDogcmVwbHkubWVzc2FnZS5kb2N1bWVudHNcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gaW4gdGhlIGV2ZW50IG9mIGEgYG5vUmVzcG9uc2VgIGNvbW1hbmQsIGp1c3QgcmV0dXJuXG4gIGlmIChyZXBseSA9PT0gbnVsbCkgcmV0dXJuIHJlcGx5O1xuXG4gIHJldHVybiByZXBseS5yZXN1bHQ7XG59O1xuXG4vKiogQW4gZXZlbnQgaW5kaWNhdGluZyB0aGUgc3RhcnQgb2YgYSBnaXZlbiBjb21tYW5kICovXG5jbGFzcyBDb21tYW5kU3RhcnRlZEV2ZW50IHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIHN0YXJ0ZWQgZXZlbnRcbiAgICpcbiAgICogQHBhcmFtIHtQb29sfSBwb29sIHRoZSBwb29sIHRoYXQgb3JpZ2luYXRlZCB0aGUgY29tbWFuZFxuICAgKiBAcGFyYW0ge09iamVjdH0gY29tbWFuZCB0aGUgY29tbWFuZFxuICAgKi9cbiAgY29uc3RydWN0b3IocG9vbCwgY29tbWFuZCkge1xuICAgIGNvbnN0IGNtZCA9IGV4dHJhY3RDb21tYW5kKGNvbW1hbmQpO1xuICAgIGNvbnN0IGNvbW1hbmROYW1lID0gZXh0cmFjdENvbW1hbmROYW1lKGNtZCk7XG5cbiAgICAvLyBOT1RFOiByZW1vdmUgaW4gbWFqb3IgcmV2aXNpb24sIHRoaXMgaXMgbm90IHNwZWMgYmVoYXZpb3JcbiAgICBpZiAoU0VOU0lUSVZFX0NPTU1BTkRTLmhhcyhjb21tYW5kTmFtZSkpIHtcbiAgICAgIHRoaXMuY29tbWFuZE9iaiA9IHt9O1xuICAgICAgdGhpcy5jb21tYW5kT2JqW2NvbW1hbmROYW1lXSA9IHRydWU7XG4gICAgfVxuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCB7XG4gICAgICBjb21tYW5kOiBjbWQsXG4gICAgICBkYXRhYmFzZU5hbWU6IGRhdGFiYXNlTmFtZShjb21tYW5kKSxcbiAgICAgIGNvbW1hbmROYW1lLFxuICAgICAgcmVxdWVzdElkOiBjb21tYW5kLnJlcXVlc3RJZCxcbiAgICAgIGNvbm5lY3Rpb25JZDogZ2VuZXJhdGVDb25uZWN0aW9uSWQocG9vbClcbiAgICB9KTtcbiAgfVxufVxuXG4vKiogQW4gZXZlbnQgaW5kaWNhdGluZyB0aGUgc3VjY2VzcyBvZiBhIGdpdmVuIGNvbW1hbmQgKi9cbmNsYXNzIENvbW1hbmRTdWNjZWVkZWRFdmVudCB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBzdWNjZWVkZWQgZXZlbnRcbiAgICpcbiAgICogQHBhcmFtIHtQb29sfSBwb29sIHRoZSBwb29sIHRoYXQgb3JpZ2luYXRlZCB0aGUgY29tbWFuZFxuICAgKiBAcGFyYW0ge09iamVjdH0gY29tbWFuZCB0aGUgY29tbWFuZFxuICAgKiBAcGFyYW0ge09iamVjdH0gcmVwbHkgdGhlIHJlcGx5IGZvciB0aGlzIGNvbW1hbmQgZnJvbSB0aGUgc2VydmVyXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN0YXJ0ZWQgYSBoaWdoIHJlc29sdXRpb24gdHVwbGUgdGltZXN0YW1wIG9mIHdoZW4gdGhlIGNvbW1hbmQgd2FzIGZpcnN0IHNlbnQsIHRvIGNhbGN1bGF0ZSBkdXJhdGlvblxuICAgKi9cbiAgY29uc3RydWN0b3IocG9vbCwgY29tbWFuZCwgcmVwbHksIHN0YXJ0ZWQpIHtcbiAgICBjb25zdCBjbWQgPSBleHRyYWN0Q29tbWFuZChjb21tYW5kKTtcbiAgICBjb25zdCBjb21tYW5kTmFtZSA9IGV4dHJhY3RDb21tYW5kTmFtZShjbWQpO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCB7XG4gICAgICBkdXJhdGlvbjogY2FsY3VsYXRlRHVyYXRpb25Jbk1zKHN0YXJ0ZWQpLFxuICAgICAgY29tbWFuZE5hbWUsXG4gICAgICByZXBseTogbWF5YmVSZWRhY3QoY29tbWFuZE5hbWUsIGV4dHJhY3RSZXBseShjb21tYW5kLCByZXBseSkpLFxuICAgICAgcmVxdWVzdElkOiBjb21tYW5kLnJlcXVlc3RJZCxcbiAgICAgIGNvbm5lY3Rpb25JZDogZ2VuZXJhdGVDb25uZWN0aW9uSWQocG9vbClcbiAgICB9KTtcbiAgfVxufVxuXG4vKiogQW4gZXZlbnQgaW5kaWNhdGluZyB0aGUgZmFpbHVyZSBvZiBhIGdpdmVuIGNvbW1hbmQgKi9cbmNsYXNzIENvbW1hbmRGYWlsZWRFdmVudCB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBmYWlsdXJlIGV2ZW50XG4gICAqXG4gICAqIEBwYXJhbSB7UG9vbH0gcG9vbCB0aGUgcG9vbCB0aGF0IG9yaWdpbmF0ZWQgdGhlIGNvbW1hbmRcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbW1hbmQgdGhlIGNvbW1hbmRcbiAgICogQHBhcmFtIHtNb25nb0Vycm9yfE9iamVjdH0gZXJyb3IgdGhlIGdlbmVyYXRlZCBlcnJvciBvciBhIHNlcnZlciBlcnJvciByZXNwb25zZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdGFydGVkIGEgaGlnaCByZXNvbHV0aW9uIHR1cGxlIHRpbWVzdGFtcCBvZiB3aGVuIHRoZSBjb21tYW5kIHdhcyBmaXJzdCBzZW50LCB0byBjYWxjdWxhdGUgZHVyYXRpb25cbiAgICovXG4gIGNvbnN0cnVjdG9yKHBvb2wsIGNvbW1hbmQsIGVycm9yLCBzdGFydGVkKSB7XG4gICAgY29uc3QgY21kID0gZXh0cmFjdENvbW1hbmQoY29tbWFuZCk7XG4gICAgY29uc3QgY29tbWFuZE5hbWUgPSBleHRyYWN0Q29tbWFuZE5hbWUoY21kKTtcblxuICAgIE9iamVjdC5hc3NpZ24odGhpcywge1xuICAgICAgZHVyYXRpb246IGNhbGN1bGF0ZUR1cmF0aW9uSW5NcyhzdGFydGVkKSxcbiAgICAgIGNvbW1hbmROYW1lLFxuICAgICAgZmFpbHVyZTogbWF5YmVSZWRhY3QoY29tbWFuZE5hbWUsIGVycm9yKSxcbiAgICAgIHJlcXVlc3RJZDogY29tbWFuZC5yZXF1ZXN0SWQsXG4gICAgICBjb25uZWN0aW9uSWQ6IGdlbmVyYXRlQ29ubmVjdGlvbklkKHBvb2wpXG4gICAgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENvbW1hbmRTdGFydGVkRXZlbnQsXG4gIENvbW1hbmRTdWNjZWVkZWRFdmVudCxcbiAgQ29tbWFuZEZhaWxlZEV2ZW50XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///55\n");

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst net = __webpack_require__(57);\nconst tls = __webpack_require__(58);\nconst Connection = __webpack_require__(38);\nconst Query = __webpack_require__(48).Query;\nconst createClientInfo = __webpack_require__(59).createClientInfo;\nconst MongoError = __webpack_require__(37).MongoError;\nconst MongoNetworkError = __webpack_require__(37).MongoNetworkError;\nconst defaultAuthProviders = __webpack_require__(62).defaultAuthProviders;\nconst WIRE_CONSTANTS = __webpack_require__(45);\nconst MAX_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_WIRE_VERSION;\nconst MAX_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_SERVER_VERSION;\nconst MIN_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_WIRE_VERSION;\nconst MIN_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_SERVER_VERSION;\nlet AUTH_PROVIDERS;\n\nfunction connect(options, callback) {\n  if (AUTH_PROVIDERS == null) {\n    AUTH_PROVIDERS = defaultAuthProviders(options.bson);\n  }\n\n  if (options.family !== void 0) {\n    makeConnection(options.family, options, (err, socket) => {\n      if (err) {\n        callback(err, socket); // in the error case, `socket` is the originating error event name\n        return;\n      }\n\n      performInitialHandshake(new Connection(socket, options), options, callback);\n    });\n\n    return;\n  }\n\n  return makeConnection(6, options, (err, ipv6Socket) => {\n    if (err) {\n      makeConnection(4, options, (err, ipv4Socket) => {\n        if (err) {\n          callback(err, ipv4Socket); // in the error case, `ipv4Socket` is the originating error event name\n          return;\n        }\n\n        performInitialHandshake(new Connection(ipv4Socket, options), options, callback);\n      });\n\n      return;\n    }\n\n    performInitialHandshake(new Connection(ipv6Socket, options), options, callback);\n  });\n}\n\nfunction getSaslSupportedMechs(options) {\n  if (!(options && options.credentials)) {\n    return {};\n  }\n\n  const credentials = options.credentials;\n\n  // TODO: revisit whether or not items like `options.user` and `options.dbName` should be checked here\n  const authMechanism = credentials.mechanism;\n  const authSource = credentials.source || options.dbName || 'admin';\n  const user = credentials.username || options.user;\n\n  if (typeof authMechanism === 'string' && authMechanism.toUpperCase() !== 'DEFAULT') {\n    return {};\n  }\n\n  if (!user) {\n    return {};\n  }\n\n  return { saslSupportedMechs: `${authSource}.${user}` };\n}\n\nfunction checkSupportedServer(ismaster, options) {\n  const serverVersionHighEnough =\n    ismaster &&\n    typeof ismaster.maxWireVersion === 'number' &&\n    ismaster.maxWireVersion >= MIN_SUPPORTED_WIRE_VERSION;\n  const serverVersionLowEnough =\n    ismaster &&\n    typeof ismaster.minWireVersion === 'number' &&\n    ismaster.minWireVersion <= MAX_SUPPORTED_WIRE_VERSION;\n\n  if (serverVersionHighEnough) {\n    if (serverVersionLowEnough) {\n      return null;\n    }\n\n    const message = `Server at ${options.host}:${options.port} reports minimum wire version ${\n      ismaster.minWireVersion\n    }, but this version of the Node.js Driver requires at most ${MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${MAX_SUPPORTED_SERVER_VERSION})`;\n    return new MongoError(message);\n  }\n\n  const message = `Server at ${options.host}:${\n    options.port\n  } reports maximum wire version ${ismaster.maxWireVersion ||\n    0}, but this version of the Node.js Driver requires at least ${MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${MIN_SUPPORTED_SERVER_VERSION})`;\n  return new MongoError(message);\n}\n\nfunction performInitialHandshake(conn, options, _callback) {\n  const callback = function(err, ret) {\n    if (err && conn) {\n      conn.destroy();\n    }\n    _callback(err, ret);\n  };\n\n  let compressors = [];\n  if (options.compression && options.compression.compressors) {\n    compressors = options.compression.compressors;\n  }\n\n  const handshakeDoc = Object.assign(\n    {\n      ismaster: true,\n      client: createClientInfo(options),\n      compression: compressors\n    },\n    getSaslSupportedMechs(options)\n  );\n\n  const start = new Date().getTime();\n  runCommand(conn, 'admin.$cmd', handshakeDoc, options, (err, ismaster) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n\n    if (ismaster.ok === 0) {\n      callback(new MongoError(ismaster), null);\n      return;\n    }\n\n    const supportedServerErr = checkSupportedServer(ismaster, options);\n    if (supportedServerErr) {\n      callback(supportedServerErr, null);\n      return;\n    }\n\n    // resolve compression\n    if (ismaster.compression) {\n      const agreedCompressors = compressors.filter(\n        compressor => ismaster.compression.indexOf(compressor) !== -1\n      );\n\n      if (agreedCompressors.length) {\n        conn.agreedCompressor = agreedCompressors[0];\n      }\n\n      if (options.compression && options.compression.zlibCompressionLevel) {\n        conn.zlibCompressionLevel = options.compression.zlibCompressionLevel;\n      }\n    }\n\n    // NOTE: This is metadata attached to the connection while porting away from\n    //       handshake being done in the `Server` class. Likely, it should be\n    //       relocated, or at very least restructured.\n    conn.ismaster = ismaster;\n    conn.lastIsMasterMS = new Date().getTime() - start;\n\n    const credentials = options.credentials;\n    if (!ismaster.arbiterOnly && credentials) {\n      credentials.resolveAuthMechanism(ismaster);\n      authenticate(conn, credentials, callback);\n      return;\n    }\n\n    callback(null, conn);\n  });\n}\n\nconst LEGAL_SSL_SOCKET_OPTIONS = [\n  'pfx',\n  'key',\n  'passphrase',\n  'cert',\n  'ca',\n  'ciphers',\n  'NPNProtocols',\n  'ALPNProtocols',\n  'servername',\n  'ecdhCurve',\n  'secureProtocol',\n  'secureContext',\n  'session',\n  'minDHSize',\n  'crl',\n  'rejectUnauthorized'\n];\n\nfunction parseConnectOptions(family, options) {\n  const host = typeof options.host === 'string' ? options.host : 'localhost';\n  if (host.indexOf('/') !== -1) {\n    return { path: host };\n  }\n\n  const result = {\n    family,\n    host,\n    port: typeof options.port === 'number' ? options.port : 27017,\n    rejectUnauthorized: false\n  };\n\n  return result;\n}\n\nfunction parseSslOptions(family, options) {\n  const result = parseConnectOptions(family, options);\n\n  // Merge in valid SSL options\n  for (const name in options) {\n    if (options[name] != null && LEGAL_SSL_SOCKET_OPTIONS.indexOf(name) !== -1) {\n      result[name] = options[name];\n    }\n  }\n\n  // Override checkServerIdentity behavior\n  if (options.checkServerIdentity === false) {\n    // Skip the identiy check by retuning undefined as per node documents\n    // https://nodejs.org/api/tls.html#tls_tls_connect_options_callback\n    result.checkServerIdentity = function() {\n      return undefined;\n    };\n  } else if (typeof options.checkServerIdentity === 'function') {\n    result.checkServerIdentity = options.checkServerIdentity;\n  }\n\n  // Set default sni servername to be the same as host\n  if (result.servername == null) {\n    result.servername = result.host;\n  }\n\n  return result;\n}\n\nfunction makeConnection(family, options, _callback) {\n  const useSsl = typeof options.ssl === 'boolean' ? options.ssl : false;\n  const keepAlive = typeof options.keepAlive === 'boolean' ? options.keepAlive : true;\n  let keepAliveInitialDelay =\n    typeof options.keepAliveInitialDelay === 'number' ? options.keepAliveInitialDelay : 300000;\n  const noDelay = typeof options.noDelay === 'boolean' ? options.noDelay : true;\n  const connectionTimeout =\n    typeof options.connectionTimeout === 'number' ? options.connectionTimeout : 30000;\n  const socketTimeout = typeof options.socketTimeout === 'number' ? options.socketTimeout : 360000;\n  const rejectUnauthorized =\n    typeof options.rejectUnauthorized === 'boolean' ? options.rejectUnauthorized : true;\n\n  if (keepAliveInitialDelay > socketTimeout) {\n    keepAliveInitialDelay = Math.round(socketTimeout / 2);\n  }\n\n  let socket;\n  const callback = function(err, ret) {\n    if (err && socket) {\n      socket.destroy();\n    }\n    _callback(err, ret);\n  };\n\n  try {\n    if (useSsl) {\n      socket = tls.connect(parseSslOptions(family, options));\n      if (typeof socket.disableRenegotiation === 'function') {\n        socket.disableRenegotiation();\n      }\n    } else {\n      socket = net.createConnection(parseConnectOptions(family, options));\n    }\n  } catch (err) {\n    return callback(err);\n  }\n\n  socket.setKeepAlive(keepAlive, keepAliveInitialDelay);\n  socket.setTimeout(connectionTimeout);\n  socket.setNoDelay(noDelay);\n\n  const errorEvents = ['error', 'close', 'timeout', 'parseError'];\n  function errorHandler(eventName) {\n    return err => {\n      errorEvents.forEach(event => socket.removeAllListeners(event));\n      socket.removeListener('connect', connectHandler);\n      callback(connectionFailureError(eventName, err), eventName);\n    };\n  }\n\n  function connectHandler() {\n    errorEvents.forEach(event => socket.removeAllListeners(event));\n    if (socket.authorizationError && rejectUnauthorized) {\n      return callback(socket.authorizationError);\n    }\n\n    socket.setTimeout(socketTimeout);\n    callback(null, socket);\n  }\n\n  socket.once('error', errorHandler('error'));\n  socket.once('close', errorHandler('close'));\n  socket.once('timeout', errorHandler('timeout'));\n  socket.once('parseError', errorHandler('parseError'));\n  socket.once('connect', connectHandler);\n}\n\nconst CONNECTION_ERROR_EVENTS = ['error', 'close', 'timeout', 'parseError'];\nfunction runCommand(conn, ns, command, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  const socketTimeout = typeof options.socketTimeout === 'number' ? options.socketTimeout : 360000;\n  const bson = conn.options.bson;\n  const query = new Query(bson, ns, command, {\n    numberToSkip: 0,\n    numberToReturn: 1\n  });\n\n  function errorHandler(err) {\n    conn.resetSocketTimeout();\n    CONNECTION_ERROR_EVENTS.forEach(eventName => conn.removeListener(eventName, errorHandler));\n    conn.removeListener('message', messageHandler);\n    callback(err, null);\n  }\n\n  function messageHandler(msg) {\n    if (msg.responseTo !== query.requestId) {\n      return;\n    }\n\n    conn.resetSocketTimeout();\n    CONNECTION_ERROR_EVENTS.forEach(eventName => conn.removeListener(eventName, errorHandler));\n    conn.removeListener('message', messageHandler);\n\n    msg.parse({ promoteValues: true });\n    callback(null, msg.documents[0]);\n  }\n\n  conn.setSocketTimeout(socketTimeout);\n  CONNECTION_ERROR_EVENTS.forEach(eventName => conn.once(eventName, errorHandler));\n  conn.on('message', messageHandler);\n  conn.write(query.toBin());\n}\n\nfunction authenticate(conn, credentials, callback) {\n  const mechanism = credentials.mechanism;\n  if (!AUTH_PROVIDERS[mechanism]) {\n    callback(new MongoError(`authMechanism '${mechanism}' not supported`));\n    return;\n  }\n\n  const provider = AUTH_PROVIDERS[mechanism];\n  provider.auth(runCommand, [conn], credentials, err => {\n    if (err) return callback(err);\n    callback(null, conn);\n  });\n}\n\nfunction connectionFailureError(type, err) {\n  switch (type) {\n    case 'error':\n      return new MongoNetworkError(err);\n    case 'timeout':\n      return new MongoNetworkError(`connection timed out`);\n    case 'close':\n      return new MongoNetworkError(`connection closed`);\n    default:\n      return new MongoNetworkError(`unknown network error`);\n  }\n}\n\nmodule.exports = connect;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///56\n");

/***/ }),
/* 57 */
/***/ (function(module, exports) {

eval("module.exports = require(\"net\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0L2V4dGVybmFsIFwibmV0XCI/MjFlZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI1Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5ldFwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///57\n");

/***/ }),
/* 58 */
/***/ (function(module, exports) {

eval("module.exports = require(\"tls\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0L2V4dGVybmFsIFwidGxzXCI/OTRjYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI1OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInRsc1wiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///58\n");

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst os = __webpack_require__(60);\nconst f = __webpack_require__(12).format;\nconst ReadPreference = __webpack_require__(42);\nconst Buffer = __webpack_require__(49).Buffer;\nconst TopologyType = __webpack_require__(44).TopologyType;\nconst MongoError = __webpack_require__(37).MongoError;\n\nconst MMAPv1_RETRY_WRITES_ERROR_CODE = 20;\n\n/**\n * Emit event if it exists\n * @method\n */\nfunction emitSDAMEvent(self, event, description) {\n  if (self.listeners(event).length > 0) {\n    self.emit(event, description);\n  }\n}\n\n// Get package.json variable\nvar driverVersion = __webpack_require__(61).version;\nvar nodejsversion = f('Node.js %s, %s', process.version, os.endianness());\nvar type = os.type();\nvar name = process.platform;\nvar architecture = process.arch;\nvar release = os.release();\n\nfunction createClientInfo(options) {\n  // Build default client information\n  var clientInfo = options.clientInfo\n    ? clone(options.clientInfo)\n    : {\n        driver: {\n          name: 'nodejs-core',\n          version: driverVersion\n        },\n        os: {\n          type: type,\n          name: name,\n          architecture: architecture,\n          version: release\n        }\n      };\n\n  // Is platform specified\n  if (clientInfo.platform && clientInfo.platform.indexOf('mongodb-core') === -1) {\n    clientInfo.platform = f('%s, mongodb-core: %s', clientInfo.platform, driverVersion);\n  } else if (!clientInfo.platform) {\n    clientInfo.platform = nodejsversion;\n  }\n\n  // Do we have an application specific string\n  if (options.appname) {\n    // Cut at 128 bytes\n    var buffer = Buffer.from(options.appname);\n    // Return the truncated appname\n    var appname = buffer.length > 128 ? buffer.slice(0, 128).toString('utf8') : options.appname;\n    // Add to the clientInfo\n    clientInfo.application = { name: appname };\n  }\n\n  return clientInfo;\n}\n\nfunction createCompressionInfo(options) {\n  if (!options.compression || !options.compression.compressors) {\n    return [];\n  }\n\n  // Check that all supplied compressors are valid\n  options.compression.compressors.forEach(function(compressor) {\n    if (compressor !== 'snappy' && compressor !== 'zlib') {\n      throw new Error('compressors must be at least one of snappy or zlib');\n    }\n  });\n\n  return options.compression.compressors;\n}\n\nfunction clone(object) {\n  return JSON.parse(JSON.stringify(object));\n}\n\nvar getPreviousDescription = function(self) {\n  if (!self.s.serverDescription) {\n    self.s.serverDescription = {\n      address: self.name,\n      arbiters: [],\n      hosts: [],\n      passives: [],\n      type: 'Unknown'\n    };\n  }\n\n  return self.s.serverDescription;\n};\n\nvar emitServerDescriptionChanged = function(self, description) {\n  if (self.listeners('serverDescriptionChanged').length > 0) {\n    // Emit the server description changed events\n    self.emit('serverDescriptionChanged', {\n      topologyId: self.s.topologyId !== -1 ? self.s.topologyId : self.id,\n      address: self.name,\n      previousDescription: getPreviousDescription(self),\n      newDescription: description\n    });\n\n    self.s.serverDescription = description;\n  }\n};\n\nvar getPreviousTopologyDescription = function(self) {\n  if (!self.s.topologyDescription) {\n    self.s.topologyDescription = {\n      topologyType: 'Unknown',\n      servers: [\n        {\n          address: self.name,\n          arbiters: [],\n          hosts: [],\n          passives: [],\n          type: 'Unknown'\n        }\n      ]\n    };\n  }\n\n  return self.s.topologyDescription;\n};\n\nvar emitTopologyDescriptionChanged = function(self, description) {\n  if (self.listeners('topologyDescriptionChanged').length > 0) {\n    // Emit the server description changed events\n    self.emit('topologyDescriptionChanged', {\n      topologyId: self.s.topologyId !== -1 ? self.s.topologyId : self.id,\n      address: self.name,\n      previousDescription: getPreviousTopologyDescription(self),\n      newDescription: description\n    });\n\n    self.s.serverDescription = description;\n  }\n};\n\nvar changedIsMaster = function(self, currentIsmaster, ismaster) {\n  var currentType = getTopologyType(self, currentIsmaster);\n  var newType = getTopologyType(self, ismaster);\n  if (newType !== currentType) return true;\n  return false;\n};\n\nvar getTopologyType = function(self, ismaster) {\n  if (!ismaster) {\n    ismaster = self.ismaster;\n  }\n\n  if (!ismaster) return 'Unknown';\n  if (ismaster.ismaster && ismaster.msg === 'isdbgrid') return 'Mongos';\n  if (ismaster.ismaster && !ismaster.hosts) return 'Standalone';\n  if (ismaster.ismaster) return 'RSPrimary';\n  if (ismaster.secondary) return 'RSSecondary';\n  if (ismaster.arbiterOnly) return 'RSArbiter';\n  return 'Unknown';\n};\n\nvar inquireServerState = function(self) {\n  return function(callback) {\n    if (self.s.state === 'destroyed') return;\n    // Record response time\n    var start = new Date().getTime();\n\n    // emitSDAMEvent\n    emitSDAMEvent(self, 'serverHeartbeatStarted', { connectionId: self.name });\n\n    // Attempt to execute ismaster command\n    self.command('admin.$cmd', { ismaster: true }, { monitoring: true }, function(err, r) {\n      if (!err) {\n        // Legacy event sender\n        self.emit('ismaster', r, self);\n\n        // Calculate latencyMS\n        var latencyMS = new Date().getTime() - start;\n\n        // Server heart beat event\n        emitSDAMEvent(self, 'serverHeartbeatSucceeded', {\n          durationMS: latencyMS,\n          reply: r.result,\n          connectionId: self.name\n        });\n\n        // Did the server change\n        if (changedIsMaster(self, self.s.ismaster, r.result)) {\n          // Emit server description changed if something listening\n          emitServerDescriptionChanged(self, {\n            address: self.name,\n            arbiters: [],\n            hosts: [],\n            passives: [],\n            type: !self.s.inTopology ? 'Standalone' : getTopologyType(self)\n          });\n        }\n\n        // Updat ismaster view\n        self.s.ismaster = r.result;\n\n        // Set server response time\n        self.s.isMasterLatencyMS = latencyMS;\n      } else {\n        emitSDAMEvent(self, 'serverHeartbeatFailed', {\n          durationMS: latencyMS,\n          failure: err,\n          connectionId: self.name\n        });\n      }\n\n      // Peforming an ismaster monitoring callback operation\n      if (typeof callback === 'function') {\n        return callback(err, r);\n      }\n\n      // Perform another sweep\n      self.s.inquireServerStateTimeout = setTimeout(inquireServerState(self), self.s.haInterval);\n    });\n  };\n};\n\n//\n// Clone the options\nvar cloneOptions = function(options) {\n  var opts = {};\n  for (var name in options) {\n    opts[name] = options[name];\n  }\n  return opts;\n};\n\nfunction Interval(fn, time) {\n  var timer = false;\n\n  this.start = function() {\n    if (!this.isRunning()) {\n      timer = setInterval(fn, time);\n    }\n\n    return this;\n  };\n\n  this.stop = function() {\n    clearInterval(timer);\n    timer = false;\n    return this;\n  };\n\n  this.isRunning = function() {\n    return timer !== false;\n  };\n}\n\nfunction Timeout(fn, time) {\n  var timer = false;\n\n  this.start = function() {\n    if (!this.isRunning()) {\n      timer = setTimeout(fn, time);\n    }\n    return this;\n  };\n\n  this.stop = function() {\n    clearTimeout(timer);\n    timer = false;\n    return this;\n  };\n\n  this.isRunning = function() {\n    if (timer && timer._called) return false;\n    return timer !== false;\n  };\n}\n\nfunction diff(previous, current) {\n  // Difference document\n  var diff = {\n    servers: []\n  };\n\n  // Previous entry\n  if (!previous) {\n    previous = { servers: [] };\n  }\n\n  // Check if we have any previous servers missing in the current ones\n  for (var i = 0; i < previous.servers.length; i++) {\n    var found = false;\n\n    for (var j = 0; j < current.servers.length; j++) {\n      if (current.servers[j].address.toLowerCase() === previous.servers[i].address.toLowerCase()) {\n        found = true;\n        break;\n      }\n    }\n\n    if (!found) {\n      // Add to the diff\n      diff.servers.push({\n        address: previous.servers[i].address,\n        from: previous.servers[i].type,\n        to: 'Unknown'\n      });\n    }\n  }\n\n  // Check if there are any severs that don't exist\n  for (j = 0; j < current.servers.length; j++) {\n    found = false;\n\n    // Go over all the previous servers\n    for (i = 0; i < previous.servers.length; i++) {\n      if (previous.servers[i].address.toLowerCase() === current.servers[j].address.toLowerCase()) {\n        found = true;\n        break;\n      }\n    }\n\n    // Add the server to the diff\n    if (!found) {\n      diff.servers.push({\n        address: current.servers[j].address,\n        from: 'Unknown',\n        to: current.servers[j].type\n      });\n    }\n  }\n\n  // Got through all the servers\n  for (i = 0; i < previous.servers.length; i++) {\n    var prevServer = previous.servers[i];\n\n    // Go through all current servers\n    for (j = 0; j < current.servers.length; j++) {\n      var currServer = current.servers[j];\n\n      // Matching server\n      if (prevServer.address.toLowerCase() === currServer.address.toLowerCase()) {\n        // We had a change in state\n        if (prevServer.type !== currServer.type) {\n          diff.servers.push({\n            address: prevServer.address,\n            from: prevServer.type,\n            to: currServer.type\n          });\n        }\n      }\n    }\n  }\n\n  // Return difference\n  return diff;\n}\n\n/**\n * Shared function to determine clusterTime for a given topology\n *\n * @param {*} topology\n * @param {*} clusterTime\n */\nfunction resolveClusterTime(topology, $clusterTime) {\n  if (topology.clusterTime == null) {\n    topology.clusterTime = $clusterTime;\n  } else {\n    if ($clusterTime.clusterTime.greaterThan(topology.clusterTime.clusterTime)) {\n      topology.clusterTime = $clusterTime;\n    }\n  }\n}\n\n// NOTE: this is a temporary move until the topologies can be more formally refactored\n//       to share code.\nconst SessionMixins = {\n  endSessions: function(sessions, callback) {\n    if (!Array.isArray(sessions)) {\n      sessions = [sessions];\n    }\n\n    // TODO:\n    //   When connected to a sharded cluster the endSessions command\n    //   can be sent to any mongos. When connected to a replica set the\n    //   endSessions command MUST be sent to the primary if the primary\n    //   is available, otherwise it MUST be sent to any available secondary.\n    //   Is it enough to use: ReadPreference.primaryPreferred ?\n    this.command(\n      'admin.$cmd',\n      { endSessions: sessions },\n      { readPreference: ReadPreference.primaryPreferred },\n      () => {\n        // intentionally ignored, per spec\n        if (typeof callback === 'function') callback();\n      }\n    );\n  }\n};\n\nfunction topologyType(topology) {\n  if (topology.description) {\n    return topology.description.type;\n  }\n\n  if (topology.type === 'mongos') {\n    return TopologyType.Sharded;\n  } else if (topology.type === 'replset') {\n    return TopologyType.ReplicaSetWithPrimary;\n  }\n\n  return TopologyType.Single;\n}\n\nconst RETRYABLE_WIRE_VERSION = 6;\n\n/**\n * Determines whether the provided topology supports retryable writes\n *\n * @param {Mongos|Replset} topology\n */\nconst isRetryableWritesSupported = function(topology) {\n  const maxWireVersion = topology.lastIsMaster().maxWireVersion;\n  if (maxWireVersion < RETRYABLE_WIRE_VERSION) {\n    return false;\n  }\n\n  if (!topology.logicalSessionTimeoutMinutes) {\n    return false;\n  }\n\n  if (topologyType(topology) === TopologyType.Single) {\n    return false;\n  }\n\n  return true;\n};\n\nconst MMAPv1_RETRY_WRITES_ERROR_MESSAGE =\n  'This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string.';\n\nfunction getMMAPError(err) {\n  if (err.code !== MMAPv1_RETRY_WRITES_ERROR_CODE || !err.errmsg.includes('Transaction numbers')) {\n    return err;\n  }\n\n  // According to the retryable writes spec, we must replace the error message in this case.\n  // We need to replace err.message so the thrown message is correct and we need to replace err.errmsg to meet the spec requirement.\n  const newErr = new MongoError({\n    message: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n    errmsg: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n    originalError: err\n  });\n  return newErr;\n}\n\nmodule.exports.SessionMixins = SessionMixins;\nmodule.exports.resolveClusterTime = resolveClusterTime;\nmodule.exports.inquireServerState = inquireServerState;\nmodule.exports.getTopologyType = getTopologyType;\nmodule.exports.emitServerDescriptionChanged = emitServerDescriptionChanged;\nmodule.exports.emitTopologyDescriptionChanged = emitTopologyDescriptionChanged;\nmodule.exports.cloneOptions = cloneOptions;\nmodule.exports.createClientInfo = createClientInfo;\nmodule.exports.createCompressionInfo = createCompressionInfo;\nmodule.exports.clone = clone;\nmodule.exports.diff = diff;\nmodule.exports.Interval = Interval;\nmodule.exports.Timeout = Timeout;\nmodule.exports.isRetryableWritesSupported = isRetryableWritesSupported;\nmodule.exports.getMMAPError = getMMAPError;\nmodule.exports.topologyType = topologyType;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///59\n");

/***/ }),
/* 60 */
/***/ (function(module, exports) {

eval("module.exports = require(\"os\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0L2V4dGVybmFsIFwib3NcIj9iNzE4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjYwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwib3NcIik7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///60\n");

/***/ }),
/* 61 */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"_args\\\":[[\\\"mongodb@3.3.3\\\",\\\"/Users/modetojoy/work/mongodb-js/mongosh\\\"]],\\\"_from\\\":\\\"mongodb@3.3.3\\\",\\\"_id\\\":\\\"mongodb@3.3.3\\\",\\\"_inBundle\\\":false,\\\"_integrity\\\":\\\"sha512-MdRnoOjstmnrKJsK8PY0PjP6fyF/SBS4R8coxmhsfEU7tQ46/J6j+aSHF2n4c2/H8B+Hc/Klbfp8vggZfI0mmA==\\\",\\\"_location\\\":\\\"/mongodb\\\",\\\"_phantomChildren\\\":{},\\\"_requested\\\":{\\\"type\\\":\\\"version\\\",\\\"registry\\\":true,\\\"raw\\\":\\\"mongodb@3.3.3\\\",\\\"name\\\":\\\"mongodb\\\",\\\"escapedName\\\":\\\"mongodb\\\",\\\"rawSpec\\\":\\\"3.3.3\\\",\\\"saveSpec\\\":null,\\\"fetchSpec\\\":\\\"3.3.3\\\"},\\\"_requiredBy\\\":[\\\"/mongodbsh-transport\\\"],\\\"_resolved\\\":\\\"https://registry.npmjs.org/mongodb/-/mongodb-3.3.3.tgz\\\",\\\"_spec\\\":\\\"3.3.3\\\",\\\"_where\\\":\\\"/Users/modetojoy/work/mongodb-js/mongosh\\\",\\\"bugs\\\":{\\\"url\\\":\\\"https://github.com/mongodb/node-mongodb-native/issues\\\"},\\\"dependencies\\\":{\\\"bson\\\":\\\"^1.1.1\\\",\\\"require_optional\\\":\\\"^1.0.1\\\",\\\"safe-buffer\\\":\\\"^5.1.2\\\",\\\"saslprep\\\":\\\"^1.0.0\\\"},\\\"description\\\":\\\"The official MongoDB driver for Node.js\\\",\\\"devDependencies\\\":{\\\"bluebird\\\":\\\"3.5.0\\\",\\\"chai\\\":\\\"^4.1.1\\\",\\\"chai-subset\\\":\\\"^1.6.0\\\",\\\"chalk\\\":\\\"^2.4.2\\\",\\\"co\\\":\\\"4.6.0\\\",\\\"coveralls\\\":\\\"^2.11.6\\\",\\\"eslint\\\":\\\"^4.5.0\\\",\\\"eslint-plugin-prettier\\\":\\\"^2.2.0\\\",\\\"istanbul\\\":\\\"^0.4.5\\\",\\\"jsdoc\\\":\\\"3.5.5\\\",\\\"lodash.camelcase\\\":\\\"^4.3.0\\\",\\\"mocha\\\":\\\"5.2.0\\\",\\\"mocha-sinon\\\":\\\"^2.1.0\\\",\\\"mongodb-extjson\\\":\\\"^2.1.1\\\",\\\"mongodb-mock-server\\\":\\\"^1.0.1\\\",\\\"prettier\\\":\\\"~1.12.0\\\",\\\"semver\\\":\\\"^5.5.0\\\",\\\"sinon\\\":\\\"^4.3.0\\\",\\\"sinon-chai\\\":\\\"^3.2.0\\\",\\\"snappy\\\":\\\"^6.1.2\\\",\\\"standard-version\\\":\\\"^4.4.0\\\",\\\"worker-farm\\\":\\\"^1.5.0\\\",\\\"wtfnode\\\":\\\"^0.8.0\\\"},\\\"engines\\\":{\\\"node\\\":\\\">=4\\\"},\\\"files\\\":[\\\"index.js\\\",\\\"lib\\\"],\\\"homepage\\\":\\\"https://github.com/mongodb/node-mongodb-native\\\",\\\"keywords\\\":[\\\"mongodb\\\",\\\"driver\\\",\\\"official\\\"],\\\"license\\\":\\\"Apache-2.0\\\",\\\"main\\\":\\\"index.js\\\",\\\"name\\\":\\\"mongodb\\\",\\\"optionalDependencies\\\":{\\\"saslprep\\\":\\\"^1.0.0\\\"},\\\"peerOptionalDependencies\\\":{\\\"kerberos\\\":\\\"^1.1.0\\\",\\\"mongodb-client-encryption\\\":\\\"^1.0.0\\\",\\\"mongodb-extjson\\\":\\\"^2.1.2\\\",\\\"snappy\\\":\\\"^6.1.1\\\",\\\"bson-ext\\\":\\\"^2.0.0\\\"},\\\"repository\\\":{\\\"type\\\":\\\"git\\\",\\\"url\\\":\\\"git+ssh://git@github.com/mongodb/node-mongodb-native.git\\\"},\\\"scripts\\\":{\\\"atlas\\\":\\\"node ./test/atlas_connectivity_tests.js\\\",\\\"bench\\\":\\\"node test/driverBench/\\\",\\\"coverage\\\":\\\"istanbul cover mongodb-test-runner -- -t 60000 test/core test/unit test/functional\\\",\\\"format\\\":\\\"prettier --print-width 100 --tab-width 2 --single-quote --write 'test/**/*.js' 'lib/**/*.js'\\\",\\\"generate-evergreen\\\":\\\"node .evergreen/generate_evergreen_tasks.js\\\",\\\"lint\\\":\\\"eslint lib test\\\",\\\"release\\\":\\\"standard-version -i HISTORY.md\\\",\\\"test\\\":\\\"npm run lint && mocha --recursive test/functional test/unit test/core\\\"},\\\"version\\\":\\\"3.3.3\\\"}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI2MS5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///61\n");

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst MongoCR = __webpack_require__(63);\nconst X509 = __webpack_require__(65);\nconst Plain = __webpack_require__(66);\nconst GSSAPI = __webpack_require__(67);\nconst SSPI = __webpack_require__(68);\nconst ScramSHA1 = __webpack_require__(69).ScramSHA1;\nconst ScramSHA256 = __webpack_require__(69).ScramSHA256;\n\n/**\n * Returns the default authentication providers.\n *\n * @param {BSON} bson Bson definition\n * @returns {Object} a mapping of auth names to auth types\n */\nfunction defaultAuthProviders(bson) {\n  return {\n    mongocr: new MongoCR(bson),\n    x509: new X509(bson),\n    plain: new Plain(bson),\n    gssapi: new GSSAPI(bson),\n    sspi: new SSPI(bson),\n    'scram-sha-1': new ScramSHA1(bson),\n    'scram-sha-256': new ScramSHA256(bson)\n  };\n}\n\nmodule.exports = { defaultAuthProviders };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NvcmUvYXV0aC9kZWZhdWx0QXV0aFByb3ZpZGVycy5qcz83MGYyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGdCQUFnQixtQkFBTyxDQUFDLEVBQVc7QUFDbkMsYUFBYSxtQkFBTyxDQUFDLEVBQVE7QUFDN0IsY0FBYyxtQkFBTyxDQUFDLEVBQVM7QUFDL0IsZUFBZSxtQkFBTyxDQUFDLEVBQVU7QUFDakMsYUFBYSxtQkFBTyxDQUFDLEVBQVE7QUFDN0Isa0JBQWtCLG1CQUFPLENBQUMsRUFBUztBQUNuQyxvQkFBb0IsbUJBQU8sQ0FBQyxFQUFTOztBQUVyQztBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IiLCJmaWxlIjoiNjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IE1vbmdvQ1IgPSByZXF1aXJlKCcuL21vbmdvY3InKTtcbmNvbnN0IFg1MDkgPSByZXF1aXJlKCcuL3g1MDknKTtcbmNvbnN0IFBsYWluID0gcmVxdWlyZSgnLi9wbGFpbicpO1xuY29uc3QgR1NTQVBJID0gcmVxdWlyZSgnLi9nc3NhcGknKTtcbmNvbnN0IFNTUEkgPSByZXF1aXJlKCcuL3NzcGknKTtcbmNvbnN0IFNjcmFtU0hBMSA9IHJlcXVpcmUoJy4vc2NyYW0nKS5TY3JhbVNIQTE7XG5jb25zdCBTY3JhbVNIQTI1NiA9IHJlcXVpcmUoJy4vc2NyYW0nKS5TY3JhbVNIQTI1NjtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkZWZhdWx0IGF1dGhlbnRpY2F0aW9uIHByb3ZpZGVycy5cbiAqXG4gKiBAcGFyYW0ge0JTT059IGJzb24gQnNvbiBkZWZpbml0aW9uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBhIG1hcHBpbmcgb2YgYXV0aCBuYW1lcyB0byBhdXRoIHR5cGVzXG4gKi9cbmZ1bmN0aW9uIGRlZmF1bHRBdXRoUHJvdmlkZXJzKGJzb24pIHtcbiAgcmV0dXJuIHtcbiAgICBtb25nb2NyOiBuZXcgTW9uZ29DUihic29uKSxcbiAgICB4NTA5OiBuZXcgWDUwOShic29uKSxcbiAgICBwbGFpbjogbmV3IFBsYWluKGJzb24pLFxuICAgIGdzc2FwaTogbmV3IEdTU0FQSShic29uKSxcbiAgICBzc3BpOiBuZXcgU1NQSShic29uKSxcbiAgICAnc2NyYW0tc2hhLTEnOiBuZXcgU2NyYW1TSEExKGJzb24pLFxuICAgICdzY3JhbS1zaGEtMjU2JzogbmV3IFNjcmFtU0hBMjU2KGJzb24pXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBkZWZhdWx0QXV0aFByb3ZpZGVycyB9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///62\n");

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst crypto = __webpack_require__(36);\nconst AuthProvider = __webpack_require__(64).AuthProvider;\n\n/**\n * Creates a new MongoCR authentication mechanism\n *\n * @extends AuthProvider\n */\nclass MongoCR extends AuthProvider {\n  /**\n   * Implementation of authentication for a single connection\n   * @override\n   */\n  _authenticateSingleConnection(sendAuthCommand, connection, credentials, callback) {\n    const username = credentials.username;\n    const password = credentials.password;\n    const source = credentials.source;\n\n    sendAuthCommand(connection, `${source}.$cmd`, { getnonce: 1 }, (err, r) => {\n      let nonce = null;\n      let key = null;\n\n      // Get nonce\n      if (err == null) {\n        nonce = r.nonce;\n        // Use node md5 generator\n        let md5 = crypto.createHash('md5');\n        // Generate keys used for authentication\n        md5.update(username + ':mongo:' + password, 'utf8');\n        const hash_password = md5.digest('hex');\n        // Final key\n        md5 = crypto.createHash('md5');\n        md5.update(nonce + username + hash_password, 'utf8');\n        key = md5.digest('hex');\n      }\n\n      const authenticateCommand = {\n        authenticate: 1,\n        user: username,\n        nonce,\n        key\n      };\n\n      sendAuthCommand(connection, `${source}.$cmd`, authenticateCommand, callback);\n    });\n  }\n}\n\nmodule.exports = MongoCR;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NvcmUvYXV0aC9tb25nb2NyLmpzP2JhMWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZUFBZSxtQkFBTyxDQUFDLEVBQVE7QUFDL0IscUJBQXFCLG1CQUFPLENBQUMsRUFBaUI7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUNBQW1DLE9BQU8sU0FBUyxjQUFjO0FBQ2pFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFDQUFxQyxPQUFPO0FBQzVDLEtBQUs7QUFDTDtBQUNBOztBQUVBIiwiZmlsZSI6IjYzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbmNvbnN0IEF1dGhQcm92aWRlciA9IHJlcXVpcmUoJy4vYXV0aF9wcm92aWRlcicpLkF1dGhQcm92aWRlcjtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IE1vbmdvQ1IgYXV0aGVudGljYXRpb24gbWVjaGFuaXNtXG4gKlxuICogQGV4dGVuZHMgQXV0aFByb3ZpZGVyXG4gKi9cbmNsYXNzIE1vbmdvQ1IgZXh0ZW5kcyBBdXRoUHJvdmlkZXIge1xuICAvKipcbiAgICogSW1wbGVtZW50YXRpb24gb2YgYXV0aGVudGljYXRpb24gZm9yIGEgc2luZ2xlIGNvbm5lY3Rpb25cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBfYXV0aGVudGljYXRlU2luZ2xlQ29ubmVjdGlvbihzZW5kQXV0aENvbW1hbmQsIGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHVzZXJuYW1lID0gY3JlZGVudGlhbHMudXNlcm5hbWU7XG4gICAgY29uc3QgcGFzc3dvcmQgPSBjcmVkZW50aWFscy5wYXNzd29yZDtcbiAgICBjb25zdCBzb3VyY2UgPSBjcmVkZW50aWFscy5zb3VyY2U7XG5cbiAgICBzZW5kQXV0aENvbW1hbmQoY29ubmVjdGlvbiwgYCR7c291cmNlfS4kY21kYCwgeyBnZXRub25jZTogMSB9LCAoZXJyLCByKSA9PiB7XG4gICAgICBsZXQgbm9uY2UgPSBudWxsO1xuICAgICAgbGV0IGtleSA9IG51bGw7XG5cbiAgICAgIC8vIEdldCBub25jZVxuICAgICAgaWYgKGVyciA9PSBudWxsKSB7XG4gICAgICAgIG5vbmNlID0gci5ub25jZTtcbiAgICAgICAgLy8gVXNlIG5vZGUgbWQ1IGdlbmVyYXRvclxuICAgICAgICBsZXQgbWQ1ID0gY3J5cHRvLmNyZWF0ZUhhc2goJ21kNScpO1xuICAgICAgICAvLyBHZW5lcmF0ZSBrZXlzIHVzZWQgZm9yIGF1dGhlbnRpY2F0aW9uXG4gICAgICAgIG1kNS51cGRhdGUodXNlcm5hbWUgKyAnOm1vbmdvOicgKyBwYXNzd29yZCwgJ3V0ZjgnKTtcbiAgICAgICAgY29uc3QgaGFzaF9wYXNzd29yZCA9IG1kNS5kaWdlc3QoJ2hleCcpO1xuICAgICAgICAvLyBGaW5hbCBrZXlcbiAgICAgICAgbWQ1ID0gY3J5cHRvLmNyZWF0ZUhhc2goJ21kNScpO1xuICAgICAgICBtZDUudXBkYXRlKG5vbmNlICsgdXNlcm5hbWUgKyBoYXNoX3Bhc3N3b3JkLCAndXRmOCcpO1xuICAgICAgICBrZXkgPSBtZDUuZGlnZXN0KCdoZXgnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgYXV0aGVudGljYXRlQ29tbWFuZCA9IHtcbiAgICAgICAgYXV0aGVudGljYXRlOiAxLFxuICAgICAgICB1c2VyOiB1c2VybmFtZSxcbiAgICAgICAgbm9uY2UsXG4gICAgICAgIGtleVxuICAgICAgfTtcblxuICAgICAgc2VuZEF1dGhDb21tYW5kKGNvbm5lY3Rpb24sIGAke3NvdXJjZX0uJGNtZGAsIGF1dGhlbnRpY2F0ZUNvbW1hbmQsIGNhbGxiYWNrKTtcbiAgICB9KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1vbmdvQ1I7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///63\n");

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst MongoError = __webpack_require__(37).MongoError;\n\n/**\n * Creates a new AuthProvider, which dictates how to authenticate for a given\n * mechanism.\n * @class\n */\nclass AuthProvider {\n  constructor(bson) {\n    this.bson = bson;\n    this.authStore = [];\n  }\n\n  /**\n   * Authenticate\n   * @method\n   * @param {SendAuthCommand} sendAuthCommand Writes an auth command directly to a specific connection\n   * @param {Connection[]} connections Connections to authenticate using this authenticator\n   * @param {MongoCredentials} credentials Authentication credentials\n   * @param {authResultCallback} callback The callback to return the result from the authentication\n   */\n  auth(sendAuthCommand, connections, credentials, callback) {\n    // Total connections\n    let count = connections.length;\n\n    if (count === 0) {\n      callback(null, null);\n      return;\n    }\n\n    // Valid connections\n    let numberOfValidConnections = 0;\n    let errorObject = null;\n\n    const execute = connection => {\n      this._authenticateSingleConnection(sendAuthCommand, connection, credentials, (err, r) => {\n        // Adjust count\n        count = count - 1;\n\n        // If we have an error\n        if (err) {\n          errorObject = new MongoError(err);\n        } else if (r && (r.$err || r.errmsg)) {\n          errorObject = new MongoError(r);\n        } else {\n          numberOfValidConnections = numberOfValidConnections + 1;\n        }\n\n        // Still authenticating against other connections.\n        if (count !== 0) {\n          return;\n        }\n\n        // We have authenticated all connections\n        if (numberOfValidConnections > 0) {\n          // Store the auth details\n          this.addCredentials(credentials);\n          // Return correct authentication\n          callback(null, true);\n        } else {\n          if (errorObject == null) {\n            errorObject = new MongoError(`failed to authenticate using ${credentials.mechanism}`);\n          }\n          callback(errorObject, false);\n        }\n      });\n    };\n\n    const executeInNextTick = _connection => process.nextTick(() => execute(_connection));\n\n    // For each connection we need to authenticate\n    while (connections.length > 0) {\n      executeInNextTick(connections.shift());\n    }\n  }\n\n  /**\n   * Implementation of a single connection authenticating. Is meant to be overridden.\n   * Will error if called directly\n   * @ignore\n   */\n  _authenticateSingleConnection(/*sendAuthCommand, connection, credentials, callback*/) {\n    throw new Error('_authenticateSingleConnection must be overridden');\n  }\n\n  /**\n   * Adds credentials to store only if it does not exist\n   * @param {MongoCredentials} credentials credentials to add to store\n   */\n  addCredentials(credentials) {\n    const found = this.authStore.some(cred => cred.equals(credentials));\n\n    if (!found) {\n      this.authStore.push(credentials);\n    }\n  }\n\n  /**\n   * Re authenticate pool\n   * @method\n   * @param {SendAuthCommand} sendAuthCommand Writes an auth command directly to a specific connection\n   * @param {Connection[]} connections Connections to authenticate using this authenticator\n   * @param {authResultCallback} callback The callback to return the result from the authentication\n   */\n  reauthenticate(sendAuthCommand, connections, callback) {\n    const authStore = this.authStore.slice(0);\n    let count = authStore.length;\n    if (count === 0) {\n      return callback(null, null);\n    }\n\n    for (let i = 0; i < authStore.length; i++) {\n      this.auth(sendAuthCommand, connections, authStore[i], function(err) {\n        count = count - 1;\n        if (count === 0) {\n          callback(err, null);\n        }\n      });\n    }\n  }\n\n  /**\n   * Remove credentials that have been previously stored in the auth provider\n   * @method\n   * @param {string} source Name of database we are removing authStore details about\n   * @return {object}\n   */\n  logout(source) {\n    this.authStore = this.authStore.filter(credentials => credentials.source !== source);\n  }\n}\n\n/**\n * A function that writes authentication commands to a specific connection\n * @callback SendAuthCommand\n * @param {Connection} connection The connection to write to\n * @param {Command} command A command with a toBin method that can be written to a connection\n * @param {AuthWriteCallback} callback Callback called when command response is received\n */\n\n/**\n * A callback for a specific auth command\n * @callback AuthWriteCallback\n * @param {Error} err If command failed, an error from the server\n * @param {object} r The response from the server\n */\n\n/**\n * This is a result from an authentication strategy\n *\n * @callback authResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {boolean} result The result of the authentication process\n */\n\nmodule.exports = { AuthProvider };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///64\n");

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst AuthProvider = __webpack_require__(64).AuthProvider;\n\n/**\n * Creates a new X509 authentication mechanism\n * @class\n * @extends AuthProvider\n */\nclass X509 extends AuthProvider {\n  /**\n   * Implementation of authentication for a single connection\n   * @override\n   */\n  _authenticateSingleConnection(sendAuthCommand, connection, credentials, callback) {\n    const username = credentials.username;\n    const command = { authenticate: 1, mechanism: 'MONGODB-X509' };\n    if (username) {\n      command.user = username;\n    }\n\n    sendAuthCommand(connection, '$external.$cmd', command, callback);\n  }\n}\n\nmodule.exports = X509;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NvcmUvYXV0aC94NTA5LmpzPzUxMzQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIscUJBQXFCLG1CQUFPLENBQUMsRUFBaUI7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjY1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBBdXRoUHJvdmlkZXIgPSByZXF1aXJlKCcuL2F1dGhfcHJvdmlkZXInKS5BdXRoUHJvdmlkZXI7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBYNTA5IGF1dGhlbnRpY2F0aW9uIG1lY2hhbmlzbVxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBBdXRoUHJvdmlkZXJcbiAqL1xuY2xhc3MgWDUwOSBleHRlbmRzIEF1dGhQcm92aWRlciB7XG4gIC8qKlxuICAgKiBJbXBsZW1lbnRhdGlvbiBvZiBhdXRoZW50aWNhdGlvbiBmb3IgYSBzaW5nbGUgY29ubmVjdGlvblxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIF9hdXRoZW50aWNhdGVTaW5nbGVDb25uZWN0aW9uKHNlbmRBdXRoQ29tbWFuZCwgY29ubmVjdGlvbiwgY3JlZGVudGlhbHMsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgdXNlcm5hbWUgPSBjcmVkZW50aWFscy51c2VybmFtZTtcbiAgICBjb25zdCBjb21tYW5kID0geyBhdXRoZW50aWNhdGU6IDEsIG1lY2hhbmlzbTogJ01PTkdPREItWDUwOScgfTtcbiAgICBpZiAodXNlcm5hbWUpIHtcbiAgICAgIGNvbW1hbmQudXNlciA9IHVzZXJuYW1lO1xuICAgIH1cblxuICAgIHNlbmRBdXRoQ29tbWFuZChjb25uZWN0aW9uLCAnJGV4dGVybmFsLiRjbWQnLCBjb21tYW5kLCBjYWxsYmFjayk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBYNTA5O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///65\n");

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst retrieveBSON = __webpack_require__(40).retrieveBSON;\nconst AuthProvider = __webpack_require__(64).AuthProvider;\n\n// TODO: can we get the Binary type from this.bson instead?\nconst BSON = retrieveBSON();\nconst Binary = BSON.Binary;\n\n/**\n * Creates a new Plain authentication mechanism\n *\n * @extends AuthProvider\n */\nclass Plain extends AuthProvider {\n  /**\n   * Implementation of authentication for a single connection\n   * @override\n   */\n  _authenticateSingleConnection(sendAuthCommand, connection, credentials, callback) {\n    const username = credentials.username;\n    const password = credentials.password;\n    const payload = new Binary(`\\x00${username}\\x00${password}`);\n    const command = {\n      saslStart: 1,\n      mechanism: 'PLAIN',\n      payload: payload,\n      autoAuthorize: 1\n    };\n\n    sendAuthCommand(connection, '$external.$cmd', command, callback);\n  }\n}\n\nmodule.exports = Plain;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NvcmUvYXV0aC9wbGFpbi5qcz81MWY2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLHFCQUFxQixtQkFBTyxDQUFDLEVBQXFCO0FBQ2xELHFCQUFxQixtQkFBTyxDQUFDLEVBQWlCOztBQUU5QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsU0FBUyxNQUFNLFNBQVM7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI2Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcmV0cmlldmVCU09OID0gcmVxdWlyZSgnLi4vY29ubmVjdGlvbi91dGlscycpLnJldHJpZXZlQlNPTjtcbmNvbnN0IEF1dGhQcm92aWRlciA9IHJlcXVpcmUoJy4vYXV0aF9wcm92aWRlcicpLkF1dGhQcm92aWRlcjtcblxuLy8gVE9ETzogY2FuIHdlIGdldCB0aGUgQmluYXJ5IHR5cGUgZnJvbSB0aGlzLmJzb24gaW5zdGVhZD9cbmNvbnN0IEJTT04gPSByZXRyaWV2ZUJTT04oKTtcbmNvbnN0IEJpbmFyeSA9IEJTT04uQmluYXJ5O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgUGxhaW4gYXV0aGVudGljYXRpb24gbWVjaGFuaXNtXG4gKlxuICogQGV4dGVuZHMgQXV0aFByb3ZpZGVyXG4gKi9cbmNsYXNzIFBsYWluIGV4dGVuZHMgQXV0aFByb3ZpZGVyIHtcbiAgLyoqXG4gICAqIEltcGxlbWVudGF0aW9uIG9mIGF1dGhlbnRpY2F0aW9uIGZvciBhIHNpbmdsZSBjb25uZWN0aW9uXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgX2F1dGhlbnRpY2F0ZVNpbmdsZUNvbm5lY3Rpb24oc2VuZEF1dGhDb21tYW5kLCBjb25uZWN0aW9uLCBjcmVkZW50aWFscywgY2FsbGJhY2spIHtcbiAgICBjb25zdCB1c2VybmFtZSA9IGNyZWRlbnRpYWxzLnVzZXJuYW1lO1xuICAgIGNvbnN0IHBhc3N3b3JkID0gY3JlZGVudGlhbHMucGFzc3dvcmQ7XG4gICAgY29uc3QgcGF5bG9hZCA9IG5ldyBCaW5hcnkoYFxceDAwJHt1c2VybmFtZX1cXHgwMCR7cGFzc3dvcmR9YCk7XG4gICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgIHNhc2xTdGFydDogMSxcbiAgICAgIG1lY2hhbmlzbTogJ1BMQUlOJyxcbiAgICAgIHBheWxvYWQ6IHBheWxvYWQsXG4gICAgICBhdXRvQXV0aG9yaXplOiAxXG4gICAgfTtcblxuICAgIHNlbmRBdXRoQ29tbWFuZChjb25uZWN0aW9uLCAnJGV4dGVybmFsLiRjbWQnLCBjb21tYW5kLCBjYWxsYmFjayk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQbGFpbjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///66\n");

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst AuthProvider = __webpack_require__(64).AuthProvider;\nconst retrieveKerberos = __webpack_require__(35).retrieveKerberos;\nlet kerberos;\n\n/**\n * Creates a new GSSAPI authentication mechanism\n * @class\n * @extends AuthProvider\n */\nclass GSSAPI extends AuthProvider {\n  /**\n   * Implementation of authentication for a single connection\n   * @override\n   */\n  _authenticateSingleConnection(sendAuthCommand, connection, credentials, callback) {\n    const source = credentials.source;\n    const username = credentials.username;\n    const password = credentials.password;\n    const mechanismProperties = credentials.mechanismProperties;\n    const gssapiServiceName =\n      mechanismProperties['gssapiservicename'] ||\n      mechanismProperties['gssapiServiceName'] ||\n      'mongodb';\n\n    GSSAPIInitialize(\n      this,\n      kerberos.processes.MongoAuthProcess,\n      source,\n      username,\n      password,\n      source,\n      gssapiServiceName,\n      sendAuthCommand,\n      connection,\n      mechanismProperties,\n      callback\n    );\n  }\n\n  /**\n   * Authenticate\n   * @override\n   * @method\n   */\n  auth(sendAuthCommand, connections, credentials, callback) {\n    if (kerberos == null) {\n      try {\n        kerberos = retrieveKerberos();\n      } catch (e) {\n        return callback(e, null);\n      }\n    }\n\n    super.auth(sendAuthCommand, connections, credentials, callback);\n  }\n}\n\n//\n// Initialize step\nvar GSSAPIInitialize = function(\n  self,\n  MongoAuthProcess,\n  db,\n  username,\n  password,\n  authdb,\n  gssapiServiceName,\n  sendAuthCommand,\n  connection,\n  options,\n  callback\n) {\n  // Create authenticator\n  var mongo_auth_process = new MongoAuthProcess(\n    connection.host,\n    connection.port,\n    gssapiServiceName,\n    options\n  );\n\n  // Perform initialization\n  mongo_auth_process.init(username, password, function(err) {\n    if (err) return callback(err, false);\n\n    // Perform the first step\n    mongo_auth_process.transition('', function(err, payload) {\n      if (err) return callback(err, false);\n\n      // Call the next db step\n      MongoDBGSSAPIFirstStep(\n        self,\n        mongo_auth_process,\n        payload,\n        db,\n        username,\n        password,\n        authdb,\n        sendAuthCommand,\n        connection,\n        callback\n      );\n    });\n  });\n};\n\n//\n// Perform first step against mongodb\nvar MongoDBGSSAPIFirstStep = function(\n  self,\n  mongo_auth_process,\n  payload,\n  db,\n  username,\n  password,\n  authdb,\n  sendAuthCommand,\n  connection,\n  callback\n) {\n  // Build the sasl start command\n  var command = {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload: payload,\n    autoAuthorize: 1\n  };\n\n  // Write the commmand on the connection\n  sendAuthCommand(connection, '$external.$cmd', command, (err, doc) => {\n    if (err) return callback(err, false);\n    // Execute mongodb transition\n    mongo_auth_process.transition(doc.payload, function(err, payload) {\n      if (err) return callback(err, false);\n\n      // MongoDB API Second Step\n      MongoDBGSSAPISecondStep(\n        self,\n        mongo_auth_process,\n        payload,\n        doc,\n        db,\n        username,\n        password,\n        authdb,\n        sendAuthCommand,\n        connection,\n        callback\n      );\n    });\n  });\n};\n\n//\n// Perform first step against mongodb\nvar MongoDBGSSAPISecondStep = function(\n  self,\n  mongo_auth_process,\n  payload,\n  doc,\n  db,\n  username,\n  password,\n  authdb,\n  sendAuthCommand,\n  connection,\n  callback\n) {\n  // Build Authentication command to send to MongoDB\n  var command = {\n    saslContinue: 1,\n    conversationId: doc.conversationId,\n    payload: payload\n  };\n\n  // Execute the command\n  // Write the commmand on the connection\n  sendAuthCommand(connection, '$external.$cmd', command, (err, doc) => {\n    if (err) return callback(err, false);\n    // Call next transition for kerberos\n    mongo_auth_process.transition(doc.payload, function(err, payload) {\n      if (err) return callback(err, false);\n\n      // Call the last and third step\n      MongoDBGSSAPIThirdStep(\n        self,\n        mongo_auth_process,\n        payload,\n        doc,\n        db,\n        username,\n        password,\n        authdb,\n        sendAuthCommand,\n        connection,\n        callback\n      );\n    });\n  });\n};\n\nvar MongoDBGSSAPIThirdStep = function(\n  self,\n  mongo_auth_process,\n  payload,\n  doc,\n  db,\n  username,\n  password,\n  authdb,\n  sendAuthCommand,\n  connection,\n  callback\n) {\n  // Build final command\n  var command = {\n    saslContinue: 1,\n    conversationId: doc.conversationId,\n    payload: payload\n  };\n\n  // Execute the command\n  sendAuthCommand(connection, '$external.$cmd', command, (err, r) => {\n    if (err) return callback(err, false);\n    mongo_auth_process.transition(null, function(err) {\n      if (err) return callback(err, null);\n      callback(null, r);\n    });\n  });\n};\n\n/**\n * This is a result from a authentication strategy\n *\n * @callback authResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {boolean} result The result of the authentication process\n */\n\nmodule.exports = GSSAPI;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///67\n");

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst AuthProvider = __webpack_require__(64).AuthProvider;\nconst retrieveKerberos = __webpack_require__(35).retrieveKerberos;\nlet kerberos;\n\n/**\n * Creates a new SSPI authentication mechanism\n * @class\n * @extends AuthProvider\n */\nclass SSPI extends AuthProvider {\n  /**\n   * Implementation of authentication for a single connection\n   * @override\n   */\n  _authenticateSingleConnection(sendAuthCommand, connection, credentials, callback) {\n    // TODO: Destructure this\n    const username = credentials.username;\n    const password = credentials.password;\n    const mechanismProperties = credentials.mechanismProperties;\n    const gssapiServiceName =\n      mechanismProperties['gssapiservicename'] ||\n      mechanismProperties['gssapiServiceName'] ||\n      'mongodb';\n\n    SSIPAuthenticate(\n      this,\n      kerberos.processes.MongoAuthProcess,\n      username,\n      password,\n      gssapiServiceName,\n      sendAuthCommand,\n      connection,\n      mechanismProperties,\n      callback\n    );\n  }\n\n  /**\n   * Authenticate\n   * @override\n   * @method\n   */\n  auth(sendAuthCommand, connections, credentials, callback) {\n    if (kerberos == null) {\n      try {\n        kerberos = retrieveKerberos();\n      } catch (e) {\n        return callback(e, null);\n      }\n    }\n\n    super.auth(sendAuthCommand, connections, credentials, callback);\n  }\n}\n\nfunction SSIPAuthenticate(\n  self,\n  MongoAuthProcess,\n  username,\n  password,\n  gssapiServiceName,\n  sendAuthCommand,\n  connection,\n  options,\n  callback\n) {\n  const authProcess = new MongoAuthProcess(\n    connection.host,\n    connection.port,\n    gssapiServiceName,\n    options\n  );\n\n  function authCommand(command, authCb) {\n    sendAuthCommand(connection, '$external.$cmd', command, authCb);\n  }\n\n  authProcess.init(username, password, err => {\n    if (err) return callback(err, false);\n\n    authProcess.transition('', (err, payload) => {\n      if (err) return callback(err, false);\n\n      const command = {\n        saslStart: 1,\n        mechanism: 'GSSAPI',\n        payload,\n        autoAuthorize: 1\n      };\n\n      authCommand(command, (err, doc) => {\n        if (err) return callback(err, false);\n\n        authProcess.transition(doc.payload, (err, payload) => {\n          if (err) return callback(err, false);\n          const command = {\n            saslContinue: 1,\n            conversationId: doc.conversationId,\n            payload\n          };\n\n          authCommand(command, (err, doc) => {\n            if (err) return callback(err, false);\n\n            authProcess.transition(doc.payload, (err, payload) => {\n              if (err) return callback(err, false);\n              const command = {\n                saslContinue: 1,\n                conversationId: doc.conversationId,\n                payload\n              };\n\n              authCommand(command, (err, response) => {\n                if (err) return callback(err, false);\n\n                authProcess.transition(null, err => {\n                  if (err) return callback(err, null);\n                  callback(null, response);\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n}\n\nmodule.exports = SSPI;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NvcmUvYXV0aC9zc3BpLmpzP2QwMmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIscUJBQXFCLG1CQUFPLENBQUMsRUFBaUI7QUFDOUMseUJBQXlCLG1CQUFPLENBQUMsRUFBVTtBQUMzQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsZUFBZTtBQUNmLGFBQWE7QUFDYixXQUFXO0FBQ1gsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBIiwiZmlsZSI6IjY4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBBdXRoUHJvdmlkZXIgPSByZXF1aXJlKCcuL2F1dGhfcHJvdmlkZXInKS5BdXRoUHJvdmlkZXI7XG5jb25zdCByZXRyaWV2ZUtlcmJlcm9zID0gcmVxdWlyZSgnLi4vdXRpbHMnKS5yZXRyaWV2ZUtlcmJlcm9zO1xubGV0IGtlcmJlcm9zO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgU1NQSSBhdXRoZW50aWNhdGlvbiBtZWNoYW5pc21cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgQXV0aFByb3ZpZGVyXG4gKi9cbmNsYXNzIFNTUEkgZXh0ZW5kcyBBdXRoUHJvdmlkZXIge1xuICAvKipcbiAgICogSW1wbGVtZW50YXRpb24gb2YgYXV0aGVudGljYXRpb24gZm9yIGEgc2luZ2xlIGNvbm5lY3Rpb25cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBfYXV0aGVudGljYXRlU2luZ2xlQ29ubmVjdGlvbihzZW5kQXV0aENvbW1hbmQsIGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IERlc3RydWN0dXJlIHRoaXNcbiAgICBjb25zdCB1c2VybmFtZSA9IGNyZWRlbnRpYWxzLnVzZXJuYW1lO1xuICAgIGNvbnN0IHBhc3N3b3JkID0gY3JlZGVudGlhbHMucGFzc3dvcmQ7XG4gICAgY29uc3QgbWVjaGFuaXNtUHJvcGVydGllcyA9IGNyZWRlbnRpYWxzLm1lY2hhbmlzbVByb3BlcnRpZXM7XG4gICAgY29uc3QgZ3NzYXBpU2VydmljZU5hbWUgPVxuICAgICAgbWVjaGFuaXNtUHJvcGVydGllc1snZ3NzYXBpc2VydmljZW5hbWUnXSB8fFxuICAgICAgbWVjaGFuaXNtUHJvcGVydGllc1snZ3NzYXBpU2VydmljZU5hbWUnXSB8fFxuICAgICAgJ21vbmdvZGInO1xuXG4gICAgU1NJUEF1dGhlbnRpY2F0ZShcbiAgICAgIHRoaXMsXG4gICAgICBrZXJiZXJvcy5wcm9jZXNzZXMuTW9uZ29BdXRoUHJvY2VzcyxcbiAgICAgIHVzZXJuYW1lLFxuICAgICAgcGFzc3dvcmQsXG4gICAgICBnc3NhcGlTZXJ2aWNlTmFtZSxcbiAgICAgIHNlbmRBdXRoQ29tbWFuZCxcbiAgICAgIGNvbm5lY3Rpb24sXG4gICAgICBtZWNoYW5pc21Qcm9wZXJ0aWVzLFxuICAgICAgY2FsbGJhY2tcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEF1dGhlbnRpY2F0ZVxuICAgKiBAb3ZlcnJpZGVcbiAgICogQG1ldGhvZFxuICAgKi9cbiAgYXV0aChzZW5kQXV0aENvbW1hbmQsIGNvbm5lY3Rpb25zLCBjcmVkZW50aWFscywgY2FsbGJhY2spIHtcbiAgICBpZiAoa2VyYmVyb3MgPT0gbnVsbCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAga2VyYmVyb3MgPSByZXRyaWV2ZUtlcmJlcm9zKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlLCBudWxsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdXBlci5hdXRoKHNlbmRBdXRoQ29tbWFuZCwgY29ubmVjdGlvbnMsIGNyZWRlbnRpYWxzLCBjYWxsYmFjayk7XG4gIH1cbn1cblxuZnVuY3Rpb24gU1NJUEF1dGhlbnRpY2F0ZShcbiAgc2VsZixcbiAgTW9uZ29BdXRoUHJvY2VzcyxcbiAgdXNlcm5hbWUsXG4gIHBhc3N3b3JkLFxuICBnc3NhcGlTZXJ2aWNlTmFtZSxcbiAgc2VuZEF1dGhDb21tYW5kLFxuICBjb25uZWN0aW9uLFxuICBvcHRpb25zLFxuICBjYWxsYmFja1xuKSB7XG4gIGNvbnN0IGF1dGhQcm9jZXNzID0gbmV3IE1vbmdvQXV0aFByb2Nlc3MoXG4gICAgY29ubmVjdGlvbi5ob3N0LFxuICAgIGNvbm5lY3Rpb24ucG9ydCxcbiAgICBnc3NhcGlTZXJ2aWNlTmFtZSxcbiAgICBvcHRpb25zXG4gICk7XG5cbiAgZnVuY3Rpb24gYXV0aENvbW1hbmQoY29tbWFuZCwgYXV0aENiKSB7XG4gICAgc2VuZEF1dGhDb21tYW5kKGNvbm5lY3Rpb24sICckZXh0ZXJuYWwuJGNtZCcsIGNvbW1hbmQsIGF1dGhDYik7XG4gIH1cblxuICBhdXRoUHJvY2Vzcy5pbml0KHVzZXJuYW1lLCBwYXNzd29yZCwgZXJyID0+IHtcbiAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyLCBmYWxzZSk7XG5cbiAgICBhdXRoUHJvY2Vzcy50cmFuc2l0aW9uKCcnLCAoZXJyLCBwYXlsb2FkKSA9PiB7XG4gICAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyLCBmYWxzZSk7XG5cbiAgICAgIGNvbnN0IGNvbW1hbmQgPSB7XG4gICAgICAgIHNhc2xTdGFydDogMSxcbiAgICAgICAgbWVjaGFuaXNtOiAnR1NTQVBJJyxcbiAgICAgICAgcGF5bG9hZCxcbiAgICAgICAgYXV0b0F1dGhvcml6ZTogMVxuICAgICAgfTtcblxuICAgICAgYXV0aENvbW1hbmQoY29tbWFuZCwgKGVyciwgZG9jKSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIsIGZhbHNlKTtcblxuICAgICAgICBhdXRoUHJvY2Vzcy50cmFuc2l0aW9uKGRvYy5wYXlsb2FkLCAoZXJyLCBwYXlsb2FkKSA9PiB7XG4gICAgICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVyciwgZmFsc2UpO1xuICAgICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7XG4gICAgICAgICAgICBzYXNsQ29udGludWU6IDEsXG4gICAgICAgICAgICBjb252ZXJzYXRpb25JZDogZG9jLmNvbnZlcnNhdGlvbklkLFxuICAgICAgICAgICAgcGF5bG9hZFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBhdXRoQ29tbWFuZChjb21tYW5kLCAoZXJyLCBkb2MpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIsIGZhbHNlKTtcblxuICAgICAgICAgICAgYXV0aFByb2Nlc3MudHJhbnNpdGlvbihkb2MucGF5bG9hZCwgKGVyciwgcGF5bG9hZCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyLCBmYWxzZSk7XG4gICAgICAgICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7XG4gICAgICAgICAgICAgICAgc2FzbENvbnRpbnVlOiAxLFxuICAgICAgICAgICAgICAgIGNvbnZlcnNhdGlvbklkOiBkb2MuY29udmVyc2F0aW9uSWQsXG4gICAgICAgICAgICAgICAgcGF5bG9hZFxuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIGF1dGhDb21tYW5kKGNvbW1hbmQsIChlcnIsIHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVyciwgZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgYXV0aFByb2Nlc3MudHJhbnNpdGlvbihudWxsLCBlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVyciwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNTUEk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///68\n");

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst crypto = __webpack_require__(36);\nconst Buffer = __webpack_require__(49).Buffer;\nconst retrieveBSON = __webpack_require__(40).retrieveBSON;\nconst MongoError = __webpack_require__(37).MongoError;\nconst AuthProvider = __webpack_require__(64).AuthProvider;\n\nconst BSON = retrieveBSON();\nconst Binary = BSON.Binary;\n\nlet saslprep;\ntry {\n  saslprep = __webpack_require__(70);\n} catch (e) {\n  // don't do anything;\n}\n\nvar parsePayload = function(payload) {\n  var dict = {};\n  var parts = payload.split(',');\n\n  for (var i = 0; i < parts.length; i++) {\n    var valueParts = parts[i].split('=');\n    dict[valueParts[0]] = valueParts[1];\n  }\n\n  return dict;\n};\n\nvar passwordDigest = function(username, password) {\n  if (typeof username !== 'string') throw new MongoError('username must be a string');\n  if (typeof password !== 'string') throw new MongoError('password must be a string');\n  if (password.length === 0) throw new MongoError('password cannot be empty');\n  // Use node md5 generator\n  var md5 = crypto.createHash('md5');\n  // Generate keys used for authentication\n  md5.update(username + ':mongo:' + password, 'utf8');\n  return md5.digest('hex');\n};\n\n// XOR two buffers\nfunction xor(a, b) {\n  if (!Buffer.isBuffer(a)) a = Buffer.from(a);\n  if (!Buffer.isBuffer(b)) b = Buffer.from(b);\n  const length = Math.max(a.length, b.length);\n  const res = [];\n\n  for (let i = 0; i < length; i += 1) {\n    res.push(a[i] ^ b[i]);\n  }\n\n  return Buffer.from(res).toString('base64');\n}\n\nfunction H(method, text) {\n  return crypto\n    .createHash(method)\n    .update(text)\n    .digest();\n}\n\nfunction HMAC(method, key, text) {\n  return crypto\n    .createHmac(method, key)\n    .update(text)\n    .digest();\n}\n\nvar _hiCache = {};\nvar _hiCacheCount = 0;\nvar _hiCachePurge = function() {\n  _hiCache = {};\n  _hiCacheCount = 0;\n};\n\nconst hiLengthMap = {\n  sha256: 32,\n  sha1: 20\n};\n\nfunction HI(data, salt, iterations, cryptoMethod) {\n  // omit the work if already generated\n  const key = [data, salt.toString('base64'), iterations].join('_');\n  if (_hiCache[key] !== undefined) {\n    return _hiCache[key];\n  }\n\n  // generate the salt\n  const saltedData = crypto.pbkdf2Sync(\n    data,\n    salt,\n    iterations,\n    hiLengthMap[cryptoMethod],\n    cryptoMethod\n  );\n\n  // cache a copy to speed up the next lookup, but prevent unbounded cache growth\n  if (_hiCacheCount >= 200) {\n    _hiCachePurge();\n  }\n\n  _hiCache[key] = saltedData;\n  _hiCacheCount += 1;\n  return saltedData;\n}\n\n/**\n * Creates a new ScramSHA authentication mechanism\n * @class\n * @extends AuthProvider\n */\nclass ScramSHA extends AuthProvider {\n  constructor(bson, cryptoMethod) {\n    super(bson);\n    this.cryptoMethod = cryptoMethod || 'sha1';\n  }\n\n  static _getError(err, r) {\n    if (err) {\n      return err;\n    }\n\n    if (r.$err || r.errmsg) {\n      return new MongoError(r);\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  _executeScram(sendAuthCommand, connection, credentials, nonce, callback) {\n    let username = credentials.username;\n    const password = credentials.password;\n    const db = credentials.source;\n\n    const cryptoMethod = this.cryptoMethod;\n    let mechanism = 'SCRAM-SHA-1';\n    let processedPassword;\n\n    if (cryptoMethod === 'sha256') {\n      mechanism = 'SCRAM-SHA-256';\n\n      processedPassword = saslprep ? saslprep(password) : password;\n    } else {\n      try {\n        processedPassword = passwordDigest(username, password);\n      } catch (e) {\n        return callback(e);\n      }\n    }\n\n    // Clean up the user\n    username = username.replace('=', '=3D').replace(',', '=2C');\n\n    // NOTE: This is done b/c Javascript uses UTF-16, but the server is hashing in UTF-8.\n    // Since the username is not sasl-prep-d, we need to do this here.\n    const firstBare = Buffer.concat([\n      Buffer.from('n=', 'utf8'),\n      Buffer.from(username, 'utf8'),\n      Buffer.from(',r=', 'utf8'),\n      Buffer.from(nonce, 'utf8')\n    ]);\n\n    // Build command structure\n    const saslStartCmd = {\n      saslStart: 1,\n      mechanism,\n      payload: new Binary(Buffer.concat([Buffer.from('n,,', 'utf8'), firstBare])),\n      autoAuthorize: 1\n    };\n\n    // Write the commmand on the connection\n    sendAuthCommand(connection, `${db}.$cmd`, saslStartCmd, (err, r) => {\n      let tmpError = ScramSHA._getError(err, r);\n      if (tmpError) {\n        return callback(tmpError, null);\n      }\n\n      const payload = Buffer.isBuffer(r.payload) ? new Binary(r.payload) : r.payload;\n      const dict = parsePayload(payload.value());\n      const iterations = parseInt(dict.i, 10);\n      const salt = dict.s;\n      const rnonce = dict.r;\n\n      // Set up start of proof\n      const withoutProof = `c=biws,r=${rnonce}`;\n      const saltedPassword = HI(\n        processedPassword,\n        Buffer.from(salt, 'base64'),\n        iterations,\n        cryptoMethod\n      );\n\n      if (iterations && iterations < 4096) {\n        const error = new MongoError(`Server returned an invalid iteration count ${iterations}`);\n        return callback(error, false);\n      }\n\n      const clientKey = HMAC(cryptoMethod, saltedPassword, 'Client Key');\n      const storedKey = H(cryptoMethod, clientKey);\n      const authMessage = [firstBare, payload.value().toString('base64'), withoutProof].join(',');\n\n      const clientSignature = HMAC(cryptoMethod, storedKey, authMessage);\n      const clientProof = `p=${xor(clientKey, clientSignature)}`;\n      const clientFinal = [withoutProof, clientProof].join(',');\n      const saslContinueCmd = {\n        saslContinue: 1,\n        conversationId: r.conversationId,\n        payload: new Binary(Buffer.from(clientFinal))\n      };\n\n      sendAuthCommand(connection, `${db}.$cmd`, saslContinueCmd, (err, r) => {\n        if (!r || r.done !== false) {\n          return callback(err, r);\n        }\n\n        const retrySaslContinueCmd = {\n          saslContinue: 1,\n          conversationId: r.conversationId,\n          payload: Buffer.alloc(0)\n        };\n\n        sendAuthCommand(connection, `${db}.$cmd`, retrySaslContinueCmd, callback);\n      });\n    });\n  }\n\n  /**\n   * Implementation of authentication for a single connection\n   * @override\n   */\n  _authenticateSingleConnection(sendAuthCommand, connection, credentials, callback) {\n    // Create a random nonce\n    crypto.randomBytes(24, (err, buff) => {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return this._executeScram(\n        sendAuthCommand,\n        connection,\n        credentials,\n        buff.toString('base64'),\n        callback\n      );\n    });\n  }\n\n  /**\n   * Authenticate\n   * @override\n   * @method\n   */\n  auth(sendAuthCommand, connections, credentials, callback) {\n    this._checkSaslprep();\n    super.auth(sendAuthCommand, connections, credentials, callback);\n  }\n\n  _checkSaslprep() {\n    const cryptoMethod = this.cryptoMethod;\n\n    if (cryptoMethod === 'sha256') {\n      if (!saslprep) {\n        console.warn('Warning: no saslprep library specified. Passwords will not be sanitized');\n      }\n    }\n  }\n}\n\n/**\n * Creates a new ScramSHA1 authentication mechanism\n * @class\n * @extends ScramSHA\n */\nclass ScramSHA1 extends ScramSHA {\n  constructor(bson) {\n    super(bson, 'sha1');\n  }\n}\n\n/**\n * Creates a new ScramSHA256 authentication mechanism\n * @class\n * @extends ScramSHA\n */\nclass ScramSHA256 extends ScramSHA {\n  constructor(bson) {\n    super(bson, 'sha256');\n  }\n}\n\nmodule.exports = { ScramSHA1, ScramSHA256 };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///69\n");

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst {\n  unassigned_code_points,\n  commonly_mapped_to_nothing,\n  non_ASCII_space_characters,\n  prohibited_characters,\n  bidirectional_r_al,\n  bidirectional_l,\n} = __webpack_require__(71);\n\nmodule.exports = saslprep;\n\n// 2.1.  Mapping\n\n/**\n * non-ASCII space characters [StringPrep, C.1.2] that can be\n * mapped to SPACE (U+0020)\n */\nconst mapping2space = non_ASCII_space_characters;\n\n/**\n * the \"commonly mapped to nothing\" characters [StringPrep, B.1]\n * that can be mapped to nothing.\n */\nconst mapping2nothing = commonly_mapped_to_nothing;\n\n// utils\nconst getCodePoint = character => character.codePointAt(0);\nconst first = x => x[0];\nconst last = x => x[x.length - 1];\n\n/**\n * Convert provided string into an array of Unicode Code Points.\n * Based on https://stackoverflow.com/a/21409165/1556249\n * and https://www.npmjs.com/package/code-point-at.\n * @param {string} input\n * @returns {number[]}\n */\nfunction toCodePoints(input) {\n  const codepoints = [];\n  const size = input.length;\n\n  for (let i = 0; i < size; i += 1) {\n    const before = input.charCodeAt(i);\n\n    if (before >= 0xd800 && before <= 0xdbff && size > i + 1) {\n      const next = input.charCodeAt(i + 1);\n\n      if (next >= 0xdc00 && next <= 0xdfff) {\n        codepoints.push((before - 0xd800) * 0x400 + next - 0xdc00 + 0x10000);\n        i += 1;\n        continue;\n      }\n    }\n\n    codepoints.push(before);\n  }\n\n  return codepoints;\n}\n\n/**\n * SASLprep.\n * @param {string} input\n * @param {Object} opts\n * @param {boolean} opts.allowUnassigned\n * @returns {string}\n */\nfunction saslprep(input, opts = {}) {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected string.');\n  }\n\n  if (input.length === 0) {\n    return '';\n  }\n\n  // 1. Map\n  const mapped_input = toCodePoints(input)\n    // 1.1 mapping to space\n    .map(character => (mapping2space.get(character) ? 0x20 : character))\n    // 1.2 mapping to nothing\n    .filter(character => !mapping2nothing.get(character));\n\n  // 2. Normalize\n  const normalized_input = String.fromCodePoint\n    .apply(null, mapped_input)\n    .normalize('NFKC');\n\n  const normalized_map = toCodePoints(normalized_input);\n\n  // 3. Prohibit\n  const hasProhibited = normalized_map.some(character =>\n    prohibited_characters.get(character)\n  );\n\n  if (hasProhibited) {\n    throw new Error(\n      'Prohibited character, see https://tools.ietf.org/html/rfc4013#section-2.3'\n    );\n  }\n\n  // Unassigned Code Points\n  if (opts.allowUnassigned !== true) {\n    const hasUnassigned = normalized_map.some(character =>\n      unassigned_code_points.get(character)\n    );\n\n    if (hasUnassigned) {\n      throw new Error(\n        'Unassigned code point, see https://tools.ietf.org/html/rfc4013#section-2.5'\n      );\n    }\n  }\n\n  // 4. check bidi\n\n  const hasBidiRAL = normalized_map.some(character =>\n    bidirectional_r_al.get(character)\n  );\n\n  const hasBidiL = normalized_map.some(character =>\n    bidirectional_l.get(character)\n  );\n\n  // 4.1 If a string contains any RandALCat character, the string MUST NOT\n  // contain any LCat character.\n  if (hasBidiRAL && hasBidiL) {\n    throw new Error(\n      'String must not contain RandALCat and LCat at the same time,' +\n        ' see https://tools.ietf.org/html/rfc3454#section-6'\n    );\n  }\n\n  /**\n   * 4.2 If a string contains any RandALCat character, a RandALCat\n   * character MUST be the first character of the string, and a\n   * RandALCat character MUST be the last character of the string.\n   */\n\n  const isFirstBidiRAL = bidirectional_r_al.get(\n    getCodePoint(first(normalized_input))\n  );\n  const isLastBidiRAL = bidirectional_r_al.get(\n    getCodePoint(last(normalized_input))\n  );\n\n  if (hasBidiRAL && !(isFirstBidiRAL && isLastBidiRAL)) {\n    throw new Error(\n      'Bidirectional RandALCat character must be the first and the last' +\n        ' character of the string, see https://tools.ietf.org/html/rfc3454#section-6'\n    );\n  }\n\n  return normalized_input;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL3Nhc2xwcmVwL2luZGV4LmpzPzQ5ZTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEdBQUcsbUJBQU8sQ0FBQyxFQUEwQjs7QUFFdEM7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIsVUFBVTtBQUMzQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxRQUFRO0FBQ25CLGFBQWE7QUFDYjtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsImZpbGUiOiI3MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3Qge1xuICB1bmFzc2lnbmVkX2NvZGVfcG9pbnRzLFxuICBjb21tb25seV9tYXBwZWRfdG9fbm90aGluZyxcbiAgbm9uX0FTQ0lJX3NwYWNlX2NoYXJhY3RlcnMsXG4gIHByb2hpYml0ZWRfY2hhcmFjdGVycyxcbiAgYmlkaXJlY3Rpb25hbF9yX2FsLFxuICBiaWRpcmVjdGlvbmFsX2wsXG59ID0gcmVxdWlyZSgnLi9saWIvbWVtb3J5LWNvZGUtcG9pbnRzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gc2FzbHByZXA7XG5cbi8vIDIuMS4gIE1hcHBpbmdcblxuLyoqXG4gKiBub24tQVNDSUkgc3BhY2UgY2hhcmFjdGVycyBbU3RyaW5nUHJlcCwgQy4xLjJdIHRoYXQgY2FuIGJlXG4gKiBtYXBwZWQgdG8gU1BBQ0UgKFUrMDAyMClcbiAqL1xuY29uc3QgbWFwcGluZzJzcGFjZSA9IG5vbl9BU0NJSV9zcGFjZV9jaGFyYWN0ZXJzO1xuXG4vKipcbiAqIHRoZSBcImNvbW1vbmx5IG1hcHBlZCB0byBub3RoaW5nXCIgY2hhcmFjdGVycyBbU3RyaW5nUHJlcCwgQi4xXVxuICogdGhhdCBjYW4gYmUgbWFwcGVkIHRvIG5vdGhpbmcuXG4gKi9cbmNvbnN0IG1hcHBpbmcybm90aGluZyA9IGNvbW1vbmx5X21hcHBlZF90b19ub3RoaW5nO1xuXG4vLyB1dGlsc1xuY29uc3QgZ2V0Q29kZVBvaW50ID0gY2hhcmFjdGVyID0+IGNoYXJhY3Rlci5jb2RlUG9pbnRBdCgwKTtcbmNvbnN0IGZpcnN0ID0geCA9PiB4WzBdO1xuY29uc3QgbGFzdCA9IHggPT4geFt4Lmxlbmd0aCAtIDFdO1xuXG4vKipcbiAqIENvbnZlcnQgcHJvdmlkZWQgc3RyaW5nIGludG8gYW4gYXJyYXkgb2YgVW5pY29kZSBDb2RlIFBvaW50cy5cbiAqIEJhc2VkIG9uIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMTQwOTE2NS8xNTU2MjQ5XG4gKiBhbmQgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY29kZS1wb2ludC1hdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dFxuICogQHJldHVybnMge251bWJlcltdfVxuICovXG5mdW5jdGlvbiB0b0NvZGVQb2ludHMoaW5wdXQpIHtcbiAgY29uc3QgY29kZXBvaW50cyA9IFtdO1xuICBjb25zdCBzaXplID0gaW5wdXQubGVuZ3RoO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSArPSAxKSB7XG4gICAgY29uc3QgYmVmb3JlID0gaW5wdXQuY2hhckNvZGVBdChpKTtcblxuICAgIGlmIChiZWZvcmUgPj0gMHhkODAwICYmIGJlZm9yZSA8PSAweGRiZmYgJiYgc2l6ZSA+IGkgKyAxKSB7XG4gICAgICBjb25zdCBuZXh0ID0gaW5wdXQuY2hhckNvZGVBdChpICsgMSk7XG5cbiAgICAgIGlmIChuZXh0ID49IDB4ZGMwMCAmJiBuZXh0IDw9IDB4ZGZmZikge1xuICAgICAgICBjb2RlcG9pbnRzLnB1c2goKGJlZm9yZSAtIDB4ZDgwMCkgKiAweDQwMCArIG5leHQgLSAweGRjMDAgKyAweDEwMDAwKTtcbiAgICAgICAgaSArPSAxO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb2RlcG9pbnRzLnB1c2goYmVmb3JlKTtcbiAgfVxuXG4gIHJldHVybiBjb2RlcG9pbnRzO1xufVxuXG4vKipcbiAqIFNBU0xwcmVwLlxuICogQHBhcmFtIHtzdHJpbmd9IGlucHV0XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQHBhcmFtIHtib29sZWFufSBvcHRzLmFsbG93VW5hc3NpZ25lZFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gc2FzbHByZXAoaW5wdXQsIG9wdHMgPSB7fSkge1xuICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHN0cmluZy4nKTtcbiAgfVxuXG4gIGlmIChpbnB1dC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICAvLyAxLiBNYXBcbiAgY29uc3QgbWFwcGVkX2lucHV0ID0gdG9Db2RlUG9pbnRzKGlucHV0KVxuICAgIC8vIDEuMSBtYXBwaW5nIHRvIHNwYWNlXG4gICAgLm1hcChjaGFyYWN0ZXIgPT4gKG1hcHBpbmcyc3BhY2UuZ2V0KGNoYXJhY3RlcikgPyAweDIwIDogY2hhcmFjdGVyKSlcbiAgICAvLyAxLjIgbWFwcGluZyB0byBub3RoaW5nXG4gICAgLmZpbHRlcihjaGFyYWN0ZXIgPT4gIW1hcHBpbmcybm90aGluZy5nZXQoY2hhcmFjdGVyKSk7XG5cbiAgLy8gMi4gTm9ybWFsaXplXG4gIGNvbnN0IG5vcm1hbGl6ZWRfaW5wdXQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludFxuICAgIC5hcHBseShudWxsLCBtYXBwZWRfaW5wdXQpXG4gICAgLm5vcm1hbGl6ZSgnTkZLQycpO1xuXG4gIGNvbnN0IG5vcm1hbGl6ZWRfbWFwID0gdG9Db2RlUG9pbnRzKG5vcm1hbGl6ZWRfaW5wdXQpO1xuXG4gIC8vIDMuIFByb2hpYml0XG4gIGNvbnN0IGhhc1Byb2hpYml0ZWQgPSBub3JtYWxpemVkX21hcC5zb21lKGNoYXJhY3RlciA9PlxuICAgIHByb2hpYml0ZWRfY2hhcmFjdGVycy5nZXQoY2hhcmFjdGVyKVxuICApO1xuXG4gIGlmIChoYXNQcm9oaWJpdGVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ1Byb2hpYml0ZWQgY2hhcmFjdGVyLCBzZWUgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzQwMTMjc2VjdGlvbi0yLjMnXG4gICAgKTtcbiAgfVxuXG4gIC8vIFVuYXNzaWduZWQgQ29kZSBQb2ludHNcbiAgaWYgKG9wdHMuYWxsb3dVbmFzc2lnbmVkICE9PSB0cnVlKSB7XG4gICAgY29uc3QgaGFzVW5hc3NpZ25lZCA9IG5vcm1hbGl6ZWRfbWFwLnNvbWUoY2hhcmFjdGVyID0+XG4gICAgICB1bmFzc2lnbmVkX2NvZGVfcG9pbnRzLmdldChjaGFyYWN0ZXIpXG4gICAgKTtcblxuICAgIGlmIChoYXNVbmFzc2lnbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdVbmFzc2lnbmVkIGNvZGUgcG9pbnQsIHNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNDAxMyNzZWN0aW9uLTIuNSdcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLy8gNC4gY2hlY2sgYmlkaVxuXG4gIGNvbnN0IGhhc0JpZGlSQUwgPSBub3JtYWxpemVkX21hcC5zb21lKGNoYXJhY3RlciA9PlxuICAgIGJpZGlyZWN0aW9uYWxfcl9hbC5nZXQoY2hhcmFjdGVyKVxuICApO1xuXG4gIGNvbnN0IGhhc0JpZGlMID0gbm9ybWFsaXplZF9tYXAuc29tZShjaGFyYWN0ZXIgPT5cbiAgICBiaWRpcmVjdGlvbmFsX2wuZ2V0KGNoYXJhY3RlcilcbiAgKTtcblxuICAvLyA0LjEgSWYgYSBzdHJpbmcgY29udGFpbnMgYW55IFJhbmRBTENhdCBjaGFyYWN0ZXIsIHRoZSBzdHJpbmcgTVVTVCBOT1RcbiAgLy8gY29udGFpbiBhbnkgTENhdCBjaGFyYWN0ZXIuXG4gIGlmIChoYXNCaWRpUkFMICYmIGhhc0JpZGlMKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ1N0cmluZyBtdXN0IG5vdCBjb250YWluIFJhbmRBTENhdCBhbmQgTENhdCBhdCB0aGUgc2FtZSB0aW1lLCcgK1xuICAgICAgICAnIHNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ1NCNzZWN0aW9uLTYnXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiA0LjIgSWYgYSBzdHJpbmcgY29udGFpbnMgYW55IFJhbmRBTENhdCBjaGFyYWN0ZXIsIGEgUmFuZEFMQ2F0XG4gICAqIGNoYXJhY3RlciBNVVNUIGJlIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgdGhlIHN0cmluZywgYW5kIGFcbiAgICogUmFuZEFMQ2F0IGNoYXJhY3RlciBNVVNUIGJlIHRoZSBsYXN0IGNoYXJhY3RlciBvZiB0aGUgc3RyaW5nLlxuICAgKi9cblxuICBjb25zdCBpc0ZpcnN0QmlkaVJBTCA9IGJpZGlyZWN0aW9uYWxfcl9hbC5nZXQoXG4gICAgZ2V0Q29kZVBvaW50KGZpcnN0KG5vcm1hbGl6ZWRfaW5wdXQpKVxuICApO1xuICBjb25zdCBpc0xhc3RCaWRpUkFMID0gYmlkaXJlY3Rpb25hbF9yX2FsLmdldChcbiAgICBnZXRDb2RlUG9pbnQobGFzdChub3JtYWxpemVkX2lucHV0KSlcbiAgKTtcblxuICBpZiAoaGFzQmlkaVJBTCAmJiAhKGlzRmlyc3RCaWRpUkFMICYmIGlzTGFzdEJpZGlSQUwpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0JpZGlyZWN0aW9uYWwgUmFuZEFMQ2F0IGNoYXJhY3RlciBtdXN0IGJlIHRoZSBmaXJzdCBhbmQgdGhlIGxhc3QnICtcbiAgICAgICAgJyBjaGFyYWN0ZXIgb2YgdGhlIHN0cmluZywgc2VlIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNDU0I3NlY3Rpb24tNidcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIG5vcm1hbGl6ZWRfaW5wdXQ7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///70\n");

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__dirname) {\n\nconst fs = __webpack_require__(30);\nconst path = __webpack_require__(29);\nconst bitfield = __webpack_require__(72);\n\n/* eslint-disable-next-line security/detect-non-literal-fs-filename */\nconst memory = fs.readFileSync(path.resolve(__dirname, '../code-points.mem'));\nlet offset = 0;\n\n/**\n * Loads each code points sequence from buffer.\n * @returns {bitfield}\n */\nfunction read() {\n  const size = memory.readUInt32BE(offset);\n  offset += 4;\n\n  const codepoints = memory.slice(offset, offset + size);\n  offset += size;\n\n  return bitfield({ buffer: codepoints });\n}\n\nconst unassigned_code_points = read();\nconst commonly_mapped_to_nothing = read();\nconst non_ASCII_space_characters = read();\nconst prohibited_characters = read();\nconst bidirectional_r_al = read();\nconst bidirectional_l = read();\n\nmodule.exports = {\n  unassigned_code_points,\n  commonly_mapped_to_nothing,\n  non_ASCII_space_characters,\n  prohibited_characters,\n  bidirectional_r_al,\n  bidirectional_l,\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, \"/\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL3Nhc2xwcmVwL2xpYi9tZW1vcnktY29kZS1wb2ludHMuanM/N2FkZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpREFBYTs7QUFFYixXQUFXLG1CQUFPLENBQUMsRUFBSTtBQUN2QixhQUFhLG1CQUFPLENBQUMsRUFBTTtBQUMzQixpQkFBaUIsbUJBQU8sQ0FBQyxFQUFpQjs7QUFFMUM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxtQkFBbUIscUJBQXFCO0FBQ3hDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjcxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgYml0ZmllbGQgPSByZXF1aXJlKCdzcGFyc2UtYml0ZmllbGQnKTtcblxuLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHNlY3VyaXR5L2RldGVjdC1ub24tbGl0ZXJhbC1mcy1maWxlbmFtZSAqL1xuY29uc3QgbWVtb3J5ID0gZnMucmVhZEZpbGVTeW5jKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLi9jb2RlLXBvaW50cy5tZW0nKSk7XG5sZXQgb2Zmc2V0ID0gMDtcblxuLyoqXG4gKiBMb2FkcyBlYWNoIGNvZGUgcG9pbnRzIHNlcXVlbmNlIGZyb20gYnVmZmVyLlxuICogQHJldHVybnMge2JpdGZpZWxkfVxuICovXG5mdW5jdGlvbiByZWFkKCkge1xuICBjb25zdCBzaXplID0gbWVtb3J5LnJlYWRVSW50MzJCRShvZmZzZXQpO1xuICBvZmZzZXQgKz0gNDtcblxuICBjb25zdCBjb2RlcG9pbnRzID0gbWVtb3J5LnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgc2l6ZSk7XG4gIG9mZnNldCArPSBzaXplO1xuXG4gIHJldHVybiBiaXRmaWVsZCh7IGJ1ZmZlcjogY29kZXBvaW50cyB9KTtcbn1cblxuY29uc3QgdW5hc3NpZ25lZF9jb2RlX3BvaW50cyA9IHJlYWQoKTtcbmNvbnN0IGNvbW1vbmx5X21hcHBlZF90b19ub3RoaW5nID0gcmVhZCgpO1xuY29uc3Qgbm9uX0FTQ0lJX3NwYWNlX2NoYXJhY3RlcnMgPSByZWFkKCk7XG5jb25zdCBwcm9oaWJpdGVkX2NoYXJhY3RlcnMgPSByZWFkKCk7XG5jb25zdCBiaWRpcmVjdGlvbmFsX3JfYWwgPSByZWFkKCk7XG5jb25zdCBiaWRpcmVjdGlvbmFsX2wgPSByZWFkKCk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB1bmFzc2lnbmVkX2NvZGVfcG9pbnRzLFxuICBjb21tb25seV9tYXBwZWRfdG9fbm90aGluZyxcbiAgbm9uX0FTQ0lJX3NwYWNlX2NoYXJhY3RlcnMsXG4gIHByb2hpYml0ZWRfY2hhcmFjdGVycyxcbiAgYmlkaXJlY3Rpb25hbF9yX2FsLFxuICBiaWRpcmVjdGlvbmFsX2wsXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///71\n");

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

eval("var pager = __webpack_require__(73)\n\nmodule.exports = Bitfield\n\nfunction Bitfield (opts) {\n  if (!(this instanceof Bitfield)) return new Bitfield(opts)\n  if (!opts) opts = {}\n  if (Buffer.isBuffer(opts)) opts = {buffer: opts}\n\n  this.pageOffset = opts.pageOffset || 0\n  this.pageSize = opts.pageSize || 1024\n  this.pages = opts.pages || pager(this.pageSize)\n\n  this.byteLength = this.pages.length * this.pageSize\n  this.length = 8 * this.byteLength\n\n  if (!powerOfTwo(this.pageSize)) throw new Error('The page size should be a power of two')\n\n  this._trackUpdates = !!opts.trackUpdates\n  this._pageMask = this.pageSize - 1\n\n  if (opts.buffer) {\n    for (var i = 0; i < opts.buffer.length; i += this.pageSize) {\n      this.pages.set(i / this.pageSize, opts.buffer.slice(i, i + this.pageSize))\n    }\n    this.byteLength = opts.buffer.length\n    this.length = 8 * this.byteLength\n  }\n}\n\nBitfield.prototype.get = function (i) {\n  var o = i & 7\n  var j = (i - o) / 8\n\n  return !!(this.getByte(j) & (128 >> o))\n}\n\nBitfield.prototype.getByte = function (i) {\n  var o = i & this._pageMask\n  var j = (i - o) / this.pageSize\n  var page = this.pages.get(j, true)\n\n  return page ? page.buffer[o + this.pageOffset] : 0\n}\n\nBitfield.prototype.set = function (i, v) {\n  var o = i & 7\n  var j = (i - o) / 8\n  var b = this.getByte(j)\n\n  return this.setByte(j, v ? b | (128 >> o) : b & (255 ^ (128 >> o)))\n}\n\nBitfield.prototype.toBuffer = function () {\n  var all = alloc(this.pages.length * this.pageSize)\n\n  for (var i = 0; i < this.pages.length; i++) {\n    var next = this.pages.get(i, true)\n    var allOffset = i * this.pageSize\n    if (next) next.buffer.copy(all, allOffset, this.pageOffset, this.pageOffset + this.pageSize)\n  }\n\n  return all\n}\n\nBitfield.prototype.setByte = function (i, b) {\n  var o = i & this._pageMask\n  var j = (i - o) / this.pageSize\n  var page = this.pages.get(j, false)\n\n  o += this.pageOffset\n\n  if (page.buffer[o] === b) return false\n  page.buffer[o] = b\n\n  if (i >= this.byteLength) {\n    this.byteLength = i + 1\n    this.length = this.byteLength * 8\n  }\n\n  if (this._trackUpdates) this.pages.updated(page)\n\n  return true\n}\n\nfunction alloc (n) {\n  if (Buffer.alloc) return Buffer.alloc(n)\n  var b = new Buffer(n)\n  b.fill(0)\n  return b\n}\n\nfunction powerOfTwo (x) {\n  return !(x & (x - 1))\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL3NwYXJzZS1iaXRmaWVsZC9pbmRleC5qcz9jZTdlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksbUJBQU8sQ0FBQyxFQUFjOztBQUVsQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7O0FBRXJDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsd0JBQXdCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxpQkFBaUIsdUJBQXVCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcGFnZXIgPSByZXF1aXJlKCdtZW1vcnktcGFnZXInKVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJpdGZpZWxkXG5cbmZ1bmN0aW9uIEJpdGZpZWxkIChvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBCaXRmaWVsZCkpIHJldHVybiBuZXcgQml0ZmllbGQob3B0cylcbiAgaWYgKCFvcHRzKSBvcHRzID0ge31cbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvcHRzKSkgb3B0cyA9IHtidWZmZXI6IG9wdHN9XG5cbiAgdGhpcy5wYWdlT2Zmc2V0ID0gb3B0cy5wYWdlT2Zmc2V0IHx8IDBcbiAgdGhpcy5wYWdlU2l6ZSA9IG9wdHMucGFnZVNpemUgfHwgMTAyNFxuICB0aGlzLnBhZ2VzID0gb3B0cy5wYWdlcyB8fCBwYWdlcih0aGlzLnBhZ2VTaXplKVxuXG4gIHRoaXMuYnl0ZUxlbmd0aCA9IHRoaXMucGFnZXMubGVuZ3RoICogdGhpcy5wYWdlU2l6ZVxuICB0aGlzLmxlbmd0aCA9IDggKiB0aGlzLmJ5dGVMZW5ndGhcblxuICBpZiAoIXBvd2VyT2ZUd28odGhpcy5wYWdlU2l6ZSkpIHRocm93IG5ldyBFcnJvcignVGhlIHBhZ2Ugc2l6ZSBzaG91bGQgYmUgYSBwb3dlciBvZiB0d28nKVxuXG4gIHRoaXMuX3RyYWNrVXBkYXRlcyA9ICEhb3B0cy50cmFja1VwZGF0ZXNcbiAgdGhpcy5fcGFnZU1hc2sgPSB0aGlzLnBhZ2VTaXplIC0gMVxuXG4gIGlmIChvcHRzLmJ1ZmZlcikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3B0cy5idWZmZXIubGVuZ3RoOyBpICs9IHRoaXMucGFnZVNpemUpIHtcbiAgICAgIHRoaXMucGFnZXMuc2V0KGkgLyB0aGlzLnBhZ2VTaXplLCBvcHRzLmJ1ZmZlci5zbGljZShpLCBpICsgdGhpcy5wYWdlU2l6ZSkpXG4gICAgfVxuICAgIHRoaXMuYnl0ZUxlbmd0aCA9IG9wdHMuYnVmZmVyLmxlbmd0aFxuICAgIHRoaXMubGVuZ3RoID0gOCAqIHRoaXMuYnl0ZUxlbmd0aFxuICB9XG59XG5cbkJpdGZpZWxkLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoaSkge1xuICB2YXIgbyA9IGkgJiA3XG4gIHZhciBqID0gKGkgLSBvKSAvIDhcblxuICByZXR1cm4gISEodGhpcy5nZXRCeXRlKGopICYgKDEyOCA+PiBvKSlcbn1cblxuQml0ZmllbGQucHJvdG90eXBlLmdldEJ5dGUgPSBmdW5jdGlvbiAoaSkge1xuICB2YXIgbyA9IGkgJiB0aGlzLl9wYWdlTWFza1xuICB2YXIgaiA9IChpIC0gbykgLyB0aGlzLnBhZ2VTaXplXG4gIHZhciBwYWdlID0gdGhpcy5wYWdlcy5nZXQoaiwgdHJ1ZSlcblxuICByZXR1cm4gcGFnZSA/IHBhZ2UuYnVmZmVyW28gKyB0aGlzLnBhZ2VPZmZzZXRdIDogMFxufVxuXG5CaXRmaWVsZC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGksIHYpIHtcbiAgdmFyIG8gPSBpICYgN1xuICB2YXIgaiA9IChpIC0gbykgLyA4XG4gIHZhciBiID0gdGhpcy5nZXRCeXRlKGopXG5cbiAgcmV0dXJuIHRoaXMuc2V0Qnl0ZShqLCB2ID8gYiB8ICgxMjggPj4gbykgOiBiICYgKDI1NSBeICgxMjggPj4gbykpKVxufVxuXG5CaXRmaWVsZC5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhbGwgPSBhbGxvYyh0aGlzLnBhZ2VzLmxlbmd0aCAqIHRoaXMucGFnZVNpemUpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnBhZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5leHQgPSB0aGlzLnBhZ2VzLmdldChpLCB0cnVlKVxuICAgIHZhciBhbGxPZmZzZXQgPSBpICogdGhpcy5wYWdlU2l6ZVxuICAgIGlmIChuZXh0KSBuZXh0LmJ1ZmZlci5jb3B5KGFsbCwgYWxsT2Zmc2V0LCB0aGlzLnBhZ2VPZmZzZXQsIHRoaXMucGFnZU9mZnNldCArIHRoaXMucGFnZVNpemUpXG4gIH1cblxuICByZXR1cm4gYWxsXG59XG5cbkJpdGZpZWxkLnByb3RvdHlwZS5zZXRCeXRlID0gZnVuY3Rpb24gKGksIGIpIHtcbiAgdmFyIG8gPSBpICYgdGhpcy5fcGFnZU1hc2tcbiAgdmFyIGogPSAoaSAtIG8pIC8gdGhpcy5wYWdlU2l6ZVxuICB2YXIgcGFnZSA9IHRoaXMucGFnZXMuZ2V0KGosIGZhbHNlKVxuXG4gIG8gKz0gdGhpcy5wYWdlT2Zmc2V0XG5cbiAgaWYgKHBhZ2UuYnVmZmVyW29dID09PSBiKSByZXR1cm4gZmFsc2VcbiAgcGFnZS5idWZmZXJbb10gPSBiXG5cbiAgaWYgKGkgPj0gdGhpcy5ieXRlTGVuZ3RoKSB7XG4gICAgdGhpcy5ieXRlTGVuZ3RoID0gaSArIDFcbiAgICB0aGlzLmxlbmd0aCA9IHRoaXMuYnl0ZUxlbmd0aCAqIDhcbiAgfVxuXG4gIGlmICh0aGlzLl90cmFja1VwZGF0ZXMpIHRoaXMucGFnZXMudXBkYXRlZChwYWdlKVxuXG4gIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIGFsbG9jIChuKSB7XG4gIGlmIChCdWZmZXIuYWxsb2MpIHJldHVybiBCdWZmZXIuYWxsb2MobilcbiAgdmFyIGIgPSBuZXcgQnVmZmVyKG4pXG4gIGIuZmlsbCgwKVxuICByZXR1cm4gYlxufVxuXG5mdW5jdGlvbiBwb3dlck9mVHdvICh4KSB7XG4gIHJldHVybiAhKHggJiAoeCAtIDEpKVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///72\n");

/***/ }),
/* 73 */
/***/ (function(module, exports) {

eval("module.exports = Pager\n\nfunction Pager (pageSize, opts) {\n  if (!(this instanceof Pager)) return new Pager(pageSize, opts)\n\n  this.length = 0\n  this.updates = []\n  this.path = new Uint16Array(4)\n  this.pages = new Array(32768)\n  this.maxPages = this.pages.length\n  this.level = 0\n  this.pageSize = pageSize || 1024\n  this.deduplicate = opts ? opts.deduplicate : null\n  this.zeros = this.deduplicate ? alloc(this.deduplicate.length) : null\n}\n\nPager.prototype.updated = function (page) {\n  while (this.deduplicate && page.buffer[page.deduplicate] === this.deduplicate[page.deduplicate]) {\n    page.deduplicate++\n    if (page.deduplicate === this.deduplicate.length) {\n      page.deduplicate = 0\n      if (page.buffer.equals && page.buffer.equals(this.deduplicate)) page.buffer = this.deduplicate\n      break\n    }\n  }\n  if (page.updated || !this.updates) return\n  page.updated = true\n  this.updates.push(page)\n}\n\nPager.prototype.lastUpdate = function () {\n  if (!this.updates || !this.updates.length) return null\n  var page = this.updates.pop()\n  page.updated = false\n  return page\n}\n\nPager.prototype._array = function (i, noAllocate) {\n  if (i >= this.maxPages) {\n    if (noAllocate) return\n    grow(this, i)\n  }\n\n  factor(i, this.path)\n\n  var arr = this.pages\n\n  for (var j = this.level; j > 0; j--) {\n    var p = this.path[j]\n    var next = arr[p]\n\n    if (!next) {\n      if (noAllocate) return\n      next = arr[p] = new Array(32768)\n    }\n\n    arr = next\n  }\n\n  return arr\n}\n\nPager.prototype.get = function (i, noAllocate) {\n  var arr = this._array(i, noAllocate)\n  var first = this.path[0]\n  var page = arr && arr[first]\n\n  if (!page && !noAllocate) {\n    page = arr[first] = new Page(i, alloc(this.pageSize))\n    if (i >= this.length) this.length = i + 1\n  }\n\n  if (page && page.buffer === this.deduplicate && this.deduplicate && !noAllocate) {\n    page.buffer = copy(page.buffer)\n    page.deduplicate = 0\n  }\n\n  return page\n}\n\nPager.prototype.set = function (i, buf) {\n  var arr = this._array(i, false)\n  var first = this.path[0]\n\n  if (i >= this.length) this.length = i + 1\n\n  if (!buf || (this.zeros && buf.equals && buf.equals(this.zeros))) {\n    arr[first] = undefined\n    return\n  }\n\n  if (this.deduplicate && buf.equals && buf.equals(this.deduplicate)) {\n    buf = this.deduplicate\n  }\n\n  var page = arr[first]\n  var b = truncate(buf, this.pageSize)\n\n  if (page) page.buffer = b\n  else arr[first] = new Page(i, b)\n}\n\nPager.prototype.toBuffer = function () {\n  var list = new Array(this.length)\n  var empty = alloc(this.pageSize)\n  var ptr = 0\n\n  while (ptr < list.length) {\n    var arr = this._array(ptr, true)\n    for (var i = 0; i < 32768 && ptr < list.length; i++) {\n      list[ptr++] = (arr && arr[i]) ? arr[i].buffer : empty\n    }\n  }\n\n  return Buffer.concat(list)\n}\n\nfunction grow (pager, index) {\n  while (pager.maxPages < index) {\n    var old = pager.pages\n    pager.pages = new Array(32768)\n    pager.pages[0] = old\n    pager.level++\n    pager.maxPages *= 32768\n  }\n}\n\nfunction truncate (buf, len) {\n  if (buf.length === len) return buf\n  if (buf.length > len) return buf.slice(0, len)\n  var cpy = alloc(len)\n  buf.copy(cpy)\n  return cpy\n}\n\nfunction alloc (size) {\n  if (Buffer.alloc) return Buffer.alloc(size)\n  var buf = new Buffer(size)\n  buf.fill(0)\n  return buf\n}\n\nfunction copy (buf) {\n  var cpy = Buffer.allocUnsafe ? Buffer.allocUnsafe(buf.length) : new Buffer(buf.length)\n  buf.copy(cpy)\n  return cpy\n}\n\nfunction Page (i, buf) {\n  this.offset = i * buf.length\n  this.buffer = buf\n  this.updated = false\n  this.deduplicate = 0\n}\n\nfunction factor (n, out) {\n  n = (n - (out[0] = (n & 32767))) / 32768\n  n = (n - (out[1] = (n & 32767))) / 32768\n  out[3] = ((n - (out[2] = (n & 32767))) / 32768) & 32767\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21lbW9yeS1wYWdlci9pbmRleC5qcz9hNmZhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsMEJBQTBCLE9BQU87QUFDakM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsZ0NBQWdDO0FBQ25EO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI3My5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gUGFnZXJcblxuZnVuY3Rpb24gUGFnZXIgKHBhZ2VTaXplLCBvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQYWdlcikpIHJldHVybiBuZXcgUGFnZXIocGFnZVNpemUsIG9wdHMpXG5cbiAgdGhpcy5sZW5ndGggPSAwXG4gIHRoaXMudXBkYXRlcyA9IFtdXG4gIHRoaXMucGF0aCA9IG5ldyBVaW50MTZBcnJheSg0KVxuICB0aGlzLnBhZ2VzID0gbmV3IEFycmF5KDMyNzY4KVxuICB0aGlzLm1heFBhZ2VzID0gdGhpcy5wYWdlcy5sZW5ndGhcbiAgdGhpcy5sZXZlbCA9IDBcbiAgdGhpcy5wYWdlU2l6ZSA9IHBhZ2VTaXplIHx8IDEwMjRcbiAgdGhpcy5kZWR1cGxpY2F0ZSA9IG9wdHMgPyBvcHRzLmRlZHVwbGljYXRlIDogbnVsbFxuICB0aGlzLnplcm9zID0gdGhpcy5kZWR1cGxpY2F0ZSA/IGFsbG9jKHRoaXMuZGVkdXBsaWNhdGUubGVuZ3RoKSA6IG51bGxcbn1cblxuUGFnZXIucHJvdG90eXBlLnVwZGF0ZWQgPSBmdW5jdGlvbiAocGFnZSkge1xuICB3aGlsZSAodGhpcy5kZWR1cGxpY2F0ZSAmJiBwYWdlLmJ1ZmZlcltwYWdlLmRlZHVwbGljYXRlXSA9PT0gdGhpcy5kZWR1cGxpY2F0ZVtwYWdlLmRlZHVwbGljYXRlXSkge1xuICAgIHBhZ2UuZGVkdXBsaWNhdGUrK1xuICAgIGlmIChwYWdlLmRlZHVwbGljYXRlID09PSB0aGlzLmRlZHVwbGljYXRlLmxlbmd0aCkge1xuICAgICAgcGFnZS5kZWR1cGxpY2F0ZSA9IDBcbiAgICAgIGlmIChwYWdlLmJ1ZmZlci5lcXVhbHMgJiYgcGFnZS5idWZmZXIuZXF1YWxzKHRoaXMuZGVkdXBsaWNhdGUpKSBwYWdlLmJ1ZmZlciA9IHRoaXMuZGVkdXBsaWNhdGVcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIGlmIChwYWdlLnVwZGF0ZWQgfHwgIXRoaXMudXBkYXRlcykgcmV0dXJuXG4gIHBhZ2UudXBkYXRlZCA9IHRydWVcbiAgdGhpcy51cGRhdGVzLnB1c2gocGFnZSlcbn1cblxuUGFnZXIucHJvdG90eXBlLmxhc3RVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy51cGRhdGVzIHx8ICF0aGlzLnVwZGF0ZXMubGVuZ3RoKSByZXR1cm4gbnVsbFxuICB2YXIgcGFnZSA9IHRoaXMudXBkYXRlcy5wb3AoKVxuICBwYWdlLnVwZGF0ZWQgPSBmYWxzZVxuICByZXR1cm4gcGFnZVxufVxuXG5QYWdlci5wcm90b3R5cGUuX2FycmF5ID0gZnVuY3Rpb24gKGksIG5vQWxsb2NhdGUpIHtcbiAgaWYgKGkgPj0gdGhpcy5tYXhQYWdlcykge1xuICAgIGlmIChub0FsbG9jYXRlKSByZXR1cm5cbiAgICBncm93KHRoaXMsIGkpXG4gIH1cblxuICBmYWN0b3IoaSwgdGhpcy5wYXRoKVxuXG4gIHZhciBhcnIgPSB0aGlzLnBhZ2VzXG5cbiAgZm9yICh2YXIgaiA9IHRoaXMubGV2ZWw7IGogPiAwOyBqLS0pIHtcbiAgICB2YXIgcCA9IHRoaXMucGF0aFtqXVxuICAgIHZhciBuZXh0ID0gYXJyW3BdXG5cbiAgICBpZiAoIW5leHQpIHtcbiAgICAgIGlmIChub0FsbG9jYXRlKSByZXR1cm5cbiAgICAgIG5leHQgPSBhcnJbcF0gPSBuZXcgQXJyYXkoMzI3NjgpXG4gICAgfVxuXG4gICAgYXJyID0gbmV4dFxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5QYWdlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGksIG5vQWxsb2NhdGUpIHtcbiAgdmFyIGFyciA9IHRoaXMuX2FycmF5KGksIG5vQWxsb2NhdGUpXG4gIHZhciBmaXJzdCA9IHRoaXMucGF0aFswXVxuICB2YXIgcGFnZSA9IGFyciAmJiBhcnJbZmlyc3RdXG5cbiAgaWYgKCFwYWdlICYmICFub0FsbG9jYXRlKSB7XG4gICAgcGFnZSA9IGFycltmaXJzdF0gPSBuZXcgUGFnZShpLCBhbGxvYyh0aGlzLnBhZ2VTaXplKSlcbiAgICBpZiAoaSA+PSB0aGlzLmxlbmd0aCkgdGhpcy5sZW5ndGggPSBpICsgMVxuICB9XG5cbiAgaWYgKHBhZ2UgJiYgcGFnZS5idWZmZXIgPT09IHRoaXMuZGVkdXBsaWNhdGUgJiYgdGhpcy5kZWR1cGxpY2F0ZSAmJiAhbm9BbGxvY2F0ZSkge1xuICAgIHBhZ2UuYnVmZmVyID0gY29weShwYWdlLmJ1ZmZlcilcbiAgICBwYWdlLmRlZHVwbGljYXRlID0gMFxuICB9XG5cbiAgcmV0dXJuIHBhZ2Vcbn1cblxuUGFnZXIucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChpLCBidWYpIHtcbiAgdmFyIGFyciA9IHRoaXMuX2FycmF5KGksIGZhbHNlKVxuICB2YXIgZmlyc3QgPSB0aGlzLnBhdGhbMF1cblxuICBpZiAoaSA+PSB0aGlzLmxlbmd0aCkgdGhpcy5sZW5ndGggPSBpICsgMVxuXG4gIGlmICghYnVmIHx8ICh0aGlzLnplcm9zICYmIGJ1Zi5lcXVhbHMgJiYgYnVmLmVxdWFscyh0aGlzLnplcm9zKSkpIHtcbiAgICBhcnJbZmlyc3RdID0gdW5kZWZpbmVkXG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAodGhpcy5kZWR1cGxpY2F0ZSAmJiBidWYuZXF1YWxzICYmIGJ1Zi5lcXVhbHModGhpcy5kZWR1cGxpY2F0ZSkpIHtcbiAgICBidWYgPSB0aGlzLmRlZHVwbGljYXRlXG4gIH1cblxuICB2YXIgcGFnZSA9IGFycltmaXJzdF1cbiAgdmFyIGIgPSB0cnVuY2F0ZShidWYsIHRoaXMucGFnZVNpemUpXG5cbiAgaWYgKHBhZ2UpIHBhZ2UuYnVmZmVyID0gYlxuICBlbHNlIGFycltmaXJzdF0gPSBuZXcgUGFnZShpLCBiKVxufVxuXG5QYWdlci5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsaXN0ID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKVxuICB2YXIgZW1wdHkgPSBhbGxvYyh0aGlzLnBhZ2VTaXplKVxuICB2YXIgcHRyID0gMFxuXG4gIHdoaWxlIChwdHIgPCBsaXN0Lmxlbmd0aCkge1xuICAgIHZhciBhcnIgPSB0aGlzLl9hcnJheShwdHIsIHRydWUpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzMjc2OCAmJiBwdHIgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBsaXN0W3B0cisrXSA9IChhcnIgJiYgYXJyW2ldKSA/IGFycltpXS5idWZmZXIgOiBlbXB0eVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBCdWZmZXIuY29uY2F0KGxpc3QpXG59XG5cbmZ1bmN0aW9uIGdyb3cgKHBhZ2VyLCBpbmRleCkge1xuICB3aGlsZSAocGFnZXIubWF4UGFnZXMgPCBpbmRleCkge1xuICAgIHZhciBvbGQgPSBwYWdlci5wYWdlc1xuICAgIHBhZ2VyLnBhZ2VzID0gbmV3IEFycmF5KDMyNzY4KVxuICAgIHBhZ2VyLnBhZ2VzWzBdID0gb2xkXG4gICAgcGFnZXIubGV2ZWwrK1xuICAgIHBhZ2VyLm1heFBhZ2VzICo9IDMyNzY4XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJ1bmNhdGUgKGJ1ZiwgbGVuKSB7XG4gIGlmIChidWYubGVuZ3RoID09PSBsZW4pIHJldHVybiBidWZcbiAgaWYgKGJ1Zi5sZW5ndGggPiBsZW4pIHJldHVybiBidWYuc2xpY2UoMCwgbGVuKVxuICB2YXIgY3B5ID0gYWxsb2MobGVuKVxuICBidWYuY29weShjcHkpXG4gIHJldHVybiBjcHlcbn1cblxuZnVuY3Rpb24gYWxsb2MgKHNpemUpIHtcbiAgaWYgKEJ1ZmZlci5hbGxvYykgcmV0dXJuIEJ1ZmZlci5hbGxvYyhzaXplKVxuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcihzaXplKVxuICBidWYuZmlsbCgwKVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGNvcHkgKGJ1Zikge1xuICB2YXIgY3B5ID0gQnVmZmVyLmFsbG9jVW5zYWZlID8gQnVmZmVyLmFsbG9jVW5zYWZlKGJ1Zi5sZW5ndGgpIDogbmV3IEJ1ZmZlcihidWYubGVuZ3RoKVxuICBidWYuY29weShjcHkpXG4gIHJldHVybiBjcHlcbn1cblxuZnVuY3Rpb24gUGFnZSAoaSwgYnVmKSB7XG4gIHRoaXMub2Zmc2V0ID0gaSAqIGJ1Zi5sZW5ndGhcbiAgdGhpcy5idWZmZXIgPSBidWZcbiAgdGhpcy51cGRhdGVkID0gZmFsc2VcbiAgdGhpcy5kZWR1cGxpY2F0ZSA9IDBcbn1cblxuZnVuY3Rpb24gZmFjdG9yIChuLCBvdXQpIHtcbiAgbiA9IChuIC0gKG91dFswXSA9IChuICYgMzI3NjcpKSkgLyAzMjc2OFxuICBuID0gKG4gLSAob3V0WzFdID0gKG4gJiAzMjc2NykpKSAvIDMyNzY4XG4gIG91dFszXSA9ICgobiAtIChvdXRbMl0gPSAobiAmIDMyNzY3KSkpIC8gMzI3NjgpICYgMzI3Njdcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///73\n");

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst retrieveBSON = __webpack_require__(40).retrieveBSON;\nconst EventEmitter = __webpack_require__(39);\nconst BSON = retrieveBSON();\nconst Binary = BSON.Binary;\nconst uuidV4 = __webpack_require__(35).uuidV4;\nconst MongoError = __webpack_require__(37).MongoError;\nconst isRetryableError = __webpack_require__(37).isRetryableError;\nconst MongoNetworkError = __webpack_require__(37).MongoNetworkError;\nconst MongoWriteConcernError = __webpack_require__(37).MongoWriteConcernError;\nconst Transaction = __webpack_require__(75).Transaction;\nconst TxnState = __webpack_require__(75).TxnState;\nconst isPromiseLike = __webpack_require__(35).isPromiseLike;\nconst ReadPreference = __webpack_require__(42);\nconst isTransactionCommand = __webpack_require__(75).isTransactionCommand;\nconst resolveClusterTime = __webpack_require__(59).resolveClusterTime;\nconst isSharded = __webpack_require__(41).isSharded;\nconst maxWireVersion = __webpack_require__(35).maxWireVersion;\n\nconst minWireVersionForShardedTransactions = 8;\n\nfunction assertAlive(session, callback) {\n  if (session.serverSession == null) {\n    const error = new MongoError('Cannot use a session that has ended');\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return false;\n    }\n\n    throw error;\n  }\n\n  return true;\n}\n\n/**\n * Options to pass when creating a Client Session\n * @typedef {Object} SessionOptions\n * @property {boolean} [causalConsistency=true] Whether causal consistency should be enabled on this session\n * @property {TransactionOptions} [defaultTransactionOptions] The default TransactionOptions to use for transactions started on this session.\n */\n\n/**\n * A BSON document reflecting the lsid of a {@link ClientSession}\n * @typedef {Object} SessionId\n */\n\n/**\n * A class representing a client session on the server\n * WARNING: not meant to be instantiated directly.\n * @class\n * @hideconstructor\n */\nclass ClientSession extends EventEmitter {\n  /**\n   * Create a client session.\n   * WARNING: not meant to be instantiated directly\n   *\n   * @param {Topology} topology The current client's topology (Internal Class)\n   * @param {ServerSessionPool} sessionPool The server session pool (Internal Class)\n   * @param {SessionOptions} [options] Optional settings\n   * @param {Object} [clientOptions] Optional settings provided when creating a client in the porcelain driver\n   */\n  constructor(topology, sessionPool, options, clientOptions) {\n    super();\n\n    if (topology == null) {\n      throw new Error('ClientSession requires a topology');\n    }\n\n    if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n      throw new Error('ClientSession requires a ServerSessionPool');\n    }\n\n    options = options || {};\n    clientOptions = clientOptions || {};\n\n    this.topology = topology;\n    this.sessionPool = sessionPool;\n    this.hasEnded = false;\n    this.serverSession = sessionPool.acquire();\n    this.clientOptions = clientOptions;\n\n    this.supports = {\n      causalConsistency:\n        typeof options.causalConsistency !== 'undefined' ? options.causalConsistency : true\n    };\n\n    this.clusterTime = options.initialClusterTime;\n\n    this.operationTime = null;\n    this.explicit = !!options.explicit;\n    this.owner = options.owner;\n    this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n    this.transaction = new Transaction();\n  }\n\n  /**\n   * The server id associated with this session\n   * @type {SessionId}\n   */\n  get id() {\n    return this.serverSession.id;\n  }\n\n  /**\n   * Ends this session on the server\n   *\n   * @param {Object} [options] Optional settings. Currently reserved for future use\n   * @param {Function} [callback] Optional callback for completion of this operation\n   */\n  endSession(options, callback) {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options || {};\n\n    if (this.hasEnded) {\n      if (typeof callback === 'function') callback(null, null);\n      return;\n    }\n\n    if (this.serverSession && this.inTransaction()) {\n      this.abortTransaction(); // pass in callback?\n    }\n\n    // mark the session as ended, and emit a signal\n    this.hasEnded = true;\n    this.emit('ended', this);\n\n    // release the server session back to the pool\n    this.sessionPool.release(this.serverSession);\n    this.serverSession = null;\n\n    // spec indicates that we should ignore all errors for `endSessions`\n    if (typeof callback === 'function') callback(null, null);\n  }\n\n  /**\n   * Advances the operationTime for a ClientSession.\n   *\n   * @param {Timestamp} operationTime the `BSON.Timestamp` of the operation type it is desired to advance to\n   */\n  advanceOperationTime(operationTime) {\n    if (this.operationTime == null) {\n      this.operationTime = operationTime;\n      return;\n    }\n\n    if (operationTime.greaterThan(this.operationTime)) {\n      this.operationTime = operationTime;\n    }\n  }\n\n  /**\n   * Used to determine if this session equals another\n   * @param {ClientSession} session\n   * @return {boolean} true if the sessions are equal\n   */\n  equals(session) {\n    if (!(session instanceof ClientSession)) {\n      return false;\n    }\n\n    return this.id.id.buffer.equals(session.id.id.buffer);\n  }\n\n  /**\n   * Increment the transaction number on the internal ServerSession\n   */\n  incrementTransactionNumber() {\n    this.serverSession.txnNumber++;\n  }\n\n  /**\n   * @returns {boolean} whether this session is currently in a transaction or not\n   */\n  inTransaction() {\n    return this.transaction.isActive;\n  }\n\n  /**\n   * Starts a new transaction with the given options.\n   *\n   * @param {TransactionOptions} options Options for the transaction\n   */\n  startTransaction(options) {\n    assertAlive(this);\n    if (this.inTransaction()) {\n      throw new MongoError('Transaction already in progress');\n    }\n\n    const topologyMaxWireVersion = maxWireVersion(this.topology);\n    if (\n      isSharded(this.topology) &&\n      topologyMaxWireVersion != null &&\n      topologyMaxWireVersion < minWireVersionForShardedTransactions\n    ) {\n      throw new MongoError('Transactions are not supported on sharded clusters in MongoDB < 4.2.');\n    }\n\n    // increment txnNumber\n    this.incrementTransactionNumber();\n\n    // create transaction state\n    this.transaction = new Transaction(\n      Object.assign({}, this.clientOptions, options || this.defaultTransactionOptions)\n    );\n\n    this.transaction.transition(TxnState.STARTING_TRANSACTION);\n  }\n\n  /**\n   * Commits the currently active transaction in this session.\n   *\n   * @param {Function} [callback] optional callback for completion of this operation\n   * @return {Promise} A promise is returned if no callback is provided\n   */\n  commitTransaction(callback) {\n    if (typeof callback === 'function') {\n      endTransaction(this, 'commitTransaction', callback);\n      return;\n    }\n\n    return new Promise((resolve, reject) => {\n      endTransaction(\n        this,\n        'commitTransaction',\n        (err, reply) => (err ? reject(err) : resolve(reply))\n      );\n    });\n  }\n\n  /**\n   * Aborts the currently active transaction in this session.\n   *\n   * @param {Function} [callback] optional callback for completion of this operation\n   * @return {Promise} A promise is returned if no callback is provided\n   */\n  abortTransaction(callback) {\n    if (typeof callback === 'function') {\n      endTransaction(this, 'abortTransaction', callback);\n      return;\n    }\n\n    return new Promise((resolve, reject) => {\n      endTransaction(\n        this,\n        'abortTransaction',\n        (err, reply) => (err ? reject(err) : resolve(reply))\n      );\n    });\n  }\n\n  /**\n   * This is here to ensure that ClientSession is never serialized to BSON.\n   * @ignore\n   */\n  toBSON() {\n    throw new Error('ClientSession cannot be serialized to BSON.');\n  }\n\n  /**\n   * A user provided function to be run within a transaction\n   *\n   * @callback WithTransactionCallback\n   * @param {ClientSession} session The parent session of the transaction running the operation. This should be passed into each operation within the lambda.\n   * @returns {Promise} The resulting Promise of operations run within this transaction\n   */\n\n  /**\n   * Runs a provided lambda within a transaction, retrying either the commit operation\n   * or entire transaction as needed (and when the error permits) to better ensure that\n   * the transaction can complete successfully.\n   *\n   * IMPORTANT: This method requires the user to return a Promise, all lambdas that do not\n   * return a Promise will result in undefined behavior.\n   *\n   * @param {WithTransactionCallback} fn\n   * @param {TransactionOptions} [options] Optional settings for the transaction\n   */\n  withTransaction(fn, options) {\n    const startTime = Date.now();\n    return attemptTransaction(this, startTime, fn, options);\n  }\n}\n\nconst MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nconst UNSATISFIABLE_WRITE_CONCERN_CODE = 100;\nconst UNKNOWN_REPL_WRITE_CONCERN_CODE = 79;\nconst MAX_TIME_MS_EXPIRED_CODE = 50;\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set([\n  'CannotSatisfyWriteConcern',\n  'UnknownReplWriteConcern',\n  'UnsatisfiableWriteConcern'\n]);\n\nfunction hasNotTimedOut(startTime, max) {\n  return Date.now() - startTime < max;\n}\n\nfunction isUnknownTransactionCommitResult(err) {\n  return (\n    isMaxTimeMSExpiredError(err) ||\n    (!NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName) &&\n      err.code !== UNSATISFIABLE_WRITE_CONCERN_CODE &&\n      err.code !== UNKNOWN_REPL_WRITE_CONCERN_CODE)\n  );\n}\n\nfunction isMaxTimeMSExpiredError(err) {\n  return (\n    err.code === MAX_TIME_MS_EXPIRED_CODE ||\n    (err.writeConcernError && err.writeConcernError.code === MAX_TIME_MS_EXPIRED_CODE)\n  );\n}\n\nfunction attemptTransactionCommit(session, startTime, fn, options) {\n  return session.commitTransaction().catch(err => {\n    if (\n      err instanceof MongoError &&\n      hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) &&\n      !isMaxTimeMSExpiredError(err)\n    ) {\n      if (err.hasErrorLabel('UnknownTransactionCommitResult')) {\n        return attemptTransactionCommit(session, startTime, fn, options);\n      }\n\n      if (err.hasErrorLabel('TransientTransactionError')) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n    }\n\n    throw err;\n  });\n}\n\nconst USER_EXPLICIT_TXN_END_STATES = new Set([\n  TxnState.NO_TRANSACTION,\n  TxnState.TRANSACTION_COMMITTED,\n  TxnState.TRANSACTION_ABORTED\n]);\n\nfunction userExplicitlyEndedTransaction(session) {\n  return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\n\nfunction attemptTransaction(session, startTime, fn, options) {\n  session.startTransaction(options);\n\n  let promise;\n  try {\n    promise = fn(session);\n  } catch (err) {\n    promise = Promise.reject(err);\n  }\n\n  if (!isPromiseLike(promise)) {\n    session.abortTransaction();\n    throw new TypeError('Function provided to `withTransaction` must return a Promise');\n  }\n\n  return promise\n    .then(() => {\n      if (userExplicitlyEndedTransaction(session)) {\n        return;\n      }\n\n      return attemptTransactionCommit(session, startTime, fn, options);\n    })\n    .catch(err => {\n      function maybeRetryOrThrow(err) {\n        if (\n          err instanceof MongoError &&\n          err.hasErrorLabel('TransientTransactionError') &&\n          hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)\n        ) {\n          return attemptTransaction(session, startTime, fn, options);\n        }\n\n        if (isMaxTimeMSExpiredError(err)) {\n          if (err.errorLabels == null) {\n            err.errorLabels = [];\n          }\n          err.errorLabels.push('UnknownTransactionCommitResult');\n        }\n\n        throw err;\n      }\n\n      if (session.transaction.isActive) {\n        return session.abortTransaction().then(() => maybeRetryOrThrow(err));\n      }\n\n      return maybeRetryOrThrow(err);\n    });\n}\n\nfunction endTransaction(session, commandName, callback) {\n  if (!assertAlive(session, callback)) {\n    // checking result in case callback was called\n    return;\n  }\n\n  // handle any initial problematic cases\n  let txnState = session.transaction.state;\n\n  if (txnState === TxnState.NO_TRANSACTION) {\n    callback(new MongoError('No transaction started'));\n    return;\n  }\n\n  if (commandName === 'commitTransaction') {\n    if (\n      txnState === TxnState.STARTING_TRANSACTION ||\n      txnState === TxnState.TRANSACTION_COMMITTED_EMPTY\n    ) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(TxnState.TRANSACTION_COMMITTED_EMPTY);\n      callback(null, null);\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\n      callback(new MongoError('Cannot call commitTransaction after calling abortTransaction'));\n      return;\n    }\n  } else {\n    if (txnState === TxnState.STARTING_TRANSACTION) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\n      callback(null, null);\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\n      callback(new MongoError('Cannot call abortTransaction twice'));\n      return;\n    }\n\n    if (\n      txnState === TxnState.TRANSACTION_COMMITTED ||\n      txnState === TxnState.TRANSACTION_COMMITTED_EMPTY\n    ) {\n      callback(new MongoError('Cannot call abortTransaction after calling commitTransaction'));\n      return;\n    }\n  }\n\n  // construct and send the command\n  const command = { [commandName]: 1 };\n\n  // apply a writeConcern if specified\n  let writeConcern;\n  if (session.transaction.options.writeConcern) {\n    writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n  } else if (session.clientOptions && session.clientOptions.w) {\n    writeConcern = { w: session.clientOptions.w };\n  }\n\n  if (txnState === TxnState.TRANSACTION_COMMITTED) {\n    writeConcern = Object.assign({ wtimeout: 10000 }, writeConcern, { w: 'majority' });\n  }\n\n  if (writeConcern) {\n    Object.assign(command, { writeConcern });\n  }\n\n  if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\n    Object.assign(command, { maxTimeMS: session.transaction.options.maxTimeMS });\n  }\n\n  function commandHandler(e, r) {\n    if (commandName === 'commitTransaction') {\n      session.transaction.transition(TxnState.TRANSACTION_COMMITTED);\n\n      if (\n        e &&\n        (e instanceof MongoNetworkError ||\n          e instanceof MongoWriteConcernError ||\n          isRetryableError(e) ||\n          isMaxTimeMSExpiredError(e))\n      ) {\n        if (e.errorLabels) {\n          const idx = e.errorLabels.indexOf('TransientTransactionError');\n          if (idx !== -1) {\n            e.errorLabels.splice(idx, 1);\n          }\n        } else {\n          e.errorLabels = [];\n        }\n\n        if (isUnknownTransactionCommitResult(e)) {\n          e.errorLabels.push('UnknownTransactionCommitResult');\n\n          // per txns spec, must unpin session in this case\n          session.transaction.unpinServer();\n        }\n      }\n    } else {\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\n    }\n\n    callback(e, r);\n  }\n\n  // The spec indicates that we should ignore all errors on `abortTransaction`\n  function transactionError(err) {\n    return commandName === 'commitTransaction' ? err : null;\n  }\n\n  if (\n    // Assumption here that commandName is \"commitTransaction\" or \"abortTransaction\"\n    session.transaction.recoveryToken &&\n    supportsRecoveryToken(session)\n  ) {\n    command.recoveryToken = session.transaction.recoveryToken;\n  }\n\n  // send the command\n  session.topology.command('admin.$cmd', command, { session }, (err, reply) => {\n    if (err && isRetryableError(err)) {\n      // SPEC-1185: apply majority write concern when retrying commitTransaction\n      if (command.commitTransaction) {\n        // per txns spec, must unpin session in this case\n        session.transaction.unpinServer();\n\n        command.writeConcern = Object.assign({ wtimeout: 10000 }, command.writeConcern, {\n          w: 'majority'\n        });\n      }\n\n      return session.topology.command('admin.$cmd', command, { session }, (_err, _reply) =>\n        commandHandler(transactionError(_err), _reply)\n      );\n    }\n\n    commandHandler(transactionError(err), reply);\n  });\n}\n\nfunction supportsRecoveryToken(session) {\n  const topology = session.topology;\n  return !!topology.s.options.useRecoveryToken;\n}\n\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @ignore\n */\nclass ServerSession {\n  constructor() {\n    this.id = { id: new Binary(uuidV4(), Binary.SUBTYPE_UUID) };\n    this.lastUse = Date.now();\n    this.txnNumber = 0;\n    this.isDirty = false;\n  }\n\n  /**\n   * Determines if the server session has timed out.\n   * @ignore\n   * @param {Date} sessionTimeoutMinutes The server's \"logicalSessionTimeoutMinutes\"\n   * @return {boolean} true if the session has timed out.\n   */\n  hasTimedOut(sessionTimeoutMinutes) {\n    // Take the difference of the lastUse timestamp and now, which will result in a value in\n    // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n    const idleTimeMinutes = Math.round(\n      (((Date.now() - this.lastUse) % 86400000) % 3600000) / 60000\n    );\n\n    return idleTimeMinutes > sessionTimeoutMinutes - 1;\n  }\n}\n\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @ignore\n */\nclass ServerSessionPool {\n  constructor(topology) {\n    if (topology == null) {\n      throw new Error('ServerSessionPool requires a topology');\n    }\n\n    this.topology = topology;\n    this.sessions = [];\n  }\n\n  /**\n   * Ends all sessions in the session pool.\n   * @ignore\n   */\n  endAllPooledSessions() {\n    if (this.sessions.length) {\n      this.topology.endSessions(this.sessions.map(session => session.id));\n      this.sessions = [];\n    }\n  }\n\n  /**\n   * Acquire a Server Session from the pool.\n   * Iterates through each session in the pool, removing any stale sessions\n   * along the way. The first non-stale session found is removed from the\n   * pool and returned. If no non-stale session is found, a new ServerSession\n   * is created.\n   * @ignore\n   * @returns {ServerSession}\n   */\n  acquire() {\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;\n    while (this.sessions.length) {\n      const session = this.sessions.shift();\n      if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n        return session;\n      }\n    }\n\n    return new ServerSession();\n  }\n\n  /**\n   * Release a session to the session pool\n   * Adds the session back to the session pool if the session has not timed out yet.\n   * This method also removes any stale sessions from the pool.\n   * @ignore\n   * @param {ServerSession} session The session to release to the pool\n   */\n  release(session) {\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;\n    while (this.sessions.length) {\n      const pooledSession = this.sessions[this.sessions.length - 1];\n      if (pooledSession.hasTimedOut(sessionTimeoutMinutes)) {\n        this.sessions.pop();\n      } else {\n        break;\n      }\n    }\n\n    if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n      if (session.isDirty) {\n        return;\n      }\n\n      // otherwise, readd this session to the session pool\n      this.sessions.unshift(session);\n    }\n  }\n}\n\n// TODO: this should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\nfunction commandSupportsReadConcern(command, options) {\n  if (\n    command.aggregate ||\n    command.count ||\n    command.distinct ||\n    command.find ||\n    command.parallelCollectionScan ||\n    command.geoNear ||\n    command.geoSearch\n  ) {\n    return true;\n  }\n\n  if (command.mapReduce && options.out && (options.out.inline === 1 || options.out === 'inline')) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param {ClientSession} session the session tracking transaction state\n * @param {Object} command the command to decorate\n * @param {Object} topology the topology for tracking the cluster time\n * @param {Object} [options] Optional settings passed to calling operation\n * @return {MongoError|null} An error, if some error condition was met\n */\nfunction applySession(session, command, options) {\n  const serverSession = session.serverSession;\n  if (serverSession == null) {\n    // TODO: merge this with `assertAlive`, did not want to throw a try/catch here\n    return new MongoError('Cannot use a session that has ended');\n  }\n\n  // mark the last use of this session, and apply the `lsid`\n  serverSession.lastUse = Date.now();\n  command.lsid = serverSession.id;\n\n  // first apply non-transaction-specific sessions data\n  const inTransaction = session.inTransaction() || isTransactionCommand(command);\n  const isRetryableWrite = options.willRetryWrite;\n  const shouldApplyReadConcern = commandSupportsReadConcern(command);\n\n  if (serverSession.txnNumber && (isRetryableWrite || inTransaction)) {\n    command.txnNumber = BSON.Long.fromNumber(serverSession.txnNumber);\n  }\n\n  // now attempt to apply transaction-specific sessions data\n  if (!inTransaction) {\n    if (session.transaction.state !== TxnState.NO_TRANSACTION) {\n      session.transaction.transition(TxnState.NO_TRANSACTION);\n    }\n\n    // TODO: the following should only be applied to read operation per spec.\n    // for causal consistency\n    if (session.supports.causalConsistency && session.operationTime && shouldApplyReadConcern) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n    }\n\n    return;\n  }\n\n  if (options.readPreference && !options.readPreference.equals(ReadPreference.primary)) {\n    return new MongoError(\n      `Read preference in a transaction must be primary, not: ${options.readPreference.mode}`\n    );\n  }\n\n  // `autocommit` must always be false to differentiate from retryable writes\n  command.autocommit = false;\n\n  if (session.transaction.state === TxnState.STARTING_TRANSACTION) {\n    session.transaction.transition(TxnState.TRANSACTION_IN_PROGRESS);\n    command.startTransaction = true;\n\n    const readConcern =\n      session.transaction.options.readConcern || session.clientOptions.readConcern;\n    if (readConcern) {\n      command.readConcern = readConcern;\n    }\n\n    if (session.supports.causalConsistency && session.operationTime) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n    }\n  }\n}\n\nfunction updateSessionFromResponse(session, document) {\n  if (document.$clusterTime) {\n    resolveClusterTime(session, document.$clusterTime);\n  }\n\n  if (document.operationTime && session && session.supports.causalConsistency) {\n    session.advanceOperationTime(document.operationTime);\n  }\n\n  if (document.recoveryToken && session && session.inTransaction()) {\n    session.transaction._recoveryToken = document.recoveryToken;\n  }\n}\n\nmodule.exports = {\n  ClientSession,\n  ServerSession,\n  ServerSessionPool,\n  TxnState,\n  applySession,\n  updateSessionFromResponse,\n  commandSupportsReadConcern\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///74\n");

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst MongoError = __webpack_require__(37).MongoError;\n\nlet TxnState;\nlet stateMachine;\n\n(() => {\n  const NO_TRANSACTION = 'NO_TRANSACTION';\n  const STARTING_TRANSACTION = 'STARTING_TRANSACTION';\n  const TRANSACTION_IN_PROGRESS = 'TRANSACTION_IN_PROGRESS';\n  const TRANSACTION_COMMITTED = 'TRANSACTION_COMMITTED';\n  const TRANSACTION_COMMITTED_EMPTY = 'TRANSACTION_COMMITTED_EMPTY';\n  const TRANSACTION_ABORTED = 'TRANSACTION_ABORTED';\n\n  TxnState = {\n    NO_TRANSACTION,\n    STARTING_TRANSACTION,\n    TRANSACTION_IN_PROGRESS,\n    TRANSACTION_COMMITTED,\n    TRANSACTION_COMMITTED_EMPTY,\n    TRANSACTION_ABORTED\n  };\n\n  stateMachine = {\n    [NO_TRANSACTION]: [NO_TRANSACTION, STARTING_TRANSACTION],\n    [STARTING_TRANSACTION]: [\n      TRANSACTION_IN_PROGRESS,\n      TRANSACTION_COMMITTED,\n      TRANSACTION_COMMITTED_EMPTY,\n      TRANSACTION_ABORTED\n    ],\n    [TRANSACTION_IN_PROGRESS]: [\n      TRANSACTION_IN_PROGRESS,\n      TRANSACTION_COMMITTED,\n      TRANSACTION_ABORTED\n    ],\n    [TRANSACTION_COMMITTED]: [\n      TRANSACTION_COMMITTED,\n      TRANSACTION_COMMITTED_EMPTY,\n      STARTING_TRANSACTION,\n      NO_TRANSACTION\n    ],\n    [TRANSACTION_ABORTED]: [STARTING_TRANSACTION, NO_TRANSACTION],\n    [TRANSACTION_COMMITTED_EMPTY]: [TRANSACTION_COMMITTED_EMPTY, NO_TRANSACTION]\n  };\n})();\n\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @typedef {Object} ReadConcern\n * @property {'local'|'available'|'majority'|'linearizable'|'snapshot'} level The readConcern Level\n * @see https://docs.mongodb.com/manual/reference/read-concern/\n */\n\n/**\n * A MongoDB WriteConcern, which describes the level of acknowledgement\n * requested from MongoDB for write operations.\n * @typedef {Object} WriteConcern\n * @property {number|'majority'|string} [w=1] requests acknowledgement that the write operation has\n * propagated to a specified number of mongod hosts\n * @property {boolean} [j=false] requests acknowledgement from MongoDB that the write operation has\n * been written to the journal\n * @property {number} [wtimeout] a time limit, in milliseconds, for the write concern\n * @see https://docs.mongodb.com/manual/reference/write-concern/\n */\n\n/**\n * Configuration options for a transaction.\n * @typedef {Object} TransactionOptions\n * @property {ReadConcern} [readConcern] A default read concern for commands in this transaction\n * @property {WriteConcern} [writeConcern] A default writeConcern for commands in this transaction\n * @property {ReadPreference} [readPreference] A default read preference for commands in this transaction\n */\n\n/**\n * A class maintaining state related to a server transaction. Internal Only\n * @ignore\n */\nclass Transaction {\n  /**\n   * Create a transaction\n   *\n   * @ignore\n   * @param {TransactionOptions} [options] Optional settings\n   */\n  constructor(options) {\n    options = options || {};\n\n    this.state = TxnState.NO_TRANSACTION;\n    this.options = {};\n\n    if (options.writeConcern || typeof options.w !== 'undefined') {\n      const w = options.writeConcern ? options.writeConcern.w : options.w;\n      if (w <= 0) {\n        throw new MongoError('Transactions do not support unacknowledged write concern');\n      }\n\n      this.options.writeConcern = options.writeConcern ? options.writeConcern : { w: options.w };\n    }\n\n    if (options.readConcern) this.options.readConcern = options.readConcern;\n    if (options.readPreference) this.options.readPreference = options.readPreference;\n    if (options.maxCommitTimeMS) this.options.maxTimeMS = options.maxCommitTimeMS;\n\n    // TODO: This isn't technically necessary\n    this._pinnedServer = undefined;\n    this._recoveryToken = undefined;\n  }\n\n  get server() {\n    return this._pinnedServer;\n  }\n\n  get recoveryToken() {\n    return this._recoveryToken;\n  }\n\n  get isPinned() {\n    return !!this.server;\n  }\n\n  /**\n   * @ignore\n   * @return Whether this session is presently in a transaction\n   */\n  get isActive() {\n    return (\n      [TxnState.STARTING_TRANSACTION, TxnState.TRANSACTION_IN_PROGRESS].indexOf(this.state) !== -1\n    );\n  }\n\n  /**\n   * Transition the transaction in the state machine\n   * @ignore\n   * @param {TxnState} state The new state to transition to\n   */\n  transition(nextState) {\n    const nextStates = stateMachine[this.state];\n    if (nextStates && nextStates.indexOf(nextState) !== -1) {\n      this.state = nextState;\n      if (this.state === TxnState.NO_TRANSACTION || this.state === TxnState.STARTING_TRANSACTION) {\n        this.unpinServer();\n      }\n      return;\n    }\n\n    throw new MongoError(\n      `Attempted illegal state transition from [${this.state}] to [${nextState}]`\n    );\n  }\n\n  pinServer(server) {\n    if (this.isActive) {\n      this._pinnedServer = server;\n    }\n  }\n\n  unpinServer() {\n    this._pinnedServer = undefined;\n  }\n}\n\nfunction isTransactionCommand(command) {\n  return !!(command.commitTransaction || command.abortTransaction);\n}\n\nmodule.exports = { TxnState, Transaction, isTransactionCommand };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NvcmUvdHJhbnNhY3Rpb25zLmpzPzU2ZjAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixtQkFBbUIsbUJBQU8sQ0FBQyxFQUFTOztBQUVwQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixjQUFjLHlEQUF5RDtBQUN2RTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixjQUFjLHlCQUF5QjtBQUN2QztBQUNBLGNBQWMsUUFBUTtBQUN0QjtBQUNBLGNBQWMsT0FBTztBQUNyQjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsY0FBYyxZQUFZO0FBQzFCLGNBQWMsYUFBYTtBQUMzQixjQUFjLGVBQWU7QUFDN0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxtQkFBbUI7QUFDaEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpRkFBaUY7QUFDakY7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrREFBa0QsV0FBVyxRQUFRLFVBQVU7QUFDL0U7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IiLCJmaWxlIjoiNzUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBNb25nb0Vycm9yID0gcmVxdWlyZSgnLi9lcnJvcicpLk1vbmdvRXJyb3I7XG5cbmxldCBUeG5TdGF0ZTtcbmxldCBzdGF0ZU1hY2hpbmU7XG5cbigoKSA9PiB7XG4gIGNvbnN0IE5PX1RSQU5TQUNUSU9OID0gJ05PX1RSQU5TQUNUSU9OJztcbiAgY29uc3QgU1RBUlRJTkdfVFJBTlNBQ1RJT04gPSAnU1RBUlRJTkdfVFJBTlNBQ1RJT04nO1xuICBjb25zdCBUUkFOU0FDVElPTl9JTl9QUk9HUkVTUyA9ICdUUkFOU0FDVElPTl9JTl9QUk9HUkVTUyc7XG4gIGNvbnN0IFRSQU5TQUNUSU9OX0NPTU1JVFRFRCA9ICdUUkFOU0FDVElPTl9DT01NSVRURUQnO1xuICBjb25zdCBUUkFOU0FDVElPTl9DT01NSVRURURfRU1QVFkgPSAnVFJBTlNBQ1RJT05fQ09NTUlUVEVEX0VNUFRZJztcbiAgY29uc3QgVFJBTlNBQ1RJT05fQUJPUlRFRCA9ICdUUkFOU0FDVElPTl9BQk9SVEVEJztcblxuICBUeG5TdGF0ZSA9IHtcbiAgICBOT19UUkFOU0FDVElPTixcbiAgICBTVEFSVElOR19UUkFOU0FDVElPTixcbiAgICBUUkFOU0FDVElPTl9JTl9QUk9HUkVTUyxcbiAgICBUUkFOU0FDVElPTl9DT01NSVRURUQsXG4gICAgVFJBTlNBQ1RJT05fQ09NTUlUVEVEX0VNUFRZLFxuICAgIFRSQU5TQUNUSU9OX0FCT1JURURcbiAgfTtcblxuICBzdGF0ZU1hY2hpbmUgPSB7XG4gICAgW05PX1RSQU5TQUNUSU9OXTogW05PX1RSQU5TQUNUSU9OLCBTVEFSVElOR19UUkFOU0FDVElPTl0sXG4gICAgW1NUQVJUSU5HX1RSQU5TQUNUSU9OXTogW1xuICAgICAgVFJBTlNBQ1RJT05fSU5fUFJPR1JFU1MsXG4gICAgICBUUkFOU0FDVElPTl9DT01NSVRURUQsXG4gICAgICBUUkFOU0FDVElPTl9DT01NSVRURURfRU1QVFksXG4gICAgICBUUkFOU0FDVElPTl9BQk9SVEVEXG4gICAgXSxcbiAgICBbVFJBTlNBQ1RJT05fSU5fUFJPR1JFU1NdOiBbXG4gICAgICBUUkFOU0FDVElPTl9JTl9QUk9HUkVTUyxcbiAgICAgIFRSQU5TQUNUSU9OX0NPTU1JVFRFRCxcbiAgICAgIFRSQU5TQUNUSU9OX0FCT1JURURcbiAgICBdLFxuICAgIFtUUkFOU0FDVElPTl9DT01NSVRURURdOiBbXG4gICAgICBUUkFOU0FDVElPTl9DT01NSVRURUQsXG4gICAgICBUUkFOU0FDVElPTl9DT01NSVRURURfRU1QVFksXG4gICAgICBTVEFSVElOR19UUkFOU0FDVElPTixcbiAgICAgIE5PX1RSQU5TQUNUSU9OXG4gICAgXSxcbiAgICBbVFJBTlNBQ1RJT05fQUJPUlRFRF06IFtTVEFSVElOR19UUkFOU0FDVElPTiwgTk9fVFJBTlNBQ1RJT05dLFxuICAgIFtUUkFOU0FDVElPTl9DT01NSVRURURfRU1QVFldOiBbVFJBTlNBQ1RJT05fQ09NTUlUVEVEX0VNUFRZLCBOT19UUkFOU0FDVElPTl1cbiAgfTtcbn0pKCk7XG5cbi8qKlxuICogVGhlIE1vbmdvREIgUmVhZENvbmNlcm4sIHdoaWNoIGFsbG93cyBmb3IgY29udHJvbCBvZiB0aGUgY29uc2lzdGVuY3kgYW5kIGlzb2xhdGlvbiBwcm9wZXJ0aWVzXG4gKiBvZiB0aGUgZGF0YSByZWFkIGZyb20gcmVwbGljYSBzZXRzIGFuZCByZXBsaWNhIHNldCBzaGFyZHMuXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBSZWFkQ29uY2VyblxuICogQHByb3BlcnR5IHsnbG9jYWwnfCdhdmFpbGFibGUnfCdtYWpvcml0eSd8J2xpbmVhcml6YWJsZSd8J3NuYXBzaG90J30gbGV2ZWwgVGhlIHJlYWRDb25jZXJuIExldmVsXG4gKiBAc2VlIGh0dHBzOi8vZG9jcy5tb25nb2RiLmNvbS9tYW51YWwvcmVmZXJlbmNlL3JlYWQtY29uY2Vybi9cbiAqL1xuXG4vKipcbiAqIEEgTW9uZ29EQiBXcml0ZUNvbmNlcm4sIHdoaWNoIGRlc2NyaWJlcyB0aGUgbGV2ZWwgb2YgYWNrbm93bGVkZ2VtZW50XG4gKiByZXF1ZXN0ZWQgZnJvbSBNb25nb0RCIGZvciB3cml0ZSBvcGVyYXRpb25zLlxuICogQHR5cGVkZWYge09iamVjdH0gV3JpdGVDb25jZXJuXG4gKiBAcHJvcGVydHkge251bWJlcnwnbWFqb3JpdHknfHN0cmluZ30gW3c9MV0gcmVxdWVzdHMgYWNrbm93bGVkZ2VtZW50IHRoYXQgdGhlIHdyaXRlIG9wZXJhdGlvbiBoYXNcbiAqIHByb3BhZ2F0ZWQgdG8gYSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1vbmdvZCBob3N0c1xuICogQHByb3BlcnR5IHtib29sZWFufSBbaj1mYWxzZV0gcmVxdWVzdHMgYWNrbm93bGVkZ2VtZW50IGZyb20gTW9uZ29EQiB0aGF0IHRoZSB3cml0ZSBvcGVyYXRpb24gaGFzXG4gKiBiZWVuIHdyaXR0ZW4gdG8gdGhlIGpvdXJuYWxcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbd3RpbWVvdXRdIGEgdGltZSBsaW1pdCwgaW4gbWlsbGlzZWNvbmRzLCBmb3IgdGhlIHdyaXRlIGNvbmNlcm5cbiAqIEBzZWUgaHR0cHM6Ly9kb2NzLm1vbmdvZGIuY29tL21hbnVhbC9yZWZlcmVuY2Uvd3JpdGUtY29uY2Vybi9cbiAqL1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgYSB0cmFuc2FjdGlvbi5cbiAqIEB0eXBlZGVmIHtPYmplY3R9IFRyYW5zYWN0aW9uT3B0aW9uc1xuICogQHByb3BlcnR5IHtSZWFkQ29uY2Vybn0gW3JlYWRDb25jZXJuXSBBIGRlZmF1bHQgcmVhZCBjb25jZXJuIGZvciBjb21tYW5kcyBpbiB0aGlzIHRyYW5zYWN0aW9uXG4gKiBAcHJvcGVydHkge1dyaXRlQ29uY2Vybn0gW3dyaXRlQ29uY2Vybl0gQSBkZWZhdWx0IHdyaXRlQ29uY2VybiBmb3IgY29tbWFuZHMgaW4gdGhpcyB0cmFuc2FjdGlvblxuICogQHByb3BlcnR5IHtSZWFkUHJlZmVyZW5jZX0gW3JlYWRQcmVmZXJlbmNlXSBBIGRlZmF1bHQgcmVhZCBwcmVmZXJlbmNlIGZvciBjb21tYW5kcyBpbiB0aGlzIHRyYW5zYWN0aW9uXG4gKi9cblxuLyoqXG4gKiBBIGNsYXNzIG1haW50YWluaW5nIHN0YXRlIHJlbGF0ZWQgdG8gYSBzZXJ2ZXIgdHJhbnNhY3Rpb24uIEludGVybmFsIE9ubHlcbiAqIEBpZ25vcmVcbiAqL1xuY2xhc3MgVHJhbnNhY3Rpb24ge1xuICAvKipcbiAgICogQ3JlYXRlIGEgdHJhbnNhY3Rpb25cbiAgICpcbiAgICogQGlnbm9yZVxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9uT3B0aW9uc30gW29wdGlvbnNdIE9wdGlvbmFsIHNldHRpbmdzXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICB0aGlzLnN0YXRlID0gVHhuU3RhdGUuTk9fVFJBTlNBQ1RJT047XG4gICAgdGhpcy5vcHRpb25zID0ge307XG5cbiAgICBpZiAob3B0aW9ucy53cml0ZUNvbmNlcm4gfHwgdHlwZW9mIG9wdGlvbnMudyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0IHcgPSBvcHRpb25zLndyaXRlQ29uY2VybiA/IG9wdGlvbnMud3JpdGVDb25jZXJuLncgOiBvcHRpb25zLnc7XG4gICAgICBpZiAodyA8PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBNb25nb0Vycm9yKCdUcmFuc2FjdGlvbnMgZG8gbm90IHN1cHBvcnQgdW5hY2tub3dsZWRnZWQgd3JpdGUgY29uY2VybicpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm9wdGlvbnMud3JpdGVDb25jZXJuID0gb3B0aW9ucy53cml0ZUNvbmNlcm4gPyBvcHRpb25zLndyaXRlQ29uY2VybiA6IHsgdzogb3B0aW9ucy53IH07XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMucmVhZENvbmNlcm4pIHRoaXMub3B0aW9ucy5yZWFkQ29uY2VybiA9IG9wdGlvbnMucmVhZENvbmNlcm47XG4gICAgaWYgKG9wdGlvbnMucmVhZFByZWZlcmVuY2UpIHRoaXMub3B0aW9ucy5yZWFkUHJlZmVyZW5jZSA9IG9wdGlvbnMucmVhZFByZWZlcmVuY2U7XG4gICAgaWYgKG9wdGlvbnMubWF4Q29tbWl0VGltZU1TKSB0aGlzLm9wdGlvbnMubWF4VGltZU1TID0gb3B0aW9ucy5tYXhDb21taXRUaW1lTVM7XG5cbiAgICAvLyBUT0RPOiBUaGlzIGlzbid0IHRlY2huaWNhbGx5IG5lY2Vzc2FyeVxuICAgIHRoaXMuX3Bpbm5lZFNlcnZlciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9yZWNvdmVyeVRva2VuID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZ2V0IHNlcnZlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fcGlubmVkU2VydmVyO1xuICB9XG5cbiAgZ2V0IHJlY292ZXJ5VG9rZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlY292ZXJ5VG9rZW47XG4gIH1cblxuICBnZXQgaXNQaW5uZWQoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5zZXJ2ZXI7XG4gIH1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiBAcmV0dXJuIFdoZXRoZXIgdGhpcyBzZXNzaW9uIGlzIHByZXNlbnRseSBpbiBhIHRyYW5zYWN0aW9uXG4gICAqL1xuICBnZXQgaXNBY3RpdmUoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIFtUeG5TdGF0ZS5TVEFSVElOR19UUkFOU0FDVElPTiwgVHhuU3RhdGUuVFJBTlNBQ1RJT05fSU5fUFJPR1JFU1NdLmluZGV4T2YodGhpcy5zdGF0ZSkgIT09IC0xXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2l0aW9uIHRoZSB0cmFuc2FjdGlvbiBpbiB0aGUgc3RhdGUgbWFjaGluZVxuICAgKiBAaWdub3JlXG4gICAqIEBwYXJhbSB7VHhuU3RhdGV9IHN0YXRlIFRoZSBuZXcgc3RhdGUgdG8gdHJhbnNpdGlvbiB0b1xuICAgKi9cbiAgdHJhbnNpdGlvbihuZXh0U3RhdGUpIHtcbiAgICBjb25zdCBuZXh0U3RhdGVzID0gc3RhdGVNYWNoaW5lW3RoaXMuc3RhdGVdO1xuICAgIGlmIChuZXh0U3RhdGVzICYmIG5leHRTdGF0ZXMuaW5kZXhPZihuZXh0U3RhdGUpICE9PSAtMSkge1xuICAgICAgdGhpcy5zdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICAgIGlmICh0aGlzLnN0YXRlID09PSBUeG5TdGF0ZS5OT19UUkFOU0FDVElPTiB8fCB0aGlzLnN0YXRlID09PSBUeG5TdGF0ZS5TVEFSVElOR19UUkFOU0FDVElPTikge1xuICAgICAgICB0aGlzLnVucGluU2VydmVyKCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IE1vbmdvRXJyb3IoXG4gICAgICBgQXR0ZW1wdGVkIGlsbGVnYWwgc3RhdGUgdHJhbnNpdGlvbiBmcm9tIFske3RoaXMuc3RhdGV9XSB0byBbJHtuZXh0U3RhdGV9XWBcbiAgICApO1xuICB9XG5cbiAgcGluU2VydmVyKHNlcnZlcikge1xuICAgIGlmICh0aGlzLmlzQWN0aXZlKSB7XG4gICAgICB0aGlzLl9waW5uZWRTZXJ2ZXIgPSBzZXJ2ZXI7XG4gICAgfVxuICB9XG5cbiAgdW5waW5TZXJ2ZXIoKSB7XG4gICAgdGhpcy5fcGlubmVkU2VydmVyID0gdW5kZWZpbmVkO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVHJhbnNhY3Rpb25Db21tYW5kKGNvbW1hbmQpIHtcbiAgcmV0dXJuICEhKGNvbW1hbmQuY29tbWl0VHJhbnNhY3Rpb24gfHwgY29tbWFuZC5hYm9ydFRyYW5zYWN0aW9uKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IFR4blN0YXRlLCBUcmFuc2FjdGlvbiwgaXNUcmFuc2FjdGlvbkNvbW1hbmQgfTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///75\n");

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst writeCommand = __webpack_require__(77);\n\nmodule.exports = {\n  insert: function insert(server, ns, ops, options, callback) {\n    writeCommand(server, 'insert', 'documents', ns, ops, options, callback);\n  },\n  update: function update(server, ns, ops, options, callback) {\n    writeCommand(server, 'update', 'updates', ns, ops, options, callback);\n  },\n  remove: function remove(server, ns, ops, options, callback) {\n    writeCommand(server, 'delete', 'deletes', ns, ops, options, callback);\n  },\n  killCursors: __webpack_require__(79),\n  getMore: __webpack_require__(80),\n  query: __webpack_require__(81),\n  command: __webpack_require__(78)\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NvcmUvd2lyZXByb3RvY29sL2luZGV4LmpzP2Y5OTUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixxQkFBcUIsbUJBQU8sQ0FBQyxFQUFpQjs7QUFFOUM7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSCxlQUFlLG1CQUFPLENBQUMsRUFBZ0I7QUFDdkMsV0FBVyxtQkFBTyxDQUFDLEVBQVk7QUFDL0IsU0FBUyxtQkFBTyxDQUFDLEVBQVM7QUFDMUIsV0FBVyxtQkFBTyxDQUFDLEVBQVc7QUFDOUIiLCJmaWxlIjoiNzYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCB3cml0ZUNvbW1hbmQgPSByZXF1aXJlKCcuL3dyaXRlX2NvbW1hbmQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0KHNlcnZlciwgbnMsIG9wcywgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICB3cml0ZUNvbW1hbmQoc2VydmVyLCAnaW5zZXJ0JywgJ2RvY3VtZW50cycsIG5zLCBvcHMsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoc2VydmVyLCBucywgb3BzLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIHdyaXRlQ29tbWFuZChzZXJ2ZXIsICd1cGRhdGUnLCAndXBkYXRlcycsIG5zLCBvcHMsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoc2VydmVyLCBucywgb3BzLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIHdyaXRlQ29tbWFuZChzZXJ2ZXIsICdkZWxldGUnLCAnZGVsZXRlcycsIG5zLCBvcHMsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfSxcbiAga2lsbEN1cnNvcnM6IHJlcXVpcmUoJy4va2lsbF9jdXJzb3JzJyksXG4gIGdldE1vcmU6IHJlcXVpcmUoJy4vZ2V0X21vcmUnKSxcbiAgcXVlcnk6IHJlcXVpcmUoJy4vcXVlcnknKSxcbiAgY29tbWFuZDogcmVxdWlyZSgnLi9jb21tYW5kJylcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///76\n");

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst MongoError = __webpack_require__(37).MongoError;\nconst collectionNamespace = __webpack_require__(41).collectionNamespace;\nconst command = __webpack_require__(78);\n\nfunction writeCommand(server, type, opsField, ns, ops, options, callback) {\n  if (ops.length === 0) throw new MongoError(`${type} must contain at least one document`);\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n  const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n  const writeConcern = options.writeConcern;\n\n  const writeCommand = {};\n  writeCommand[type] = collectionNamespace(ns);\n  writeCommand[opsField] = ops;\n  writeCommand.ordered = ordered;\n\n  if (writeConcern && Object.keys(writeConcern).length > 0) {\n    writeCommand.writeConcern = writeConcern;\n  }\n\n  if (options.collation) {\n    for (let i = 0; i < writeCommand[opsField].length; i++) {\n      if (!writeCommand[opsField][i].collation) {\n        writeCommand[opsField][i].collation = options.collation;\n      }\n    }\n  }\n\n  if (options.bypassDocumentValidation === true) {\n    writeCommand.bypassDocumentValidation = options.bypassDocumentValidation;\n  }\n\n  const commandOptions = Object.assign(\n    {\n      checkKeys: type === 'insert',\n      numberToReturn: 1\n    },\n    options\n  );\n\n  command(server, ns, writeCommand, commandOptions, callback);\n}\n\nmodule.exports = writeCommand;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NvcmUvd2lyZXByb3RvY29sL3dyaXRlX2NvbW1hbmQuanM/OGY0ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixtQkFBbUIsbUJBQU8sQ0FBQyxFQUFVO0FBQ3JDLDRCQUE0QixtQkFBTyxDQUFDLEVBQVU7QUFDOUMsZ0JBQWdCLG1CQUFPLENBQUMsRUFBVzs7QUFFbkM7QUFDQSxnREFBZ0QsS0FBSztBQUNyRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLG1DQUFtQztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiNzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IE1vbmdvRXJyb3IgPSByZXF1aXJlKCcuLi9lcnJvcicpLk1vbmdvRXJyb3I7XG5jb25zdCBjb2xsZWN0aW9uTmFtZXNwYWNlID0gcmVxdWlyZSgnLi9zaGFyZWQnKS5jb2xsZWN0aW9uTmFtZXNwYWNlO1xuY29uc3QgY29tbWFuZCA9IHJlcXVpcmUoJy4vY29tbWFuZCcpO1xuXG5mdW5jdGlvbiB3cml0ZUNvbW1hbmQoc2VydmVyLCB0eXBlLCBvcHNGaWVsZCwgbnMsIG9wcywgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKG9wcy5sZW5ndGggPT09IDApIHRocm93IG5ldyBNb25nb0Vycm9yKGAke3R5cGV9IG11c3QgY29udGFpbiBhdCBsZWFzdCBvbmUgZG9jdW1lbnRgKTtcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBvcmRlcmVkID0gdHlwZW9mIG9wdGlvbnMub3JkZXJlZCA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5vcmRlcmVkIDogdHJ1ZTtcbiAgY29uc3Qgd3JpdGVDb25jZXJuID0gb3B0aW9ucy53cml0ZUNvbmNlcm47XG5cbiAgY29uc3Qgd3JpdGVDb21tYW5kID0ge307XG4gIHdyaXRlQ29tbWFuZFt0eXBlXSA9IGNvbGxlY3Rpb25OYW1lc3BhY2UobnMpO1xuICB3cml0ZUNvbW1hbmRbb3BzRmllbGRdID0gb3BzO1xuICB3cml0ZUNvbW1hbmQub3JkZXJlZCA9IG9yZGVyZWQ7XG5cbiAgaWYgKHdyaXRlQ29uY2VybiAmJiBPYmplY3Qua2V5cyh3cml0ZUNvbmNlcm4pLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZUNvbW1hbmQud3JpdGVDb25jZXJuID0gd3JpdGVDb25jZXJuO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuY29sbGF0aW9uKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3cml0ZUNvbW1hbmRbb3BzRmllbGRdLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIXdyaXRlQ29tbWFuZFtvcHNGaWVsZF1baV0uY29sbGF0aW9uKSB7XG4gICAgICAgIHdyaXRlQ29tbWFuZFtvcHNGaWVsZF1baV0uY29sbGF0aW9uID0gb3B0aW9ucy5jb2xsYXRpb247XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKG9wdGlvbnMuYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uID09PSB0cnVlKSB7XG4gICAgd3JpdGVDb21tYW5kLmJ5cGFzc0RvY3VtZW50VmFsaWRhdGlvbiA9IG9wdGlvbnMuYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uO1xuICB9XG5cbiAgY29uc3QgY29tbWFuZE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKFxuICAgIHtcbiAgICAgIGNoZWNrS2V5czogdHlwZSA9PT0gJ2luc2VydCcsXG4gICAgICBudW1iZXJUb1JldHVybjogMVxuICAgIH0sXG4gICAgb3B0aW9uc1xuICApO1xuXG4gIGNvbW1hbmQoc2VydmVyLCBucywgd3JpdGVDb21tYW5kLCBjb21tYW5kT3B0aW9ucywgY2FsbGJhY2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdyaXRlQ29tbWFuZDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///77\n");

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Query = __webpack_require__(48).Query;\nconst Msg = __webpack_require__(50).Msg;\nconst MongoError = __webpack_require__(37).MongoError;\nconst getReadPreference = __webpack_require__(41).getReadPreference;\nconst isSharded = __webpack_require__(41).isSharded;\nconst databaseNamespace = __webpack_require__(41).databaseNamespace;\nconst isTransactionCommand = __webpack_require__(75).isTransactionCommand;\nconst applySession = __webpack_require__(74).applySession;\n\nfunction isClientEncryptionEnabled(server) {\n  return server.autoEncrypter;\n}\n\nfunction command(server, ns, cmd, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  if (cmd == null) {\n    return callback(new MongoError(`command ${JSON.stringify(cmd)} does not return a cursor`));\n  }\n\n  if (!isClientEncryptionEnabled(server)) {\n    _command(server, ns, cmd, options, callback);\n    return;\n  }\n\n  _cryptCommand(server, ns, cmd, options, callback);\n}\n\nfunction _command(server, ns, cmd, options, callback) {\n  const bson = server.s.bson;\n  const pool = server.s.pool;\n  const readPreference = getReadPreference(cmd, options);\n  const shouldUseOpMsg = supportsOpMsg(server);\n  const session = options.session;\n\n  let clusterTime = server.clusterTime;\n  let finalCmd = Object.assign({}, cmd);\n  if (hasSessionSupport(server) && session) {\n    if (\n      session.clusterTime &&\n      session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)\n    ) {\n      clusterTime = session.clusterTime;\n    }\n\n    const err = applySession(session, finalCmd, options);\n    if (err) {\n      return callback(err);\n    }\n  }\n\n  // if we have a known cluster time, gossip it\n  if (clusterTime) {\n    finalCmd.$clusterTime = clusterTime;\n  }\n\n  if (\n    isSharded(server) &&\n    !shouldUseOpMsg &&\n    readPreference &&\n    readPreference.preference !== 'primary'\n  ) {\n    finalCmd = {\n      $query: finalCmd,\n      $readPreference: readPreference.toJSON()\n    };\n  }\n\n  const commandOptions = Object.assign(\n    {\n      command: true,\n      numberToSkip: 0,\n      numberToReturn: -1,\n      checkKeys: false\n    },\n    options\n  );\n\n  // This value is not overridable\n  commandOptions.slaveOk = readPreference.slaveOk();\n\n  const cmdNs = `${databaseNamespace(ns)}.$cmd`;\n  const message = shouldUseOpMsg\n    ? new Msg(bson, cmdNs, finalCmd, commandOptions)\n    : new Query(bson, cmdNs, finalCmd, commandOptions);\n\n  const inTransaction = session && (session.inTransaction() || isTransactionCommand(finalCmd));\n  const commandResponseHandler = inTransaction\n    ? function(err) {\n        if (\n          !cmd.commitTransaction &&\n          err &&\n          err instanceof MongoError &&\n          err.hasErrorLabel('TransientTransactionError')\n        ) {\n          session.transaction.unpinServer();\n        }\n\n        return callback.apply(null, arguments);\n      }\n    : callback;\n\n  try {\n    pool.write(message, commandOptions, commandResponseHandler);\n  } catch (err) {\n    commandResponseHandler(err);\n  }\n}\n\nfunction hasSessionSupport(topology) {\n  if (topology == null) return false;\n  if (topology.description) {\n    return topology.description.maxWireVersion >= 6;\n  }\n\n  return topology.ismaster == null ? false : topology.ismaster.maxWireVersion >= 6;\n}\n\nfunction supportsOpMsg(topologyOrServer) {\n  const description = topologyOrServer.ismaster\n    ? topologyOrServer.ismaster\n    : topologyOrServer.description;\n\n  if (description == null) {\n    return false;\n  }\n\n  return description.maxWireVersion >= 6 && description.__nodejs_mock_server__ == null;\n}\n\nfunction _cryptCommand(server, ns, cmd, options, callback) {\n  const shouldBypassAutoEncryption = !!server.s.options.bypassAutoEncryption;\n  const autoEncrypter = server.autoEncrypter;\n  function commandResponseHandler(err, response) {\n    if (err || response == null) {\n      callback(err, response);\n      return;\n    }\n\n    autoEncrypter.decrypt(response.result, (err, decrypted) => {\n      if (err) {\n        callback(err, null);\n        return;\n      }\n\n      response.result = decrypted;\n      response.message.documents = [decrypted];\n      callback(null, response);\n    });\n  }\n\n  if (shouldBypassAutoEncryption) {\n    _command(server, ns, cmd, options, commandResponseHandler);\n    return;\n  }\n\n  autoEncrypter.encrypt(ns, cmd, (err, encrypted) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n\n    _command(server, ns, encrypted, options, commandResponseHandler);\n  });\n}\n\nmodule.exports = command;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NvcmUvd2lyZXByb3RvY29sL2NvbW1hbmQuanM/NWIzOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixjQUFjLG1CQUFPLENBQUMsRUFBd0I7QUFDOUMsWUFBWSxtQkFBTyxDQUFDLEVBQW1CO0FBQ3ZDLG1CQUFtQixtQkFBTyxDQUFDLEVBQVU7QUFDckMsMEJBQTBCLG1CQUFPLENBQUMsRUFBVTtBQUM1QyxrQkFBa0IsbUJBQU8sQ0FBQyxFQUFVO0FBQ3BDLDBCQUEwQixtQkFBTyxDQUFDLEVBQVU7QUFDNUMsNkJBQTZCLG1CQUFPLENBQUMsRUFBaUI7QUFDdEQscUJBQXFCLG1CQUFPLENBQUMsRUFBYTs7QUFFMUM7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0VBQXdFO0FBQ3hFOztBQUVBO0FBQ0EsOENBQThDLG9CQUFvQjtBQUNsRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxtQkFBbUIsc0JBQXNCO0FBQ3pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIOztBQUVBIiwiZmlsZSI6Ijc4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBRdWVyeSA9IHJlcXVpcmUoJy4uL2Nvbm5lY3Rpb24vY29tbWFuZHMnKS5RdWVyeTtcbmNvbnN0IE1zZyA9IHJlcXVpcmUoJy4uL2Nvbm5lY3Rpb24vbXNnJykuTXNnO1xuY29uc3QgTW9uZ29FcnJvciA9IHJlcXVpcmUoJy4uL2Vycm9yJykuTW9uZ29FcnJvcjtcbmNvbnN0IGdldFJlYWRQcmVmZXJlbmNlID0gcmVxdWlyZSgnLi9zaGFyZWQnKS5nZXRSZWFkUHJlZmVyZW5jZTtcbmNvbnN0IGlzU2hhcmRlZCA9IHJlcXVpcmUoJy4vc2hhcmVkJykuaXNTaGFyZGVkO1xuY29uc3QgZGF0YWJhc2VOYW1lc3BhY2UgPSByZXF1aXJlKCcuL3NoYXJlZCcpLmRhdGFiYXNlTmFtZXNwYWNlO1xuY29uc3QgaXNUcmFuc2FjdGlvbkNvbW1hbmQgPSByZXF1aXJlKCcuLi90cmFuc2FjdGlvbnMnKS5pc1RyYW5zYWN0aW9uQ29tbWFuZDtcbmNvbnN0IGFwcGx5U2Vzc2lvbiA9IHJlcXVpcmUoJy4uL3Nlc3Npb25zJykuYXBwbHlTZXNzaW9uO1xuXG5mdW5jdGlvbiBpc0NsaWVudEVuY3J5cHRpb25FbmFibGVkKHNlcnZlcikge1xuICByZXR1cm4gc2VydmVyLmF1dG9FbmNyeXB0ZXI7XG59XG5cbmZ1bmN0aW9uIGNvbW1hbmQoc2VydmVyLCBucywgY21kLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIChjYWxsYmFjayA9IG9wdGlvbnMpLCAob3B0aW9ucyA9IHt9KTtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgaWYgKGNtZCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBNb25nb0Vycm9yKGBjb21tYW5kICR7SlNPTi5zdHJpbmdpZnkoY21kKX0gZG9lcyBub3QgcmV0dXJuIGEgY3Vyc29yYCkpO1xuICB9XG5cbiAgaWYgKCFpc0NsaWVudEVuY3J5cHRpb25FbmFibGVkKHNlcnZlcikpIHtcbiAgICBfY29tbWFuZChzZXJ2ZXIsIG5zLCBjbWQsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBfY3J5cHRDb21tYW5kKHNlcnZlciwgbnMsIGNtZCwgb3B0aW9ucywgY2FsbGJhY2spO1xufVxuXG5mdW5jdGlvbiBfY29tbWFuZChzZXJ2ZXIsIG5zLCBjbWQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGJzb24gPSBzZXJ2ZXIucy5ic29uO1xuICBjb25zdCBwb29sID0gc2VydmVyLnMucG9vbDtcbiAgY29uc3QgcmVhZFByZWZlcmVuY2UgPSBnZXRSZWFkUHJlZmVyZW5jZShjbWQsIG9wdGlvbnMpO1xuICBjb25zdCBzaG91bGRVc2VPcE1zZyA9IHN1cHBvcnRzT3BNc2coc2VydmVyKTtcbiAgY29uc3Qgc2Vzc2lvbiA9IG9wdGlvbnMuc2Vzc2lvbjtcblxuICBsZXQgY2x1c3RlclRpbWUgPSBzZXJ2ZXIuY2x1c3RlclRpbWU7XG4gIGxldCBmaW5hbENtZCA9IE9iamVjdC5hc3NpZ24oe30sIGNtZCk7XG4gIGlmIChoYXNTZXNzaW9uU3VwcG9ydChzZXJ2ZXIpICYmIHNlc3Npb24pIHtcbiAgICBpZiAoXG4gICAgICBzZXNzaW9uLmNsdXN0ZXJUaW1lICYmXG4gICAgICBzZXNzaW9uLmNsdXN0ZXJUaW1lLmNsdXN0ZXJUaW1lLmdyZWF0ZXJUaGFuKGNsdXN0ZXJUaW1lLmNsdXN0ZXJUaW1lKVxuICAgICkge1xuICAgICAgY2x1c3RlclRpbWUgPSBzZXNzaW9uLmNsdXN0ZXJUaW1lO1xuICAgIH1cblxuICAgIGNvbnN0IGVyciA9IGFwcGx5U2Vzc2lvbihzZXNzaW9uLCBmaW5hbENtZCwgb3B0aW9ucyk7XG4gICAgaWYgKGVycikge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgd2UgaGF2ZSBhIGtub3duIGNsdXN0ZXIgdGltZSwgZ29zc2lwIGl0XG4gIGlmIChjbHVzdGVyVGltZSkge1xuICAgIGZpbmFsQ21kLiRjbHVzdGVyVGltZSA9IGNsdXN0ZXJUaW1lO1xuICB9XG5cbiAgaWYgKFxuICAgIGlzU2hhcmRlZChzZXJ2ZXIpICYmXG4gICAgIXNob3VsZFVzZU9wTXNnICYmXG4gICAgcmVhZFByZWZlcmVuY2UgJiZcbiAgICByZWFkUHJlZmVyZW5jZS5wcmVmZXJlbmNlICE9PSAncHJpbWFyeSdcbiAgKSB7XG4gICAgZmluYWxDbWQgPSB7XG4gICAgICAkcXVlcnk6IGZpbmFsQ21kLFxuICAgICAgJHJlYWRQcmVmZXJlbmNlOiByZWFkUHJlZmVyZW5jZS50b0pTT04oKVxuICAgIH07XG4gIH1cblxuICBjb25zdCBjb21tYW5kT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oXG4gICAge1xuICAgICAgY29tbWFuZDogdHJ1ZSxcbiAgICAgIG51bWJlclRvU2tpcDogMCxcbiAgICAgIG51bWJlclRvUmV0dXJuOiAtMSxcbiAgICAgIGNoZWNrS2V5czogZmFsc2VcbiAgICB9LFxuICAgIG9wdGlvbnNcbiAgKTtcblxuICAvLyBUaGlzIHZhbHVlIGlzIG5vdCBvdmVycmlkYWJsZVxuICBjb21tYW5kT3B0aW9ucy5zbGF2ZU9rID0gcmVhZFByZWZlcmVuY2Uuc2xhdmVPaygpO1xuXG4gIGNvbnN0IGNtZE5zID0gYCR7ZGF0YWJhc2VOYW1lc3BhY2UobnMpfS4kY21kYDtcbiAgY29uc3QgbWVzc2FnZSA9IHNob3VsZFVzZU9wTXNnXG4gICAgPyBuZXcgTXNnKGJzb24sIGNtZE5zLCBmaW5hbENtZCwgY29tbWFuZE9wdGlvbnMpXG4gICAgOiBuZXcgUXVlcnkoYnNvbiwgY21kTnMsIGZpbmFsQ21kLCBjb21tYW5kT3B0aW9ucyk7XG5cbiAgY29uc3QgaW5UcmFuc2FjdGlvbiA9IHNlc3Npb24gJiYgKHNlc3Npb24uaW5UcmFuc2FjdGlvbigpIHx8IGlzVHJhbnNhY3Rpb25Db21tYW5kKGZpbmFsQ21kKSk7XG4gIGNvbnN0IGNvbW1hbmRSZXNwb25zZUhhbmRsZXIgPSBpblRyYW5zYWN0aW9uXG4gICAgPyBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICFjbWQuY29tbWl0VHJhbnNhY3Rpb24gJiZcbiAgICAgICAgICBlcnIgJiZcbiAgICAgICAgICBlcnIgaW5zdGFuY2VvZiBNb25nb0Vycm9yICYmXG4gICAgICAgICAgZXJyLmhhc0Vycm9yTGFiZWwoJ1RyYW5zaWVudFRyYW5zYWN0aW9uRXJyb3InKVxuICAgICAgICApIHtcbiAgICAgICAgICBzZXNzaW9uLnRyYW5zYWN0aW9uLnVucGluU2VydmVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICA6IGNhbGxiYWNrO1xuXG4gIHRyeSB7XG4gICAgcG9vbC53cml0ZShtZXNzYWdlLCBjb21tYW5kT3B0aW9ucywgY29tbWFuZFJlc3BvbnNlSGFuZGxlcik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbW1hbmRSZXNwb25zZUhhbmRsZXIoZXJyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNTZXNzaW9uU3VwcG9ydCh0b3BvbG9neSkge1xuICBpZiAodG9wb2xvZ3kgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICBpZiAodG9wb2xvZ3kuZGVzY3JpcHRpb24pIHtcbiAgICByZXR1cm4gdG9wb2xvZ3kuZGVzY3JpcHRpb24ubWF4V2lyZVZlcnNpb24gPj0gNjtcbiAgfVxuXG4gIHJldHVybiB0b3BvbG9neS5pc21hc3RlciA9PSBudWxsID8gZmFsc2UgOiB0b3BvbG9neS5pc21hc3Rlci5tYXhXaXJlVmVyc2lvbiA+PSA2O1xufVxuXG5mdW5jdGlvbiBzdXBwb3J0c09wTXNnKHRvcG9sb2d5T3JTZXJ2ZXIpIHtcbiAgY29uc3QgZGVzY3JpcHRpb24gPSB0b3BvbG9neU9yU2VydmVyLmlzbWFzdGVyXG4gICAgPyB0b3BvbG9neU9yU2VydmVyLmlzbWFzdGVyXG4gICAgOiB0b3BvbG9neU9yU2VydmVyLmRlc2NyaXB0aW9uO1xuXG4gIGlmIChkZXNjcmlwdGlvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGRlc2NyaXB0aW9uLm1heFdpcmVWZXJzaW9uID49IDYgJiYgZGVzY3JpcHRpb24uX19ub2RlanNfbW9ja19zZXJ2ZXJfXyA9PSBudWxsO1xufVxuXG5mdW5jdGlvbiBfY3J5cHRDb21tYW5kKHNlcnZlciwgbnMsIGNtZCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgY29uc3Qgc2hvdWxkQnlwYXNzQXV0b0VuY3J5cHRpb24gPSAhIXNlcnZlci5zLm9wdGlvbnMuYnlwYXNzQXV0b0VuY3J5cHRpb247XG4gIGNvbnN0IGF1dG9FbmNyeXB0ZXIgPSBzZXJ2ZXIuYXV0b0VuY3J5cHRlcjtcbiAgZnVuY3Rpb24gY29tbWFuZFJlc3BvbnNlSGFuZGxlcihlcnIsIHJlc3BvbnNlKSB7XG4gICAgaWYgKGVyciB8fCByZXNwb25zZSA9PSBudWxsKSB7XG4gICAgICBjYWxsYmFjayhlcnIsIHJlc3BvbnNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBhdXRvRW5jcnlwdGVyLmRlY3J5cHQocmVzcG9uc2UucmVzdWx0LCAoZXJyLCBkZWNyeXB0ZWQpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXNwb25zZS5yZXN1bHQgPSBkZWNyeXB0ZWQ7XG4gICAgICByZXNwb25zZS5tZXNzYWdlLmRvY3VtZW50cyA9IFtkZWNyeXB0ZWRdO1xuICAgICAgY2FsbGJhY2sobnVsbCwgcmVzcG9uc2UpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHNob3VsZEJ5cGFzc0F1dG9FbmNyeXB0aW9uKSB7XG4gICAgX2NvbW1hbmQoc2VydmVyLCBucywgY21kLCBvcHRpb25zLCBjb21tYW5kUmVzcG9uc2VIYW5kbGVyKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBhdXRvRW5jcnlwdGVyLmVuY3J5cHQobnMsIGNtZCwgKGVyciwgZW5jcnlwdGVkKSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBfY29tbWFuZChzZXJ2ZXIsIG5zLCBlbmNyeXB0ZWQsIG9wdGlvbnMsIGNvbW1hbmRSZXNwb25zZUhhbmRsZXIpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb21tYW5kO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///78\n");

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst KillCursor = __webpack_require__(48).KillCursor;\nconst MongoError = __webpack_require__(37).MongoError;\nconst MongoNetworkError = __webpack_require__(37).MongoNetworkError;\nconst collectionNamespace = __webpack_require__(41).collectionNamespace;\nconst maxWireVersion = __webpack_require__(35).maxWireVersion;\nconst command = __webpack_require__(78);\n\nfunction killCursors(server, ns, cursorState, callback) {\n  callback = typeof callback === 'function' ? callback : () => {};\n  const cursorId = cursorState.cursorId;\n\n  if (maxWireVersion(server) < 4) {\n    const bson = server.s.bson;\n    const pool = server.s.pool;\n    const killCursor = new KillCursor(bson, ns, [cursorId]);\n    const options = {\n      immediateRelease: true,\n      noResponse: true\n    };\n\n    if (typeof cursorState.session === 'object') {\n      options.session = cursorState.session;\n    }\n\n    if (pool && pool.isConnected()) {\n      try {\n        pool.write(killCursor, options, callback);\n      } catch (err) {\n        if (typeof callback === 'function') {\n          callback(err, null);\n        } else {\n          console.warn(err);\n        }\n      }\n    }\n\n    return;\n  }\n\n  const killCursorCmd = {\n    killCursors: collectionNamespace(ns),\n    cursors: [cursorId]\n  };\n\n  const options = {};\n  if (typeof cursorState.session === 'object') options.session = cursorState.session;\n\n  command(server, ns, killCursorCmd, options, (err, result) => {\n    if (err) {\n      return callback(err);\n    }\n\n    const response = result.message;\n    if (response.cursorNotFound) {\n      return callback(new MongoNetworkError('cursor killed or timed out'), null);\n    }\n\n    if (!Array.isArray(response.documents) || response.documents.length === 0) {\n      return callback(\n        new MongoError(`invalid killCursors result returned for cursor id ${cursorId}`)\n      );\n    }\n\n    callback(null, response.documents[0]);\n  });\n}\n\nmodule.exports = killCursors;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NvcmUvd2lyZXByb3RvY29sL2tpbGxfY3Vyc29ycy5qcz9jMDllIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLG1CQUFtQixtQkFBTyxDQUFDLEVBQXdCO0FBQ25ELG1CQUFtQixtQkFBTyxDQUFDLEVBQVU7QUFDckMsMEJBQTBCLG1CQUFPLENBQUMsRUFBVTtBQUM1Qyw0QkFBNEIsbUJBQU8sQ0FBQyxFQUFVO0FBQzlDLHVCQUF1QixtQkFBTyxDQUFDLEVBQVU7QUFDekMsZ0JBQWdCLG1CQUFPLENBQUMsRUFBVzs7QUFFbkM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNEVBQTRFLFNBQVM7QUFDckY7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDs7QUFFQSIsImZpbGUiOiI3OS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgS2lsbEN1cnNvciA9IHJlcXVpcmUoJy4uL2Nvbm5lY3Rpb24vY29tbWFuZHMnKS5LaWxsQ3Vyc29yO1xuY29uc3QgTW9uZ29FcnJvciA9IHJlcXVpcmUoJy4uL2Vycm9yJykuTW9uZ29FcnJvcjtcbmNvbnN0IE1vbmdvTmV0d29ya0Vycm9yID0gcmVxdWlyZSgnLi4vZXJyb3InKS5Nb25nb05ldHdvcmtFcnJvcjtcbmNvbnN0IGNvbGxlY3Rpb25OYW1lc3BhY2UgPSByZXF1aXJlKCcuL3NoYXJlZCcpLmNvbGxlY3Rpb25OYW1lc3BhY2U7XG5jb25zdCBtYXhXaXJlVmVyc2lvbiA9IHJlcXVpcmUoJy4uL3V0aWxzJykubWF4V2lyZVZlcnNpb247XG5jb25zdCBjb21tYW5kID0gcmVxdWlyZSgnLi9jb21tYW5kJyk7XG5cbmZ1bmN0aW9uIGtpbGxDdXJzb3JzKHNlcnZlciwgbnMsIGN1cnNvclN0YXRlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayA9IHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGxiYWNrIDogKCkgPT4ge307XG4gIGNvbnN0IGN1cnNvcklkID0gY3Vyc29yU3RhdGUuY3Vyc29ySWQ7XG5cbiAgaWYgKG1heFdpcmVWZXJzaW9uKHNlcnZlcikgPCA0KSB7XG4gICAgY29uc3QgYnNvbiA9IHNlcnZlci5zLmJzb247XG4gICAgY29uc3QgcG9vbCA9IHNlcnZlci5zLnBvb2w7XG4gICAgY29uc3Qga2lsbEN1cnNvciA9IG5ldyBLaWxsQ3Vyc29yKGJzb24sIG5zLCBbY3Vyc29ySWRdKTtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgaW1tZWRpYXRlUmVsZWFzZTogdHJ1ZSxcbiAgICAgIG5vUmVzcG9uc2U6IHRydWVcbiAgICB9O1xuXG4gICAgaWYgKHR5cGVvZiBjdXJzb3JTdGF0ZS5zZXNzaW9uID09PSAnb2JqZWN0Jykge1xuICAgICAgb3B0aW9ucy5zZXNzaW9uID0gY3Vyc29yU3RhdGUuc2Vzc2lvbjtcbiAgICB9XG5cbiAgICBpZiAocG9vbCAmJiBwb29sLmlzQ29ubmVjdGVkKCkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHBvb2wud3JpdGUoa2lsbEN1cnNvciwgb3B0aW9ucywgY2FsbGJhY2spO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjYWxsYmFjayhlcnIsIG51bGwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUud2FybihlcnIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qga2lsbEN1cnNvckNtZCA9IHtcbiAgICBraWxsQ3Vyc29yczogY29sbGVjdGlvbk5hbWVzcGFjZShucyksXG4gICAgY3Vyc29yczogW2N1cnNvcklkXVxuICB9O1xuXG4gIGNvbnN0IG9wdGlvbnMgPSB7fTtcbiAgaWYgKHR5cGVvZiBjdXJzb3JTdGF0ZS5zZXNzaW9uID09PSAnb2JqZWN0Jykgb3B0aW9ucy5zZXNzaW9uID0gY3Vyc29yU3RhdGUuc2Vzc2lvbjtcblxuICBjb21tYW5kKHNlcnZlciwgbnMsIGtpbGxDdXJzb3JDbWQsIG9wdGlvbnMsIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3BvbnNlID0gcmVzdWx0Lm1lc3NhZ2U7XG4gICAgaWYgKHJlc3BvbnNlLmN1cnNvck5vdEZvdW5kKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2sobmV3IE1vbmdvTmV0d29ya0Vycm9yKCdjdXJzb3Iga2lsbGVkIG9yIHRpbWVkIG91dCcpLCBudWxsKTtcbiAgICB9XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVzcG9uc2UuZG9jdW1lbnRzKSB8fCByZXNwb25zZS5kb2N1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soXG4gICAgICAgIG5ldyBNb25nb0Vycm9yKGBpbnZhbGlkIGtpbGxDdXJzb3JzIHJlc3VsdCByZXR1cm5lZCBmb3IgY3Vyc29yIGlkICR7Y3Vyc29ySWR9YClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY2FsbGJhY2sobnVsbCwgcmVzcG9uc2UuZG9jdW1lbnRzWzBdKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2lsbEN1cnNvcnM7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///79\n");

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst GetMore = __webpack_require__(48).GetMore;\nconst retrieveBSON = __webpack_require__(40).retrieveBSON;\nconst MongoError = __webpack_require__(37).MongoError;\nconst MongoNetworkError = __webpack_require__(37).MongoNetworkError;\nconst BSON = retrieveBSON();\nconst Long = BSON.Long;\nconst collectionNamespace = __webpack_require__(41).collectionNamespace;\nconst maxWireVersion = __webpack_require__(35).maxWireVersion;\nconst applyCommonQueryOptions = __webpack_require__(41).applyCommonQueryOptions;\nconst command = __webpack_require__(78);\n\nfunction getMore(server, ns, cursorState, batchSize, options, callback) {\n  options = options || {};\n\n  const wireVersion = maxWireVersion(server);\n  function queryCallback(err, result) {\n    if (err) return callback(err);\n    const response = result.message;\n\n    // If we have a timed out query or a cursor that was killed\n    if (response.cursorNotFound) {\n      return callback(new MongoNetworkError('cursor killed or timed out'), null);\n    }\n\n    if (wireVersion < 4) {\n      const cursorId =\n        typeof response.cursorId === 'number'\n          ? Long.fromNumber(response.cursorId)\n          : response.cursorId;\n\n      cursorState.documents = response.documents;\n      cursorState.cursorId = cursorId;\n\n      callback(null, null, response.connection);\n      return;\n    }\n\n    // We have an error detected\n    if (response.documents[0].ok === 0) {\n      return callback(new MongoError(response.documents[0]));\n    }\n\n    // Ensure we have a Long valid cursor id\n    const cursorId =\n      typeof response.documents[0].cursor.id === 'number'\n        ? Long.fromNumber(response.documents[0].cursor.id)\n        : response.documents[0].cursor.id;\n\n    cursorState.documents = response.documents[0].cursor.nextBatch;\n    cursorState.cursorId = cursorId;\n\n    callback(null, response.documents[0], response.connection);\n  }\n\n  if (wireVersion < 4) {\n    const bson = server.s.bson;\n    const getMoreOp = new GetMore(bson, ns, cursorState.cursorId, { numberToReturn: batchSize });\n    const queryOptions = applyCommonQueryOptions({}, cursorState);\n    server.s.pool.write(getMoreOp, queryOptions, queryCallback);\n    return;\n  }\n\n  const getMoreCmd = {\n    getMore: cursorState.cursorId,\n    collection: collectionNamespace(ns),\n    batchSize: Math.abs(batchSize)\n  };\n\n  if (cursorState.cmd.tailable && typeof cursorState.cmd.maxAwaitTimeMS === 'number') {\n    getMoreCmd.maxTimeMS = cursorState.cmd.maxAwaitTimeMS;\n  }\n\n  const commandOptions = Object.assign(\n    {\n      returnFieldSelector: null,\n      documentsReturnedIn: 'nextBatch'\n    },\n    options\n  );\n\n  if (cursorState.session) {\n    commandOptions.session = cursorState.session;\n  }\n\n  command(server, ns, getMoreCmd, commandOptions, queryCallback);\n}\n\nmodule.exports = getMore;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NvcmUvd2lyZXByb3RvY29sL2dldF9tb3JlLmpzPzE0MjAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsRUFBd0I7QUFDaEQscUJBQXFCLG1CQUFPLENBQUMsRUFBcUI7QUFDbEQsbUJBQW1CLG1CQUFPLENBQUMsRUFBVTtBQUNyQywwQkFBMEIsbUJBQU8sQ0FBQyxFQUFVO0FBQzVDO0FBQ0E7QUFDQSw0QkFBNEIsbUJBQU8sQ0FBQyxFQUFVO0FBQzlDLHVCQUF1QixtQkFBTyxDQUFDLEVBQVU7QUFDekMsZ0NBQWdDLG1CQUFPLENBQUMsRUFBVTtBQUNsRCxnQkFBZ0IsbUJBQU8sQ0FBQyxFQUFXOztBQUVuQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1FQUFtRSw0QkFBNEI7QUFDL0YsbURBQW1EO0FBQ25EO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwiZmlsZSI6IjgwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBHZXRNb3JlID0gcmVxdWlyZSgnLi4vY29ubmVjdGlvbi9jb21tYW5kcycpLkdldE1vcmU7XG5jb25zdCByZXRyaWV2ZUJTT04gPSByZXF1aXJlKCcuLi9jb25uZWN0aW9uL3V0aWxzJykucmV0cmlldmVCU09OO1xuY29uc3QgTW9uZ29FcnJvciA9IHJlcXVpcmUoJy4uL2Vycm9yJykuTW9uZ29FcnJvcjtcbmNvbnN0IE1vbmdvTmV0d29ya0Vycm9yID0gcmVxdWlyZSgnLi4vZXJyb3InKS5Nb25nb05ldHdvcmtFcnJvcjtcbmNvbnN0IEJTT04gPSByZXRyaWV2ZUJTT04oKTtcbmNvbnN0IExvbmcgPSBCU09OLkxvbmc7XG5jb25zdCBjb2xsZWN0aW9uTmFtZXNwYWNlID0gcmVxdWlyZSgnLi9zaGFyZWQnKS5jb2xsZWN0aW9uTmFtZXNwYWNlO1xuY29uc3QgbWF4V2lyZVZlcnNpb24gPSByZXF1aXJlKCcuLi91dGlscycpLm1heFdpcmVWZXJzaW9uO1xuY29uc3QgYXBwbHlDb21tb25RdWVyeU9wdGlvbnMgPSByZXF1aXJlKCcuL3NoYXJlZCcpLmFwcGx5Q29tbW9uUXVlcnlPcHRpb25zO1xuY29uc3QgY29tbWFuZCA9IHJlcXVpcmUoJy4vY29tbWFuZCcpO1xuXG5mdW5jdGlvbiBnZXRNb3JlKHNlcnZlciwgbnMsIGN1cnNvclN0YXRlLCBiYXRjaFNpemUsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGNvbnN0IHdpcmVWZXJzaW9uID0gbWF4V2lyZVZlcnNpb24oc2VydmVyKTtcbiAgZnVuY3Rpb24gcXVlcnlDYWxsYmFjayhlcnIsIHJlc3VsdCkge1xuICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gcmVzdWx0Lm1lc3NhZ2U7XG5cbiAgICAvLyBJZiB3ZSBoYXZlIGEgdGltZWQgb3V0IHF1ZXJ5IG9yIGEgY3Vyc29yIHRoYXQgd2FzIGtpbGxlZFxuICAgIGlmIChyZXNwb25zZS5jdXJzb3JOb3RGb3VuZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBNb25nb05ldHdvcmtFcnJvcignY3Vyc29yIGtpbGxlZCBvciB0aW1lZCBvdXQnKSwgbnVsbCk7XG4gICAgfVxuXG4gICAgaWYgKHdpcmVWZXJzaW9uIDwgNCkge1xuICAgICAgY29uc3QgY3Vyc29ySWQgPVxuICAgICAgICB0eXBlb2YgcmVzcG9uc2UuY3Vyc29ySWQgPT09ICdudW1iZXInXG4gICAgICAgICAgPyBMb25nLmZyb21OdW1iZXIocmVzcG9uc2UuY3Vyc29ySWQpXG4gICAgICAgICAgOiByZXNwb25zZS5jdXJzb3JJZDtcblxuICAgICAgY3Vyc29yU3RhdGUuZG9jdW1lbnRzID0gcmVzcG9uc2UuZG9jdW1lbnRzO1xuICAgICAgY3Vyc29yU3RhdGUuY3Vyc29ySWQgPSBjdXJzb3JJZDtcblxuICAgICAgY2FsbGJhY2sobnVsbCwgbnVsbCwgcmVzcG9uc2UuY29ubmVjdGlvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gV2UgaGF2ZSBhbiBlcnJvciBkZXRlY3RlZFxuICAgIGlmIChyZXNwb25zZS5kb2N1bWVudHNbMF0ub2sgPT09IDApIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgTW9uZ29FcnJvcihyZXNwb25zZS5kb2N1bWVudHNbMF0pKTtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgd2UgaGF2ZSBhIExvbmcgdmFsaWQgY3Vyc29yIGlkXG4gICAgY29uc3QgY3Vyc29ySWQgPVxuICAgICAgdHlwZW9mIHJlc3BvbnNlLmRvY3VtZW50c1swXS5jdXJzb3IuaWQgPT09ICdudW1iZXInXG4gICAgICAgID8gTG9uZy5mcm9tTnVtYmVyKHJlc3BvbnNlLmRvY3VtZW50c1swXS5jdXJzb3IuaWQpXG4gICAgICAgIDogcmVzcG9uc2UuZG9jdW1lbnRzWzBdLmN1cnNvci5pZDtcblxuICAgIGN1cnNvclN0YXRlLmRvY3VtZW50cyA9IHJlc3BvbnNlLmRvY3VtZW50c1swXS5jdXJzb3IubmV4dEJhdGNoO1xuICAgIGN1cnNvclN0YXRlLmN1cnNvcklkID0gY3Vyc29ySWQ7XG5cbiAgICBjYWxsYmFjayhudWxsLCByZXNwb25zZS5kb2N1bWVudHNbMF0sIHJlc3BvbnNlLmNvbm5lY3Rpb24pO1xuICB9XG5cbiAgaWYgKHdpcmVWZXJzaW9uIDwgNCkge1xuICAgIGNvbnN0IGJzb24gPSBzZXJ2ZXIucy5ic29uO1xuICAgIGNvbnN0IGdldE1vcmVPcCA9IG5ldyBHZXRNb3JlKGJzb24sIG5zLCBjdXJzb3JTdGF0ZS5jdXJzb3JJZCwgeyBudW1iZXJUb1JldHVybjogYmF0Y2hTaXplIH0pO1xuICAgIGNvbnN0IHF1ZXJ5T3B0aW9ucyA9IGFwcGx5Q29tbW9uUXVlcnlPcHRpb25zKHt9LCBjdXJzb3JTdGF0ZSk7XG4gICAgc2VydmVyLnMucG9vbC53cml0ZShnZXRNb3JlT3AsIHF1ZXJ5T3B0aW9ucywgcXVlcnlDYWxsYmFjayk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgZ2V0TW9yZUNtZCA9IHtcbiAgICBnZXRNb3JlOiBjdXJzb3JTdGF0ZS5jdXJzb3JJZCxcbiAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uTmFtZXNwYWNlKG5zKSxcbiAgICBiYXRjaFNpemU6IE1hdGguYWJzKGJhdGNoU2l6ZSlcbiAgfTtcblxuICBpZiAoY3Vyc29yU3RhdGUuY21kLnRhaWxhYmxlICYmIHR5cGVvZiBjdXJzb3JTdGF0ZS5jbWQubWF4QXdhaXRUaW1lTVMgPT09ICdudW1iZXInKSB7XG4gICAgZ2V0TW9yZUNtZC5tYXhUaW1lTVMgPSBjdXJzb3JTdGF0ZS5jbWQubWF4QXdhaXRUaW1lTVM7XG4gIH1cblxuICBjb25zdCBjb21tYW5kT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oXG4gICAge1xuICAgICAgcmV0dXJuRmllbGRTZWxlY3RvcjogbnVsbCxcbiAgICAgIGRvY3VtZW50c1JldHVybmVkSW46ICduZXh0QmF0Y2gnXG4gICAgfSxcbiAgICBvcHRpb25zXG4gICk7XG5cbiAgaWYgKGN1cnNvclN0YXRlLnNlc3Npb24pIHtcbiAgICBjb21tYW5kT3B0aW9ucy5zZXNzaW9uID0gY3Vyc29yU3RhdGUuc2Vzc2lvbjtcbiAgfVxuXG4gIGNvbW1hbmQoc2VydmVyLCBucywgZ2V0TW9yZUNtZCwgY29tbWFuZE9wdGlvbnMsIHF1ZXJ5Q2FsbGJhY2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1vcmU7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///80\n");

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Query = __webpack_require__(48).Query;\nconst MongoError = __webpack_require__(37).MongoError;\nconst getReadPreference = __webpack_require__(41).getReadPreference;\nconst collectionNamespace = __webpack_require__(41).collectionNamespace;\nconst isSharded = __webpack_require__(41).isSharded;\nconst maxWireVersion = __webpack_require__(35).maxWireVersion;\nconst applyCommonQueryOptions = __webpack_require__(41).applyCommonQueryOptions;\nconst command = __webpack_require__(78);\n\nfunction query(server, ns, cmd, cursorState, options, callback) {\n  options = options || {};\n  if (cursorState.cursorId != null) {\n    return callback();\n  }\n\n  if (cmd == null) {\n    return callback(new MongoError(`command ${JSON.stringify(cmd)} does not return a cursor`));\n  }\n\n  if (maxWireVersion(server) < 4) {\n    const query = prepareLegacyFindQuery(server, ns, cmd, cursorState, options);\n    const queryOptions = applyCommonQueryOptions({}, cursorState);\n    if (typeof query.documentsReturnedIn === 'string') {\n      queryOptions.documentsReturnedIn = query.documentsReturnedIn;\n    }\n\n    server.s.pool.write(query, queryOptions, callback);\n    return;\n  }\n\n  const readPreference = getReadPreference(cmd, options);\n  const findCmd = prepareFindCommand(server, ns, cmd, cursorState, options);\n\n  // NOTE: This actually modifies the passed in cmd, and our code _depends_ on this\n  //       side-effect. Change this ASAP\n  cmd.virtual = false;\n\n  const commandOptions = Object.assign(\n    {\n      documentsReturnedIn: 'firstBatch',\n      numberToReturn: 1,\n      slaveOk: readPreference.slaveOk()\n    },\n    options\n  );\n\n  if (cmd.readPreference) {\n    commandOptions.readPreference = readPreference;\n  }\n\n  if (cursorState.session) {\n    commandOptions.session = cursorState.session;\n  }\n\n  command(server, ns, findCmd, commandOptions, callback);\n}\n\nfunction prepareFindCommand(server, ns, cmd, cursorState) {\n  cursorState.batchSize = cmd.batchSize || cursorState.batchSize;\n  let findCmd = {\n    find: collectionNamespace(ns)\n  };\n\n  if (cmd.query) {\n    if (cmd.query['$query']) {\n      findCmd.filter = cmd.query['$query'];\n    } else {\n      findCmd.filter = cmd.query;\n    }\n  }\n\n  let sortValue = cmd.sort;\n  if (Array.isArray(sortValue)) {\n    const sortObject = {};\n\n    if (sortValue.length > 0 && !Array.isArray(sortValue[0])) {\n      let sortDirection = sortValue[1];\n      if (sortDirection === 'asc') {\n        sortDirection = 1;\n      } else if (sortDirection === 'desc') {\n        sortDirection = -1;\n      }\n\n      sortObject[sortValue[0]] = sortDirection;\n    } else {\n      for (let i = 0; i < sortValue.length; i++) {\n        let sortDirection = sortValue[i][1];\n        if (sortDirection === 'asc') {\n          sortDirection = 1;\n        } else if (sortDirection === 'desc') {\n          sortDirection = -1;\n        }\n\n        sortObject[sortValue[i][0]] = sortDirection;\n      }\n    }\n\n    sortValue = sortObject;\n  }\n\n  if (cmd.sort) findCmd.sort = sortValue;\n  if (cmd.fields) findCmd.projection = cmd.fields;\n  if (cmd.hint) findCmd.hint = cmd.hint;\n  if (cmd.skip) findCmd.skip = cmd.skip;\n  if (cmd.limit) findCmd.limit = cmd.limit;\n  if (cmd.limit < 0) {\n    findCmd.limit = Math.abs(cmd.limit);\n    findCmd.singleBatch = true;\n  }\n\n  if (typeof cmd.batchSize === 'number') {\n    if (cmd.batchSize < 0) {\n      if (cmd.limit !== 0 && Math.abs(cmd.batchSize) < Math.abs(cmd.limit)) {\n        findCmd.limit = Math.abs(cmd.batchSize);\n      }\n\n      findCmd.singleBatch = true;\n    }\n\n    findCmd.batchSize = Math.abs(cmd.batchSize);\n  }\n\n  if (cmd.comment) findCmd.comment = cmd.comment;\n  if (cmd.maxScan) findCmd.maxScan = cmd.maxScan;\n  if (cmd.maxTimeMS) findCmd.maxTimeMS = cmd.maxTimeMS;\n  if (cmd.min) findCmd.min = cmd.min;\n  if (cmd.max) findCmd.max = cmd.max;\n  findCmd.returnKey = cmd.returnKey ? cmd.returnKey : false;\n  findCmd.showRecordId = cmd.showDiskLoc ? cmd.showDiskLoc : false;\n  if (cmd.snapshot) findCmd.snapshot = cmd.snapshot;\n  if (cmd.tailable) findCmd.tailable = cmd.tailable;\n  if (cmd.oplogReplay) findCmd.oplogReplay = cmd.oplogReplay;\n  if (cmd.noCursorTimeout) findCmd.noCursorTimeout = cmd.noCursorTimeout;\n  if (cmd.awaitData) findCmd.awaitData = cmd.awaitData;\n  if (cmd.awaitdata) findCmd.awaitData = cmd.awaitdata;\n  if (cmd.partial) findCmd.partial = cmd.partial;\n  if (cmd.collation) findCmd.collation = cmd.collation;\n  if (cmd.readConcern) findCmd.readConcern = cmd.readConcern;\n\n  // If we have explain, we need to rewrite the find command\n  // to wrap it in the explain command\n  if (cmd.explain) {\n    findCmd = {\n      explain: findCmd\n    };\n  }\n\n  return findCmd;\n}\n\nfunction prepareLegacyFindQuery(server, ns, cmd, cursorState, options) {\n  options = options || {};\n  const bson = server.s.bson;\n  const readPreference = getReadPreference(cmd, options);\n  cursorState.batchSize = cmd.batchSize || cursorState.batchSize;\n\n  let numberToReturn = 0;\n  if (\n    cursorState.limit < 0 ||\n    (cursorState.limit !== 0 && cursorState.limit < cursorState.batchSize) ||\n    (cursorState.limit > 0 && cursorState.batchSize === 0)\n  ) {\n    numberToReturn = cursorState.limit;\n  } else {\n    numberToReturn = cursorState.batchSize;\n  }\n\n  const numberToSkip = cursorState.skip || 0;\n\n  const findCmd = {};\n  if (isSharded(server) && readPreference) {\n    findCmd['$readPreference'] = readPreference.toJSON();\n  }\n\n  if (cmd.sort) findCmd['$orderby'] = cmd.sort;\n  if (cmd.hint) findCmd['$hint'] = cmd.hint;\n  if (cmd.snapshot) findCmd['$snapshot'] = cmd.snapshot;\n  if (typeof cmd.returnKey !== 'undefined') findCmd['$returnKey'] = cmd.returnKey;\n  if (cmd.maxScan) findCmd['$maxScan'] = cmd.maxScan;\n  if (cmd.min) findCmd['$min'] = cmd.min;\n  if (cmd.max) findCmd['$max'] = cmd.max;\n  if (typeof cmd.showDiskLoc !== 'undefined') findCmd['$showDiskLoc'] = cmd.showDiskLoc;\n  if (cmd.comment) findCmd['$comment'] = cmd.comment;\n  if (cmd.maxTimeMS) findCmd['$maxTimeMS'] = cmd.maxTimeMS;\n  if (cmd.explain) {\n    // nToReturn must be 0 (match all) or negative (match N and close cursor)\n    // nToReturn > 0 will give explain results equivalent to limit(0)\n    numberToReturn = -Math.abs(cmd.limit || 0);\n    findCmd['$explain'] = true;\n  }\n\n  findCmd['$query'] = cmd.query;\n  if (cmd.readConcern && cmd.readConcern.level !== 'local') {\n    throw new MongoError(\n      `server find command does not support a readConcern level of ${cmd.readConcern.level}`\n    );\n  }\n\n  if (cmd.readConcern) {\n    cmd = Object.assign({}, cmd);\n    delete cmd['readConcern'];\n  }\n\n  const serializeFunctions =\n    typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  const ignoreUndefined =\n    typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n\n  const query = new Query(bson, ns, findCmd, {\n    numberToSkip: numberToSkip,\n    numberToReturn: numberToReturn,\n    pre32Limit: typeof cmd.limit !== 'undefined' ? cmd.limit : undefined,\n    checkKeys: false,\n    returnFieldSelector: cmd.fields,\n    serializeFunctions: serializeFunctions,\n    ignoreUndefined: ignoreUndefined\n  });\n\n  if (typeof cmd.tailable === 'boolean') query.tailable = cmd.tailable;\n  if (typeof cmd.oplogReplay === 'boolean') query.oplogReplay = cmd.oplogReplay;\n  if (typeof cmd.noCursorTimeout === 'boolean') query.noCursorTimeout = cmd.noCursorTimeout;\n  if (typeof cmd.awaitData === 'boolean') query.awaitData = cmd.awaitData;\n  if (typeof cmd.partial === 'boolean') query.partial = cmd.partial;\n\n  query.slaveOk = readPreference.slaveOk();\n  return query;\n}\n\nmodule.exports = query;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///81\n");

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Logger = __webpack_require__(51);\nconst retrieveBSON = __webpack_require__(40).retrieveBSON;\nconst MongoError = __webpack_require__(37).MongoError;\nconst MongoNetworkError = __webpack_require__(37).MongoNetworkError;\nconst mongoErrorContextSymbol = __webpack_require__(37).mongoErrorContextSymbol;\nconst collationNotSupported = __webpack_require__(35).collationNotSupported;\nconst ReadPreference = __webpack_require__(42);\nconst isUnifiedTopology = __webpack_require__(35).isUnifiedTopology;\nconst executeOperation = __webpack_require__(83);\nconst Readable = __webpack_require__(85).Readable;\nconst SUPPORTS = __webpack_require__(86).SUPPORTS;\nconst MongoDBNamespace = __webpack_require__(86).MongoDBNamespace;\nconst OperationBase = __webpack_require__(84).OperationBase;\n\nconst BSON = retrieveBSON();\nconst Long = BSON.Long;\n\n// Possible states for a cursor\nconst CursorState = {\n  INIT: 0,\n  OPEN: 1,\n  CLOSED: 2,\n  GET_MORE: 3\n};\n\n//\n// Handle callback (including any exceptions thrown)\nfunction handleCallback(callback, err, result) {\n  try {\n    callback(err, result);\n  } catch (err) {\n    process.nextTick(function() {\n      throw err;\n    });\n  }\n}\n\n/**\n * This is a cursor results callback\n *\n * @callback resultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {object} document\n */\n\n/**\n * @fileOverview The **Cursor** class is an internal class that embodies a cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query.\n *\n * **CURSORS Cannot directly be instantiated**\n */\n\n/**\n * The core cursor class. All cursors in the driver build off of this one.\n *\n * @property {number} cursorBatchSize The current cursorBatchSize for the cursor\n * @property {number} cursorLimit The current cursorLimit for the cursor\n * @property {number} cursorSkip The current cursorSkip for the cursor\n */\nclass CoreCursor extends Readable {\n  /**\n   * Create a new core `Cursor` instance.\n   * **NOTE** Not to be instantiated directly\n   *\n   * @param {object} topology The server topology instance.\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {{object}|Long} cmd The selector (can be a command or a cursorId)\n   * @param {object} [options=null] Optional settings.\n   * @param {object} [options.batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/find/| find command documentation} and {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n   * @param {array} [options.documents=[]] Initial documents list for cursor\n   * @param {object} [options.transforms=null] Transform methods for the cursor results\n   * @param {function} [options.transforms.query] Transform the value returned from the initial query\n   * @param {function} [options.transforms.doc] Transform each document returned from Cursor.prototype._next\n   */\n  constructor(topology, ns, cmd, options) {\n    super({ objectMode: true });\n    options = options || {};\n\n    if (ns instanceof OperationBase) {\n      this.operation = ns;\n      ns = this.operation.ns.toString();\n      options = this.operation.options;\n      cmd = this.operation.cmd ? this.operation.cmd : {};\n    }\n\n    // Cursor pool\n    this.pool = null;\n    // Cursor server\n    this.server = null;\n\n    // Do we have a not connected handler\n    this.disconnectHandler = options.disconnectHandler;\n\n    // Set local values\n    this.bson = topology.s.bson;\n    this.ns = ns;\n    this.namespace = MongoDBNamespace.fromString(ns);\n    this.cmd = cmd;\n    this.options = options;\n    this.topology = topology;\n\n    // All internal state\n    this.cursorState = {\n      cursorId: null,\n      cmd,\n      documents: options.documents || [],\n      cursorIndex: 0,\n      dead: false,\n      killed: false,\n      init: false,\n      notified: false,\n      limit: options.limit || cmd.limit || 0,\n      skip: options.skip || cmd.skip || 0,\n      batchSize: options.batchSize || cmd.batchSize || 1000,\n      currentLimit: 0,\n      // Result field name if not a cursor (contains the array of results)\n      transforms: options.transforms,\n      raw: options.raw || (cmd && cmd.raw)\n    };\n\n    if (typeof options.session === 'object') {\n      this.cursorState.session = options.session;\n    }\n\n    // Add promoteLong to cursor state\n    const topologyOptions = topology.s.options;\n    if (typeof topologyOptions.promoteLongs === 'boolean') {\n      this.cursorState.promoteLongs = topologyOptions.promoteLongs;\n    } else if (typeof options.promoteLongs === 'boolean') {\n      this.cursorState.promoteLongs = options.promoteLongs;\n    }\n\n    // Add promoteValues to cursor state\n    if (typeof topologyOptions.promoteValues === 'boolean') {\n      this.cursorState.promoteValues = topologyOptions.promoteValues;\n    } else if (typeof options.promoteValues === 'boolean') {\n      this.cursorState.promoteValues = options.promoteValues;\n    }\n\n    // Add promoteBuffers to cursor state\n    if (typeof topologyOptions.promoteBuffers === 'boolean') {\n      this.cursorState.promoteBuffers = topologyOptions.promoteBuffers;\n    } else if (typeof options.promoteBuffers === 'boolean') {\n      this.cursorState.promoteBuffers = options.promoteBuffers;\n    }\n\n    if (topologyOptions.reconnect) {\n      this.cursorState.reconnect = topologyOptions.reconnect;\n    }\n\n    // Logger\n    this.logger = Logger('Cursor', topologyOptions);\n\n    //\n    // Did we pass in a cursor id\n    if (typeof cmd === 'number') {\n      this.cursorState.cursorId = Long.fromNumber(cmd);\n      this.cursorState.lastCursorId = this.cursorState.cursorId;\n    } else if (cmd instanceof Long) {\n      this.cursorState.cursorId = cmd;\n      this.cursorState.lastCursorId = cmd;\n    }\n\n    // TODO: remove as part of NODE-2104\n    if (this.operation) {\n      this.operation.cursorState = this.cursorState;\n    }\n  }\n\n  setCursorBatchSize(value) {\n    this.cursorState.batchSize = value;\n  }\n\n  cursorBatchSize() {\n    return this.cursorState.batchSize;\n  }\n\n  setCursorLimit(value) {\n    this.cursorState.limit = value;\n  }\n\n  cursorLimit() {\n    return this.cursorState.limit;\n  }\n\n  setCursorSkip(value) {\n    this.cursorState.skip = value;\n  }\n\n  cursorSkip() {\n    return this.cursorState.skip;\n  }\n\n  /**\n   * Retrieve the next document from the cursor\n   * @method\n   * @param {resultCallback} callback A callback function\n   */\n  _next(callback) {\n    nextFunction(this, callback);\n  }\n\n  /**\n   * Clone the cursor\n   * @method\n   * @return {Cursor}\n   */\n  clone() {\n    return this.topology.cursor(this.ns, this.cmd, this.options);\n  }\n\n  /**\n   * Checks if the cursor is dead\n   * @method\n   * @return {boolean} A boolean signifying if the cursor is dead or not\n   */\n  isDead() {\n    return this.cursorState.dead === true;\n  }\n\n  /**\n   * Checks if the cursor was killed by the application\n   * @method\n   * @return {boolean} A boolean signifying if the cursor was killed by the application\n   */\n  isKilled() {\n    return this.cursorState.killed === true;\n  }\n\n  /**\n   * Checks if the cursor notified it's caller about it's death\n   * @method\n   * @return {boolean} A boolean signifying if the cursor notified the callback\n   */\n  isNotified() {\n    return this.cursorState.notified === true;\n  }\n\n  /**\n   * Returns current buffered documents length\n   * @method\n   * @return {number} The number of items in the buffered documents\n   */\n  bufferedCount() {\n    return this.cursorState.documents.length - this.cursorState.cursorIndex;\n  }\n\n  /**\n   * Returns current buffered documents\n   * @method\n   * @return {Array} An array of buffered documents\n   */\n  readBufferedDocuments(number) {\n    const unreadDocumentsLength = this.cursorState.documents.length - this.cursorState.cursorIndex;\n    const length = number < unreadDocumentsLength ? number : unreadDocumentsLength;\n    let elements = this.cursorState.documents.slice(\n      this.cursorState.cursorIndex,\n      this.cursorState.cursorIndex + length\n    );\n\n    // Transform the doc with passed in transformation method if provided\n    if (this.cursorState.transforms && typeof this.cursorState.transforms.doc === 'function') {\n      // Transform all the elements\n      for (let i = 0; i < elements.length; i++) {\n        elements[i] = this.cursorState.transforms.doc(elements[i]);\n      }\n    }\n\n    // Ensure we do not return any more documents than the limit imposed\n    // Just return the number of elements up to the limit\n    if (\n      this.cursorState.limit > 0 &&\n      this.cursorState.currentLimit + elements.length > this.cursorState.limit\n    ) {\n      elements = elements.slice(0, this.cursorState.limit - this.cursorState.currentLimit);\n      this.kill();\n    }\n\n    // Adjust current limit\n    this.cursorState.currentLimit = this.cursorState.currentLimit + elements.length;\n    this.cursorState.cursorIndex = this.cursorState.cursorIndex + elements.length;\n\n    // Return elements\n    return elements;\n  }\n\n  /**\n   * Resets local state for this cursor instance, and issues a `killCursors` command to the server\n   *\n   * @param {resultCallback} callback A callback function\n   */\n  kill(callback) {\n    // Set cursor to dead\n    this.cursorState.dead = true;\n    this.cursorState.killed = true;\n    // Remove documents\n    this.cursorState.documents = [];\n\n    // If no cursor id just return\n    if (\n      this.cursorState.cursorId == null ||\n      this.cursorState.cursorId.isZero() ||\n      this.cursorState.init === false\n    ) {\n      if (callback) callback(null, null);\n      return;\n    }\n\n    this.server.killCursors(this.ns, this.cursorState, callback);\n  }\n\n  /**\n   * Resets the cursor\n   */\n  rewind() {\n    if (this.cursorState.init) {\n      if (!this.cursorState.dead) {\n        this.kill();\n      }\n\n      this.cursorState.currentLimit = 0;\n      this.cursorState.init = false;\n      this.cursorState.dead = false;\n      this.cursorState.killed = false;\n      this.cursorState.notified = false;\n      this.cursorState.documents = [];\n      this.cursorState.cursorId = null;\n      this.cursorState.cursorIndex = 0;\n    }\n  }\n\n  // Internal methods\n  _read() {\n    if ((this.s && this.s.state === CursorState.CLOSED) || this.isDead()) {\n      return this.push(null);\n    }\n\n    // Get the next item\n    this._next((err, result) => {\n      if (err) {\n        if (this.listeners('error') && this.listeners('error').length > 0) {\n          this.emit('error', err);\n        }\n        if (!this.isDead()) this.close();\n\n        // Emit end event\n        this.emit('end');\n        return this.emit('finish');\n      }\n\n      // If we provided a transformation method\n      if (\n        this.cursorState.streamOptions &&\n        typeof this.cursorState.streamOptions.transform === 'function' &&\n        result != null\n      ) {\n        return this.push(this.cursorState.streamOptions.transform(result));\n      }\n\n      // If we provided a map function\n      if (\n        this.cursorState.transforms &&\n        typeof this.cursorState.transforms.doc === 'function' &&\n        result != null\n      ) {\n        return this.push(this.cursorState.transforms.doc(result));\n      }\n\n      // Return the result\n      this.push(result);\n\n      if (result === null && this.isDead()) {\n        this.once('end', () => {\n          this.close();\n          this.emit('finish');\n        });\n      }\n    });\n  }\n\n  _endSession(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n\n    const session = this.cursorState.session;\n\n    if (session && (options.force || session.owner === this)) {\n      this.cursorState.session = undefined;\n\n      if (this.operation) {\n        this.operation.clearSession();\n      }\n\n      session.endSession(callback);\n      return true;\n    }\n\n    if (callback) {\n      callback();\n    }\n\n    return false;\n  }\n\n  _getMore(callback) {\n    if (this.logger.isDebug()) {\n      this.logger.debug(`schedule getMore call for query [${JSON.stringify(this.query)}]`);\n    }\n\n    // Set the current batchSize\n    let batchSize = this.cursorState.batchSize;\n    if (\n      this.cursorState.limit > 0 &&\n      this.cursorState.currentLimit + batchSize > this.cursorState.limit\n    ) {\n      batchSize = this.cursorState.limit - this.cursorState.currentLimit;\n    }\n\n    this.server.getMore(this.ns, this.cursorState, batchSize, this.options, callback);\n  }\n\n  _initializeCursor(callback) {\n    const cursor = this;\n\n    // NOTE: this goes away once cursors use `executeOperation`\n    if (isUnifiedTopology(cursor.topology) && cursor.topology.shouldCheckForSessionSupport()) {\n      cursor.topology.selectServer(ReadPreference.primaryPreferred, err => {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        cursor._next(callback);\n      });\n\n      return;\n    }\n\n    function done(err, result) {\n      if (\n        cursor.cursorState.cursorId &&\n        cursor.cursorState.cursorId.isZero() &&\n        cursor._endSession\n      ) {\n        cursor._endSession();\n      }\n\n      if (\n        cursor.cursorState.documents.length === 0 &&\n        cursor.cursorState.cursorId &&\n        cursor.cursorState.cursorId.isZero() &&\n        !cursor.cmd.tailable &&\n        !cursor.cmd.awaitData\n      ) {\n        return setCursorNotified(cursor, callback);\n      }\n\n      callback(err, result);\n    }\n\n    const queryCallback = (err, r) => {\n      if (err) {\n        return done(err);\n      }\n\n      const result = r.message;\n      if (result.queryFailure) {\n        return done(new MongoError(result.documents[0]), null);\n      }\n\n      // Check if we have a command cursor\n      if (\n        Array.isArray(result.documents) &&\n        result.documents.length === 1 &&\n        (!cursor.cmd.find || (cursor.cmd.find && cursor.cmd.virtual === false)) &&\n        (typeof result.documents[0].cursor !== 'string' ||\n          result.documents[0]['$err'] ||\n          result.documents[0]['errmsg'] ||\n          Array.isArray(result.documents[0].result))\n      ) {\n        // We have an error document, return the error\n        if (result.documents[0]['$err'] || result.documents[0]['errmsg']) {\n          return done(new MongoError(result.documents[0]), null);\n        }\n\n        // We have a cursor document\n        if (result.documents[0].cursor != null && typeof result.documents[0].cursor !== 'string') {\n          const id = result.documents[0].cursor.id;\n          // If we have a namespace change set the new namespace for getmores\n          if (result.documents[0].cursor.ns) {\n            cursor.ns = result.documents[0].cursor.ns;\n          }\n          // Promote id to long if needed\n          cursor.cursorState.cursorId = typeof id === 'number' ? Long.fromNumber(id) : id;\n          cursor.cursorState.lastCursorId = cursor.cursorState.cursorId;\n          cursor.cursorState.operationTime = result.documents[0].operationTime;\n\n          // If we have a firstBatch set it\n          if (Array.isArray(result.documents[0].cursor.firstBatch)) {\n            cursor.cursorState.documents = result.documents[0].cursor.firstBatch; //.reverse();\n          }\n\n          // Return after processing command cursor\n          return done(null, result);\n        }\n\n        if (Array.isArray(result.documents[0].result)) {\n          cursor.cursorState.documents = result.documents[0].result;\n          cursor.cursorState.cursorId = Long.ZERO;\n          return done(null, result);\n        }\n      }\n\n      // Otherwise fall back to regular find path\n      const cursorId = result.cursorId || 0;\n      cursor.cursorState.cursorId = cursorId instanceof Long ? cursorId : Long.fromNumber(cursorId);\n      cursor.cursorState.documents = result.documents;\n      cursor.cursorState.lastCursorId = result.cursorId;\n\n      // Transform the results with passed in transformation method if provided\n      if (\n        cursor.cursorState.transforms &&\n        typeof cursor.cursorState.transforms.query === 'function'\n      ) {\n        cursor.cursorState.documents = cursor.cursorState.transforms.query(result);\n      }\n\n      done(null, result);\n    };\n\n    if (cursor.operation) {\n      if (cursor.logger.isDebug()) {\n        cursor.logger.debug(\n          `issue initial query [${JSON.stringify(cursor.cmd)}] with flags [${JSON.stringify(\n            cursor.query\n          )}]`\n        );\n      }\n\n      executeOperation(cursor.topology, cursor.operation, (err, result) => {\n        if (err) {\n          done(err);\n          return;\n        }\n\n        cursor.server = cursor.operation.server;\n        cursor.cursorState.init = true;\n\n        // NOTE: this is a special internal method for cloning a cursor, consider removing\n        if (cursor.cursorState.cursorId != null) {\n          return done();\n        }\n\n        queryCallback(err, result);\n      });\n\n      return;\n    }\n\n    // Very explicitly choose what is passed to selectServer\n    const serverSelectOptions = {};\n    if (cursor.cursorState.session) {\n      serverSelectOptions.session = cursor.cursorState.session;\n    }\n\n    if (cursor.operation) {\n      serverSelectOptions.readPreference = cursor.operation.readPreference;\n    } else if (cursor.options.readPreference) {\n      serverSelectOptions.readPreference = cursor.options.readPreference;\n    }\n\n    return cursor.topology.selectServer(serverSelectOptions, (err, server) => {\n      if (err) {\n        const disconnectHandler = cursor.disconnectHandler;\n        if (disconnectHandler != null) {\n          return disconnectHandler.addObjectAndMethod(\n            'cursor',\n            cursor,\n            'next',\n            [callback],\n            callback\n          );\n        }\n\n        return callback(err);\n      }\n\n      cursor.server = server;\n      cursor.cursorState.init = true;\n      if (collationNotSupported(cursor.server, cursor.cmd)) {\n        return callback(new MongoError(`server ${cursor.server.name} does not support collation`));\n      }\n\n      // NOTE: this is a special internal method for cloning a cursor, consider removing\n      if (cursor.cursorState.cursorId != null) {\n        return done();\n      }\n\n      if (cursor.logger.isDebug()) {\n        cursor.logger.debug(\n          `issue initial query [${JSON.stringify(cursor.cmd)}] with flags [${JSON.stringify(\n            cursor.query\n          )}]`\n        );\n      }\n\n      if (cursor.cmd.find != null) {\n        server.query(cursor.ns, cursor.cmd, cursor.cursorState, cursor.options, queryCallback);\n        return;\n      }\n\n      const commandOptions = Object.assign({ session: cursor.cursorState.session }, cursor.options);\n      server.command(cursor.ns, cursor.cmd, commandOptions, queryCallback);\n    });\n  }\n}\n\nif (SUPPORTS.ASYNC_ITERATOR) {\n  CoreCursor.prototype[Symbol.asyncIterator] = __webpack_require__(88).asyncIterator;\n}\n\n/**\n * Validate if the pool is dead and return error\n */\nfunction isConnectionDead(self, callback) {\n  if (self.pool && self.pool.isDestroyed()) {\n    self.cursorState.killed = true;\n    const err = new MongoNetworkError(\n      `connection to host ${self.pool.host}:${self.pool.port} was destroyed`\n    );\n\n    _setCursorNotifiedImpl(self, () => callback(err));\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Validate if the cursor is dead but was not explicitly killed by user\n */\nfunction isCursorDeadButNotkilled(self, callback) {\n  // Cursor is dead but not marked killed, return null\n  if (self.cursorState.dead && !self.cursorState.killed) {\n    self.cursorState.killed = true;\n    setCursorNotified(self, callback);\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Validate if the cursor is dead and was killed by user\n */\nfunction isCursorDeadAndKilled(self, callback) {\n  if (self.cursorState.dead && self.cursorState.killed) {\n    handleCallback(callback, new MongoError('cursor is dead'));\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Validate if the cursor was killed by the user\n */\nfunction isCursorKilled(self, callback) {\n  if (self.cursorState.killed) {\n    setCursorNotified(self, callback);\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Mark cursor as being dead and notified\n */\nfunction setCursorDeadAndNotified(self, callback) {\n  self.cursorState.dead = true;\n  setCursorNotified(self, callback);\n}\n\n/**\n * Mark cursor as being notified\n */\nfunction setCursorNotified(self, callback) {\n  _setCursorNotifiedImpl(self, () => handleCallback(callback, null, null));\n}\n\nfunction _setCursorNotifiedImpl(self, callback) {\n  self.cursorState.notified = true;\n  self.cursorState.documents = [];\n  self.cursorState.cursorIndex = 0;\n\n  if (self._endSession) {\n    self._endSession(undefined, () => callback());\n    return;\n  }\n\n  return callback();\n}\n\nfunction nextFunction(self, callback) {\n  // We have notified about it\n  if (self.cursorState.notified) {\n    return callback(new Error('cursor is exhausted'));\n  }\n\n  // Cursor is killed return null\n  if (isCursorKilled(self, callback)) return;\n\n  // Cursor is dead but not marked killed, return null\n  if (isCursorDeadButNotkilled(self, callback)) return;\n\n  // We have a dead and killed cursor, attempting to call next should error\n  if (isCursorDeadAndKilled(self, callback)) return;\n\n  // We have just started the cursor\n  if (!self.cursorState.init) {\n    // Topology is not connected, save the call in the provided store to be\n    // Executed at some point when the handler deems it's reconnected\n    if (!self.topology.isConnected(self.options)) {\n      // Only need this for single server, because repl sets and mongos\n      // will always continue trying to reconnect\n      if (self.topology._type === 'server' && !self.topology.s.options.reconnect) {\n        // Reconnect is disabled, so we'll never reconnect\n        return callback(new MongoError('no connection available'));\n      }\n\n      if (self.disconnectHandler != null) {\n        if (self.topology.isDestroyed()) {\n          // Topology was destroyed, so don't try to wait for it to reconnect\n          return callback(new MongoError('Topology was destroyed'));\n        }\n\n        self.disconnectHandler.addObjectAndMethod('cursor', self, 'next', [callback], callback);\n        return;\n      }\n    }\n\n    self._initializeCursor((err, result) => {\n      if (err || result === null) {\n        callback(err, result);\n        return;\n      }\n\n      nextFunction(self, callback);\n    });\n\n    return;\n  }\n\n  if (self.cursorState.limit > 0 && self.cursorState.currentLimit >= self.cursorState.limit) {\n    // Ensure we kill the cursor on the server\n    self.kill();\n    // Set cursor in dead and notified state\n    return setCursorDeadAndNotified(self, callback);\n  } else if (\n    self.cursorState.cursorIndex === self.cursorState.documents.length &&\n    !Long.ZERO.equals(self.cursorState.cursorId)\n  ) {\n    // Ensure an empty cursor state\n    self.cursorState.documents = [];\n    self.cursorState.cursorIndex = 0;\n\n    // Check if topology is destroyed\n    if (self.topology.isDestroyed())\n      return callback(\n        new MongoNetworkError('connection destroyed, not possible to instantiate cursor')\n      );\n\n    // Check if connection is dead and return if not possible to\n    // execute a getMore on this connection\n    if (isConnectionDead(self, callback)) return;\n\n    // Execute the next get more\n    self._getMore(function(err, doc, connection) {\n      if (err) {\n        if (err instanceof MongoError) {\n          err[mongoErrorContextSymbol].isGetMore = true;\n        }\n\n        return handleCallback(callback, err);\n      }\n\n      if (self.cursorState.cursorId && self.cursorState.cursorId.isZero() && self._endSession) {\n        self._endSession();\n      }\n\n      // Save the returned connection to ensure all getMore's fire over the same connection\n      self.connection = connection;\n\n      // Tailable cursor getMore result, notify owner about it\n      // No attempt is made here to retry, this is left to the user of the\n      // core module to handle to keep core simple\n      if (\n        self.cursorState.documents.length === 0 &&\n        self.cmd.tailable &&\n        Long.ZERO.equals(self.cursorState.cursorId)\n      ) {\n        // No more documents in the tailed cursor\n        return handleCallback(\n          callback,\n          new MongoError({\n            message: 'No more documents in tailed cursor',\n            tailable: self.cmd.tailable,\n            awaitData: self.cmd.awaitData\n          })\n        );\n      } else if (\n        self.cursorState.documents.length === 0 &&\n        self.cmd.tailable &&\n        !Long.ZERO.equals(self.cursorState.cursorId)\n      ) {\n        return nextFunction(self, callback);\n      }\n\n      if (self.cursorState.limit > 0 && self.cursorState.currentLimit >= self.cursorState.limit) {\n        return setCursorDeadAndNotified(self, callback);\n      }\n\n      nextFunction(self, callback);\n    });\n  } else if (\n    self.cursorState.documents.length === self.cursorState.cursorIndex &&\n    self.cmd.tailable &&\n    Long.ZERO.equals(self.cursorState.cursorId)\n  ) {\n    return handleCallback(\n      callback,\n      new MongoError({\n        message: 'No more documents in tailed cursor',\n        tailable: self.cmd.tailable,\n        awaitData: self.cmd.awaitData\n      })\n    );\n  } else if (\n    self.cursorState.documents.length === self.cursorState.cursorIndex &&\n    Long.ZERO.equals(self.cursorState.cursorId)\n  ) {\n    setCursorDeadAndNotified(self, callback);\n  } else {\n    if (self.cursorState.limit > 0 && self.cursorState.currentLimit >= self.cursorState.limit) {\n      // Ensure we kill the cursor on the server\n      self.kill();\n      // Set cursor in dead and notified state\n      return setCursorDeadAndNotified(self, callback);\n    }\n\n    // Increment the current cursor limit\n    self.cursorState.currentLimit += 1;\n\n    // Get the document\n    let doc = self.cursorState.documents[self.cursorState.cursorIndex++];\n\n    // Doc overflow\n    if (!doc || doc.$err) {\n      // Ensure we kill the cursor on the server\n      self.kill();\n      // Set cursor in dead and notified state\n      return setCursorDeadAndNotified(self, function() {\n        handleCallback(callback, new MongoError(doc ? doc.$err : undefined));\n      });\n    }\n\n    // Transform the doc with passed in transformation method if provided\n    if (self.cursorState.transforms && typeof self.cursorState.transforms.doc === 'function') {\n      doc = self.cursorState.transforms.doc(doc);\n    }\n\n    // Return the document\n    handleCallback(callback, null, doc);\n  }\n}\n\nmodule.exports = {\n  CursorState,\n  CoreCursor\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NvcmUvY3Vyc29yLmpzPzRmYzgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZUFBZSxtQkFBTyxDQUFDLEVBQXFCO0FBQzVDLHFCQUFxQixtQkFBTyxDQUFDLEVBQW9CO0FBQ2pELG1CQUFtQixtQkFBTyxDQUFDLEVBQVM7QUFDcEMsMEJBQTBCLG1CQUFPLENBQUMsRUFBUztBQUMzQyxnQ0FBZ0MsbUJBQU8sQ0FBQyxFQUFTO0FBQ2pELDhCQUE4QixtQkFBTyxDQUFDLEVBQVM7QUFDL0MsdUJBQXVCLG1CQUFPLENBQUMsRUFBOEI7QUFDN0QsMEJBQTBCLG1CQUFPLENBQUMsRUFBUztBQUMzQyx5QkFBeUIsbUJBQU8sQ0FBQyxFQUFpQztBQUNsRSxpQkFBaUIsbUJBQU8sQ0FBQyxFQUFRO0FBQ2pDLGlCQUFpQixtQkFBTyxDQUFDLEVBQVU7QUFDbkMseUJBQXlCLG1CQUFPLENBQUMsRUFBVTtBQUMzQyxzQkFBc0IsbUJBQU8sQ0FBQyxFQUF5Qjs7QUFFdkQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE9BQU87QUFDbEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsY0FBYyxPQUFPLE1BQU07QUFDM0IsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTyw0RUFBNEUsMEZBQTBGLE1BQU0sNEZBQTRGO0FBQzVSLGFBQWEsTUFBTTtBQUNuQixhQUFhLE9BQU87QUFDcEIsYUFBYSxTQUFTO0FBQ3RCLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0EsV0FBVyxtQkFBbUI7QUFDOUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxlQUFlO0FBQzVCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYyxNQUFNO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQjtBQUMxQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxlQUFlO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0REFBNEQsMkJBQTJCO0FBQ3ZGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpRkFBaUY7QUFDakY7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLDJCQUEyQixnQkFBZ0I7QUFDN0U7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG1CQUFtQjtBQUNwRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0NBQWtDLDJCQUEyQixnQkFBZ0I7QUFDN0U7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0Q0FBNEMsc0NBQXNDO0FBQ2xGO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSwrQ0FBK0MsbUJBQU8sQ0FBQyxFQUF5QjtBQUNoRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixlQUFlLEdBQUcsZUFBZTtBQUM3RDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI4Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgTG9nZ2VyID0gcmVxdWlyZSgnLi9jb25uZWN0aW9uL2xvZ2dlcicpO1xuY29uc3QgcmV0cmlldmVCU09OID0gcmVxdWlyZSgnLi9jb25uZWN0aW9uL3V0aWxzJykucmV0cmlldmVCU09OO1xuY29uc3QgTW9uZ29FcnJvciA9IHJlcXVpcmUoJy4vZXJyb3InKS5Nb25nb0Vycm9yO1xuY29uc3QgTW9uZ29OZXR3b3JrRXJyb3IgPSByZXF1aXJlKCcuL2Vycm9yJykuTW9uZ29OZXR3b3JrRXJyb3I7XG5jb25zdCBtb25nb0Vycm9yQ29udGV4dFN5bWJvbCA9IHJlcXVpcmUoJy4vZXJyb3InKS5tb25nb0Vycm9yQ29udGV4dFN5bWJvbDtcbmNvbnN0IGNvbGxhdGlvbk5vdFN1cHBvcnRlZCA9IHJlcXVpcmUoJy4vdXRpbHMnKS5jb2xsYXRpb25Ob3RTdXBwb3J0ZWQ7XG5jb25zdCBSZWFkUHJlZmVyZW5jZSA9IHJlcXVpcmUoJy4vdG9wb2xvZ2llcy9yZWFkX3ByZWZlcmVuY2UnKTtcbmNvbnN0IGlzVW5pZmllZFRvcG9sb2d5ID0gcmVxdWlyZSgnLi91dGlscycpLmlzVW5pZmllZFRvcG9sb2d5O1xuY29uc3QgZXhlY3V0ZU9wZXJhdGlvbiA9IHJlcXVpcmUoJy4uL29wZXJhdGlvbnMvZXhlY3V0ZV9vcGVyYXRpb24nKTtcbmNvbnN0IFJlYWRhYmxlID0gcmVxdWlyZSgnc3RyZWFtJykuUmVhZGFibGU7XG5jb25zdCBTVVBQT1JUUyA9IHJlcXVpcmUoJy4uL3V0aWxzJykuU1VQUE9SVFM7XG5jb25zdCBNb25nb0RCTmFtZXNwYWNlID0gcmVxdWlyZSgnLi4vdXRpbHMnKS5Nb25nb0RCTmFtZXNwYWNlO1xuY29uc3QgT3BlcmF0aW9uQmFzZSA9IHJlcXVpcmUoJy4uL29wZXJhdGlvbnMvb3BlcmF0aW9uJykuT3BlcmF0aW9uQmFzZTtcblxuY29uc3QgQlNPTiA9IHJldHJpZXZlQlNPTigpO1xuY29uc3QgTG9uZyA9IEJTT04uTG9uZztcblxuLy8gUG9zc2libGUgc3RhdGVzIGZvciBhIGN1cnNvclxuY29uc3QgQ3Vyc29yU3RhdGUgPSB7XG4gIElOSVQ6IDAsXG4gIE9QRU46IDEsXG4gIENMT1NFRDogMixcbiAgR0VUX01PUkU6IDNcbn07XG5cbi8vXG4vLyBIYW5kbGUgY2FsbGJhY2sgKGluY2x1ZGluZyBhbnkgZXhjZXB0aW9ucyB0aHJvd24pXG5mdW5jdGlvbiBoYW5kbGVDYWxsYmFjayhjYWxsYmFjaywgZXJyLCByZXN1bHQpIHtcbiAgdHJ5IHtcbiAgICBjYWxsYmFjayhlcnIsIHJlc3VsdCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIGlzIGEgY3Vyc29yIHJlc3VsdHMgY2FsbGJhY2tcbiAqXG4gKiBAY2FsbGJhY2sgcmVzdWx0Q2FsbGJhY2tcbiAqIEBwYXJhbSB7ZXJyb3J9IGVycm9yIEFuIGVycm9yIG9iamVjdC4gU2V0IHRvIG51bGwgaWYgbm8gZXJyb3IgcHJlc2VudFxuICogQHBhcmFtIHtvYmplY3R9IGRvY3VtZW50XG4gKi9cblxuLyoqXG4gKiBAZmlsZU92ZXJ2aWV3IFRoZSAqKkN1cnNvcioqIGNsYXNzIGlzIGFuIGludGVybmFsIGNsYXNzIHRoYXQgZW1ib2RpZXMgYSBjdXJzb3Igb24gTW9uZ29EQlxuICogYWxsb3dpbmcgZm9yIGl0ZXJhdGlvbiBvdmVyIHRoZSByZXN1bHRzIHJldHVybmVkIGZyb20gdGhlIHVuZGVybHlpbmcgcXVlcnkuXG4gKlxuICogKipDVVJTT1JTIENhbm5vdCBkaXJlY3RseSBiZSBpbnN0YW50aWF0ZWQqKlxuICovXG5cbi8qKlxuICogVGhlIGNvcmUgY3Vyc29yIGNsYXNzLiBBbGwgY3Vyc29ycyBpbiB0aGUgZHJpdmVyIGJ1aWxkIG9mZiBvZiB0aGlzIG9uZS5cbiAqXG4gKiBAcHJvcGVydHkge251bWJlcn0gY3Vyc29yQmF0Y2hTaXplIFRoZSBjdXJyZW50IGN1cnNvckJhdGNoU2l6ZSBmb3IgdGhlIGN1cnNvclxuICogQHByb3BlcnR5IHtudW1iZXJ9IGN1cnNvckxpbWl0IFRoZSBjdXJyZW50IGN1cnNvckxpbWl0IGZvciB0aGUgY3Vyc29yXG4gKiBAcHJvcGVydHkge251bWJlcn0gY3Vyc29yU2tpcCBUaGUgY3VycmVudCBjdXJzb3JTa2lwIGZvciB0aGUgY3Vyc29yXG4gKi9cbmNsYXNzIENvcmVDdXJzb3IgZXh0ZW5kcyBSZWFkYWJsZSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgY29yZSBgQ3Vyc29yYCBpbnN0YW5jZS5cbiAgICogKipOT1RFKiogTm90IHRvIGJlIGluc3RhbnRpYXRlZCBkaXJlY3RseVxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gdG9wb2xvZ3kgVGhlIHNlcnZlciB0b3BvbG9neSBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5zIFRoZSBNb25nb0RCIGZ1bGx5IHF1YWxpZmllZCBuYW1lc3BhY2UgKGV4OiBkYjEuY29sbGVjdGlvbjEpXG4gICAqIEBwYXJhbSB7e29iamVjdH18TG9uZ30gY21kIFRoZSBzZWxlY3RvciAoY2FuIGJlIGEgY29tbWFuZCBvciBhIGN1cnNvcklkKVxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnM9bnVsbF0gT3B0aW9uYWwgc2V0dGluZ3MuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5iYXRjaFNpemU9MTAwMF0gVGhlIG51bWJlciBvZiBkb2N1bWVudHMgdG8gcmV0dXJuIHBlciBiYXRjaC4gU2VlIHtAbGluayBodHRwczovL2RvY3MubW9uZ29kYi5jb20vbWFudWFsL3JlZmVyZW5jZS9jb21tYW5kL2ZpbmQvfCBmaW5kIGNvbW1hbmQgZG9jdW1lbnRhdGlvbn0gYW5kIHtAbGluayBodHRwczovL2RvY3MubW9uZ29kYi5jb20vbWFudWFsL3JlZmVyZW5jZS9jb21tYW5kL2FnZ3JlZ2F0ZXxhZ2dyZWdhdGlvbiBkb2N1bWVudGF0aW9ufS5cbiAgICogQHBhcmFtIHthcnJheX0gW29wdGlvbnMuZG9jdW1lbnRzPVtdXSBJbml0aWFsIGRvY3VtZW50cyBsaXN0IGZvciBjdXJzb3JcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLnRyYW5zZm9ybXM9bnVsbF0gVHJhbnNmb3JtIG1ldGhvZHMgZm9yIHRoZSBjdXJzb3IgcmVzdWx0c1xuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbb3B0aW9ucy50cmFuc2Zvcm1zLnF1ZXJ5XSBUcmFuc2Zvcm0gdGhlIHZhbHVlIHJldHVybmVkIGZyb20gdGhlIGluaXRpYWwgcXVlcnlcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gW29wdGlvbnMudHJhbnNmb3Jtcy5kb2NdIFRyYW5zZm9ybSBlYWNoIGRvY3VtZW50IHJldHVybmVkIGZyb20gQ3Vyc29yLnByb3RvdHlwZS5fbmV4dFxuICAgKi9cbiAgY29uc3RydWN0b3IodG9wb2xvZ3ksIG5zLCBjbWQsIG9wdGlvbnMpIHtcbiAgICBzdXBlcih7IG9iamVjdE1vZGU6IHRydWUgfSk7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICBpZiAobnMgaW5zdGFuY2VvZiBPcGVyYXRpb25CYXNlKSB7XG4gICAgICB0aGlzLm9wZXJhdGlvbiA9IG5zO1xuICAgICAgbnMgPSB0aGlzLm9wZXJhdGlvbi5ucy50b1N0cmluZygpO1xuICAgICAgb3B0aW9ucyA9IHRoaXMub3BlcmF0aW9uLm9wdGlvbnM7XG4gICAgICBjbWQgPSB0aGlzLm9wZXJhdGlvbi5jbWQgPyB0aGlzLm9wZXJhdGlvbi5jbWQgOiB7fTtcbiAgICB9XG5cbiAgICAvLyBDdXJzb3IgcG9vbFxuICAgIHRoaXMucG9vbCA9IG51bGw7XG4gICAgLy8gQ3Vyc29yIHNlcnZlclxuICAgIHRoaXMuc2VydmVyID0gbnVsbDtcblxuICAgIC8vIERvIHdlIGhhdmUgYSBub3QgY29ubmVjdGVkIGhhbmRsZXJcbiAgICB0aGlzLmRpc2Nvbm5lY3RIYW5kbGVyID0gb3B0aW9ucy5kaXNjb25uZWN0SGFuZGxlcjtcblxuICAgIC8vIFNldCBsb2NhbCB2YWx1ZXNcbiAgICB0aGlzLmJzb24gPSB0b3BvbG9neS5zLmJzb247XG4gICAgdGhpcy5ucyA9IG5zO1xuICAgIHRoaXMubmFtZXNwYWNlID0gTW9uZ29EQk5hbWVzcGFjZS5mcm9tU3RyaW5nKG5zKTtcbiAgICB0aGlzLmNtZCA9IGNtZDtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMudG9wb2xvZ3kgPSB0b3BvbG9neTtcblxuICAgIC8vIEFsbCBpbnRlcm5hbCBzdGF0ZVxuICAgIHRoaXMuY3Vyc29yU3RhdGUgPSB7XG4gICAgICBjdXJzb3JJZDogbnVsbCxcbiAgICAgIGNtZCxcbiAgICAgIGRvY3VtZW50czogb3B0aW9ucy5kb2N1bWVudHMgfHwgW10sXG4gICAgICBjdXJzb3JJbmRleDogMCxcbiAgICAgIGRlYWQ6IGZhbHNlLFxuICAgICAga2lsbGVkOiBmYWxzZSxcbiAgICAgIGluaXQ6IGZhbHNlLFxuICAgICAgbm90aWZpZWQ6IGZhbHNlLFxuICAgICAgbGltaXQ6IG9wdGlvbnMubGltaXQgfHwgY21kLmxpbWl0IHx8IDAsXG4gICAgICBza2lwOiBvcHRpb25zLnNraXAgfHwgY21kLnNraXAgfHwgMCxcbiAgICAgIGJhdGNoU2l6ZTogb3B0aW9ucy5iYXRjaFNpemUgfHwgY21kLmJhdGNoU2l6ZSB8fCAxMDAwLFxuICAgICAgY3VycmVudExpbWl0OiAwLFxuICAgICAgLy8gUmVzdWx0IGZpZWxkIG5hbWUgaWYgbm90IGEgY3Vyc29yIChjb250YWlucyB0aGUgYXJyYXkgb2YgcmVzdWx0cylcbiAgICAgIHRyYW5zZm9ybXM6IG9wdGlvbnMudHJhbnNmb3JtcyxcbiAgICAgIHJhdzogb3B0aW9ucy5yYXcgfHwgKGNtZCAmJiBjbWQucmF3KVxuICAgIH07XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuc2Vzc2lvbiA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHRoaXMuY3Vyc29yU3RhdGUuc2Vzc2lvbiA9IG9wdGlvbnMuc2Vzc2lvbjtcbiAgICB9XG5cbiAgICAvLyBBZGQgcHJvbW90ZUxvbmcgdG8gY3Vyc29yIHN0YXRlXG4gICAgY29uc3QgdG9wb2xvZ3lPcHRpb25zID0gdG9wb2xvZ3kucy5vcHRpb25zO1xuICAgIGlmICh0eXBlb2YgdG9wb2xvZ3lPcHRpb25zLnByb21vdGVMb25ncyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICB0aGlzLmN1cnNvclN0YXRlLnByb21vdGVMb25ncyA9IHRvcG9sb2d5T3B0aW9ucy5wcm9tb3RlTG9uZ3M7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5wcm9tb3RlTG9uZ3MgPT09ICdib29sZWFuJykge1xuICAgICAgdGhpcy5jdXJzb3JTdGF0ZS5wcm9tb3RlTG9uZ3MgPSBvcHRpb25zLnByb21vdGVMb25ncztcbiAgICB9XG5cbiAgICAvLyBBZGQgcHJvbW90ZVZhbHVlcyB0byBjdXJzb3Igc3RhdGVcbiAgICBpZiAodHlwZW9mIHRvcG9sb2d5T3B0aW9ucy5wcm9tb3RlVmFsdWVzID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHRoaXMuY3Vyc29yU3RhdGUucHJvbW90ZVZhbHVlcyA9IHRvcG9sb2d5T3B0aW9ucy5wcm9tb3RlVmFsdWVzO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMucHJvbW90ZVZhbHVlcyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICB0aGlzLmN1cnNvclN0YXRlLnByb21vdGVWYWx1ZXMgPSBvcHRpb25zLnByb21vdGVWYWx1ZXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHByb21vdGVCdWZmZXJzIHRvIGN1cnNvciBzdGF0ZVxuICAgIGlmICh0eXBlb2YgdG9wb2xvZ3lPcHRpb25zLnByb21vdGVCdWZmZXJzID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHRoaXMuY3Vyc29yU3RhdGUucHJvbW90ZUJ1ZmZlcnMgPSB0b3BvbG9neU9wdGlvbnMucHJvbW90ZUJ1ZmZlcnM7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5wcm9tb3RlQnVmZmVycyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICB0aGlzLmN1cnNvclN0YXRlLnByb21vdGVCdWZmZXJzID0gb3B0aW9ucy5wcm9tb3RlQnVmZmVycztcbiAgICB9XG5cbiAgICBpZiAodG9wb2xvZ3lPcHRpb25zLnJlY29ubmVjdCkge1xuICAgICAgdGhpcy5jdXJzb3JTdGF0ZS5yZWNvbm5lY3QgPSB0b3BvbG9neU9wdGlvbnMucmVjb25uZWN0O1xuICAgIH1cblxuICAgIC8vIExvZ2dlclxuICAgIHRoaXMubG9nZ2VyID0gTG9nZ2VyKCdDdXJzb3InLCB0b3BvbG9neU9wdGlvbnMpO1xuXG4gICAgLy9cbiAgICAvLyBEaWQgd2UgcGFzcyBpbiBhIGN1cnNvciBpZFxuICAgIGlmICh0eXBlb2YgY21kID09PSAnbnVtYmVyJykge1xuICAgICAgdGhpcy5jdXJzb3JTdGF0ZS5jdXJzb3JJZCA9IExvbmcuZnJvbU51bWJlcihjbWQpO1xuICAgICAgdGhpcy5jdXJzb3JTdGF0ZS5sYXN0Q3Vyc29ySWQgPSB0aGlzLmN1cnNvclN0YXRlLmN1cnNvcklkO1xuICAgIH0gZWxzZSBpZiAoY21kIGluc3RhbmNlb2YgTG9uZykge1xuICAgICAgdGhpcy5jdXJzb3JTdGF0ZS5jdXJzb3JJZCA9IGNtZDtcbiAgICAgIHRoaXMuY3Vyc29yU3RhdGUubGFzdEN1cnNvcklkID0gY21kO1xuICAgIH1cblxuICAgIC8vIFRPRE86IHJlbW92ZSBhcyBwYXJ0IG9mIE5PREUtMjEwNFxuICAgIGlmICh0aGlzLm9wZXJhdGlvbikge1xuICAgICAgdGhpcy5vcGVyYXRpb24uY3Vyc29yU3RhdGUgPSB0aGlzLmN1cnNvclN0YXRlO1xuICAgIH1cbiAgfVxuXG4gIHNldEN1cnNvckJhdGNoU2l6ZSh2YWx1ZSkge1xuICAgIHRoaXMuY3Vyc29yU3RhdGUuYmF0Y2hTaXplID0gdmFsdWU7XG4gIH1cblxuICBjdXJzb3JCYXRjaFNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3Vyc29yU3RhdGUuYmF0Y2hTaXplO1xuICB9XG5cbiAgc2V0Q3Vyc29yTGltaXQodmFsdWUpIHtcbiAgICB0aGlzLmN1cnNvclN0YXRlLmxpbWl0ID0gdmFsdWU7XG4gIH1cblxuICBjdXJzb3JMaW1pdCgpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJzb3JTdGF0ZS5saW1pdDtcbiAgfVxuXG4gIHNldEN1cnNvclNraXAodmFsdWUpIHtcbiAgICB0aGlzLmN1cnNvclN0YXRlLnNraXAgPSB2YWx1ZTtcbiAgfVxuXG4gIGN1cnNvclNraXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3Vyc29yU3RhdGUuc2tpcDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSB0aGUgbmV4dCBkb2N1bWVudCBmcm9tIHRoZSBjdXJzb3JcbiAgICogQG1ldGhvZFxuICAgKiBAcGFyYW0ge3Jlc3VsdENhbGxiYWNrfSBjYWxsYmFjayBBIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAqL1xuICBfbmV4dChjYWxsYmFjaykge1xuICAgIG5leHRGdW5jdGlvbih0aGlzLCBjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvbmUgdGhlIGN1cnNvclxuICAgKiBAbWV0aG9kXG4gICAqIEByZXR1cm4ge0N1cnNvcn1cbiAgICovXG4gIGNsb25lKCkge1xuICAgIHJldHVybiB0aGlzLnRvcG9sb2d5LmN1cnNvcih0aGlzLm5zLCB0aGlzLmNtZCwgdGhpcy5vcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIGN1cnNvciBpcyBkZWFkXG4gICAqIEBtZXRob2RcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gQSBib29sZWFuIHNpZ25pZnlpbmcgaWYgdGhlIGN1cnNvciBpcyBkZWFkIG9yIG5vdFxuICAgKi9cbiAgaXNEZWFkKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnNvclN0YXRlLmRlYWQgPT09IHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBjdXJzb3Igd2FzIGtpbGxlZCBieSB0aGUgYXBwbGljYXRpb25cbiAgICogQG1ldGhvZFxuICAgKiBAcmV0dXJuIHtib29sZWFufSBBIGJvb2xlYW4gc2lnbmlmeWluZyBpZiB0aGUgY3Vyc29yIHdhcyBraWxsZWQgYnkgdGhlIGFwcGxpY2F0aW9uXG4gICAqL1xuICBpc0tpbGxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJzb3JTdGF0ZS5raWxsZWQgPT09IHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBjdXJzb3Igbm90aWZpZWQgaXQncyBjYWxsZXIgYWJvdXQgaXQncyBkZWF0aFxuICAgKiBAbWV0aG9kXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IEEgYm9vbGVhbiBzaWduaWZ5aW5nIGlmIHRoZSBjdXJzb3Igbm90aWZpZWQgdGhlIGNhbGxiYWNrXG4gICAqL1xuICBpc05vdGlmaWVkKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnNvclN0YXRlLm5vdGlmaWVkID09PSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgY3VycmVudCBidWZmZXJlZCBkb2N1bWVudHMgbGVuZ3RoXG4gICAqIEBtZXRob2RcbiAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIGl0ZW1zIGluIHRoZSBidWZmZXJlZCBkb2N1bWVudHNcbiAgICovXG4gIGJ1ZmZlcmVkQ291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3Vyc29yU3RhdGUuZG9jdW1lbnRzLmxlbmd0aCAtIHRoaXMuY3Vyc29yU3RhdGUuY3Vyc29ySW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBjdXJyZW50IGJ1ZmZlcmVkIGRvY3VtZW50c1xuICAgKiBAbWV0aG9kXG4gICAqIEByZXR1cm4ge0FycmF5fSBBbiBhcnJheSBvZiBidWZmZXJlZCBkb2N1bWVudHNcbiAgICovXG4gIHJlYWRCdWZmZXJlZERvY3VtZW50cyhudW1iZXIpIHtcbiAgICBjb25zdCB1bnJlYWREb2N1bWVudHNMZW5ndGggPSB0aGlzLmN1cnNvclN0YXRlLmRvY3VtZW50cy5sZW5ndGggLSB0aGlzLmN1cnNvclN0YXRlLmN1cnNvckluZGV4O1xuICAgIGNvbnN0IGxlbmd0aCA9IG51bWJlciA8IHVucmVhZERvY3VtZW50c0xlbmd0aCA/IG51bWJlciA6IHVucmVhZERvY3VtZW50c0xlbmd0aDtcbiAgICBsZXQgZWxlbWVudHMgPSB0aGlzLmN1cnNvclN0YXRlLmRvY3VtZW50cy5zbGljZShcbiAgICAgIHRoaXMuY3Vyc29yU3RhdGUuY3Vyc29ySW5kZXgsXG4gICAgICB0aGlzLmN1cnNvclN0YXRlLmN1cnNvckluZGV4ICsgbGVuZ3RoXG4gICAgKTtcblxuICAgIC8vIFRyYW5zZm9ybSB0aGUgZG9jIHdpdGggcGFzc2VkIGluIHRyYW5zZm9ybWF0aW9uIG1ldGhvZCBpZiBwcm92aWRlZFxuICAgIGlmICh0aGlzLmN1cnNvclN0YXRlLnRyYW5zZm9ybXMgJiYgdHlwZW9mIHRoaXMuY3Vyc29yU3RhdGUudHJhbnNmb3Jtcy5kb2MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIFRyYW5zZm9ybSBhbGwgdGhlIGVsZW1lbnRzXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGVsZW1lbnRzW2ldID0gdGhpcy5jdXJzb3JTdGF0ZS50cmFuc2Zvcm1zLmRvYyhlbGVtZW50c1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIHdlIGRvIG5vdCByZXR1cm4gYW55IG1vcmUgZG9jdW1lbnRzIHRoYW4gdGhlIGxpbWl0IGltcG9zZWRcbiAgICAvLyBKdXN0IHJldHVybiB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIHVwIHRvIHRoZSBsaW1pdFxuICAgIGlmIChcbiAgICAgIHRoaXMuY3Vyc29yU3RhdGUubGltaXQgPiAwICYmXG4gICAgICB0aGlzLmN1cnNvclN0YXRlLmN1cnJlbnRMaW1pdCArIGVsZW1lbnRzLmxlbmd0aCA+IHRoaXMuY3Vyc29yU3RhdGUubGltaXRcbiAgICApIHtcbiAgICAgIGVsZW1lbnRzID0gZWxlbWVudHMuc2xpY2UoMCwgdGhpcy5jdXJzb3JTdGF0ZS5saW1pdCAtIHRoaXMuY3Vyc29yU3RhdGUuY3VycmVudExpbWl0KTtcbiAgICAgIHRoaXMua2lsbCgpO1xuICAgIH1cblxuICAgIC8vIEFkanVzdCBjdXJyZW50IGxpbWl0XG4gICAgdGhpcy5jdXJzb3JTdGF0ZS5jdXJyZW50TGltaXQgPSB0aGlzLmN1cnNvclN0YXRlLmN1cnJlbnRMaW1pdCArIGVsZW1lbnRzLmxlbmd0aDtcbiAgICB0aGlzLmN1cnNvclN0YXRlLmN1cnNvckluZGV4ID0gdGhpcy5jdXJzb3JTdGF0ZS5jdXJzb3JJbmRleCArIGVsZW1lbnRzLmxlbmd0aDtcblxuICAgIC8vIFJldHVybiBlbGVtZW50c1xuICAgIHJldHVybiBlbGVtZW50cztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldHMgbG9jYWwgc3RhdGUgZm9yIHRoaXMgY3Vyc29yIGluc3RhbmNlLCBhbmQgaXNzdWVzIGEgYGtpbGxDdXJzb3JzYCBjb21tYW5kIHRvIHRoZSBzZXJ2ZXJcbiAgICpcbiAgICogQHBhcmFtIHtyZXN1bHRDYWxsYmFja30gY2FsbGJhY2sgQSBjYWxsYmFjayBmdW5jdGlvblxuICAgKi9cbiAga2lsbChjYWxsYmFjaykge1xuICAgIC8vIFNldCBjdXJzb3IgdG8gZGVhZFxuICAgIHRoaXMuY3Vyc29yU3RhdGUuZGVhZCA9IHRydWU7XG4gICAgdGhpcy5jdXJzb3JTdGF0ZS5raWxsZWQgPSB0cnVlO1xuICAgIC8vIFJlbW92ZSBkb2N1bWVudHNcbiAgICB0aGlzLmN1cnNvclN0YXRlLmRvY3VtZW50cyA9IFtdO1xuXG4gICAgLy8gSWYgbm8gY3Vyc29yIGlkIGp1c3QgcmV0dXJuXG4gICAgaWYgKFxuICAgICAgdGhpcy5jdXJzb3JTdGF0ZS5jdXJzb3JJZCA9PSBudWxsIHx8XG4gICAgICB0aGlzLmN1cnNvclN0YXRlLmN1cnNvcklkLmlzWmVybygpIHx8XG4gICAgICB0aGlzLmN1cnNvclN0YXRlLmluaXQgPT09IGZhbHNlXG4gICAgKSB7XG4gICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKG51bGwsIG51bGwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc2VydmVyLmtpbGxDdXJzb3JzKHRoaXMubnMsIHRoaXMuY3Vyc29yU3RhdGUsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldHMgdGhlIGN1cnNvclxuICAgKi9cbiAgcmV3aW5kKCkge1xuICAgIGlmICh0aGlzLmN1cnNvclN0YXRlLmluaXQpIHtcbiAgICAgIGlmICghdGhpcy5jdXJzb3JTdGF0ZS5kZWFkKSB7XG4gICAgICAgIHRoaXMua2lsbCgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmN1cnNvclN0YXRlLmN1cnJlbnRMaW1pdCA9IDA7XG4gICAgICB0aGlzLmN1cnNvclN0YXRlLmluaXQgPSBmYWxzZTtcbiAgICAgIHRoaXMuY3Vyc29yU3RhdGUuZGVhZCA9IGZhbHNlO1xuICAgICAgdGhpcy5jdXJzb3JTdGF0ZS5raWxsZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuY3Vyc29yU3RhdGUubm90aWZpZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuY3Vyc29yU3RhdGUuZG9jdW1lbnRzID0gW107XG4gICAgICB0aGlzLmN1cnNvclN0YXRlLmN1cnNvcklkID0gbnVsbDtcbiAgICAgIHRoaXMuY3Vyc29yU3RhdGUuY3Vyc29ySW5kZXggPSAwO1xuICAgIH1cbiAgfVxuXG4gIC8vIEludGVybmFsIG1ldGhvZHNcbiAgX3JlYWQoKSB7XG4gICAgaWYgKCh0aGlzLnMgJiYgdGhpcy5zLnN0YXRlID09PSBDdXJzb3JTdGF0ZS5DTE9TRUQpIHx8IHRoaXMuaXNEZWFkKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLnB1c2gobnVsbCk7XG4gICAgfVxuXG4gICAgLy8gR2V0IHRoZSBuZXh0IGl0ZW1cbiAgICB0aGlzLl9uZXh0KChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBpZiAodGhpcy5saXN0ZW5lcnMoJ2Vycm9yJykgJiYgdGhpcy5saXN0ZW5lcnMoJ2Vycm9yJykubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pc0RlYWQoKSkgdGhpcy5jbG9zZSgpO1xuXG4gICAgICAgIC8vIEVtaXQgZW5kIGV2ZW50XG4gICAgICAgIHRoaXMuZW1pdCgnZW5kJyk7XG4gICAgICAgIHJldHVybiB0aGlzLmVtaXQoJ2ZpbmlzaCcpO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB3ZSBwcm92aWRlZCBhIHRyYW5zZm9ybWF0aW9uIG1ldGhvZFxuICAgICAgaWYgKFxuICAgICAgICB0aGlzLmN1cnNvclN0YXRlLnN0cmVhbU9wdGlvbnMgJiZcbiAgICAgICAgdHlwZW9mIHRoaXMuY3Vyc29yU3RhdGUuc3RyZWFtT3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgcmVzdWx0ICE9IG51bGxcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdGhpcy5wdXNoKHRoaXMuY3Vyc29yU3RhdGUuc3RyZWFtT3B0aW9ucy50cmFuc2Zvcm0ocmVzdWx0KSk7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHdlIHByb3ZpZGVkIGEgbWFwIGZ1bmN0aW9uXG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuY3Vyc29yU3RhdGUudHJhbnNmb3JtcyAmJlxuICAgICAgICB0eXBlb2YgdGhpcy5jdXJzb3JTdGF0ZS50cmFuc2Zvcm1zLmRvYyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICByZXN1bHQgIT0gbnVsbFxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnB1c2godGhpcy5jdXJzb3JTdGF0ZS50cmFuc2Zvcm1zLmRvYyhyZXN1bHQpKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmV0dXJuIHRoZSByZXN1bHRcbiAgICAgIHRoaXMucHVzaChyZXN1bHQpO1xuXG4gICAgICBpZiAocmVzdWx0ID09PSBudWxsICYmIHRoaXMuaXNEZWFkKCkpIHtcbiAgICAgICAgdGhpcy5vbmNlKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgIHRoaXMuZW1pdCgnZmluaXNoJyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgX2VuZFNlc3Npb24ob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICBjb25zdCBzZXNzaW9uID0gdGhpcy5jdXJzb3JTdGF0ZS5zZXNzaW9uO1xuXG4gICAgaWYgKHNlc3Npb24gJiYgKG9wdGlvbnMuZm9yY2UgfHwgc2Vzc2lvbi5vd25lciA9PT0gdGhpcykpIHtcbiAgICAgIHRoaXMuY3Vyc29yU3RhdGUuc2Vzc2lvbiA9IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHRoaXMub3BlcmF0aW9uKSB7XG4gICAgICAgIHRoaXMub3BlcmF0aW9uLmNsZWFyU2Vzc2lvbigpO1xuICAgICAgfVxuXG4gICAgICBzZXNzaW9uLmVuZFNlc3Npb24oY2FsbGJhY2spO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIF9nZXRNb3JlKGNhbGxiYWNrKSB7XG4gICAgaWYgKHRoaXMubG9nZ2VyLmlzRGVidWcoKSkge1xuICAgICAgdGhpcy5sb2dnZXIuZGVidWcoYHNjaGVkdWxlIGdldE1vcmUgY2FsbCBmb3IgcXVlcnkgWyR7SlNPTi5zdHJpbmdpZnkodGhpcy5xdWVyeSl9XWApO1xuICAgIH1cblxuICAgIC8vIFNldCB0aGUgY3VycmVudCBiYXRjaFNpemVcbiAgICBsZXQgYmF0Y2hTaXplID0gdGhpcy5jdXJzb3JTdGF0ZS5iYXRjaFNpemU7XG4gICAgaWYgKFxuICAgICAgdGhpcy5jdXJzb3JTdGF0ZS5saW1pdCA+IDAgJiZcbiAgICAgIHRoaXMuY3Vyc29yU3RhdGUuY3VycmVudExpbWl0ICsgYmF0Y2hTaXplID4gdGhpcy5jdXJzb3JTdGF0ZS5saW1pdFxuICAgICkge1xuICAgICAgYmF0Y2hTaXplID0gdGhpcy5jdXJzb3JTdGF0ZS5saW1pdCAtIHRoaXMuY3Vyc29yU3RhdGUuY3VycmVudExpbWl0O1xuICAgIH1cblxuICAgIHRoaXMuc2VydmVyLmdldE1vcmUodGhpcy5ucywgdGhpcy5jdXJzb3JTdGF0ZSwgYmF0Y2hTaXplLCB0aGlzLm9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIF9pbml0aWFsaXplQ3Vyc29yKGNhbGxiYWNrKSB7XG4gICAgY29uc3QgY3Vyc29yID0gdGhpcztcblxuICAgIC8vIE5PVEU6IHRoaXMgZ29lcyBhd2F5IG9uY2UgY3Vyc29ycyB1c2UgYGV4ZWN1dGVPcGVyYXRpb25gXG4gICAgaWYgKGlzVW5pZmllZFRvcG9sb2d5KGN1cnNvci50b3BvbG9neSkgJiYgY3Vyc29yLnRvcG9sb2d5LnNob3VsZENoZWNrRm9yU2Vzc2lvblN1cHBvcnQoKSkge1xuICAgICAgY3Vyc29yLnRvcG9sb2d5LnNlbGVjdFNlcnZlcihSZWFkUHJlZmVyZW5jZS5wcmltYXJ5UHJlZmVycmVkLCBlcnIgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjdXJzb3IuX25leHQoY2FsbGJhY2spO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkb25lKGVyciwgcmVzdWx0KSB7XG4gICAgICBpZiAoXG4gICAgICAgIGN1cnNvci5jdXJzb3JTdGF0ZS5jdXJzb3JJZCAmJlxuICAgICAgICBjdXJzb3IuY3Vyc29yU3RhdGUuY3Vyc29ySWQuaXNaZXJvKCkgJiZcbiAgICAgICAgY3Vyc29yLl9lbmRTZXNzaW9uXG4gICAgICApIHtcbiAgICAgICAgY3Vyc29yLl9lbmRTZXNzaW9uKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgY3Vyc29yLmN1cnNvclN0YXRlLmRvY3VtZW50cy5sZW5ndGggPT09IDAgJiZcbiAgICAgICAgY3Vyc29yLmN1cnNvclN0YXRlLmN1cnNvcklkICYmXG4gICAgICAgIGN1cnNvci5jdXJzb3JTdGF0ZS5jdXJzb3JJZC5pc1plcm8oKSAmJlxuICAgICAgICAhY3Vyc29yLmNtZC50YWlsYWJsZSAmJlxuICAgICAgICAhY3Vyc29yLmNtZC5hd2FpdERhdGFcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gc2V0Q3Vyc29yTm90aWZpZWQoY3Vyc29yLCBjYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrKGVyciwgcmVzdWx0KTtcbiAgICB9XG5cbiAgICBjb25zdCBxdWVyeUNhbGxiYWNrID0gKGVyciwgcikgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gZG9uZShlcnIpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZXN1bHQgPSByLm1lc3NhZ2U7XG4gICAgICBpZiAocmVzdWx0LnF1ZXJ5RmFpbHVyZSkge1xuICAgICAgICByZXR1cm4gZG9uZShuZXcgTW9uZ29FcnJvcihyZXN1bHQuZG9jdW1lbnRzWzBdKSwgbnVsbCk7XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIGlmIHdlIGhhdmUgYSBjb21tYW5kIGN1cnNvclxuICAgICAgaWYgKFxuICAgICAgICBBcnJheS5pc0FycmF5KHJlc3VsdC5kb2N1bWVudHMpICYmXG4gICAgICAgIHJlc3VsdC5kb2N1bWVudHMubGVuZ3RoID09PSAxICYmXG4gICAgICAgICghY3Vyc29yLmNtZC5maW5kIHx8IChjdXJzb3IuY21kLmZpbmQgJiYgY3Vyc29yLmNtZC52aXJ0dWFsID09PSBmYWxzZSkpICYmXG4gICAgICAgICh0eXBlb2YgcmVzdWx0LmRvY3VtZW50c1swXS5jdXJzb3IgIT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgcmVzdWx0LmRvY3VtZW50c1swXVsnJGVyciddIHx8XG4gICAgICAgICAgcmVzdWx0LmRvY3VtZW50c1swXVsnZXJybXNnJ10gfHxcbiAgICAgICAgICBBcnJheS5pc0FycmF5KHJlc3VsdC5kb2N1bWVudHNbMF0ucmVzdWx0KSlcbiAgICAgICkge1xuICAgICAgICAvLyBXZSBoYXZlIGFuIGVycm9yIGRvY3VtZW50LCByZXR1cm4gdGhlIGVycm9yXG4gICAgICAgIGlmIChyZXN1bHQuZG9jdW1lbnRzWzBdWyckZXJyJ10gfHwgcmVzdWx0LmRvY3VtZW50c1swXVsnZXJybXNnJ10pIHtcbiAgICAgICAgICByZXR1cm4gZG9uZShuZXcgTW9uZ29FcnJvcihyZXN1bHQuZG9jdW1lbnRzWzBdKSwgbnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXZSBoYXZlIGEgY3Vyc29yIGRvY3VtZW50XG4gICAgICAgIGlmIChyZXN1bHQuZG9jdW1lbnRzWzBdLmN1cnNvciAhPSBudWxsICYmIHR5cGVvZiByZXN1bHQuZG9jdW1lbnRzWzBdLmN1cnNvciAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBjb25zdCBpZCA9IHJlc3VsdC5kb2N1bWVudHNbMF0uY3Vyc29yLmlkO1xuICAgICAgICAgIC8vIElmIHdlIGhhdmUgYSBuYW1lc3BhY2UgY2hhbmdlIHNldCB0aGUgbmV3IG5hbWVzcGFjZSBmb3IgZ2V0bW9yZXNcbiAgICAgICAgICBpZiAocmVzdWx0LmRvY3VtZW50c1swXS5jdXJzb3IubnMpIHtcbiAgICAgICAgICAgIGN1cnNvci5ucyA9IHJlc3VsdC5kb2N1bWVudHNbMF0uY3Vyc29yLm5zO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBQcm9tb3RlIGlkIHRvIGxvbmcgaWYgbmVlZGVkXG4gICAgICAgICAgY3Vyc29yLmN1cnNvclN0YXRlLmN1cnNvcklkID0gdHlwZW9mIGlkID09PSAnbnVtYmVyJyA/IExvbmcuZnJvbU51bWJlcihpZCkgOiBpZDtcbiAgICAgICAgICBjdXJzb3IuY3Vyc29yU3RhdGUubGFzdEN1cnNvcklkID0gY3Vyc29yLmN1cnNvclN0YXRlLmN1cnNvcklkO1xuICAgICAgICAgIGN1cnNvci5jdXJzb3JTdGF0ZS5vcGVyYXRpb25UaW1lID0gcmVzdWx0LmRvY3VtZW50c1swXS5vcGVyYXRpb25UaW1lO1xuXG4gICAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIGZpcnN0QmF0Y2ggc2V0IGl0XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0LmRvY3VtZW50c1swXS5jdXJzb3IuZmlyc3RCYXRjaCkpIHtcbiAgICAgICAgICAgIGN1cnNvci5jdXJzb3JTdGF0ZS5kb2N1bWVudHMgPSByZXN1bHQuZG9jdW1lbnRzWzBdLmN1cnNvci5maXJzdEJhdGNoOyAvLy5yZXZlcnNlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gUmV0dXJuIGFmdGVyIHByb2Nlc3NpbmcgY29tbWFuZCBjdXJzb3JcbiAgICAgICAgICByZXR1cm4gZG9uZShudWxsLCByZXN1bHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0LmRvY3VtZW50c1swXS5yZXN1bHQpKSB7XG4gICAgICAgICAgY3Vyc29yLmN1cnNvclN0YXRlLmRvY3VtZW50cyA9IHJlc3VsdC5kb2N1bWVudHNbMF0ucmVzdWx0O1xuICAgICAgICAgIGN1cnNvci5jdXJzb3JTdGF0ZS5jdXJzb3JJZCA9IExvbmcuWkVSTztcbiAgICAgICAgICByZXR1cm4gZG9uZShudWxsLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE90aGVyd2lzZSBmYWxsIGJhY2sgdG8gcmVndWxhciBmaW5kIHBhdGhcbiAgICAgIGNvbnN0IGN1cnNvcklkID0gcmVzdWx0LmN1cnNvcklkIHx8IDA7XG4gICAgICBjdXJzb3IuY3Vyc29yU3RhdGUuY3Vyc29ySWQgPSBjdXJzb3JJZCBpbnN0YW5jZW9mIExvbmcgPyBjdXJzb3JJZCA6IExvbmcuZnJvbU51bWJlcihjdXJzb3JJZCk7XG4gICAgICBjdXJzb3IuY3Vyc29yU3RhdGUuZG9jdW1lbnRzID0gcmVzdWx0LmRvY3VtZW50cztcbiAgICAgIGN1cnNvci5jdXJzb3JTdGF0ZS5sYXN0Q3Vyc29ySWQgPSByZXN1bHQuY3Vyc29ySWQ7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSB0aGUgcmVzdWx0cyB3aXRoIHBhc3NlZCBpbiB0cmFuc2Zvcm1hdGlvbiBtZXRob2QgaWYgcHJvdmlkZWRcbiAgICAgIGlmIChcbiAgICAgICAgY3Vyc29yLmN1cnNvclN0YXRlLnRyYW5zZm9ybXMgJiZcbiAgICAgICAgdHlwZW9mIGN1cnNvci5jdXJzb3JTdGF0ZS50cmFuc2Zvcm1zLnF1ZXJ5ID09PSAnZnVuY3Rpb24nXG4gICAgICApIHtcbiAgICAgICAgY3Vyc29yLmN1cnNvclN0YXRlLmRvY3VtZW50cyA9IGN1cnNvci5jdXJzb3JTdGF0ZS50cmFuc2Zvcm1zLnF1ZXJ5KHJlc3VsdCk7XG4gICAgICB9XG5cbiAgICAgIGRvbmUobnVsbCwgcmVzdWx0KTtcbiAgICB9O1xuXG4gICAgaWYgKGN1cnNvci5vcGVyYXRpb24pIHtcbiAgICAgIGlmIChjdXJzb3IubG9nZ2VyLmlzRGVidWcoKSkge1xuICAgICAgICBjdXJzb3IubG9nZ2VyLmRlYnVnKFxuICAgICAgICAgIGBpc3N1ZSBpbml0aWFsIHF1ZXJ5IFske0pTT04uc3RyaW5naWZ5KGN1cnNvci5jbWQpfV0gd2l0aCBmbGFncyBbJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICAgIGN1cnNvci5xdWVyeVxuICAgICAgICAgICl9XWBcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgZXhlY3V0ZU9wZXJhdGlvbihjdXJzb3IudG9wb2xvZ3ksIGN1cnNvci5vcGVyYXRpb24sIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgZG9uZShlcnIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnNvci5zZXJ2ZXIgPSBjdXJzb3Iub3BlcmF0aW9uLnNlcnZlcjtcbiAgICAgICAgY3Vyc29yLmN1cnNvclN0YXRlLmluaXQgPSB0cnVlO1xuXG4gICAgICAgIC8vIE5PVEU6IHRoaXMgaXMgYSBzcGVjaWFsIGludGVybmFsIG1ldGhvZCBmb3IgY2xvbmluZyBhIGN1cnNvciwgY29uc2lkZXIgcmVtb3ZpbmdcbiAgICAgICAgaWYgKGN1cnNvci5jdXJzb3JTdGF0ZS5jdXJzb3JJZCAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGRvbmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHF1ZXJ5Q2FsbGJhY2soZXJyLCByZXN1bHQpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBWZXJ5IGV4cGxpY2l0bHkgY2hvb3NlIHdoYXQgaXMgcGFzc2VkIHRvIHNlbGVjdFNlcnZlclxuICAgIGNvbnN0IHNlcnZlclNlbGVjdE9wdGlvbnMgPSB7fTtcbiAgICBpZiAoY3Vyc29yLmN1cnNvclN0YXRlLnNlc3Npb24pIHtcbiAgICAgIHNlcnZlclNlbGVjdE9wdGlvbnMuc2Vzc2lvbiA9IGN1cnNvci5jdXJzb3JTdGF0ZS5zZXNzaW9uO1xuICAgIH1cblxuICAgIGlmIChjdXJzb3Iub3BlcmF0aW9uKSB7XG4gICAgICBzZXJ2ZXJTZWxlY3RPcHRpb25zLnJlYWRQcmVmZXJlbmNlID0gY3Vyc29yLm9wZXJhdGlvbi5yZWFkUHJlZmVyZW5jZTtcbiAgICB9IGVsc2UgaWYgKGN1cnNvci5vcHRpb25zLnJlYWRQcmVmZXJlbmNlKSB7XG4gICAgICBzZXJ2ZXJTZWxlY3RPcHRpb25zLnJlYWRQcmVmZXJlbmNlID0gY3Vyc29yLm9wdGlvbnMucmVhZFByZWZlcmVuY2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnNvci50b3BvbG9neS5zZWxlY3RTZXJ2ZXIoc2VydmVyU2VsZWN0T3B0aW9ucywgKGVyciwgc2VydmVyKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGNvbnN0IGRpc2Nvbm5lY3RIYW5kbGVyID0gY3Vyc29yLmRpc2Nvbm5lY3RIYW5kbGVyO1xuICAgICAgICBpZiAoZGlzY29ubmVjdEhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBkaXNjb25uZWN0SGFuZGxlci5hZGRPYmplY3RBbmRNZXRob2QoXG4gICAgICAgICAgICAnY3Vyc29yJyxcbiAgICAgICAgICAgIGN1cnNvcixcbiAgICAgICAgICAgICduZXh0JyxcbiAgICAgICAgICAgIFtjYWxsYmFja10sXG4gICAgICAgICAgICBjYWxsYmFja1xuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgIH1cblxuICAgICAgY3Vyc29yLnNlcnZlciA9IHNlcnZlcjtcbiAgICAgIGN1cnNvci5jdXJzb3JTdGF0ZS5pbml0ID0gdHJ1ZTtcbiAgICAgIGlmIChjb2xsYXRpb25Ob3RTdXBwb3J0ZWQoY3Vyc29yLnNlcnZlciwgY3Vyc29yLmNtZCkpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBNb25nb0Vycm9yKGBzZXJ2ZXIgJHtjdXJzb3Iuc2VydmVyLm5hbWV9IGRvZXMgbm90IHN1cHBvcnQgY29sbGF0aW9uYCkpO1xuICAgICAgfVxuXG4gICAgICAvLyBOT1RFOiB0aGlzIGlzIGEgc3BlY2lhbCBpbnRlcm5hbCBtZXRob2QgZm9yIGNsb25pbmcgYSBjdXJzb3IsIGNvbnNpZGVyIHJlbW92aW5nXG4gICAgICBpZiAoY3Vyc29yLmN1cnNvclN0YXRlLmN1cnNvcklkICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGRvbmUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnNvci5sb2dnZXIuaXNEZWJ1ZygpKSB7XG4gICAgICAgIGN1cnNvci5sb2dnZXIuZGVidWcoXG4gICAgICAgICAgYGlzc3VlIGluaXRpYWwgcXVlcnkgWyR7SlNPTi5zdHJpbmdpZnkoY3Vyc29yLmNtZCl9XSB3aXRoIGZsYWdzIFske0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgY3Vyc29yLnF1ZXJ5XG4gICAgICAgICAgKX1dYFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3Vyc29yLmNtZC5maW5kICE9IG51bGwpIHtcbiAgICAgICAgc2VydmVyLnF1ZXJ5KGN1cnNvci5ucywgY3Vyc29yLmNtZCwgY3Vyc29yLmN1cnNvclN0YXRlLCBjdXJzb3Iub3B0aW9ucywgcXVlcnlDYWxsYmFjayk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY29tbWFuZE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHsgc2Vzc2lvbjogY3Vyc29yLmN1cnNvclN0YXRlLnNlc3Npb24gfSwgY3Vyc29yLm9wdGlvbnMpO1xuICAgICAgc2VydmVyLmNvbW1hbmQoY3Vyc29yLm5zLCBjdXJzb3IuY21kLCBjb21tYW5kT3B0aW9ucywgcXVlcnlDYWxsYmFjayk7XG4gICAgfSk7XG4gIH1cbn1cblxuaWYgKFNVUFBPUlRTLkFTWU5DX0lURVJBVE9SKSB7XG4gIENvcmVDdXJzb3IucHJvdG90eXBlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IHJlcXVpcmUoJy4uL2FzeW5jL2FzeW5jX2l0ZXJhdG9yJykuYXN5bmNJdGVyYXRvcjtcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZSBpZiB0aGUgcG9vbCBpcyBkZWFkIGFuZCByZXR1cm4gZXJyb3JcbiAqL1xuZnVuY3Rpb24gaXNDb25uZWN0aW9uRGVhZChzZWxmLCBjYWxsYmFjaykge1xuICBpZiAoc2VsZi5wb29sICYmIHNlbGYucG9vbC5pc0Rlc3Ryb3llZCgpKSB7XG4gICAgc2VsZi5jdXJzb3JTdGF0ZS5raWxsZWQgPSB0cnVlO1xuICAgIGNvbnN0IGVyciA9IG5ldyBNb25nb05ldHdvcmtFcnJvcihcbiAgICAgIGBjb25uZWN0aW9uIHRvIGhvc3QgJHtzZWxmLnBvb2wuaG9zdH06JHtzZWxmLnBvb2wucG9ydH0gd2FzIGRlc3Ryb3llZGBcbiAgICApO1xuXG4gICAgX3NldEN1cnNvck5vdGlmaWVkSW1wbChzZWxmLCAoKSA9PiBjYWxsYmFjayhlcnIpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZSBpZiB0aGUgY3Vyc29yIGlzIGRlYWQgYnV0IHdhcyBub3QgZXhwbGljaXRseSBraWxsZWQgYnkgdXNlclxuICovXG5mdW5jdGlvbiBpc0N1cnNvckRlYWRCdXROb3RraWxsZWQoc2VsZiwgY2FsbGJhY2spIHtcbiAgLy8gQ3Vyc29yIGlzIGRlYWQgYnV0IG5vdCBtYXJrZWQga2lsbGVkLCByZXR1cm4gbnVsbFxuICBpZiAoc2VsZi5jdXJzb3JTdGF0ZS5kZWFkICYmICFzZWxmLmN1cnNvclN0YXRlLmtpbGxlZCkge1xuICAgIHNlbGYuY3Vyc29yU3RhdGUua2lsbGVkID0gdHJ1ZTtcbiAgICBzZXRDdXJzb3JOb3RpZmllZChzZWxmLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogVmFsaWRhdGUgaWYgdGhlIGN1cnNvciBpcyBkZWFkIGFuZCB3YXMga2lsbGVkIGJ5IHVzZXJcbiAqL1xuZnVuY3Rpb24gaXNDdXJzb3JEZWFkQW5kS2lsbGVkKHNlbGYsIGNhbGxiYWNrKSB7XG4gIGlmIChzZWxmLmN1cnNvclN0YXRlLmRlYWQgJiYgc2VsZi5jdXJzb3JTdGF0ZS5raWxsZWQpIHtcbiAgICBoYW5kbGVDYWxsYmFjayhjYWxsYmFjaywgbmV3IE1vbmdvRXJyb3IoJ2N1cnNvciBpcyBkZWFkJykpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFZhbGlkYXRlIGlmIHRoZSBjdXJzb3Igd2FzIGtpbGxlZCBieSB0aGUgdXNlclxuICovXG5mdW5jdGlvbiBpc0N1cnNvcktpbGxlZChzZWxmLCBjYWxsYmFjaykge1xuICBpZiAoc2VsZi5jdXJzb3JTdGF0ZS5raWxsZWQpIHtcbiAgICBzZXRDdXJzb3JOb3RpZmllZChzZWxmLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogTWFyayBjdXJzb3IgYXMgYmVpbmcgZGVhZCBhbmQgbm90aWZpZWRcbiAqL1xuZnVuY3Rpb24gc2V0Q3Vyc29yRGVhZEFuZE5vdGlmaWVkKHNlbGYsIGNhbGxiYWNrKSB7XG4gIHNlbGYuY3Vyc29yU3RhdGUuZGVhZCA9IHRydWU7XG4gIHNldEN1cnNvck5vdGlmaWVkKHNlbGYsIGNhbGxiYWNrKTtcbn1cblxuLyoqXG4gKiBNYXJrIGN1cnNvciBhcyBiZWluZyBub3RpZmllZFxuICovXG5mdW5jdGlvbiBzZXRDdXJzb3JOb3RpZmllZChzZWxmLCBjYWxsYmFjaykge1xuICBfc2V0Q3Vyc29yTm90aWZpZWRJbXBsKHNlbGYsICgpID0+IGhhbmRsZUNhbGxiYWNrKGNhbGxiYWNrLCBudWxsLCBudWxsKSk7XG59XG5cbmZ1bmN0aW9uIF9zZXRDdXJzb3JOb3RpZmllZEltcGwoc2VsZiwgY2FsbGJhY2spIHtcbiAgc2VsZi5jdXJzb3JTdGF0ZS5ub3RpZmllZCA9IHRydWU7XG4gIHNlbGYuY3Vyc29yU3RhdGUuZG9jdW1lbnRzID0gW107XG4gIHNlbGYuY3Vyc29yU3RhdGUuY3Vyc29ySW5kZXggPSAwO1xuXG4gIGlmIChzZWxmLl9lbmRTZXNzaW9uKSB7XG4gICAgc2VsZi5fZW5kU2Vzc2lvbih1bmRlZmluZWQsICgpID0+IGNhbGxiYWNrKCkpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHJldHVybiBjYWxsYmFjaygpO1xufVxuXG5mdW5jdGlvbiBuZXh0RnVuY3Rpb24oc2VsZiwgY2FsbGJhY2spIHtcbiAgLy8gV2UgaGF2ZSBub3RpZmllZCBhYm91dCBpdFxuICBpZiAoc2VsZi5jdXJzb3JTdGF0ZS5ub3RpZmllZCkge1xuICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoJ2N1cnNvciBpcyBleGhhdXN0ZWQnKSk7XG4gIH1cblxuICAvLyBDdXJzb3IgaXMga2lsbGVkIHJldHVybiBudWxsXG4gIGlmIChpc0N1cnNvcktpbGxlZChzZWxmLCBjYWxsYmFjaykpIHJldHVybjtcblxuICAvLyBDdXJzb3IgaXMgZGVhZCBidXQgbm90IG1hcmtlZCBraWxsZWQsIHJldHVybiBudWxsXG4gIGlmIChpc0N1cnNvckRlYWRCdXROb3RraWxsZWQoc2VsZiwgY2FsbGJhY2spKSByZXR1cm47XG5cbiAgLy8gV2UgaGF2ZSBhIGRlYWQgYW5kIGtpbGxlZCBjdXJzb3IsIGF0dGVtcHRpbmcgdG8gY2FsbCBuZXh0IHNob3VsZCBlcnJvclxuICBpZiAoaXNDdXJzb3JEZWFkQW5kS2lsbGVkKHNlbGYsIGNhbGxiYWNrKSkgcmV0dXJuO1xuXG4gIC8vIFdlIGhhdmUganVzdCBzdGFydGVkIHRoZSBjdXJzb3JcbiAgaWYgKCFzZWxmLmN1cnNvclN0YXRlLmluaXQpIHtcbiAgICAvLyBUb3BvbG9neSBpcyBub3QgY29ubmVjdGVkLCBzYXZlIHRoZSBjYWxsIGluIHRoZSBwcm92aWRlZCBzdG9yZSB0byBiZVxuICAgIC8vIEV4ZWN1dGVkIGF0IHNvbWUgcG9pbnQgd2hlbiB0aGUgaGFuZGxlciBkZWVtcyBpdCdzIHJlY29ubmVjdGVkXG4gICAgaWYgKCFzZWxmLnRvcG9sb2d5LmlzQ29ubmVjdGVkKHNlbGYub3B0aW9ucykpIHtcbiAgICAgIC8vIE9ubHkgbmVlZCB0aGlzIGZvciBzaW5nbGUgc2VydmVyLCBiZWNhdXNlIHJlcGwgc2V0cyBhbmQgbW9uZ29zXG4gICAgICAvLyB3aWxsIGFsd2F5cyBjb250aW51ZSB0cnlpbmcgdG8gcmVjb25uZWN0XG4gICAgICBpZiAoc2VsZi50b3BvbG9neS5fdHlwZSA9PT0gJ3NlcnZlcicgJiYgIXNlbGYudG9wb2xvZ3kucy5vcHRpb25zLnJlY29ubmVjdCkge1xuICAgICAgICAvLyBSZWNvbm5lY3QgaXMgZGlzYWJsZWQsIHNvIHdlJ2xsIG5ldmVyIHJlY29ubmVjdFxuICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IE1vbmdvRXJyb3IoJ25vIGNvbm5lY3Rpb24gYXZhaWxhYmxlJykpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZi5kaXNjb25uZWN0SGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgIGlmIChzZWxmLnRvcG9sb2d5LmlzRGVzdHJveWVkKCkpIHtcbiAgICAgICAgICAvLyBUb3BvbG9neSB3YXMgZGVzdHJveWVkLCBzbyBkb24ndCB0cnkgdG8gd2FpdCBmb3IgaXQgdG8gcmVjb25uZWN0XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBNb25nb0Vycm9yKCdUb3BvbG9neSB3YXMgZGVzdHJveWVkJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5kaXNjb25uZWN0SGFuZGxlci5hZGRPYmplY3RBbmRNZXRob2QoJ2N1cnNvcicsIHNlbGYsICduZXh0JywgW2NhbGxiYWNrXSwgY2FsbGJhY2spO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2VsZi5faW5pdGlhbGl6ZUN1cnNvcigoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgIGlmIChlcnIgfHwgcmVzdWx0ID09PSBudWxsKSB7XG4gICAgICAgIGNhbGxiYWNrKGVyciwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBuZXh0RnVuY3Rpb24oc2VsZiwgY2FsbGJhY2spO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHNlbGYuY3Vyc29yU3RhdGUubGltaXQgPiAwICYmIHNlbGYuY3Vyc29yU3RhdGUuY3VycmVudExpbWl0ID49IHNlbGYuY3Vyc29yU3RhdGUubGltaXQpIHtcbiAgICAvLyBFbnN1cmUgd2Uga2lsbCB0aGUgY3Vyc29yIG9uIHRoZSBzZXJ2ZXJcbiAgICBzZWxmLmtpbGwoKTtcbiAgICAvLyBTZXQgY3Vyc29yIGluIGRlYWQgYW5kIG5vdGlmaWVkIHN0YXRlXG4gICAgcmV0dXJuIHNldEN1cnNvckRlYWRBbmROb3RpZmllZChzZWxmLCBjYWxsYmFjayk7XG4gIH0gZWxzZSBpZiAoXG4gICAgc2VsZi5jdXJzb3JTdGF0ZS5jdXJzb3JJbmRleCA9PT0gc2VsZi5jdXJzb3JTdGF0ZS5kb2N1bWVudHMubGVuZ3RoICYmXG4gICAgIUxvbmcuWkVSTy5lcXVhbHMoc2VsZi5jdXJzb3JTdGF0ZS5jdXJzb3JJZClcbiAgKSB7XG4gICAgLy8gRW5zdXJlIGFuIGVtcHR5IGN1cnNvciBzdGF0ZVxuICAgIHNlbGYuY3Vyc29yU3RhdGUuZG9jdW1lbnRzID0gW107XG4gICAgc2VsZi5jdXJzb3JTdGF0ZS5jdXJzb3JJbmRleCA9IDA7XG5cbiAgICAvLyBDaGVjayBpZiB0b3BvbG9neSBpcyBkZXN0cm95ZWRcbiAgICBpZiAoc2VsZi50b3BvbG9neS5pc0Rlc3Ryb3llZCgpKVxuICAgICAgcmV0dXJuIGNhbGxiYWNrKFxuICAgICAgICBuZXcgTW9uZ29OZXR3b3JrRXJyb3IoJ2Nvbm5lY3Rpb24gZGVzdHJveWVkLCBub3QgcG9zc2libGUgdG8gaW5zdGFudGlhdGUgY3Vyc29yJylcbiAgICAgICk7XG5cbiAgICAvLyBDaGVjayBpZiBjb25uZWN0aW9uIGlzIGRlYWQgYW5kIHJldHVybiBpZiBub3QgcG9zc2libGUgdG9cbiAgICAvLyBleGVjdXRlIGEgZ2V0TW9yZSBvbiB0aGlzIGNvbm5lY3Rpb25cbiAgICBpZiAoaXNDb25uZWN0aW9uRGVhZChzZWxmLCBjYWxsYmFjaykpIHJldHVybjtcblxuICAgIC8vIEV4ZWN1dGUgdGhlIG5leHQgZ2V0IG1vcmVcbiAgICBzZWxmLl9nZXRNb3JlKGZ1bmN0aW9uKGVyciwgZG9jLCBjb25uZWN0aW9uKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBNb25nb0Vycm9yKSB7XG4gICAgICAgICAgZXJyW21vbmdvRXJyb3JDb250ZXh0U3ltYm9sXS5pc0dldE1vcmUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKGNhbGxiYWNrLCBlcnIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZi5jdXJzb3JTdGF0ZS5jdXJzb3JJZCAmJiBzZWxmLmN1cnNvclN0YXRlLmN1cnNvcklkLmlzWmVybygpICYmIHNlbGYuX2VuZFNlc3Npb24pIHtcbiAgICAgICAgc2VsZi5fZW5kU2Vzc2lvbigpO1xuICAgICAgfVxuXG4gICAgICAvLyBTYXZlIHRoZSByZXR1cm5lZCBjb25uZWN0aW9uIHRvIGVuc3VyZSBhbGwgZ2V0TW9yZSdzIGZpcmUgb3ZlciB0aGUgc2FtZSBjb25uZWN0aW9uXG4gICAgICBzZWxmLmNvbm5lY3Rpb24gPSBjb25uZWN0aW9uO1xuXG4gICAgICAvLyBUYWlsYWJsZSBjdXJzb3IgZ2V0TW9yZSByZXN1bHQsIG5vdGlmeSBvd25lciBhYm91dCBpdFxuICAgICAgLy8gTm8gYXR0ZW1wdCBpcyBtYWRlIGhlcmUgdG8gcmV0cnksIHRoaXMgaXMgbGVmdCB0byB0aGUgdXNlciBvZiB0aGVcbiAgICAgIC8vIGNvcmUgbW9kdWxlIHRvIGhhbmRsZSB0byBrZWVwIGNvcmUgc2ltcGxlXG4gICAgICBpZiAoXG4gICAgICAgIHNlbGYuY3Vyc29yU3RhdGUuZG9jdW1lbnRzLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICBzZWxmLmNtZC50YWlsYWJsZSAmJlxuICAgICAgICBMb25nLlpFUk8uZXF1YWxzKHNlbGYuY3Vyc29yU3RhdGUuY3Vyc29ySWQpXG4gICAgICApIHtcbiAgICAgICAgLy8gTm8gbW9yZSBkb2N1bWVudHMgaW4gdGhlIHRhaWxlZCBjdXJzb3JcbiAgICAgICAgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKFxuICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICAgIG5ldyBNb25nb0Vycm9yKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdObyBtb3JlIGRvY3VtZW50cyBpbiB0YWlsZWQgY3Vyc29yJyxcbiAgICAgICAgICAgIHRhaWxhYmxlOiBzZWxmLmNtZC50YWlsYWJsZSxcbiAgICAgICAgICAgIGF3YWl0RGF0YTogc2VsZi5jbWQuYXdhaXREYXRhXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHNlbGYuY3Vyc29yU3RhdGUuZG9jdW1lbnRzLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICBzZWxmLmNtZC50YWlsYWJsZSAmJlxuICAgICAgICAhTG9uZy5aRVJPLmVxdWFscyhzZWxmLmN1cnNvclN0YXRlLmN1cnNvcklkKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBuZXh0RnVuY3Rpb24oc2VsZiwgY2FsbGJhY2spO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZi5jdXJzb3JTdGF0ZS5saW1pdCA+IDAgJiYgc2VsZi5jdXJzb3JTdGF0ZS5jdXJyZW50TGltaXQgPj0gc2VsZi5jdXJzb3JTdGF0ZS5saW1pdCkge1xuICAgICAgICByZXR1cm4gc2V0Q3Vyc29yRGVhZEFuZE5vdGlmaWVkKHNlbGYsIGNhbGxiYWNrKTtcbiAgICAgIH1cblxuICAgICAgbmV4dEZ1bmN0aW9uKHNlbGYsIGNhbGxiYWNrKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChcbiAgICBzZWxmLmN1cnNvclN0YXRlLmRvY3VtZW50cy5sZW5ndGggPT09IHNlbGYuY3Vyc29yU3RhdGUuY3Vyc29ySW5kZXggJiZcbiAgICBzZWxmLmNtZC50YWlsYWJsZSAmJlxuICAgIExvbmcuWkVSTy5lcXVhbHMoc2VsZi5jdXJzb3JTdGF0ZS5jdXJzb3JJZClcbiAgKSB7XG4gICAgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKFxuICAgICAgY2FsbGJhY2ssXG4gICAgICBuZXcgTW9uZ29FcnJvcih7XG4gICAgICAgIG1lc3NhZ2U6ICdObyBtb3JlIGRvY3VtZW50cyBpbiB0YWlsZWQgY3Vyc29yJyxcbiAgICAgICAgdGFpbGFibGU6IHNlbGYuY21kLnRhaWxhYmxlLFxuICAgICAgICBhd2FpdERhdGE6IHNlbGYuY21kLmF3YWl0RGF0YVxuICAgICAgfSlcbiAgICApO1xuICB9IGVsc2UgaWYgKFxuICAgIHNlbGYuY3Vyc29yU3RhdGUuZG9jdW1lbnRzLmxlbmd0aCA9PT0gc2VsZi5jdXJzb3JTdGF0ZS5jdXJzb3JJbmRleCAmJlxuICAgIExvbmcuWkVSTy5lcXVhbHMoc2VsZi5jdXJzb3JTdGF0ZS5jdXJzb3JJZClcbiAgKSB7XG4gICAgc2V0Q3Vyc29yRGVhZEFuZE5vdGlmaWVkKHNlbGYsIGNhbGxiYWNrKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoc2VsZi5jdXJzb3JTdGF0ZS5saW1pdCA+IDAgJiYgc2VsZi5jdXJzb3JTdGF0ZS5jdXJyZW50TGltaXQgPj0gc2VsZi5jdXJzb3JTdGF0ZS5saW1pdCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGtpbGwgdGhlIGN1cnNvciBvbiB0aGUgc2VydmVyXG4gICAgICBzZWxmLmtpbGwoKTtcbiAgICAgIC8vIFNldCBjdXJzb3IgaW4gZGVhZCBhbmQgbm90aWZpZWQgc3RhdGVcbiAgICAgIHJldHVybiBzZXRDdXJzb3JEZWFkQW5kTm90aWZpZWQoc2VsZiwgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIC8vIEluY3JlbWVudCB0aGUgY3VycmVudCBjdXJzb3IgbGltaXRcbiAgICBzZWxmLmN1cnNvclN0YXRlLmN1cnJlbnRMaW1pdCArPSAxO1xuXG4gICAgLy8gR2V0IHRoZSBkb2N1bWVudFxuICAgIGxldCBkb2MgPSBzZWxmLmN1cnNvclN0YXRlLmRvY3VtZW50c1tzZWxmLmN1cnNvclN0YXRlLmN1cnNvckluZGV4KytdO1xuXG4gICAgLy8gRG9jIG92ZXJmbG93XG4gICAgaWYgKCFkb2MgfHwgZG9jLiRlcnIpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBraWxsIHRoZSBjdXJzb3Igb24gdGhlIHNlcnZlclxuICAgICAgc2VsZi5raWxsKCk7XG4gICAgICAvLyBTZXQgY3Vyc29yIGluIGRlYWQgYW5kIG5vdGlmaWVkIHN0YXRlXG4gICAgICByZXR1cm4gc2V0Q3Vyc29yRGVhZEFuZE5vdGlmaWVkKHNlbGYsIGZ1bmN0aW9uKCkge1xuICAgICAgICBoYW5kbGVDYWxsYmFjayhjYWxsYmFjaywgbmV3IE1vbmdvRXJyb3IoZG9jID8gZG9jLiRlcnIgOiB1bmRlZmluZWQpKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFRyYW5zZm9ybSB0aGUgZG9jIHdpdGggcGFzc2VkIGluIHRyYW5zZm9ybWF0aW9uIG1ldGhvZCBpZiBwcm92aWRlZFxuICAgIGlmIChzZWxmLmN1cnNvclN0YXRlLnRyYW5zZm9ybXMgJiYgdHlwZW9mIHNlbGYuY3Vyc29yU3RhdGUudHJhbnNmb3Jtcy5kb2MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGRvYyA9IHNlbGYuY3Vyc29yU3RhdGUudHJhbnNmb3Jtcy5kb2MoZG9jKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gdGhlIGRvY3VtZW50XG4gICAgaGFuZGxlQ2FsbGJhY2soY2FsbGJhY2ssIG51bGwsIGRvYyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEN1cnNvclN0YXRlLFxuICBDb3JlQ3Vyc29yXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///82\n");

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst MongoError = __webpack_require__(37).MongoError;\nconst Aspect = __webpack_require__(84).Aspect;\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst ReadPreference = __webpack_require__(42);\nconst isRetryableError = __webpack_require__(37).isRetryableError;\nconst maxWireVersion = __webpack_require__(35).maxWireVersion;\nconst isUnifiedTopology = __webpack_require__(35).isUnifiedTopology;\n\n/**\n * Executes the given operation with provided arguments.\n *\n * This method reduces large amounts of duplication in the entire codebase by providing\n * a single point for determining whether callbacks or promises should be used. Additionally\n * it allows for a single point of entry to provide features such as implicit sessions, which\n * are required by the Driver Sessions specification in the event that a ClientSession is\n * not provided\n *\n * @param {object} topology The topology to execute this operation on\n * @param {Operation} operation The operation to execute\n * @param {function} callback The command result callback\n */\nfunction executeOperation(topology, operation, callback) {\n  if (topology == null) {\n    throw new TypeError('This method requires a valid topology instance');\n  }\n\n  if (!(operation instanceof OperationBase)) {\n    throw new TypeError('This method requires a valid operation instance');\n  }\n\n  if (\n    isUnifiedTopology(topology) &&\n    !operation.hasAspect(Aspect.SKIP_SESSION) &&\n    topology.shouldCheckForSessionSupport()\n  ) {\n    return selectServerForSessionSupport(topology, operation, callback);\n  }\n\n  const Promise = topology.s.promiseLibrary;\n\n  // The driver sessions spec mandates that we implicitly create sessions for operations\n  // that are not explicitly provided with a session.\n  let session, owner;\n  if (!operation.hasAspect(Aspect.SKIP_SESSION) && topology.hasSessionSupport()) {\n    if (operation.session == null) {\n      owner = Symbol();\n      session = topology.startSession({ owner });\n      operation.session = session;\n    } else if (operation.session.hasEnded) {\n      throw new MongoError('Use of expired sessions is not permitted');\n    }\n  }\n\n  const makeExecuteCallback = (resolve, reject) =>\n    function executeCallback(err, result) {\n      if (session && session.owner === owner) {\n        session.endSession(() => {\n          if (operation.session === session) {\n            operation.clearSession();\n          }\n          if (err) return reject(err);\n          resolve(result);\n        });\n      } else {\n        if (err) return reject(err);\n        resolve(result);\n      }\n    };\n\n  // Execute using callback\n  if (typeof callback === 'function') {\n    const handler = makeExecuteCallback(\n      result => callback(null, result),\n      err => callback(err, null)\n    );\n\n    try {\n      if (operation.hasAspect(Aspect.EXECUTE_WITH_SELECTION)) {\n        return executeWithServerSelection(topology, operation, handler);\n      } else {\n        return operation.execute(handler);\n      }\n    } catch (e) {\n      handler(e);\n      throw e;\n    }\n  }\n\n  return new Promise(function(resolve, reject) {\n    const handler = makeExecuteCallback(resolve, reject);\n\n    try {\n      if (operation.hasAspect(Aspect.EXECUTE_WITH_SELECTION)) {\n        return executeWithServerSelection(topology, operation, handler);\n      } else {\n        return operation.execute(handler);\n      }\n    } catch (e) {\n      handler(e);\n    }\n  });\n}\n\nfunction supportsRetryableReads(server) {\n  return maxWireVersion(server) >= 6;\n}\n\nfunction executeWithServerSelection(topology, operation, callback) {\n  const readPreference = operation.readPreference || ReadPreference.primary;\n  const inTransaction = operation.session && operation.session.inTransaction();\n\n  if (inTransaction && !readPreference.equals(ReadPreference.primary)) {\n    callback(\n      new MongoError(\n        `Read preference in a transaction must be primary, not: ${readPreference.mode}`\n      )\n    );\n\n    return;\n  }\n\n  const serverSelectionOptions = {\n    readPreference,\n    session: operation.session\n  };\n\n  function callbackWithRetry(err, result) {\n    if (err == null) {\n      return callback(null, result);\n    }\n\n    if (!isRetryableError(err)) {\n      return callback(err);\n    }\n\n    // select a new server, and attempt to retry the operation\n    topology.selectServer(serverSelectionOptions, (err, server) => {\n      if (err || !supportsRetryableReads(server)) {\n        callback(err, null);\n        return;\n      }\n\n      operation.execute(server, callback);\n    });\n  }\n\n  // select a server, and execute the operation against it\n  topology.selectServer(serverSelectionOptions, (err, server) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n\n    const shouldRetryReads =\n      topology.s.options.retryReads !== false &&\n      (operation.session && !inTransaction) &&\n      supportsRetryableReads(server) &&\n      operation.canRetryRead;\n\n    if (operation.hasAspect(Aspect.RETRYABLE) && shouldRetryReads) {\n      operation.execute(server, callbackWithRetry);\n      return;\n    }\n\n    operation.execute(server, callback);\n  });\n}\n\n// TODO: This is only supported for unified topology, it should go away once\n//       we remove support for legacy topology types.\nfunction selectServerForSessionSupport(topology, operation, callback) {\n  const Promise = topology.s.promiseLibrary;\n\n  let result;\n  if (typeof callback !== 'function') {\n    result = new Promise((resolve, reject) => {\n      callback = (err, result) => {\n        if (err) return reject(err);\n        resolve(result);\n      };\n    });\n  }\n\n  topology.selectServer(ReadPreference.primaryPreferred, err => {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    executeOperation(topology, operation, callback);\n  });\n\n  return result;\n}\n\nmodule.exports = executeOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///83\n");

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Aspect = {\n  READ_OPERATION: Symbol('READ_OPERATION'),\n  SKIP_SESSION: Symbol('SKIP_SESSION'),\n  WRITE_OPERATION: Symbol('WRITE_OPERATION'),\n  RETRYABLE: Symbol('RETRYABLE'),\n  EXECUTE_WITH_SELECTION: Symbol('EXECUTE_WITH_SELECTION')\n};\n\n/**\n * This class acts as a parent class for any operation and is responsible for setting this.options,\n * as well as setting and getting a session.\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\n * a specific aspect, including `SKIP_SESSION` and other aspects to encode retryability\n * and other functionality.\n */\nclass OperationBase {\n  constructor(options) {\n    this.options = Object.assign({}, options);\n  }\n\n  hasAspect(aspect) {\n    if (this.constructor.aspects == null) {\n      return false;\n    }\n    return this.constructor.aspects.has(aspect);\n  }\n\n  set session(session) {\n    Object.assign(this.options, { session });\n  }\n\n  get session() {\n    return this.options.session;\n  }\n\n  clearSession() {\n    delete this.options.session;\n  }\n\n  get canRetryRead() {\n    return true;\n  }\n\n  execute() {\n    throw new TypeError('`execute` must be implemented for OperationBase subclasses');\n  }\n}\n\nfunction defineAspects(operation, aspects) {\n  if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n    aspects = [aspects];\n  }\n  aspects = new Set(aspects);\n  Object.defineProperty(operation, 'aspects', {\n    value: aspects,\n    writable: false\n  });\n  return aspects;\n}\n\nmodule.exports = {\n  Aspect,\n  defineAspects,\n  OperationBase\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvb3BlcmF0aW9uLmpzP2EzODciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlDQUFpQyxVQUFVO0FBQzNDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ijg0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBBc3BlY3QgPSB7XG4gIFJFQURfT1BFUkFUSU9OOiBTeW1ib2woJ1JFQURfT1BFUkFUSU9OJyksXG4gIFNLSVBfU0VTU0lPTjogU3ltYm9sKCdTS0lQX1NFU1NJT04nKSxcbiAgV1JJVEVfT1BFUkFUSU9OOiBTeW1ib2woJ1dSSVRFX09QRVJBVElPTicpLFxuICBSRVRSWUFCTEU6IFN5bWJvbCgnUkVUUllBQkxFJyksXG4gIEVYRUNVVEVfV0lUSF9TRUxFQ1RJT046IFN5bWJvbCgnRVhFQ1VURV9XSVRIX1NFTEVDVElPTicpXG59O1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgYWN0cyBhcyBhIHBhcmVudCBjbGFzcyBmb3IgYW55IG9wZXJhdGlvbiBhbmQgaXMgcmVzcG9uc2libGUgZm9yIHNldHRpbmcgdGhpcy5vcHRpb25zLFxuICogYXMgd2VsbCBhcyBzZXR0aW5nIGFuZCBnZXR0aW5nIGEgc2Vzc2lvbi5cbiAqIEFkZGl0aW9uYWxseSwgdGhpcyBjbGFzcyBpbXBsZW1lbnRzIGBoYXNBc3BlY3RgLCB3aGljaCBkZXRlcm1pbmVzIHdoZXRoZXIgYW4gb3BlcmF0aW9uIGhhc1xuICogYSBzcGVjaWZpYyBhc3BlY3QsIGluY2x1ZGluZyBgU0tJUF9TRVNTSU9OYCBhbmQgb3RoZXIgYXNwZWN0cyB0byBlbmNvZGUgcmV0cnlhYmlsaXR5XG4gKiBhbmQgb3RoZXIgZnVuY3Rpb25hbGl0eS5cbiAqL1xuY2xhc3MgT3BlcmF0aW9uQmFzZSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcbiAgfVxuXG4gIGhhc0FzcGVjdChhc3BlY3QpIHtcbiAgICBpZiAodGhpcy5jb25zdHJ1Y3Rvci5hc3BlY3RzID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuYXNwZWN0cy5oYXMoYXNwZWN0KTtcbiAgfVxuXG4gIHNldCBzZXNzaW9uKHNlc3Npb24pIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMub3B0aW9ucywgeyBzZXNzaW9uIH0pO1xuICB9XG5cbiAgZ2V0IHNlc3Npb24oKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5zZXNzaW9uO1xuICB9XG5cbiAgY2xlYXJTZXNzaW9uKCkge1xuICAgIGRlbGV0ZSB0aGlzLm9wdGlvbnMuc2Vzc2lvbjtcbiAgfVxuXG4gIGdldCBjYW5SZXRyeVJlYWQoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBleGVjdXRlKCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2BleGVjdXRlYCBtdXN0IGJlIGltcGxlbWVudGVkIGZvciBPcGVyYXRpb25CYXNlIHN1YmNsYXNzZXMnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWZpbmVBc3BlY3RzKG9wZXJhdGlvbiwgYXNwZWN0cykge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoYXNwZWN0cykgJiYgIShhc3BlY3RzIGluc3RhbmNlb2YgU2V0KSkge1xuICAgIGFzcGVjdHMgPSBbYXNwZWN0c107XG4gIH1cbiAgYXNwZWN0cyA9IG5ldyBTZXQoYXNwZWN0cyk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcGVyYXRpb24sICdhc3BlY3RzJywge1xuICAgIHZhbHVlOiBhc3BlY3RzLFxuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KTtcbiAgcmV0dXJuIGFzcGVjdHM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBc3BlY3QsXG4gIGRlZmluZUFzcGVjdHMsXG4gIE9wZXJhdGlvbkJhc2Vcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///84\n");

/***/ }),
/* 85 */
/***/ (function(module, exports) {

eval("module.exports = require(\"stream\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0L2V4dGVybmFsIFwic3RyZWFtXCI/NzU3ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI4NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInN0cmVhbVwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///85\n");

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst MongoError = __webpack_require__(37).MongoError;\nconst ReadPreference = __webpack_require__(42);\nconst WriteConcern = __webpack_require__(87);\n\nvar shallowClone = function(obj) {\n  var copy = {};\n  for (var name in obj) copy[name] = obj[name];\n  return copy;\n};\n\n// Figure out the read preference\nvar translateReadPreference = function(options) {\n  var r = null;\n  if (options.readPreference) {\n    r = options.readPreference;\n  } else {\n    return options;\n  }\n\n  if (typeof r === 'string') {\n    options.readPreference = new ReadPreference(r);\n  } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n    const mode = r.mode || r.preference;\n    if (mode && typeof mode === 'string') {\n      options.readPreference = new ReadPreference(mode, r.tags, {\n        maxStalenessSeconds: r.maxStalenessSeconds\n      });\n    }\n  } else if (!(r instanceof ReadPreference)) {\n    throw new TypeError('Invalid read preference: ' + r);\n  }\n\n  return options;\n};\n\n// Set simple property\nvar getSingleProperty = function(obj, name, value) {\n  Object.defineProperty(obj, name, {\n    enumerable: true,\n    get: function() {\n      return value;\n    }\n  });\n};\n\nvar formatSortValue = (exports.formatSortValue = function(sortDirection) {\n  var value = ('' + sortDirection).toLowerCase();\n\n  switch (value) {\n    case 'ascending':\n    case 'asc':\n    case '1':\n      return 1;\n    case 'descending':\n    case 'desc':\n    case '-1':\n      return -1;\n    default:\n      throw new Error(\n        'Illegal sort clause, must be of the form ' +\n          \"[['field1', '(ascending|descending)'], \" +\n          \"['field2', '(ascending|descending)']]\"\n      );\n  }\n});\n\nvar formattedOrderClause = (exports.formattedOrderClause = function(sortValue) {\n  var orderBy = {};\n  if (sortValue == null) return null;\n  if (Array.isArray(sortValue)) {\n    if (sortValue.length === 0) {\n      return null;\n    }\n\n    for (var i = 0; i < sortValue.length; i++) {\n      if (sortValue[i].constructor === String) {\n        orderBy[sortValue[i]] = 1;\n      } else {\n        orderBy[sortValue[i][0]] = formatSortValue(sortValue[i][1]);\n      }\n    }\n  } else if (sortValue != null && typeof sortValue === 'object') {\n    orderBy = sortValue;\n  } else if (typeof sortValue === 'string') {\n    orderBy[sortValue] = 1;\n  } else {\n    throw new Error(\n      'Illegal sort clause, must be of the form ' +\n        \"[['field1', '(ascending|descending)'], ['field2', '(ascending|descending)']]\"\n    );\n  }\n\n  return orderBy;\n});\n\nvar checkCollectionName = function checkCollectionName(collectionName) {\n  if ('string' !== typeof collectionName) {\n    throw new MongoError('collection name must be a String');\n  }\n\n  if (!collectionName || collectionName.indexOf('..') !== -1) {\n    throw new MongoError('collection names cannot be empty');\n  }\n\n  if (\n    collectionName.indexOf('$') !== -1 &&\n    collectionName.match(/((^\\$cmd)|(oplog\\.\\$main))/) == null\n  ) {\n    throw new MongoError(\"collection names must not contain '$'\");\n  }\n\n  if (collectionName.match(/^\\.|\\.$/) != null) {\n    throw new MongoError(\"collection names must not start or end with '.'\");\n  }\n\n  // Validate that we are not passing 0x00 in the collection name\n  if (collectionName.indexOf('\\x00') !== -1) {\n    throw new MongoError('collection names cannot contain a null character');\n  }\n};\n\nvar handleCallback = function(callback, err, value1, value2) {\n  try {\n    if (callback == null) return;\n\n    if (callback) {\n      return value2 ? callback(err, value1, value2) : callback(err, value1);\n    }\n  } catch (err) {\n    process.nextTick(function() {\n      throw err;\n    });\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Wrap a Mongo error document in an Error instance\n * @ignore\n * @api private\n */\nvar toError = function(error) {\n  if (error instanceof Error) return error;\n\n  var msg = error.err || error.errmsg || error.errMessage || error;\n  var e = MongoError.create({ message: msg, driver: true });\n\n  // Get all object keys\n  var keys = typeof error === 'object' ? Object.keys(error) : [];\n\n  for (var i = 0; i < keys.length; i++) {\n    try {\n      e[keys[i]] = error[keys[i]];\n    } catch (err) {\n      // continue\n    }\n  }\n\n  return e;\n};\n\n/**\n * @ignore\n */\nvar normalizeHintField = function normalizeHintField(hint) {\n  var finalHint = null;\n\n  if (typeof hint === 'string') {\n    finalHint = hint;\n  } else if (Array.isArray(hint)) {\n    finalHint = {};\n\n    hint.forEach(function(param) {\n      finalHint[param] = 1;\n    });\n  } else if (hint != null && typeof hint === 'object') {\n    finalHint = {};\n    for (var name in hint) {\n      finalHint[name] = hint[name];\n    }\n  }\n\n  return finalHint;\n};\n\n/**\n * Create index name based on field spec\n *\n * @ignore\n * @api private\n */\nvar parseIndexOptions = function(fieldOrSpec) {\n  var fieldHash = {};\n  var indexes = [];\n  var keys;\n\n  // Get all the fields accordingly\n  if ('string' === typeof fieldOrSpec) {\n    // 'type'\n    indexes.push(fieldOrSpec + '_' + 1);\n    fieldHash[fieldOrSpec] = 1;\n  } else if (Array.isArray(fieldOrSpec)) {\n    fieldOrSpec.forEach(function(f) {\n      if ('string' === typeof f) {\n        // [{location:'2d'}, 'type']\n        indexes.push(f + '_' + 1);\n        fieldHash[f] = 1;\n      } else if (Array.isArray(f)) {\n        // [['location', '2d'],['type', 1]]\n        indexes.push(f[0] + '_' + (f[1] || 1));\n        fieldHash[f[0]] = f[1] || 1;\n      } else if (isObject(f)) {\n        // [{location:'2d'}, {type:1}]\n        keys = Object.keys(f);\n        keys.forEach(function(k) {\n          indexes.push(k + '_' + f[k]);\n          fieldHash[k] = f[k];\n        });\n      } else {\n        // undefined (ignore)\n      }\n    });\n  } else if (isObject(fieldOrSpec)) {\n    // {location:'2d', type:1}\n    keys = Object.keys(fieldOrSpec);\n    keys.forEach(function(key) {\n      indexes.push(key + '_' + fieldOrSpec[key]);\n      fieldHash[key] = fieldOrSpec[key];\n    });\n  }\n\n  return {\n    name: indexes.join('_'),\n    keys: keys,\n    fieldHash: fieldHash\n  };\n};\n\nvar isObject = (exports.isObject = function(arg) {\n  return '[object Object]' === Object.prototype.toString.call(arg);\n});\n\nvar debugOptions = function(debugFields, options) {\n  var finaloptions = {};\n  debugFields.forEach(function(n) {\n    finaloptions[n] = options[n];\n  });\n\n  return finaloptions;\n};\n\nvar decorateCommand = function(command, options, exclude) {\n  for (var name in options) {\n    if (exclude.indexOf(name) === -1) command[name] = options[name];\n  }\n\n  return command;\n};\n\nvar mergeOptions = function(target, source) {\n  for (var name in source) {\n    target[name] = source[name];\n  }\n\n  return target;\n};\n\n// Merge options with translation\nvar translateOptions = function(target, source) {\n  var translations = {\n    // SSL translation options\n    sslCA: 'ca',\n    sslCRL: 'crl',\n    sslValidate: 'rejectUnauthorized',\n    sslKey: 'key',\n    sslCert: 'cert',\n    sslPass: 'passphrase',\n    // SocketTimeout translation options\n    socketTimeoutMS: 'socketTimeout',\n    connectTimeoutMS: 'connectionTimeout',\n    // Replicaset options\n    replicaSet: 'setName',\n    rs_name: 'setName',\n    secondaryAcceptableLatencyMS: 'acceptableLatency',\n    connectWithNoPrimary: 'secondaryOnlyConnectionAllowed',\n    // Mongos options\n    acceptableLatencyMS: 'localThresholdMS'\n  };\n\n  for (var name in source) {\n    if (translations[name]) {\n      target[translations[name]] = source[name];\n    } else {\n      target[name] = source[name];\n    }\n  }\n\n  return target;\n};\n\nvar filterOptions = function(options, names) {\n  var filterOptions = {};\n\n  for (var name in options) {\n    if (names.indexOf(name) !== -1) filterOptions[name] = options[name];\n  }\n\n  // Filtered options\n  return filterOptions;\n};\n\n// Write concern keys\nvar writeConcernKeys = ['w', 'j', 'wtimeout', 'fsync'];\n\n// Merge the write concern options\nvar mergeOptionsAndWriteConcern = function(targetOptions, sourceOptions, keys, mergeWriteConcern) {\n  // Mix in any allowed options\n  for (var i = 0; i < keys.length; i++) {\n    if (!targetOptions[keys[i]] && sourceOptions[keys[i]] !== undefined) {\n      targetOptions[keys[i]] = sourceOptions[keys[i]];\n    }\n  }\n\n  // No merging of write concern\n  if (!mergeWriteConcern) return targetOptions;\n\n  // Found no write Concern options\n  var found = false;\n  for (i = 0; i < writeConcernKeys.length; i++) {\n    if (targetOptions[writeConcernKeys[i]]) {\n      found = true;\n      break;\n    }\n  }\n\n  if (!found) {\n    for (i = 0; i < writeConcernKeys.length; i++) {\n      if (sourceOptions[writeConcernKeys[i]]) {\n        targetOptions[writeConcernKeys[i]] = sourceOptions[writeConcernKeys[i]];\n      }\n    }\n  }\n\n  return targetOptions;\n};\n\n/**\n * Executes the given operation with provided arguments.\n *\n * This method reduces large amounts of duplication in the entire codebase by providing\n * a single point for determining whether callbacks or promises should be used. Additionally\n * it allows for a single point of entry to provide features such as implicit sessions, which\n * are required by the Driver Sessions specification in the event that a ClientSession is\n * not provided\n *\n * @param {object} topology The topology to execute this operation on\n * @param {function} operation The operation to execute\n * @param {array} args Arguments to apply the provided operation\n * @param {object} [options] Options that modify the behavior of the method\n */\nconst executeLegacyOperation = (topology, operation, args, options) => {\n  if (topology == null) {\n    throw new TypeError('This method requires a valid topology instance');\n  }\n\n  if (!Array.isArray(args)) {\n    throw new TypeError('This method requires an array of arguments to apply');\n  }\n\n  options = options || {};\n  const Promise = topology.s.promiseLibrary;\n  let callback = args[args.length - 1];\n\n  // The driver sessions spec mandates that we implicitly create sessions for operations\n  // that are not explicitly provided with a session.\n  let session, opOptions, owner;\n  if (!options.skipSessions && topology.hasSessionSupport()) {\n    opOptions = args[args.length - 2];\n    if (opOptions == null || opOptions.session == null) {\n      owner = Symbol();\n      session = topology.startSession({ owner });\n      const optionsIndex = args.length - 2;\n      args[optionsIndex] = Object.assign({}, args[optionsIndex], { session: session });\n    } else if (opOptions.session && opOptions.session.hasEnded) {\n      throw new MongoError('Use of expired sessions is not permitted');\n    }\n  }\n\n  const makeExecuteCallback = (resolve, reject) =>\n    function executeCallback(err, result) {\n      if (session && session.owner === owner && !options.returnsCursor) {\n        session.endSession(() => {\n          delete opOptions.session;\n          if (err) return reject(err);\n          resolve(result);\n        });\n      } else {\n        if (err) return reject(err);\n        resolve(result);\n      }\n    };\n\n  // Execute using callback\n  if (typeof callback === 'function') {\n    callback = args.pop();\n    const handler = makeExecuteCallback(\n      result => callback(null, result),\n      err => callback(err, null)\n    );\n    args.push(handler);\n\n    try {\n      return operation.apply(null, args);\n    } catch (e) {\n      handler(e);\n      throw e;\n    }\n  }\n\n  // Return a Promise\n  if (args[args.length - 1] != null) {\n    throw new TypeError('final argument to `executeLegacyOperation` must be a callback');\n  }\n\n  return new Promise(function(resolve, reject) {\n    const handler = makeExecuteCallback(resolve, reject);\n    args[args.length - 1] = handler;\n\n    try {\n      return operation.apply(null, args);\n    } catch (e) {\n      handler(e);\n    }\n  });\n};\n\n/**\n * Applies retryWrites: true to a command if retryWrites is set on the command's database.\n *\n * @param {object} target The target command to which we will apply retryWrites.\n * @param {object} db The database from which we can inherit a retryWrites value.\n */\nfunction applyRetryableWrites(target, db) {\n  if (db && db.s.options.retryWrites) {\n    target.retryWrites = true;\n  }\n\n  return target;\n}\n\n/**\n * Applies a write concern to a command based on well defined inheritance rules, optionally\n * detecting support for the write concern in the first place.\n *\n * @param {Object} target the target command we will be applying the write concern to\n * @param {Object} sources sources where we can inherit default write concerns from\n * @param {Object} [options] optional settings passed into a command for write concern overrides\n * @returns {Object} the (now) decorated target\n */\nfunction applyWriteConcern(target, sources, options) {\n  options = options || {};\n  const db = sources.db;\n  const coll = sources.collection;\n\n  if (options.session && options.session.inTransaction()) {\n    // writeConcern is not allowed within a multi-statement transaction\n    if (target.writeConcern) {\n      delete target.writeConcern;\n    }\n\n    return target;\n  }\n\n  const writeConcern = WriteConcern.fromOptions(options);\n  if (writeConcern) {\n    return Object.assign(target, { writeConcern });\n  }\n\n  if (coll && coll.writeConcern) {\n    return Object.assign(target, { writeConcern: Object.assign({}, coll.writeConcern) });\n  }\n\n  if (db && db.writeConcern) {\n    return Object.assign(target, { writeConcern: Object.assign({}, db.writeConcern) });\n  }\n\n  return target;\n}\n\n/**\n * Resolves a read preference based on well-defined inheritance rules. This method will not only\n * determine the read preference (if there is one), but will also ensure the returned value is a\n * properly constructed instance of `ReadPreference`.\n *\n * @param {Collection|Db|MongoClient} parent The parent of the operation on which to determine the read\n * preference, used for determining the inherited read preference.\n * @param {Object} options The options passed into the method, potentially containing a read preference\n * @returns {(ReadPreference|null)} The resolved read preference\n */\nfunction resolveReadPreference(parent, options) {\n  options = options || {};\n  const session = options.session;\n\n  const inheritedReadPreference = parent.readPreference;\n\n  let readPreference;\n  if (options.readPreference) {\n    readPreference = ReadPreference.fromOptions(options);\n  } else if (session && session.inTransaction() && session.transaction.options.readPreference) {\n    // The transaction’s read preference MUST override all other user configurable read preferences.\n    readPreference = session.transaction.options.readPreference;\n  } else if (inheritedReadPreference != null) {\n    readPreference = inheritedReadPreference;\n  } else {\n    throw new Error('No readPreference was provided or inherited.');\n  }\n\n  return typeof readPreference === 'string' ? new ReadPreference(readPreference) : readPreference;\n}\n\n/**\n * Checks if a given value is a Promise\n *\n * @param {*} maybePromise\n * @return true if the provided value is a Promise\n */\nfunction isPromiseLike(maybePromise) {\n  return maybePromise && typeof maybePromise.then === 'function';\n}\n\n/**\n * Applies collation to a given command.\n *\n * @param {object} [command] the command on which to apply collation\n * @param {(Cursor|Collection)} [target] target of command\n * @param {object} [options] options containing collation settings\n */\nfunction decorateWithCollation(command, target, options) {\n  const topology = (target.s && target.s.topology) || target.topology;\n\n  if (!topology) {\n    throw new TypeError('parameter \"target\" is missing a topology');\n  }\n\n  const capabilities = topology.capabilities();\n  if (options.collation && typeof options.collation === 'object') {\n    if (capabilities && capabilities.commandsTakeCollation) {\n      command.collation = options.collation;\n    } else {\n      throw new MongoError(`Current topology does not support collation`);\n    }\n  }\n}\n\n/**\n * Applies a read concern to a given command.\n *\n * @param {object} command the command on which to apply the read concern\n * @param {Collection} coll the parent collection of the operation calling this method\n */\nfunction decorateWithReadConcern(command, coll, options) {\n  if (options && options.session && options.session.inTransaction()) {\n    return;\n  }\n  let readConcern = Object.assign({}, command.readConcern || {});\n  if (coll.s.readConcern) {\n    Object.assign(readConcern, coll.s.readConcern);\n  }\n\n  if (Object.keys(readConcern).length > 0) {\n    Object.assign(command, { readConcern: readConcern });\n  }\n}\n\nconst emitProcessWarning = msg => process.emitWarning(msg, 'DeprecationWarning');\nconst emitConsoleWarning = msg => console.error(msg);\nconst emitDeprecationWarning = process.emitWarning ? emitProcessWarning : emitConsoleWarning;\n\n/**\n * Default message handler for generating deprecation warnings.\n *\n * @param {string} name function name\n * @param {string} option option name\n * @return {string} warning message\n * @ignore\n * @api private\n */\nfunction defaultMsgHandler(name, option) {\n  return `${name} option [${option}] is deprecated and will be removed in a later version.`;\n}\n\n/**\n * Deprecates a given function's options.\n *\n * @param {object} config configuration for deprecation\n * @param {string} config.name function name\n * @param {Array} config.deprecatedOptions options to deprecate\n * @param {number} config.optionsIndex index of options object in function arguments array\n * @param {function} [config.msgHandler] optional custom message handler to generate warnings\n * @param {function} fn the target function of deprecation\n * @return {function} modified function that warns once per deprecated option, and executes original function\n * @ignore\n * @api private\n */\nfunction deprecateOptions(config, fn) {\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  const msgHandler = config.msgHandler ? config.msgHandler : defaultMsgHandler;\n\n  const optionsWarned = new Set();\n  function deprecated() {\n    const options = arguments[config.optionsIndex];\n\n    // ensure options is a valid, non-empty object, otherwise short-circuit\n    if (!isObject(options) || Object.keys(options).length === 0) {\n      return fn.apply(this, arguments);\n    }\n\n    config.deprecatedOptions.forEach(deprecatedOption => {\n      if (options.hasOwnProperty(deprecatedOption) && !optionsWarned.has(deprecatedOption)) {\n        optionsWarned.add(deprecatedOption);\n        const msg = msgHandler(config.name, deprecatedOption);\n        emitDeprecationWarning(msg);\n        if (this && this.getLogger) {\n          const logger = this.getLogger();\n          if (logger) {\n            logger.warn(msg);\n          }\n        }\n      }\n    });\n\n    return fn.apply(this, arguments);\n  }\n\n  // These lines copied from https://github.com/nodejs/node/blob/25e5ae41688676a5fd29b2e2e7602168eee4ceb5/lib/internal/util.js#L73-L80\n  // The wrapper will keep the same prototype as fn to maintain prototype chain\n  Object.setPrototypeOf(deprecated, fn);\n  if (fn.prototype) {\n    // Setting this (rather than using Object.setPrototype, as above) ensures\n    // that calling the unwrapped constructor gives an instanceof the wrapped\n    // constructor.\n    deprecated.prototype = fn.prototype;\n  }\n\n  return deprecated;\n}\n\nconst SUPPORTS = {};\n// Test asyncIterator support\ntry {\n  __webpack_require__(88);\n  SUPPORTS.ASYNC_ITERATOR = true;\n} catch (e) {\n  SUPPORTS.ASYNC_ITERATOR = false;\n}\n\nclass MongoDBNamespace {\n  constructor(db, collection) {\n    this.db = db;\n    this.collection = collection;\n  }\n\n  toString() {\n    return this.collection ? `${this.db}.${this.collection}` : this.db;\n  }\n\n  withCollection(collection) {\n    return new MongoDBNamespace(this.db, collection);\n  }\n\n  static fromString(namespace) {\n    if (!namespace) {\n      throw new Error(`Cannot parse namespace from \"${namespace}\"`);\n    }\n\n    const index = namespace.indexOf('.');\n    return new MongoDBNamespace(namespace.substring(0, index), namespace.substring(index + 1));\n  }\n}\n\nmodule.exports = {\n  filterOptions,\n  mergeOptions,\n  translateOptions,\n  shallowClone,\n  getSingleProperty,\n  checkCollectionName,\n  toError,\n  formattedOrderClause,\n  parseIndexOptions,\n  normalizeHintField,\n  handleCallback,\n  decorateCommand,\n  isObject,\n  debugOptions,\n  MAX_JS_INT: Number.MAX_SAFE_INTEGER + 1,\n  mergeOptionsAndWriteConcern,\n  translateReadPreference,\n  executeLegacyOperation,\n  applyRetryableWrites,\n  applyWriteConcern,\n  isPromiseLike,\n  decorateWithCollation,\n  decorateWithReadConcern,\n  deprecateOptions,\n  SUPPORTS,\n  MongoDBNamespace,\n  resolveReadPreference\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///86\n");

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * The **WriteConcern** class is a class that represents a MongoDB WriteConcern.\n * @class\n * @property {(number|string)} w The write concern\n * @property {number} wtimeout The write concern timeout\n * @property {boolean} j The journal write concern\n * @property {boolean} fsync The file sync write concern\n * @see https://docs.mongodb.com/manual/reference/write-concern/index.html\n */\nclass WriteConcern {\n  /**\n   * Constructs a WriteConcern from the write concern properties.\n   * @param {(number|string)} [w] The write concern\n   * @param {number} [wtimeout] The write concern timeout\n   * @param {boolean} [j] The journal write concern\n   * @param {boolean} [fsync] The file sync write concern\n   */\n  constructor(w, wtimeout, j, fsync) {\n    if (w != null) {\n      this.w = w;\n    }\n    if (wtimeout != null) {\n      this.wtimeout = wtimeout;\n    }\n    if (j != null) {\n      this.j = j;\n    }\n    if (fsync != null) {\n      this.fsync = fsync;\n    }\n  }\n\n  /**\n   * Construct a WriteConcern given an options object.\n   *\n   * @param {object} options The options object from which to extract the write concern.\n   * @return {WriteConcern}\n   */\n  static fromOptions(options) {\n    if (\n      options == null ||\n      (options.writeConcern == null &&\n        options.w == null &&\n        options.wtimeout == null &&\n        options.j == null &&\n        options.fsync == null)\n    ) {\n      return;\n    }\n\n    if (options.writeConcern) {\n      return new WriteConcern(\n        options.writeConcern.w,\n        options.writeConcern.wtimeout,\n        options.writeConcern.j,\n        options.writeConcern.fsync\n      );\n    }\n\n    return new WriteConcern(options.w, options.wtimeout, options.j, options.fsync);\n  }\n}\n\nmodule.exports = WriteConcern;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3dyaXRlX2NvbmNlcm4uanM/ZjZlNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQSxjQUFjLGdCQUFnQjtBQUM5QixjQUFjLE9BQU87QUFDckIsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxnQkFBZ0I7QUFDN0IsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ijg3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFRoZSAqKldyaXRlQ29uY2VybioqIGNsYXNzIGlzIGEgY2xhc3MgdGhhdCByZXByZXNlbnRzIGEgTW9uZ29EQiBXcml0ZUNvbmNlcm4uXG4gKiBAY2xhc3NcbiAqIEBwcm9wZXJ0eSB7KG51bWJlcnxzdHJpbmcpfSB3IFRoZSB3cml0ZSBjb25jZXJuXG4gKiBAcHJvcGVydHkge251bWJlcn0gd3RpbWVvdXQgVGhlIHdyaXRlIGNvbmNlcm4gdGltZW91dFxuICogQHByb3BlcnR5IHtib29sZWFufSBqIFRoZSBqb3VybmFsIHdyaXRlIGNvbmNlcm5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gZnN5bmMgVGhlIGZpbGUgc3luYyB3cml0ZSBjb25jZXJuXG4gKiBAc2VlIGh0dHBzOi8vZG9jcy5tb25nb2RiLmNvbS9tYW51YWwvcmVmZXJlbmNlL3dyaXRlLWNvbmNlcm4vaW5kZXguaHRtbFxuICovXG5jbGFzcyBXcml0ZUNvbmNlcm4ge1xuICAvKipcbiAgICogQ29uc3RydWN0cyBhIFdyaXRlQ29uY2VybiBmcm9tIHRoZSB3cml0ZSBjb25jZXJuIHByb3BlcnRpZXMuXG4gICAqIEBwYXJhbSB7KG51bWJlcnxzdHJpbmcpfSBbd10gVGhlIHdyaXRlIGNvbmNlcm5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFt3dGltZW91dF0gVGhlIHdyaXRlIGNvbmNlcm4gdGltZW91dFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtqXSBUaGUgam91cm5hbCB3cml0ZSBjb25jZXJuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2ZzeW5jXSBUaGUgZmlsZSBzeW5jIHdyaXRlIGNvbmNlcm5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHcsIHd0aW1lb3V0LCBqLCBmc3luYykge1xuICAgIGlmICh3ICE9IG51bGwpIHtcbiAgICAgIHRoaXMudyA9IHc7XG4gICAgfVxuICAgIGlmICh3dGltZW91dCAhPSBudWxsKSB7XG4gICAgICB0aGlzLnd0aW1lb3V0ID0gd3RpbWVvdXQ7XG4gICAgfVxuICAgIGlmIChqICE9IG51bGwpIHtcbiAgICAgIHRoaXMuaiA9IGo7XG4gICAgfVxuICAgIGlmIChmc3luYyAhPSBudWxsKSB7XG4gICAgICB0aGlzLmZzeW5jID0gZnN5bmM7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIFdyaXRlQ29uY2VybiBnaXZlbiBhbiBvcHRpb25zIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgVGhlIG9wdGlvbnMgb2JqZWN0IGZyb20gd2hpY2ggdG8gZXh0cmFjdCB0aGUgd3JpdGUgY29uY2Vybi5cbiAgICogQHJldHVybiB7V3JpdGVDb25jZXJufVxuICAgKi9cbiAgc3RhdGljIGZyb21PcHRpb25zKG9wdGlvbnMpIHtcbiAgICBpZiAoXG4gICAgICBvcHRpb25zID09IG51bGwgfHxcbiAgICAgIChvcHRpb25zLndyaXRlQ29uY2VybiA9PSBudWxsICYmXG4gICAgICAgIG9wdGlvbnMudyA9PSBudWxsICYmXG4gICAgICAgIG9wdGlvbnMud3RpbWVvdXQgPT0gbnVsbCAmJlxuICAgICAgICBvcHRpb25zLmogPT0gbnVsbCAmJlxuICAgICAgICBvcHRpb25zLmZzeW5jID09IG51bGwpXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMud3JpdGVDb25jZXJuKSB7XG4gICAgICByZXR1cm4gbmV3IFdyaXRlQ29uY2VybihcbiAgICAgICAgb3B0aW9ucy53cml0ZUNvbmNlcm4udyxcbiAgICAgICAgb3B0aW9ucy53cml0ZUNvbmNlcm4ud3RpbWVvdXQsXG4gICAgICAgIG9wdGlvbnMud3JpdGVDb25jZXJuLmosXG4gICAgICAgIG9wdGlvbnMud3JpdGVDb25jZXJuLmZzeW5jXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgV3JpdGVDb25jZXJuKG9wdGlvbnMudywgb3B0aW9ucy53dGltZW91dCwgb3B0aW9ucy5qLCBvcHRpb25zLmZzeW5jKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFdyaXRlQ29uY2VybjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///87\n");

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// async function* asyncIterator() {\n//   while (true) {\n//     const value = await this.next();\n//     if (!value) {\n//       await this.close();\n//       return;\n//     }\n\n//     yield value;\n//   }\n// }\n\n// TODO: change this to the async generator function above\nfunction asyncIterator() {\n  const cursor = this;\n\n  return {\n    next: function() {\n      return Promise.resolve()\n        .then(() => cursor.next())\n        .then(value => {\n          if (!value) {\n            return cursor.close().then(() => ({ value, done: true }));\n          }\n          return { value, done: false };\n        });\n    }\n  };\n}\n\nexports.asyncIterator = asyncIterator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2FzeW5jL2FzeW5jX2l0ZXJhdG9yLmpzP2U5YTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0Msb0JBQW9CO0FBQ25FO0FBQ0Esa0JBQWtCO0FBQ2xCLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiODguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIGFzeW5jIGZ1bmN0aW9uKiBhc3luY0l0ZXJhdG9yKCkge1xuLy8gICB3aGlsZSAodHJ1ZSkge1xuLy8gICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgdGhpcy5uZXh0KCk7XG4vLyAgICAgaWYgKCF2YWx1ZSkge1xuLy8gICAgICAgYXdhaXQgdGhpcy5jbG9zZSgpO1xuLy8gICAgICAgcmV0dXJuO1xuLy8gICAgIH1cblxuLy8gICAgIHlpZWxkIHZhbHVlO1xuLy8gICB9XG4vLyB9XG5cbi8vIFRPRE86IGNoYW5nZSB0aGlzIHRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gYWJvdmVcbmZ1bmN0aW9uIGFzeW5jSXRlcmF0b3IoKSB7XG4gIGNvbnN0IGN1cnNvciA9IHRoaXM7XG5cbiAgcmV0dXJuIHtcbiAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgICAudGhlbigoKSA9PiBjdXJzb3IubmV4dCgpKVxuICAgICAgICAudGhlbih2YWx1ZSA9PiB7XG4gICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGN1cnNvci5jbG9zZSgpLnRoZW4oKCkgPT4gKHsgdmFsdWUsIGRvbmU6IHRydWUgfSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4geyB2YWx1ZSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnRzLmFzeW5jSXRlcmF0b3IgPSBhc3luY0l0ZXJhdG9yO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///88\n");

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst inherits = __webpack_require__(12).inherits;\nconst f = __webpack_require__(12).format;\nconst EventEmitter = __webpack_require__(39).EventEmitter;\nconst ReadPreference = __webpack_require__(42);\nconst CoreCursor = __webpack_require__(82).CoreCursor;\nconst retrieveBSON = __webpack_require__(40).retrieveBSON;\nconst Logger = __webpack_require__(51);\nconst MongoError = __webpack_require__(37).MongoError;\nconst Server = __webpack_require__(52);\nconst ReplSetState = __webpack_require__(90);\nconst clone = __webpack_require__(59).clone;\nconst Timeout = __webpack_require__(59).Timeout;\nconst Interval = __webpack_require__(59).Interval;\nconst createClientInfo = __webpack_require__(59).createClientInfo;\nconst SessionMixins = __webpack_require__(59).SessionMixins;\nconst isRetryableWritesSupported = __webpack_require__(59).isRetryableWritesSupported;\nconst relayEvents = __webpack_require__(35).relayEvents;\nconst isRetryableError = __webpack_require__(37).isRetryableError;\nconst BSON = retrieveBSON();\nconst calculateDurationInMs = __webpack_require__(35).calculateDurationInMs;\nconst getMMAPError = __webpack_require__(59).getMMAPError;\n\n//\n// States\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar UNREFERENCED = 'unreferenced';\nvar DESTROYED = 'destroyed';\n\nfunction stateTransition(self, newState) {\n  var legalTransitions = {\n    disconnected: [CONNECTING, DESTROYED, DISCONNECTED],\n    connecting: [CONNECTING, DESTROYED, CONNECTED, DISCONNECTED],\n    connected: [CONNECTED, DISCONNECTED, DESTROYED, UNREFERENCED],\n    unreferenced: [UNREFERENCED, DESTROYED],\n    destroyed: [DESTROYED]\n  };\n\n  // Get current state\n  var legalStates = legalTransitions[self.state];\n  if (legalStates && legalStates.indexOf(newState) !== -1) {\n    self.state = newState;\n  } else {\n    self.s.logger.error(\n      f(\n        'Pool with id [%s] failed attempted illegal state transition from [%s] to [%s] only following state allowed [%s]',\n        self.id,\n        self.state,\n        newState,\n        legalStates\n      )\n    );\n  }\n}\n\n//\n// ReplSet instance id\nvar id = 1;\nvar handlers = ['connect', 'close', 'error', 'timeout', 'parseError'];\n\n/**\n * Creates a new Replset instance\n * @class\n * @param {array} seedlist A list of seeds for the replicaset\n * @param {boolean} options.setName The Replicaset set name\n * @param {boolean} [options.secondaryOnlyConnectionAllowed=false] Allow connection to a secondary only replicaset\n * @param {number} [options.haInterval=10000] The High availability period for replicaset inquiry\n * @param {boolean} [options.emitError=false] Server will emit errors events\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=10000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {number} [options.pingInterval=5000] Ping interval to check the response time to the different servers\n * @param {number} [options.localThresholdMS=15] Cutoff latency point in MS for Replicaset member selection\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology\n * @return {ReplSet} A cursor instance\n * @fires ReplSet#connect\n * @fires ReplSet#ha\n * @fires ReplSet#joined\n * @fires ReplSet#left\n * @fires ReplSet#failed\n * @fires ReplSet#fullsetup\n * @fires ReplSet#all\n * @fires ReplSet#error\n * @fires ReplSet#serverHeartbeatStarted\n * @fires ReplSet#serverHeartbeatSucceeded\n * @fires ReplSet#serverHeartbeatFailed\n * @fires ReplSet#topologyOpening\n * @fires ReplSet#topologyClosed\n * @fires ReplSet#topologyDescriptionChanged\n * @property {string} type the topology type.\n * @property {string} parserType the parser type used (c++ or js).\n */\nvar ReplSet = function(seedlist, options) {\n  var self = this;\n  options = options || {};\n\n  // Validate seedlist\n  if (!Array.isArray(seedlist)) throw new MongoError('seedlist must be an array');\n  // Validate list\n  if (seedlist.length === 0) throw new MongoError('seedlist must contain at least one entry');\n  // Validate entries\n  seedlist.forEach(function(e) {\n    if (typeof e.host !== 'string' || typeof e.port !== 'number')\n      throw new MongoError('seedlist entry must contain a host and port');\n  });\n\n  // Add event listener\n  EventEmitter.call(this);\n\n  // Get replSet Id\n  this.id = id++;\n\n  // Get the localThresholdMS\n  var localThresholdMS = options.localThresholdMS || 15;\n  // Backward compatibility\n  if (options.acceptableLatency) localThresholdMS = options.acceptableLatency;\n\n  // Create a logger\n  var logger = Logger('ReplSet', options);\n\n  // Internal state\n  this.s = {\n    options: Object.assign({}, options),\n    // BSON instance\n    bson:\n      options.bson ||\n      new BSON([\n        BSON.Binary,\n        BSON.Code,\n        BSON.DBRef,\n        BSON.Decimal128,\n        BSON.Double,\n        BSON.Int32,\n        BSON.Long,\n        BSON.Map,\n        BSON.MaxKey,\n        BSON.MinKey,\n        BSON.ObjectId,\n        BSON.BSONRegExp,\n        BSON.Symbol,\n        BSON.Timestamp\n      ]),\n    // Factory overrides\n    Cursor: options.cursorFactory || CoreCursor,\n    // Logger instance\n    logger: logger,\n    // Seedlist\n    seedlist: seedlist,\n    // Replicaset state\n    replicaSetState: new ReplSetState({\n      id: this.id,\n      setName: options.setName,\n      acceptableLatency: localThresholdMS,\n      heartbeatFrequencyMS: options.haInterval ? options.haInterval : 10000,\n      logger: logger\n    }),\n    // Current servers we are connecting to\n    connectingServers: [],\n    // Ha interval\n    haInterval: options.haInterval ? options.haInterval : 10000,\n    // Minimum heartbeat frequency used if we detect a server close\n    minHeartbeatFrequencyMS: 500,\n    // Disconnect handler\n    disconnectHandler: options.disconnectHandler,\n    // Server selection index\n    index: 0,\n    // Connect function options passed in\n    connectOptions: {},\n    // Are we running in debug mode\n    debug: typeof options.debug === 'boolean' ? options.debug : false,\n    // Client info\n    clientInfo: createClientInfo(options)\n  };\n\n  // Add handler for topology change\n  this.s.replicaSetState.on('topologyDescriptionChanged', function(r) {\n    self.emit('topologyDescriptionChanged', r);\n  });\n\n  // Log info warning if the socketTimeout < haInterval as it will cause\n  // a lot of recycled connections to happen.\n  if (\n    this.s.logger.isWarn() &&\n    this.s.options.socketTimeout !== 0 &&\n    this.s.options.socketTimeout < this.s.haInterval\n  ) {\n    this.s.logger.warn(\n      f(\n        'warning socketTimeout %s is less than haInterval %s. This might cause unnecessary server reconnections due to socket timeouts',\n        this.s.options.socketTimeout,\n        this.s.haInterval\n      )\n    );\n  }\n\n  // Add forwarding of events from state handler\n  var types = ['joined', 'left'];\n  types.forEach(function(x) {\n    self.s.replicaSetState.on(x, function(t, s) {\n      self.emit(x, t, s);\n    });\n  });\n\n  // Connect stat\n  this.initialConnectState = {\n    connect: false,\n    fullsetup: false,\n    all: false\n  };\n\n  // Disconnected state\n  this.state = DISCONNECTED;\n  this.haTimeoutId = null;\n  // Last ismaster\n  this.ismaster = null;\n  // Contains the intervalId\n  this.intervalIds = [];\n\n  // Highest clusterTime seen in responses from the current deployment\n  this.clusterTime = null;\n};\n\ninherits(ReplSet, EventEmitter);\nObject.assign(ReplSet.prototype, SessionMixins);\n\nObject.defineProperty(ReplSet.prototype, 'type', {\n  enumerable: true,\n  get: function() {\n    return 'replset';\n  }\n});\n\nObject.defineProperty(ReplSet.prototype, 'parserType', {\n  enumerable: true,\n  get: function() {\n    return BSON.native ? 'c++' : 'js';\n  }\n});\n\nObject.defineProperty(ReplSet.prototype, 'logicalSessionTimeoutMinutes', {\n  enumerable: true,\n  get: function() {\n    return this.s.replicaSetState.logicalSessionTimeoutMinutes || null;\n  }\n});\n\nfunction rexecuteOperations(self) {\n  // If we have a primary and a disconnect handler, execute\n  // buffered operations\n  if (self.s.replicaSetState.hasPrimaryAndSecondary() && self.s.disconnectHandler) {\n    self.s.disconnectHandler.execute();\n  } else if (self.s.replicaSetState.hasPrimary() && self.s.disconnectHandler) {\n    self.s.disconnectHandler.execute({ executePrimary: true });\n  } else if (self.s.replicaSetState.hasSecondary() && self.s.disconnectHandler) {\n    self.s.disconnectHandler.execute({ executeSecondary: true });\n  }\n}\n\nfunction connectNewServers(self, servers, callback) {\n  // Count lefts\n  var count = servers.length;\n  var error = null;\n\n  // Handle events\n  var _handleEvent = function(self, event) {\n    return function(err) {\n      var _self = this;\n      count = count - 1;\n\n      // Destroyed\n      if (self.state === DESTROYED || self.state === UNREFERENCED) {\n        return this.destroy({ force: true });\n      }\n\n      if (event === 'connect') {\n        // Destroyed\n        if (self.state === DESTROYED || self.state === UNREFERENCED) {\n          return _self.destroy({ force: true });\n        }\n\n        // Update the state\n        var result = self.s.replicaSetState.update(_self);\n        // Update the state with the new server\n        if (result) {\n          // Primary lastIsMaster store it\n          if (_self.lastIsMaster() && _self.lastIsMaster().ismaster) {\n            self.ismaster = _self.lastIsMaster();\n          }\n\n          // Remove the handlers\n          for (let i = 0; i < handlers.length; i++) {\n            _self.removeAllListeners(handlers[i]);\n          }\n\n          // Add stable state handlers\n          _self.on('error', handleEvent(self, 'error'));\n          _self.on('close', handleEvent(self, 'close'));\n          _self.on('timeout', handleEvent(self, 'timeout'));\n          _self.on('parseError', handleEvent(self, 'parseError'));\n\n          // Enalbe the monitoring of the new server\n          monitorServer(_self.lastIsMaster().me, self, {});\n\n          // Rexecute any stalled operation\n          rexecuteOperations(self);\n        } else {\n          _self.destroy({ force: true });\n        }\n      } else if (event === 'error') {\n        error = err;\n      }\n\n      // Rexecute any stalled operation\n      rexecuteOperations(self);\n\n      // Are we done finish up callback\n      if (count === 0) {\n        callback(error);\n      }\n    };\n  };\n\n  // No new servers\n  if (count === 0) return callback();\n\n  // Execute method\n  function execute(_server, i) {\n    setTimeout(function() {\n      // Destroyed\n      if (self.state === DESTROYED || self.state === UNREFERENCED) {\n        return;\n      }\n\n      // Create a new server instance\n      var server = new Server(\n        Object.assign({}, self.s.options, {\n          host: _server.split(':')[0],\n          port: parseInt(_server.split(':')[1], 10),\n          reconnect: false,\n          monitoring: false,\n          parent: self,\n          clientInfo: clone(self.s.clientInfo)\n        })\n      );\n\n      // Add temp handlers\n      server.once('connect', _handleEvent(self, 'connect'));\n      server.once('close', _handleEvent(self, 'close'));\n      server.once('timeout', _handleEvent(self, 'timeout'));\n      server.once('error', _handleEvent(self, 'error'));\n      server.once('parseError', _handleEvent(self, 'parseError'));\n\n      // SDAM Monitoring events\n      server.on('serverOpening', e => self.emit('serverOpening', e));\n      server.on('serverDescriptionChanged', e => self.emit('serverDescriptionChanged', e));\n      server.on('serverClosed', e => self.emit('serverClosed', e));\n\n      // Command Monitoring events\n      relayEvents(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);\n\n      self.s.connectingServers.push(server);\n      server.connect(self.s.connectOptions);\n    }, i);\n  }\n\n  // Create new instances\n  for (var i = 0; i < servers.length; i++) {\n    execute(servers[i], i);\n  }\n}\n\n// Ping the server\nvar pingServer = function(self, server, cb) {\n  // Measure running time\n  var start = new Date().getTime();\n\n  // Emit the server heartbeat start\n  emitSDAMEvent(self, 'serverHeartbeatStarted', { connectionId: server.name });\n\n  // Execute ismaster\n  // Set the socketTimeout for a monitoring message to a low number\n  // Ensuring ismaster calls are timed out quickly\n  server.command(\n    'admin.$cmd',\n    {\n      ismaster: true\n    },\n    {\n      monitoring: true,\n      socketTimeout: self.s.options.connectionTimeout || 2000\n    },\n    function(err, r) {\n      if (self.state === DESTROYED || self.state === UNREFERENCED) {\n        server.destroy({ force: true });\n        return cb(err, r);\n      }\n\n      // Calculate latency\n      var latencyMS = new Date().getTime() - start;\n\n      // Set the last updatedTime\n      var hrtime = process.hrtime();\n      server.lastUpdateTime = (hrtime[0] * 1e9 + hrtime[1]) / 1e6;\n\n      // We had an error, remove it from the state\n      if (err) {\n        // Emit the server heartbeat failure\n        emitSDAMEvent(self, 'serverHeartbeatFailed', {\n          durationMS: latencyMS,\n          failure: err,\n          connectionId: server.name\n        });\n\n        // Remove server from the state\n        self.s.replicaSetState.remove(server);\n      } else {\n        // Update the server ismaster\n        server.ismaster = r.result;\n\n        // Check if we have a lastWriteDate convert it to MS\n        // and store on the server instance for later use\n        if (server.ismaster.lastWrite && server.ismaster.lastWrite.lastWriteDate) {\n          server.lastWriteDate = server.ismaster.lastWrite.lastWriteDate.getTime();\n        }\n\n        // Do we have a brand new server\n        if (server.lastIsMasterMS === -1) {\n          server.lastIsMasterMS = latencyMS;\n        } else if (server.lastIsMasterMS) {\n          // After the first measurement, average RTT MUST be computed using an\n          // exponentially-weighted moving average formula, with a weighting factor (alpha) of 0.2.\n          // If the prior average is denoted old_rtt, then the new average (new_rtt) is\n          // computed from a new RTT measurement (x) using the following formula:\n          // alpha = 0.2\n          // new_rtt = alpha * x + (1 - alpha) * old_rtt\n          server.lastIsMasterMS = 0.2 * latencyMS + (1 - 0.2) * server.lastIsMasterMS;\n        }\n\n        if (self.s.replicaSetState.update(server)) {\n          // Primary lastIsMaster store it\n          if (server.lastIsMaster() && server.lastIsMaster().ismaster) {\n            self.ismaster = server.lastIsMaster();\n          }\n        }\n\n        // Server heart beat event\n        emitSDAMEvent(self, 'serverHeartbeatSucceeded', {\n          durationMS: latencyMS,\n          reply: r.result,\n          connectionId: server.name\n        });\n      }\n\n      // Calculate the staleness for this server\n      self.s.replicaSetState.updateServerMaxStaleness(server, self.s.haInterval);\n\n      // Callback\n      cb(err, r);\n    }\n  );\n};\n\n// Each server is monitored in parallel in their own timeout loop\nvar monitorServer = function(host, self, options) {\n  // If this is not the initial scan\n  // Is this server already being monitoried, then skip monitoring\n  if (!options.haInterval) {\n    for (var i = 0; i < self.intervalIds.length; i++) {\n      if (self.intervalIds[i].__host === host) {\n        return;\n      }\n    }\n  }\n\n  // Get the haInterval\n  var _process = options.haInterval ? Timeout : Interval;\n  var _haInterval = options.haInterval ? options.haInterval : self.s.haInterval;\n\n  // Create the interval\n  var intervalId = new _process(function() {\n    if (self.state === DESTROYED || self.state === UNREFERENCED) {\n      // clearInterval(intervalId);\n      intervalId.stop();\n      return;\n    }\n\n    // Do we already have server connection available for this host\n    var _server = self.s.replicaSetState.get(host);\n\n    // Check if we have a known server connection and reuse\n    if (_server) {\n      // Ping the server\n      return pingServer(self, _server, function(err) {\n        if (err) {\n          // NOTE: should something happen here?\n          return;\n        }\n\n        if (self.state === DESTROYED || self.state === UNREFERENCED) {\n          intervalId.stop();\n          return;\n        }\n\n        // Filter out all called intervaliIds\n        self.intervalIds = self.intervalIds.filter(function(intervalId) {\n          return intervalId.isRunning();\n        });\n\n        // Initial sweep\n        if (_process === Timeout) {\n          if (\n            self.state === CONNECTING &&\n            ((self.s.replicaSetState.hasSecondary() &&\n              self.s.options.secondaryOnlyConnectionAllowed) ||\n              self.s.replicaSetState.hasPrimary())\n          ) {\n            self.state = CONNECTED;\n\n            // Emit connected sign\n            process.nextTick(function() {\n              self.emit('connect', self);\n            });\n\n            // Start topology interval check\n            topologyMonitor(self, {});\n          }\n        } else {\n          if (\n            self.state === DISCONNECTED &&\n            ((self.s.replicaSetState.hasSecondary() &&\n              self.s.options.secondaryOnlyConnectionAllowed) ||\n              self.s.replicaSetState.hasPrimary())\n          ) {\n            self.state = CONNECTED;\n\n            // Rexecute any stalled operation\n            rexecuteOperations(self);\n\n            // Emit connected sign\n            process.nextTick(function() {\n              self.emit('reconnect', self);\n            });\n          }\n        }\n\n        if (\n          self.initialConnectState.connect &&\n          !self.initialConnectState.fullsetup &&\n          self.s.replicaSetState.hasPrimaryAndSecondary()\n        ) {\n          // Set initial connect state\n          self.initialConnectState.fullsetup = true;\n          self.initialConnectState.all = true;\n\n          process.nextTick(function() {\n            self.emit('fullsetup', self);\n            self.emit('all', self);\n          });\n        }\n      });\n    }\n  }, _haInterval);\n\n  // Start the interval\n  intervalId.start();\n  // Add the intervalId host name\n  intervalId.__host = host;\n  // Add the intervalId to our list of intervalIds\n  self.intervalIds.push(intervalId);\n};\n\nfunction topologyMonitor(self, options) {\n  if (self.state === DESTROYED || self.state === UNREFERENCED) return;\n  options = options || {};\n\n  // Get the servers\n  var servers = Object.keys(self.s.replicaSetState.set);\n\n  // Get the haInterval\n  var _process = options.haInterval ? Timeout : Interval;\n  var _haInterval = options.haInterval ? options.haInterval : self.s.haInterval;\n\n  if (_process === Timeout) {\n    return connectNewServers(self, self.s.replicaSetState.unknownServers, function(err) {\n      // Don't emit errors if the connection was already\n      if (self.state === DESTROYED || self.state === UNREFERENCED) {\n        return;\n      }\n\n      if (!self.s.replicaSetState.hasPrimary() && !self.s.options.secondaryOnlyConnectionAllowed) {\n        if (err) {\n          return self.emit('error', err);\n        }\n\n        self.emit(\n          'error',\n          new MongoError('no primary found in replicaset or invalid replica set name')\n        );\n        return self.destroy({ force: true });\n      } else if (\n        !self.s.replicaSetState.hasSecondary() &&\n        self.s.options.secondaryOnlyConnectionAllowed\n      ) {\n        if (err) {\n          return self.emit('error', err);\n        }\n\n        self.emit(\n          'error',\n          new MongoError('no secondary found in replicaset or invalid replica set name')\n        );\n        return self.destroy({ force: true });\n      }\n\n      for (var i = 0; i < servers.length; i++) {\n        monitorServer(servers[i], self, options);\n      }\n    });\n  } else {\n    for (var i = 0; i < servers.length; i++) {\n      monitorServer(servers[i], self, options);\n    }\n  }\n\n  // Run the reconnect process\n  function executeReconnect(self) {\n    return function() {\n      if (self.state === DESTROYED || self.state === UNREFERENCED) {\n        return;\n      }\n\n      connectNewServers(self, self.s.replicaSetState.unknownServers, function() {\n        var monitoringFrequencey = self.s.replicaSetState.hasPrimary()\n          ? _haInterval\n          : self.s.minHeartbeatFrequencyMS;\n\n        // Create a timeout\n        self.intervalIds.push(new Timeout(executeReconnect(self), monitoringFrequencey).start());\n      });\n    };\n  }\n\n  // Decide what kind of interval to use\n  var intervalTime = !self.s.replicaSetState.hasPrimary()\n    ? self.s.minHeartbeatFrequencyMS\n    : _haInterval;\n\n  self.intervalIds.push(new Timeout(executeReconnect(self), intervalTime).start());\n}\n\nfunction addServerToList(list, server) {\n  for (var i = 0; i < list.length; i++) {\n    if (list[i].name.toLowerCase() === server.name.toLowerCase()) return true;\n  }\n\n  list.push(server);\n}\n\nfunction handleEvent(self, event) {\n  return function() {\n    if (self.state === DESTROYED || self.state === UNREFERENCED) return;\n    // Debug log\n    if (self.s.logger.isDebug()) {\n      self.s.logger.debug(\n        f('handleEvent %s from server %s in replset with id %s', event, this.name, self.id)\n      );\n    }\n\n    // Remove from the replicaset state\n    self.s.replicaSetState.remove(this);\n\n    // Are we in a destroyed state return\n    if (self.state === DESTROYED || self.state === UNREFERENCED) return;\n\n    // If no primary and secondary available\n    if (\n      !self.s.replicaSetState.hasPrimary() &&\n      !self.s.replicaSetState.hasSecondary() &&\n      self.s.options.secondaryOnlyConnectionAllowed\n    ) {\n      stateTransition(self, DISCONNECTED);\n    } else if (!self.s.replicaSetState.hasPrimary()) {\n      stateTransition(self, DISCONNECTED);\n    }\n\n    addServerToList(self.s.connectingServers, this);\n  };\n}\n\nfunction shouldTriggerConnect(self) {\n  const isConnecting = self.state === CONNECTING;\n  const hasPrimary = self.s.replicaSetState.hasPrimary();\n  const hasSecondary = self.s.replicaSetState.hasSecondary();\n  const secondaryOnlyConnectionAllowed = self.s.options.secondaryOnlyConnectionAllowed;\n  const readPreferenceSecondary =\n    self.s.connectOptions.readPreference &&\n    self.s.connectOptions.readPreference.equals(ReadPreference.secondary);\n\n  return (\n    (isConnecting &&\n      ((readPreferenceSecondary && hasSecondary) || (!readPreferenceSecondary && hasPrimary))) ||\n    (hasSecondary && secondaryOnlyConnectionAllowed)\n  );\n}\n\nfunction handleInitialConnectEvent(self, event) {\n  return function() {\n    var _this = this;\n    // Debug log\n    if (self.s.logger.isDebug()) {\n      self.s.logger.debug(\n        f(\n          'handleInitialConnectEvent %s from server %s in replset with id %s',\n          event,\n          this.name,\n          self.id\n        )\n      );\n    }\n\n    // Destroy the instance\n    if (self.state === DESTROYED || self.state === UNREFERENCED) {\n      return this.destroy({ force: true });\n    }\n\n    // Check the type of server\n    if (event === 'connect') {\n      // Update the state\n      var result = self.s.replicaSetState.update(_this);\n      if (result === true) {\n        // Primary lastIsMaster store it\n        if (_this.lastIsMaster() && _this.lastIsMaster().ismaster) {\n          self.ismaster = _this.lastIsMaster();\n        }\n\n        // Debug log\n        if (self.s.logger.isDebug()) {\n          self.s.logger.debug(\n            f(\n              'handleInitialConnectEvent %s from server %s in replset with id %s has state [%s]',\n              event,\n              _this.name,\n              self.id,\n              JSON.stringify(self.s.replicaSetState.set)\n            )\n          );\n        }\n\n        // Remove the handlers\n        for (let i = 0; i < handlers.length; i++) {\n          _this.removeAllListeners(handlers[i]);\n        }\n\n        // Add stable state handlers\n        _this.on('error', handleEvent(self, 'error'));\n        _this.on('close', handleEvent(self, 'close'));\n        _this.on('timeout', handleEvent(self, 'timeout'));\n        _this.on('parseError', handleEvent(self, 'parseError'));\n\n        // Do we have a primary or primaryAndSecondary\n        if (shouldTriggerConnect(self)) {\n          // We are connected\n          self.state = CONNECTED;\n\n          // Set initial connect state\n          self.initialConnectState.connect = true;\n          // Emit connect event\n          process.nextTick(function() {\n            self.emit('connect', self);\n          });\n\n          topologyMonitor(self, {});\n        }\n      } else if (result instanceof MongoError) {\n        _this.destroy({ force: true });\n        self.destroy({ force: true });\n        return self.emit('error', result);\n      } else {\n        _this.destroy({ force: true });\n      }\n    } else {\n      // Emit failure to connect\n      self.emit('failed', this);\n\n      addServerToList(self.s.connectingServers, this);\n      // Remove from the state\n      self.s.replicaSetState.remove(this);\n    }\n\n    if (\n      self.initialConnectState.connect &&\n      !self.initialConnectState.fullsetup &&\n      self.s.replicaSetState.hasPrimaryAndSecondary()\n    ) {\n      // Set initial connect state\n      self.initialConnectState.fullsetup = true;\n      self.initialConnectState.all = true;\n\n      process.nextTick(function() {\n        self.emit('fullsetup', self);\n        self.emit('all', self);\n      });\n    }\n\n    // Remove from the list from connectingServers\n    for (var i = 0; i < self.s.connectingServers.length; i++) {\n      if (self.s.connectingServers[i].equals(this)) {\n        self.s.connectingServers.splice(i, 1);\n      }\n    }\n\n    // Trigger topologyMonitor\n    if (self.s.connectingServers.length === 0 && self.state === CONNECTING) {\n      topologyMonitor(self, { haInterval: 1 });\n    }\n  };\n}\n\nfunction connectServers(self, servers) {\n  // Update connectingServers\n  self.s.connectingServers = self.s.connectingServers.concat(servers);\n\n  // Index used to interleaf the server connects, avoiding\n  // runtime issues on io constrained vm's\n  var timeoutInterval = 0;\n\n  function connect(server, timeoutInterval) {\n    setTimeout(function() {\n      // Add the server to the state\n      if (self.s.replicaSetState.update(server)) {\n        // Primary lastIsMaster store it\n        if (server.lastIsMaster() && server.lastIsMaster().ismaster) {\n          self.ismaster = server.lastIsMaster();\n        }\n      }\n\n      // Add event handlers\n      server.once('close', handleInitialConnectEvent(self, 'close'));\n      server.once('timeout', handleInitialConnectEvent(self, 'timeout'));\n      server.once('parseError', handleInitialConnectEvent(self, 'parseError'));\n      server.once('error', handleInitialConnectEvent(self, 'error'));\n      server.once('connect', handleInitialConnectEvent(self, 'connect'));\n\n      // SDAM Monitoring events\n      server.on('serverOpening', e => self.emit('serverOpening', e));\n      server.on('serverDescriptionChanged', e => self.emit('serverDescriptionChanged', e));\n      server.on('serverClosed', e => self.emit('serverClosed', e));\n\n      // Command Monitoring events\n      relayEvents(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);\n\n      // Start connection\n      server.connect(self.s.connectOptions);\n    }, timeoutInterval);\n  }\n\n  // Start all the servers\n  while (servers.length > 0) {\n    connect(servers.shift(), timeoutInterval++);\n  }\n}\n\n/**\n * Emit event if it exists\n * @method\n */\nfunction emitSDAMEvent(self, event, description) {\n  if (self.listeners(event).length > 0) {\n    self.emit(event, description);\n  }\n}\n\n/**\n * Initiate server connect\n */\nReplSet.prototype.connect = function(options) {\n  var self = this;\n  // Add any connect level options to the internal state\n  this.s.connectOptions = options || {};\n\n  // Set connecting state\n  stateTransition(this, CONNECTING);\n\n  // Create server instances\n  var servers = this.s.seedlist.map(function(x) {\n    return new Server(\n      Object.assign({}, self.s.options, x, options, {\n        reconnect: false,\n        monitoring: false,\n        parent: self,\n        clientInfo: clone(self.s.clientInfo)\n      })\n    );\n  });\n\n  // Error out as high availbility interval must be < than socketTimeout\n  if (\n    this.s.options.socketTimeout > 0 &&\n    this.s.options.socketTimeout <= this.s.options.haInterval\n  ) {\n    return self.emit(\n      'error',\n      new MongoError(\n        f(\n          'haInterval [%s] MS must be set to less than socketTimeout [%s] MS',\n          this.s.options.haInterval,\n          this.s.options.socketTimeout\n        )\n      )\n    );\n  }\n\n  // Emit the topology opening event\n  emitSDAMEvent(this, 'topologyOpening', { topologyId: this.id });\n  // Start all server connections\n  connectServers(self, servers);\n};\n\n/**\n * Authenticate the topology.\n * @method\n * @param {MongoCredentials} credentials The credentials for authentication we are using\n * @param {authResultCallback} callback A callback function\n */\nReplSet.prototype.auth = function(credentials, callback) {\n  if (typeof callback === 'function') callback(null, null);\n};\n\n/**\n * Destroy the server connection\n * @param {boolean} [options.force=false] Force destroy the pool\n * @method\n */\nReplSet.prototype.destroy = function(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  let destroyCount = this.s.connectingServers.length + 1; // +1 for the callback from `replicaSetState.destroy`\n  const serverDestroyed = () => {\n    destroyCount--;\n    if (destroyCount > 0) {\n      return;\n    }\n\n    // Emit toplogy closing event\n    emitSDAMEvent(this, 'topologyClosed', { topologyId: this.id });\n\n    // Transition state\n    stateTransition(this, DESTROYED);\n\n    if (typeof callback === 'function') {\n      callback(null, null);\n    }\n  };\n\n  // Clear out any monitoring process\n  if (this.haTimeoutId) clearTimeout(this.haTimeoutId);\n\n  // Clear out all monitoring\n  for (var i = 0; i < this.intervalIds.length; i++) {\n    this.intervalIds[i].stop();\n  }\n\n  // Reset list of intervalIds\n  this.intervalIds = [];\n\n  if (destroyCount === 0) {\n    serverDestroyed();\n    return;\n  }\n\n  // Destroy the replicaset\n  this.s.replicaSetState.destroy(options, serverDestroyed);\n\n  // Destroy all connecting servers\n  this.s.connectingServers.forEach(function(x) {\n    x.destroy(options, serverDestroyed);\n  });\n};\n\n/**\n * Unref all connections belong to this server\n * @method\n */\nReplSet.prototype.unref = function() {\n  // Transition state\n  stateTransition(this, UNREFERENCED);\n\n  this.s.replicaSetState.allServers().forEach(function(x) {\n    x.unref();\n  });\n\n  clearTimeout(this.haTimeoutId);\n};\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nReplSet.prototype.lastIsMaster = function() {\n  // If secondaryOnlyConnectionAllowed and no primary but secondary\n  // return the secondaries ismaster result.\n  if (\n    this.s.options.secondaryOnlyConnectionAllowed &&\n    !this.s.replicaSetState.hasPrimary() &&\n    this.s.replicaSetState.hasSecondary()\n  ) {\n    return this.s.replicaSetState.secondaries[0].lastIsMaster();\n  }\n\n  return this.s.replicaSetState.primary\n    ? this.s.replicaSetState.primary.lastIsMaster()\n    : this.ismaster;\n};\n\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\nReplSet.prototype.connections = function() {\n  var servers = this.s.replicaSetState.allServers();\n  var connections = [];\n  for (var i = 0; i < servers.length; i++) {\n    connections = connections.concat(servers[i].connections());\n  }\n\n  return connections;\n};\n\n/**\n * Figure out if the server is connected\n * @method\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @return {boolean}\n */\nReplSet.prototype.isConnected = function(options) {\n  options = options || {};\n\n  // If we specified a read preference check if we are connected to something\n  // than can satisfy this\n  if (options.readPreference && options.readPreference.equals(ReadPreference.secondary)) {\n    return this.s.replicaSetState.hasSecondary();\n  }\n\n  if (options.readPreference && options.readPreference.equals(ReadPreference.primary)) {\n    return this.s.replicaSetState.hasPrimary();\n  }\n\n  if (options.readPreference && options.readPreference.equals(ReadPreference.primaryPreferred)) {\n    return this.s.replicaSetState.hasSecondary() || this.s.replicaSetState.hasPrimary();\n  }\n\n  if (options.readPreference && options.readPreference.equals(ReadPreference.secondaryPreferred)) {\n    return this.s.replicaSetState.hasSecondary() || this.s.replicaSetState.hasPrimary();\n  }\n\n  if (this.s.options.secondaryOnlyConnectionAllowed && this.s.replicaSetState.hasSecondary()) {\n    return true;\n  }\n\n  return this.s.replicaSetState.hasPrimary();\n};\n\n/**\n * Figure out if the replicaset instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\nReplSet.prototype.isDestroyed = function() {\n  return this.state === DESTROYED;\n};\n\nconst SERVER_SELECTION_TIMEOUT_MS = 10000; // hardcoded `serverSelectionTimeoutMS` for legacy topology\nconst SERVER_SELECTION_INTERVAL_MS = 1000; // time to wait between selection attempts\n/**\n * Selects a server\n *\n * @method\n * @param {function} selector Unused\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {ClientSession} [options.session] Unused\n * @param {function} callback\n */\nReplSet.prototype.selectServer = function(selector, options, callback) {\n  if (typeof selector === 'function' && typeof callback === 'undefined')\n    (callback = selector), (selector = undefined), (options = {});\n  if (typeof options === 'function') (callback = options), (options = selector);\n  options = options || {};\n\n  let readPreference;\n  if (selector instanceof ReadPreference) {\n    readPreference = selector;\n  } else {\n    readPreference = options.readPreference || ReadPreference.primary;\n  }\n\n  let lastError;\n  const start = process.hrtime();\n  const _selectServer = () => {\n    if (calculateDurationInMs(start) >= SERVER_SELECTION_TIMEOUT_MS) {\n      if (lastError != null) {\n        callback(lastError, null);\n      } else {\n        callback(new MongoError('Server selection timed out'));\n      }\n\n      return;\n    }\n\n    const server = this.s.replicaSetState.pickServer(readPreference);\n    if (server == null) {\n      setTimeout(_selectServer, SERVER_SELECTION_INTERVAL_MS);\n      return;\n    }\n\n    if (!(server instanceof Server)) {\n      lastError = server;\n      setTimeout(_selectServer, SERVER_SELECTION_INTERVAL_MS);\n      return;\n    }\n\n    if (this.s.debug) this.emit('pickedServer', options.readPreference, server);\n    callback(null, server);\n  };\n\n  _selectServer();\n};\n\n/**\n * Get all connected servers\n * @method\n * @return {Server[]}\n */\nReplSet.prototype.getServers = function() {\n  return this.s.replicaSetState.allServers();\n};\n\n//\n// Execute write operation\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // TODO: once we drop Node 4, use destructuring either here or in arguments.\n  const self = args.self;\n  const op = args.op;\n  const ns = args.ns;\n  const ops = args.ops;\n\n  if (self.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  }\n\n  const willRetryWrite =\n    !args.retrying &&\n    !!options.retryWrites &&\n    options.session &&\n    isRetryableWritesSupported(self) &&\n    !options.session.inTransaction();\n\n  if (!self.s.replicaSetState.hasPrimary()) {\n    if (self.s.disconnectHandler) {\n      // Not connected but we have a disconnecthandler\n      return self.s.disconnectHandler.add(op, ns, ops, options, callback);\n    } else if (!willRetryWrite) {\n      // No server returned we had an error\n      return callback(new MongoError('no primary server found'));\n    }\n  }\n\n  const handler = (err, result) => {\n    if (!err) return callback(null, result);\n    if (!isRetryableError(err)) {\n      err = getMMAPError(err);\n      return callback(err);\n    }\n\n    if (willRetryWrite) {\n      const newArgs = Object.assign({}, args, { retrying: true });\n      return executeWriteOperation(newArgs, options, callback);\n    }\n\n    // Per SDAM, remove primary from replicaset\n    if (self.s.replicaSetState.primary) {\n      self.s.replicaSetState.primary.destroy();\n      self.s.replicaSetState.remove(self.s.replicaSetState.primary, { force: true });\n    }\n\n    return callback(err);\n  };\n\n  if (callback.operationId) {\n    handler.operationId = callback.operationId;\n  }\n\n  // increment and assign txnNumber\n  if (willRetryWrite) {\n    options.session.incrementTransactionNumber();\n    options.willRetryWrite = willRetryWrite;\n  }\n\n  self.s.replicaSetState.primary[op](ns, ops, options, handler);\n}\n\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.insert = function(ns, ops, options, callback) {\n  // Execute write operation\n  executeWriteOperation({ self: this, op: 'insert', ns, ops }, options, callback);\n};\n\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.update = function(ns, ops, options, callback) {\n  // Execute write operation\n  executeWriteOperation({ self: this, op: 'update', ns, ops }, options, callback);\n};\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.remove = function(ns, ops, options, callback) {\n  // Execute write operation\n  executeWriteOperation({ self: this, op: 'remove', ns, ops }, options, callback);\n};\n\nconst RETRYABLE_WRITE_OPERATIONS = ['findAndModify', 'insert', 'update', 'delete'];\n\nfunction isWriteCommand(command) {\n  return RETRYABLE_WRITE_OPERATIONS.some(op => command[op]);\n}\n\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Connection} [options.connection] Specify connection object to execute command against\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.command = function(ns, cmd, options, callback) {\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  if (this.state === DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  var self = this;\n\n  // Establish readPreference\n  var readPreference = options.readPreference ? options.readPreference : ReadPreference.primary;\n\n  // If the readPreference is primary and we have no primary, store it\n  if (\n    readPreference.preference === 'primary' &&\n    !this.s.replicaSetState.hasPrimary() &&\n    this.s.disconnectHandler != null\n  ) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  } else if (\n    readPreference.preference === 'secondary' &&\n    !this.s.replicaSetState.hasSecondary() &&\n    this.s.disconnectHandler != null\n  ) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  } else if (\n    readPreference.preference !== 'primary' &&\n    !this.s.replicaSetState.hasSecondary() &&\n    !this.s.replicaSetState.hasPrimary() &&\n    this.s.disconnectHandler != null\n  ) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  }\n\n  // Pick a server\n  var server = this.s.replicaSetState.pickServer(readPreference);\n  // We received an error, return it\n  if (!(server instanceof Server)) return callback(server);\n  // Emit debug event\n  if (self.s.debug) self.emit('pickedServer', ReadPreference.primary, server);\n\n  // No server returned we had an error\n  if (server == null) {\n    return callback(\n      new MongoError(\n        f('no server found that matches the provided readPreference %s', readPreference)\n      )\n    );\n  }\n\n  const willRetryWrite =\n    !options.retrying &&\n    !!options.retryWrites &&\n    options.session &&\n    isRetryableWritesSupported(self) &&\n    !options.session.inTransaction() &&\n    isWriteCommand(cmd);\n\n  const cb = (err, result) => {\n    if (!err) return callback(null, result);\n    if (!isRetryableError(err)) {\n      return callback(err);\n    }\n\n    if (willRetryWrite) {\n      const newOptions = Object.assign({}, options, { retrying: true });\n      return this.command(ns, cmd, newOptions, callback);\n    }\n\n    // Per SDAM, remove primary from replicaset\n    if (this.s.replicaSetState.primary) {\n      this.s.replicaSetState.primary.destroy();\n      this.s.replicaSetState.remove(this.s.replicaSetState.primary, { force: true });\n    }\n\n    return callback(err);\n  };\n\n  // increment and assign txnNumber\n  if (willRetryWrite) {\n    options.session.incrementTransactionNumber();\n    options.willRetryWrite = willRetryWrite;\n  }\n\n  // Execute the command\n  server.command(ns, cmd, options, cb);\n};\n\n/**\n * Get a new cursor\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options] Options for the cursor\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {object} [options.topology] The internal topology of the created cursor\n * @returns {Cursor}\n */\nReplSet.prototype.cursor = function(ns, cmd, options) {\n  options = options || {};\n  const topology = options.topology || this;\n\n  // Set up final cursor type\n  var FinalCursor = options.cursorFactory || this.s.Cursor;\n\n  // Return the cursor\n  return new FinalCursor(topology, ns, cmd, options);\n};\n\n/**\n * A replset connect event, used to verify that the connection is up and running\n *\n * @event ReplSet#connect\n * @type {ReplSet}\n */\n\n/**\n * A replset reconnect event, used to verify that the topology reconnected\n *\n * @event ReplSet#reconnect\n * @type {ReplSet}\n */\n\n/**\n * A replset fullsetup event, used to signal that all topology members have been contacted.\n *\n * @event ReplSet#fullsetup\n * @type {ReplSet}\n */\n\n/**\n * A replset all event, used to signal that all topology members have been contacted.\n *\n * @event ReplSet#all\n * @type {ReplSet}\n */\n\n/**\n * A replset failed event, used to signal that initial replset connection failed.\n *\n * @event ReplSet#failed\n * @type {ReplSet}\n */\n\n/**\n * A server member left the replicaset\n *\n * @event ReplSet#left\n * @type {function}\n * @param {string} type The type of member that left (primary|secondary|arbiter)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the replicaset\n *\n * @event ReplSet#joined\n * @type {function}\n * @param {string} type The type of member that joined (primary|secondary|arbiter)\n * @param {Server} server The server object that joined\n */\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event ReplSet#serverOpening\n * @type {object}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event ReplSet#serverClosed\n * @type {object}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event ReplSet#serverDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event ReplSet#topologyOpening\n * @type {object}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event ReplSet#topologyClosed\n * @type {object}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event ReplSet#topologyDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event ReplSet#serverHeartbeatStarted\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event ReplSet#serverHeartbeatFailed\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event ReplSet#serverHeartbeatSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command was started, if command monitoring is enabled\n *\n * @event ReplSet#commandStarted\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command succeeded, if command monitoring is enabled\n *\n * @event ReplSet#commandSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command failed, if command monitoring is enabled\n *\n * @event ReplSet#commandFailed\n * @type {object}\n */\n\nmodule.exports = ReplSet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///89\n");

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar inherits = __webpack_require__(12).inherits,\n  f = __webpack_require__(12).format,\n  diff = __webpack_require__(59).diff,\n  EventEmitter = __webpack_require__(39).EventEmitter,\n  Logger = __webpack_require__(51),\n  ReadPreference = __webpack_require__(42),\n  MongoError = __webpack_require__(37).MongoError,\n  Buffer = __webpack_require__(49).Buffer;\n\nvar TopologyType = {\n  Single: 'Single',\n  ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n  ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n  Sharded: 'Sharded',\n  Unknown: 'Unknown'\n};\n\nvar ServerType = {\n  Standalone: 'Standalone',\n  Mongos: 'Mongos',\n  PossiblePrimary: 'PossiblePrimary',\n  RSPrimary: 'RSPrimary',\n  RSSecondary: 'RSSecondary',\n  RSArbiter: 'RSArbiter',\n  RSOther: 'RSOther',\n  RSGhost: 'RSGhost',\n  Unknown: 'Unknown'\n};\n\nvar ReplSetState = function(options) {\n  options = options || {};\n  // Add event listener\n  EventEmitter.call(this);\n  // Topology state\n  this.topologyType = TopologyType.ReplicaSetNoPrimary;\n  this.setName = options.setName;\n\n  // Server set\n  this.set = {};\n\n  // Unpacked options\n  this.id = options.id;\n  this.setName = options.setName;\n\n  // Replicaset logger\n  this.logger = options.logger || Logger('ReplSet', options);\n\n  // Server selection index\n  this.index = 0;\n  // Acceptable latency\n  this.acceptableLatency = options.acceptableLatency || 15;\n\n  // heartbeatFrequencyMS\n  this.heartbeatFrequencyMS = options.heartbeatFrequencyMS || 10000;\n\n  // Server side\n  this.primary = null;\n  this.secondaries = [];\n  this.arbiters = [];\n  this.passives = [];\n  this.ghosts = [];\n  // Current unknown hosts\n  this.unknownServers = [];\n  // In set status\n  this.set = {};\n  // Status\n  this.maxElectionId = null;\n  this.maxSetVersion = 0;\n  // Description of the Replicaset\n  this.replicasetDescription = {\n    topologyType: 'Unknown',\n    servers: []\n  };\n\n  this.logicalSessionTimeoutMinutes = undefined;\n};\n\ninherits(ReplSetState, EventEmitter);\n\nReplSetState.prototype.hasPrimaryAndSecondary = function() {\n  return this.primary != null && this.secondaries.length > 0;\n};\n\nReplSetState.prototype.hasPrimaryOrSecondary = function() {\n  return this.hasPrimary() || this.hasSecondary();\n};\n\nReplSetState.prototype.hasPrimary = function() {\n  return this.primary != null;\n};\n\nReplSetState.prototype.hasSecondary = function() {\n  return this.secondaries.length > 0;\n};\n\nReplSetState.prototype.get = function(host) {\n  var servers = this.allServers();\n\n  for (var i = 0; i < servers.length; i++) {\n    if (servers[i].name.toLowerCase() === host.toLowerCase()) {\n      return servers[i];\n    }\n  }\n\n  return null;\n};\n\nReplSetState.prototype.allServers = function(options) {\n  options = options || {};\n  var servers = this.primary ? [this.primary] : [];\n  servers = servers.concat(this.secondaries);\n  if (!options.ignoreArbiters) servers = servers.concat(this.arbiters);\n  servers = servers.concat(this.passives);\n  return servers;\n};\n\nReplSetState.prototype.destroy = function(options, callback) {\n  const serversToDestroy = this.secondaries\n    .concat(this.arbiters)\n    .concat(this.passives)\n    .concat(this.ghosts);\n  if (this.primary) serversToDestroy.push(this.primary);\n\n  let serverCount = serversToDestroy.length;\n  const serverDestroyed = () => {\n    serverCount--;\n    if (serverCount > 0) {\n      return;\n    }\n\n    // Clear out the complete state\n    this.secondaries = [];\n    this.arbiters = [];\n    this.passives = [];\n    this.ghosts = [];\n    this.unknownServers = [];\n    this.set = {};\n    this.primary = null;\n\n    // Emit the topology changed\n    emitTopologyDescriptionChanged(this);\n\n    if (typeof callback === 'function') {\n      callback(null, null);\n    }\n  };\n\n  if (serverCount === 0) {\n    serverDestroyed();\n    return;\n  }\n\n  serversToDestroy.forEach(server => server.destroy(options, serverDestroyed));\n};\n\nReplSetState.prototype.remove = function(server, options) {\n  options = options || {};\n\n  // Get the server name and lowerCase it\n  var serverName = server.name.toLowerCase();\n\n  // Only remove if the current server is not connected\n  var servers = this.primary ? [this.primary] : [];\n  servers = servers.concat(this.secondaries);\n  servers = servers.concat(this.arbiters);\n  servers = servers.concat(this.passives);\n\n  // Check if it's active and this is just a failed connection attempt\n  for (var i = 0; i < servers.length; i++) {\n    if (\n      !options.force &&\n      servers[i].equals(server) &&\n      servers[i].isConnected &&\n      servers[i].isConnected()\n    ) {\n      return;\n    }\n  }\n\n  // If we have it in the set remove it\n  if (this.set[serverName]) {\n    this.set[serverName].type = ServerType.Unknown;\n    this.set[serverName].electionId = null;\n    this.set[serverName].setName = null;\n    this.set[serverName].setVersion = null;\n  }\n\n  // Remove type\n  var removeType = null;\n\n  // Remove from any lists\n  if (this.primary && this.primary.equals(server)) {\n    this.primary = null;\n    this.topologyType = TopologyType.ReplicaSetNoPrimary;\n    removeType = 'primary';\n  }\n\n  // Remove from any other server lists\n  removeType = removeFrom(server, this.secondaries) ? 'secondary' : removeType;\n  removeType = removeFrom(server, this.arbiters) ? 'arbiter' : removeType;\n  removeType = removeFrom(server, this.passives) ? 'secondary' : removeType;\n  removeFrom(server, this.ghosts);\n  removeFrom(server, this.unknownServers);\n\n  // Push to unknownServers\n  this.unknownServers.push(serverName);\n\n  // Do we have a removeType\n  if (removeType) {\n    this.emit('left', removeType, server);\n  }\n};\n\nconst isArbiter = ismaster => ismaster.arbiterOnly && ismaster.setName;\n\nReplSetState.prototype.update = function(server) {\n  var self = this;\n  // Get the current ismaster\n  var ismaster = server.lastIsMaster();\n\n  // Get the server name and lowerCase it\n  var serverName = server.name.toLowerCase();\n\n  //\n  // Add any hosts\n  //\n  if (ismaster) {\n    // Join all the possible new hosts\n    var hosts = Array.isArray(ismaster.hosts) ? ismaster.hosts : [];\n    hosts = hosts.concat(Array.isArray(ismaster.arbiters) ? ismaster.arbiters : []);\n    hosts = hosts.concat(Array.isArray(ismaster.passives) ? ismaster.passives : []);\n    hosts = hosts.map(function(s) {\n      return s.toLowerCase();\n    });\n\n    // Add all hosts as unknownServers\n    for (var i = 0; i < hosts.length; i++) {\n      // Add to the list of unknown server\n      if (\n        this.unknownServers.indexOf(hosts[i]) === -1 &&\n        (!this.set[hosts[i]] || this.set[hosts[i]].type === ServerType.Unknown)\n      ) {\n        this.unknownServers.push(hosts[i].toLowerCase());\n      }\n\n      if (!this.set[hosts[i]]) {\n        this.set[hosts[i]] = {\n          type: ServerType.Unknown,\n          electionId: null,\n          setName: null,\n          setVersion: null\n        };\n      }\n    }\n  }\n\n  //\n  // Unknown server\n  //\n  if (!ismaster && !inList(ismaster, server, this.unknownServers)) {\n    self.set[serverName] = {\n      type: ServerType.Unknown,\n      setVersion: null,\n      electionId: null,\n      setName: null\n    };\n    // Update set information about the server instance\n    self.set[serverName].type = ServerType.Unknown;\n    self.set[serverName].electionId = ismaster ? ismaster.electionId : ismaster;\n    self.set[serverName].setName = ismaster ? ismaster.setName : ismaster;\n    self.set[serverName].setVersion = ismaster ? ismaster.setVersion : ismaster;\n\n    if (self.unknownServers.indexOf(server.name) === -1) {\n      self.unknownServers.push(serverName);\n    }\n\n    // Set the topology\n    return false;\n  }\n\n  // Update logicalSessionTimeoutMinutes\n  if (ismaster.logicalSessionTimeoutMinutes !== undefined && !isArbiter(ismaster)) {\n    if (\n      self.logicalSessionTimeoutMinutes === undefined ||\n      ismaster.logicalSessionTimeoutMinutes === null\n    ) {\n      self.logicalSessionTimeoutMinutes = ismaster.logicalSessionTimeoutMinutes;\n    } else {\n      self.logicalSessionTimeoutMinutes = Math.min(\n        self.logicalSessionTimeoutMinutes,\n        ismaster.logicalSessionTimeoutMinutes\n      );\n    }\n  }\n\n  //\n  // Is this a mongos\n  //\n  if (ismaster && ismaster.msg === 'isdbgrid') {\n    if (this.primary && this.primary.name === serverName) {\n      this.primary = null;\n      this.topologyType = TopologyType.ReplicaSetNoPrimary;\n    }\n\n    return false;\n  }\n\n  // A RSGhost instance\n  if (ismaster.isreplicaset) {\n    self.set[serverName] = {\n      type: ServerType.RSGhost,\n      setVersion: null,\n      electionId: null,\n      setName: ismaster.setName\n    };\n\n    if (this.primary && this.primary.name === serverName) {\n      this.primary = null;\n    }\n\n    // Set the topology\n    this.topologyType = this.primary\n      ? TopologyType.ReplicaSetWithPrimary\n      : TopologyType.ReplicaSetNoPrimary;\n    if (ismaster.setName) this.setName = ismaster.setName;\n\n    // Set the topology\n    return false;\n  }\n\n  // A RSOther instance\n  if (\n    (ismaster.setName && ismaster.hidden) ||\n    (ismaster.setName &&\n      !ismaster.ismaster &&\n      !ismaster.secondary &&\n      !ismaster.arbiterOnly &&\n      !ismaster.passive)\n  ) {\n    self.set[serverName] = {\n      type: ServerType.RSOther,\n      setVersion: null,\n      electionId: null,\n      setName: ismaster.setName\n    };\n\n    // Set the topology\n    this.topologyType = this.primary\n      ? TopologyType.ReplicaSetWithPrimary\n      : TopologyType.ReplicaSetNoPrimary;\n    if (ismaster.setName) this.setName = ismaster.setName;\n    return false;\n  }\n\n  //\n  // Standalone server, destroy and return\n  //\n  if (ismaster && ismaster.ismaster && !ismaster.setName) {\n    this.topologyType = this.primary ? TopologyType.ReplicaSetWithPrimary : TopologyType.Unknown;\n    this.remove(server, { force: true });\n    return false;\n  }\n\n  //\n  // Server in maintanance mode\n  //\n  if (ismaster && !ismaster.ismaster && !ismaster.secondary && !ismaster.arbiterOnly) {\n    this.remove(server, { force: true });\n    return false;\n  }\n\n  //\n  // If the .me field does not match the passed in server\n  //\n  if (ismaster.me && ismaster.me.toLowerCase() !== serverName) {\n    if (this.logger.isWarn()) {\n      this.logger.warn(\n        f(\n          'the seedlist server was removed due to its address %s not matching its ismaster.me address %s',\n          server.name,\n          ismaster.me\n        )\n      );\n    }\n\n    // Delete from the set\n    delete this.set[serverName];\n    // Delete unknown servers\n    removeFrom(server, self.unknownServers);\n\n    // Destroy the instance\n    server.destroy({ force: true });\n\n    // Set the type of topology we have\n    if (this.primary && !this.primary.equals(server)) {\n      this.topologyType = TopologyType.ReplicaSetWithPrimary;\n    } else {\n      this.topologyType = TopologyType.ReplicaSetNoPrimary;\n    }\n\n    //\n    // We have a potential primary\n    //\n    if (!this.primary && ismaster.primary) {\n      this.set[ismaster.primary.toLowerCase()] = {\n        type: ServerType.PossiblePrimary,\n        setName: null,\n        electionId: null,\n        setVersion: null\n      };\n    }\n\n    return false;\n  }\n\n  //\n  // Primary handling\n  //\n  if (!this.primary && ismaster.ismaster && ismaster.setName) {\n    var ismasterElectionId = server.lastIsMaster().electionId;\n    if (this.setName && this.setName !== ismaster.setName) {\n      this.topologyType = TopologyType.ReplicaSetNoPrimary;\n      return new MongoError(\n        f(\n          'setName from ismaster does not match provided connection setName [%s] != [%s]',\n          ismaster.setName,\n          this.setName\n        )\n      );\n    }\n\n    if (!this.maxElectionId && ismasterElectionId) {\n      this.maxElectionId = ismasterElectionId;\n    } else if (this.maxElectionId && ismasterElectionId) {\n      var result = compareObjectIds(this.maxElectionId, ismasterElectionId);\n      // Get the electionIds\n      var ismasterSetVersion = server.lastIsMaster().setVersion;\n\n      if (result === 1) {\n        this.topologyType = TopologyType.ReplicaSetNoPrimary;\n        return false;\n      } else if (result === 0 && ismasterSetVersion) {\n        if (ismasterSetVersion < this.maxSetVersion) {\n          this.topologyType = TopologyType.ReplicaSetNoPrimary;\n          return false;\n        }\n      }\n\n      this.maxSetVersion = ismasterSetVersion;\n      this.maxElectionId = ismasterElectionId;\n    }\n\n    // Hande normalization of server names\n    var normalizedHosts = ismaster.hosts.map(function(x) {\n      return x.toLowerCase();\n    });\n    var locationIndex = normalizedHosts.indexOf(serverName);\n\n    // Validate that the server exists in the host list\n    if (locationIndex !== -1) {\n      self.primary = server;\n      self.set[serverName] = {\n        type: ServerType.RSPrimary,\n        setVersion: ismaster.setVersion,\n        electionId: ismaster.electionId,\n        setName: ismaster.setName\n      };\n\n      // Set the topology\n      this.topologyType = TopologyType.ReplicaSetWithPrimary;\n      if (ismaster.setName) this.setName = ismaster.setName;\n      removeFrom(server, self.unknownServers);\n      removeFrom(server, self.secondaries);\n      removeFrom(server, self.passives);\n      self.emit('joined', 'primary', server);\n    } else {\n      this.topologyType = TopologyType.ReplicaSetNoPrimary;\n    }\n\n    emitTopologyDescriptionChanged(self);\n    return true;\n  } else if (ismaster.ismaster && ismaster.setName) {\n    // Get the electionIds\n    var currentElectionId = self.set[self.primary.name.toLowerCase()].electionId;\n    var currentSetVersion = self.set[self.primary.name.toLowerCase()].setVersion;\n    var currentSetName = self.set[self.primary.name.toLowerCase()].setName;\n    ismasterElectionId = server.lastIsMaster().electionId;\n    ismasterSetVersion = server.lastIsMaster().setVersion;\n    var ismasterSetName = server.lastIsMaster().setName;\n\n    // Is it the same server instance\n    if (this.primary.equals(server) && currentSetName === ismasterSetName) {\n      return false;\n    }\n\n    // If we do not have the same rs name\n    if (currentSetName && currentSetName !== ismasterSetName) {\n      if (!this.primary.equals(server)) {\n        this.topologyType = TopologyType.ReplicaSetWithPrimary;\n      } else {\n        this.topologyType = TopologyType.ReplicaSetNoPrimary;\n      }\n\n      return false;\n    }\n\n    // Check if we need to replace the server\n    if (currentElectionId && ismasterElectionId) {\n      result = compareObjectIds(currentElectionId, ismasterElectionId);\n\n      if (result === 1) {\n        return false;\n      } else if (result === 0 && currentSetVersion > ismasterSetVersion) {\n        return false;\n      }\n    } else if (!currentElectionId && ismasterElectionId && ismasterSetVersion) {\n      if (ismasterSetVersion < this.maxSetVersion) {\n        return false;\n      }\n    }\n\n    if (!this.maxElectionId && ismasterElectionId) {\n      this.maxElectionId = ismasterElectionId;\n    } else if (this.maxElectionId && ismasterElectionId) {\n      result = compareObjectIds(this.maxElectionId, ismasterElectionId);\n\n      if (result === 1) {\n        return false;\n      } else if (result === 0 && currentSetVersion && ismasterSetVersion) {\n        if (ismasterSetVersion < this.maxSetVersion) {\n          return false;\n        }\n      } else {\n        if (ismasterSetVersion < this.maxSetVersion) {\n          return false;\n        }\n      }\n\n      this.maxElectionId = ismasterElectionId;\n      this.maxSetVersion = ismasterSetVersion;\n    } else {\n      this.maxSetVersion = ismasterSetVersion;\n    }\n\n    // Modify the entry to unknown\n    self.set[self.primary.name.toLowerCase()] = {\n      type: ServerType.Unknown,\n      setVersion: null,\n      electionId: null,\n      setName: null\n    };\n\n    // Signal primary left\n    self.emit('left', 'primary', this.primary);\n    // Destroy the instance\n    self.primary.destroy({ force: true });\n    // Set the new instance\n    self.primary = server;\n    // Set the set information\n    self.set[serverName] = {\n      type: ServerType.RSPrimary,\n      setVersion: ismaster.setVersion,\n      electionId: ismaster.electionId,\n      setName: ismaster.setName\n    };\n\n    // Set the topology\n    this.topologyType = TopologyType.ReplicaSetWithPrimary;\n    if (ismaster.setName) this.setName = ismaster.setName;\n    removeFrom(server, self.unknownServers);\n    removeFrom(server, self.secondaries);\n    removeFrom(server, self.passives);\n    self.emit('joined', 'primary', server);\n    emitTopologyDescriptionChanged(self);\n    return true;\n  }\n\n  // A possible instance\n  if (!this.primary && ismaster.primary) {\n    self.set[ismaster.primary.toLowerCase()] = {\n      type: ServerType.PossiblePrimary,\n      setVersion: null,\n      electionId: null,\n      setName: null\n    };\n  }\n\n  //\n  // Secondary handling\n  //\n  if (\n    ismaster.secondary &&\n    ismaster.setName &&\n    !inList(ismaster, server, this.secondaries) &&\n    this.setName &&\n    this.setName === ismaster.setName\n  ) {\n    addToList(self, ServerType.RSSecondary, ismaster, server, this.secondaries);\n    // Set the topology\n    this.topologyType = this.primary\n      ? TopologyType.ReplicaSetWithPrimary\n      : TopologyType.ReplicaSetNoPrimary;\n    if (ismaster.setName) this.setName = ismaster.setName;\n    removeFrom(server, self.unknownServers);\n\n    // Remove primary\n    if (this.primary && this.primary.name.toLowerCase() === serverName) {\n      server.destroy({ force: true });\n      this.primary = null;\n      self.emit('left', 'primary', server);\n    }\n\n    // Emit secondary joined replicaset\n    self.emit('joined', 'secondary', server);\n    emitTopologyDescriptionChanged(self);\n    return true;\n  }\n\n  //\n  // Arbiter handling\n  //\n  if (\n    isArbiter(ismaster) &&\n    !inList(ismaster, server, this.arbiters) &&\n    this.setName &&\n    this.setName === ismaster.setName\n  ) {\n    addToList(self, ServerType.RSArbiter, ismaster, server, this.arbiters);\n    // Set the topology\n    this.topologyType = this.primary\n      ? TopologyType.ReplicaSetWithPrimary\n      : TopologyType.ReplicaSetNoPrimary;\n    if (ismaster.setName) this.setName = ismaster.setName;\n    removeFrom(server, self.unknownServers);\n    self.emit('joined', 'arbiter', server);\n    emitTopologyDescriptionChanged(self);\n    return true;\n  }\n\n  //\n  // Passive handling\n  //\n  if (\n    ismaster.passive &&\n    ismaster.setName &&\n    !inList(ismaster, server, this.passives) &&\n    this.setName &&\n    this.setName === ismaster.setName\n  ) {\n    addToList(self, ServerType.RSSecondary, ismaster, server, this.passives);\n    // Set the topology\n    this.topologyType = this.primary\n      ? TopologyType.ReplicaSetWithPrimary\n      : TopologyType.ReplicaSetNoPrimary;\n    if (ismaster.setName) this.setName = ismaster.setName;\n    removeFrom(server, self.unknownServers);\n\n    // Remove primary\n    if (this.primary && this.primary.name.toLowerCase() === serverName) {\n      server.destroy({ force: true });\n      this.primary = null;\n      self.emit('left', 'primary', server);\n    }\n\n    self.emit('joined', 'secondary', server);\n    emitTopologyDescriptionChanged(self);\n    return true;\n  }\n\n  //\n  // Remove the primary\n  //\n  if (this.set[serverName] && this.set[serverName].type === ServerType.RSPrimary) {\n    self.emit('left', 'primary', this.primary);\n    this.primary.destroy({ force: true });\n    this.primary = null;\n    this.topologyType = TopologyType.ReplicaSetNoPrimary;\n    return false;\n  }\n\n  this.topologyType = this.primary\n    ? TopologyType.ReplicaSetWithPrimary\n    : TopologyType.ReplicaSetNoPrimary;\n  return false;\n};\n\n/**\n * Recalculate single server max staleness\n * @method\n */\nReplSetState.prototype.updateServerMaxStaleness = function(server, haInterval) {\n  // Locate the max secondary lastwrite\n  var max = 0;\n  // Go over all secondaries\n  for (var i = 0; i < this.secondaries.length; i++) {\n    max = Math.max(max, this.secondaries[i].lastWriteDate);\n  }\n\n  // Perform this servers staleness calculation\n  if (server.ismaster.maxWireVersion >= 5 && server.ismaster.secondary && this.hasPrimary()) {\n    server.staleness =\n      server.lastUpdateTime -\n      server.lastWriteDate -\n      (this.primary.lastUpdateTime - this.primary.lastWriteDate) +\n      haInterval;\n  } else if (server.ismaster.maxWireVersion >= 5 && server.ismaster.secondary) {\n    server.staleness = max - server.lastWriteDate + haInterval;\n  }\n};\n\n/**\n * Recalculate all the staleness values for secodaries\n * @method\n */\nReplSetState.prototype.updateSecondariesMaxStaleness = function(haInterval) {\n  for (var i = 0; i < this.secondaries.length; i++) {\n    this.updateServerMaxStaleness(this.secondaries[i], haInterval);\n  }\n};\n\n/**\n * Pick a server by the passed in ReadPreference\n * @method\n * @param {ReadPreference} readPreference The ReadPreference instance to use\n */\nReplSetState.prototype.pickServer = function(readPreference) {\n  // If no read Preference set to primary by default\n  readPreference = readPreference || ReadPreference.primary;\n\n  // maxStalenessSeconds is not allowed with a primary read\n  if (readPreference.preference === 'primary' && readPreference.maxStalenessSeconds != null) {\n    return new MongoError('primary readPreference incompatible with maxStalenessSeconds');\n  }\n\n  // Check if we have any non compatible servers for maxStalenessSeconds\n  var allservers = this.primary ? [this.primary] : [];\n  allservers = allservers.concat(this.secondaries);\n\n  // Does any of the servers not support the right wire protocol version\n  // for maxStalenessSeconds when maxStalenessSeconds specified on readPreference. Then error out\n  if (readPreference.maxStalenessSeconds != null) {\n    for (var i = 0; i < allservers.length; i++) {\n      if (allservers[i].ismaster.maxWireVersion < 5) {\n        return new MongoError(\n          'maxStalenessSeconds not supported by at least one of the replicaset members'\n        );\n      }\n    }\n  }\n\n  // Do we have the nearest readPreference\n  if (readPreference.preference === 'nearest' && readPreference.maxStalenessSeconds == null) {\n    return pickNearest(this, readPreference);\n  } else if (\n    readPreference.preference === 'nearest' &&\n    readPreference.maxStalenessSeconds != null\n  ) {\n    return pickNearestMaxStalenessSeconds(this, readPreference);\n  }\n\n  // Get all the secondaries\n  var secondaries = this.secondaries;\n\n  // Check if we can satisfy and of the basic read Preferences\n  if (readPreference.equals(ReadPreference.secondary) && secondaries.length === 0) {\n    return new MongoError('no secondary server available');\n  }\n\n  if (\n    readPreference.equals(ReadPreference.secondaryPreferred) &&\n    secondaries.length === 0 &&\n    this.primary == null\n  ) {\n    return new MongoError('no secondary or primary server available');\n  }\n\n  if (readPreference.equals(ReadPreference.primary) && this.primary == null) {\n    return new MongoError('no primary server available');\n  }\n\n  // Secondary preferred or just secondaries\n  if (\n    readPreference.equals(ReadPreference.secondaryPreferred) ||\n    readPreference.equals(ReadPreference.secondary)\n  ) {\n    if (secondaries.length > 0 && readPreference.maxStalenessSeconds == null) {\n      // Pick nearest of any other servers available\n      var server = pickNearest(this, readPreference);\n      // No server in the window return primary\n      if (server) {\n        return server;\n      }\n    } else if (secondaries.length > 0 && readPreference.maxStalenessSeconds != null) {\n      // Pick nearest of any other servers available\n      server = pickNearestMaxStalenessSeconds(this, readPreference);\n      // No server in the window return primary\n      if (server) {\n        return server;\n      }\n    }\n\n    if (readPreference.equals(ReadPreference.secondaryPreferred)) {\n      return this.primary;\n    }\n\n    return null;\n  }\n\n  // Primary preferred\n  if (readPreference.equals(ReadPreference.primaryPreferred)) {\n    server = null;\n\n    // We prefer the primary if it's available\n    if (this.primary) {\n      return this.primary;\n    }\n\n    // Pick a secondary\n    if (secondaries.length > 0 && readPreference.maxStalenessSeconds == null) {\n      server = pickNearest(this, readPreference);\n    } else if (secondaries.length > 0 && readPreference.maxStalenessSeconds != null) {\n      server = pickNearestMaxStalenessSeconds(this, readPreference);\n    }\n\n    //  Did we find a server\n    if (server) return server;\n  }\n\n  // Return the primary\n  return this.primary;\n};\n\n//\n// Filter serves by tags\nvar filterByTags = function(readPreference, servers) {\n  if (readPreference.tags == null) return servers;\n  var filteredServers = [];\n  var tagsArray = Array.isArray(readPreference.tags) ? readPreference.tags : [readPreference.tags];\n\n  // Iterate over the tags\n  for (var j = 0; j < tagsArray.length; j++) {\n    var tags = tagsArray[j];\n\n    // Iterate over all the servers\n    for (var i = 0; i < servers.length; i++) {\n      var serverTag = servers[i].lastIsMaster().tags || {};\n\n      // Did we find the a matching server\n      var found = true;\n      // Check if the server is valid\n      for (var name in tags) {\n        if (serverTag[name] !== tags[name]) {\n          found = false;\n        }\n      }\n\n      // Add to candidate list\n      if (found) {\n        filteredServers.push(servers[i]);\n      }\n    }\n  }\n\n  // Returned filtered servers\n  return filteredServers;\n};\n\nfunction pickNearestMaxStalenessSeconds(self, readPreference) {\n  // Only get primary and secondaries as seeds\n  var servers = [];\n\n  // Get the maxStalenessMS\n  var maxStalenessMS = readPreference.maxStalenessSeconds * 1000;\n\n  // Check if the maxStalenessMS > 90 seconds\n  if (maxStalenessMS < 90 * 1000) {\n    return new MongoError('maxStalenessSeconds must be set to at least 90 seconds');\n  }\n\n  // Add primary to list if not a secondary read preference\n  if (\n    self.primary &&\n    readPreference.preference !== 'secondary' &&\n    readPreference.preference !== 'secondaryPreferred'\n  ) {\n    servers.push(self.primary);\n  }\n\n  // Add all the secondaries\n  for (var i = 0; i < self.secondaries.length; i++) {\n    servers.push(self.secondaries[i]);\n  }\n\n  // If we have a secondaryPreferred readPreference and no server add the primary\n  if (self.primary && servers.length === 0 && readPreference.preference !== 'secondaryPreferred') {\n    servers.push(self.primary);\n  }\n\n  // Filter by tags\n  servers = filterByTags(readPreference, servers);\n\n  // Filter by latency\n  servers = servers.filter(function(s) {\n    return s.staleness <= maxStalenessMS;\n  });\n\n  // Sort by time\n  servers.sort(function(a, b) {\n    return a.lastIsMasterMS - b.lastIsMasterMS;\n  });\n\n  // No servers, default to primary\n  if (servers.length === 0) {\n    return null;\n  }\n\n  // Ensure index does not overflow the number of available servers\n  self.index = self.index % servers.length;\n\n  // Get the server\n  var server = servers[self.index];\n  // Add to the index\n  self.index = self.index + 1;\n  // Return the first server of the sorted and filtered list\n  return server;\n}\n\nfunction pickNearest(self, readPreference) {\n  // Only get primary and secondaries as seeds\n  var servers = [];\n\n  // Add primary to list if not a secondary read preference\n  if (\n    self.primary &&\n    readPreference.preference !== 'secondary' &&\n    readPreference.preference !== 'secondaryPreferred'\n  ) {\n    servers.push(self.primary);\n  }\n\n  // Add all the secondaries\n  for (var i = 0; i < self.secondaries.length; i++) {\n    servers.push(self.secondaries[i]);\n  }\n\n  // If we have a secondaryPreferred readPreference and no server add the primary\n  if (servers.length === 0 && self.primary && readPreference.preference !== 'secondaryPreferred') {\n    servers.push(self.primary);\n  }\n\n  // Filter by tags\n  servers = filterByTags(readPreference, servers);\n\n  // Sort by time\n  servers.sort(function(a, b) {\n    return a.lastIsMasterMS - b.lastIsMasterMS;\n  });\n\n  // Locate lowest time (picked servers are lowest time + acceptable Latency margin)\n  var lowest = servers.length > 0 ? servers[0].lastIsMasterMS : 0;\n\n  // Filter by latency\n  servers = servers.filter(function(s) {\n    return s.lastIsMasterMS <= lowest + self.acceptableLatency;\n  });\n\n  // No servers, default to primary\n  if (servers.length === 0) {\n    return null;\n  }\n\n  // Ensure index does not overflow the number of available servers\n  self.index = self.index % servers.length;\n  // Get the server\n  var server = servers[self.index];\n  // Add to the index\n  self.index = self.index + 1;\n  // Return the first server of the sorted and filtered list\n  return server;\n}\n\nfunction inList(ismaster, server, list) {\n  for (var i = 0; i < list.length; i++) {\n    if (list[i] && list[i].name && list[i].name.toLowerCase() === server.name.toLowerCase())\n      return true;\n  }\n\n  return false;\n}\n\nfunction addToList(self, type, ismaster, server, list) {\n  var serverName = server.name.toLowerCase();\n  // Update set information about the server instance\n  self.set[serverName].type = type;\n  self.set[serverName].electionId = ismaster ? ismaster.electionId : ismaster;\n  self.set[serverName].setName = ismaster ? ismaster.setName : ismaster;\n  self.set[serverName].setVersion = ismaster ? ismaster.setVersion : ismaster;\n  // Add to the list\n  list.push(server);\n}\n\nfunction compareObjectIds(id1, id2) {\n  var a = Buffer.from(id1.toHexString(), 'hex');\n  var b = Buffer.from(id2.toHexString(), 'hex');\n\n  if (a === b) {\n    return 0;\n  }\n\n  if (typeof Buffer.compare === 'function') {\n    return Buffer.compare(a, b);\n  }\n\n  var x = a.length;\n  var y = b.length;\n  var len = Math.min(x, y);\n\n  for (var i = 0; i < len; i++) {\n    if (a[i] !== b[i]) {\n      break;\n    }\n  }\n\n  if (i !== len) {\n    x = a[i];\n    y = b[i];\n  }\n\n  return x < y ? -1 : y < x ? 1 : 0;\n}\n\nfunction removeFrom(server, list) {\n  for (var i = 0; i < list.length; i++) {\n    if (list[i].equals && list[i].equals(server)) {\n      list.splice(i, 1);\n      return true;\n    } else if (typeof list[i] === 'string' && list[i].toLowerCase() === server.name.toLowerCase()) {\n      list.splice(i, 1);\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction emitTopologyDescriptionChanged(self) {\n  if (self.listeners('topologyDescriptionChanged').length > 0) {\n    var topology = 'Unknown';\n    var setName = self.setName;\n\n    if (self.hasPrimaryAndSecondary()) {\n      topology = 'ReplicaSetWithPrimary';\n    } else if (!self.hasPrimary() && self.hasSecondary()) {\n      topology = 'ReplicaSetNoPrimary';\n    }\n\n    // Generate description\n    var description = {\n      topologyType: topology,\n      setName: setName,\n      servers: []\n    };\n\n    // Add the primary to the list\n    if (self.hasPrimary()) {\n      var desc = self.primary.getDescription();\n      desc.type = 'RSPrimary';\n      description.servers.push(desc);\n    }\n\n    // Add all the secondaries\n    description.servers = description.servers.concat(\n      self.secondaries.map(function(x) {\n        var description = x.getDescription();\n        description.type = 'RSSecondary';\n        return description;\n      })\n    );\n\n    // Add all the arbiters\n    description.servers = description.servers.concat(\n      self.arbiters.map(function(x) {\n        var description = x.getDescription();\n        description.type = 'RSArbiter';\n        return description;\n      })\n    );\n\n    // Add all the passives\n    description.servers = description.servers.concat(\n      self.passives.map(function(x) {\n        var description = x.getDescription();\n        description.type = 'RSSecondary';\n        return description;\n      })\n    );\n\n    // Get the diff\n    var diffResult = diff(self.replicasetDescription, description);\n\n    // Create the result\n    var result = {\n      topologyId: self.id,\n      previousDescription: self.replicasetDescription,\n      newDescription: description,\n      diff: diffResult\n    };\n\n    // Emit the topologyDescription change\n    // if(diffResult.servers.length > 0) {\n    self.emit('topologyDescriptionChanged', result);\n    // }\n\n    // Set the new description\n    self.replicasetDescription = description;\n  }\n}\n\nmodule.exports = ReplSetState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///90\n");

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst inherits = __webpack_require__(12).inherits;\nconst f = __webpack_require__(12).format;\nconst EventEmitter = __webpack_require__(39).EventEmitter;\nconst CoreCursor = __webpack_require__(82).CoreCursor;\nconst Logger = __webpack_require__(51);\nconst retrieveBSON = __webpack_require__(40).retrieveBSON;\nconst MongoError = __webpack_require__(37).MongoError;\nconst Server = __webpack_require__(52);\nconst clone = __webpack_require__(59).clone;\nconst diff = __webpack_require__(59).diff;\nconst cloneOptions = __webpack_require__(59).cloneOptions;\nconst createClientInfo = __webpack_require__(59).createClientInfo;\nconst SessionMixins = __webpack_require__(59).SessionMixins;\nconst isRetryableWritesSupported = __webpack_require__(59).isRetryableWritesSupported;\nconst relayEvents = __webpack_require__(35).relayEvents;\nconst isRetryableError = __webpack_require__(37).isRetryableError;\nconst BSON = retrieveBSON();\nconst getMMAPError = __webpack_require__(59).getMMAPError;\n\n/**\n * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is\n * used to construct connections.\n */\n\n//\n// States\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar UNREFERENCED = 'unreferenced';\nvar DESTROYING = 'destroying';\nvar DESTROYED = 'destroyed';\n\nfunction stateTransition(self, newState) {\n  var legalTransitions = {\n    disconnected: [CONNECTING, DESTROYING, DESTROYED, DISCONNECTED],\n    connecting: [CONNECTING, DESTROYING, DESTROYED, CONNECTED, DISCONNECTED],\n    connected: [CONNECTED, DISCONNECTED, DESTROYING, DESTROYED, UNREFERENCED],\n    unreferenced: [UNREFERENCED, DESTROYING, DESTROYED],\n    destroyed: [DESTROYED]\n  };\n\n  // Get current state\n  var legalStates = legalTransitions[self.state];\n  if (legalStates && legalStates.indexOf(newState) !== -1) {\n    self.state = newState;\n  } else {\n    self.s.logger.error(\n      f(\n        'Mongos with id [%s] failed attempted illegal state transition from [%s] to [%s] only following state allowed [%s]',\n        self.id,\n        self.state,\n        newState,\n        legalStates\n      )\n    );\n  }\n}\n\n//\n// ReplSet instance id\nvar id = 1;\nvar handlers = ['connect', 'close', 'error', 'timeout', 'parseError'];\n\n/**\n * Creates a new Mongos instance\n * @class\n * @param {array} seedlist A list of seeds for the replicaset\n * @param {number} [options.haInterval=5000] The High availability period for replicaset inquiry\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\n * @param {number} [options.localThresholdMS=15] Cutoff latency point in MS for MongoS proxy selection\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=1000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology\n * @return {Mongos} A cursor instance\n * @fires Mongos#connect\n * @fires Mongos#reconnect\n * @fires Mongos#joined\n * @fires Mongos#left\n * @fires Mongos#failed\n * @fires Mongos#fullsetup\n * @fires Mongos#all\n * @fires Mongos#serverHeartbeatStarted\n * @fires Mongos#serverHeartbeatSucceeded\n * @fires Mongos#serverHeartbeatFailed\n * @fires Mongos#topologyOpening\n * @fires Mongos#topologyClosed\n * @fires Mongos#topologyDescriptionChanged\n * @property {string} type the topology type.\n * @property {string} parserType the parser type used (c++ or js).\n */\nvar Mongos = function(seedlist, options) {\n  options = options || {};\n\n  // Get replSet Id\n  this.id = id++;\n\n  // Internal state\n  this.s = {\n    options: Object.assign({}, options),\n    // BSON instance\n    bson:\n      options.bson ||\n      new BSON([\n        BSON.Binary,\n        BSON.Code,\n        BSON.DBRef,\n        BSON.Decimal128,\n        BSON.Double,\n        BSON.Int32,\n        BSON.Long,\n        BSON.Map,\n        BSON.MaxKey,\n        BSON.MinKey,\n        BSON.ObjectId,\n        BSON.BSONRegExp,\n        BSON.Symbol,\n        BSON.Timestamp\n      ]),\n    // Factory overrides\n    Cursor: options.cursorFactory || CoreCursor,\n    // Logger instance\n    logger: Logger('Mongos', options),\n    // Seedlist\n    seedlist: seedlist,\n    // Ha interval\n    haInterval: options.haInterval ? options.haInterval : 10000,\n    // Disconnect handler\n    disconnectHandler: options.disconnectHandler,\n    // Server selection index\n    index: 0,\n    // Connect function options passed in\n    connectOptions: {},\n    // Are we running in debug mode\n    debug: typeof options.debug === 'boolean' ? options.debug : false,\n    // localThresholdMS\n    localThresholdMS: options.localThresholdMS || 15,\n    // Client info\n    clientInfo: createClientInfo(options)\n  };\n\n  // Set the client info\n  this.s.options.clientInfo = createClientInfo(options);\n\n  // Log info warning if the socketTimeout < haInterval as it will cause\n  // a lot of recycled connections to happen.\n  if (\n    this.s.logger.isWarn() &&\n    this.s.options.socketTimeout !== 0 &&\n    this.s.options.socketTimeout < this.s.haInterval\n  ) {\n    this.s.logger.warn(\n      f(\n        'warning socketTimeout %s is less than haInterval %s. This might cause unnecessary server reconnections due to socket timeouts',\n        this.s.options.socketTimeout,\n        this.s.haInterval\n      )\n    );\n  }\n\n  // Disconnected state\n  this.state = DISCONNECTED;\n\n  // Current proxies we are connecting to\n  this.connectingProxies = [];\n  // Currently connected proxies\n  this.connectedProxies = [];\n  // Disconnected proxies\n  this.disconnectedProxies = [];\n  // Index of proxy to run operations against\n  this.index = 0;\n  // High availability timeout id\n  this.haTimeoutId = null;\n  // Last ismaster\n  this.ismaster = null;\n\n  // Description of the Replicaset\n  this.topologyDescription = {\n    topologyType: 'Unknown',\n    servers: []\n  };\n\n  // Highest clusterTime seen in responses from the current deployment\n  this.clusterTime = null;\n\n  // Add event listener\n  EventEmitter.call(this);\n};\n\ninherits(Mongos, EventEmitter);\nObject.assign(Mongos.prototype, SessionMixins);\n\nObject.defineProperty(Mongos.prototype, 'type', {\n  enumerable: true,\n  get: function() {\n    return 'mongos';\n  }\n});\n\nObject.defineProperty(Mongos.prototype, 'parserType', {\n  enumerable: true,\n  get: function() {\n    return BSON.native ? 'c++' : 'js';\n  }\n});\n\nObject.defineProperty(Mongos.prototype, 'logicalSessionTimeoutMinutes', {\n  enumerable: true,\n  get: function() {\n    if (!this.ismaster) return null;\n    return this.ismaster.logicalSessionTimeoutMinutes || null;\n  }\n});\n\n/**\n * Emit event if it exists\n * @method\n */\nfunction emitSDAMEvent(self, event, description) {\n  if (self.listeners(event).length > 0) {\n    self.emit(event, description);\n  }\n}\n\nconst SERVER_EVENTS = ['serverDescriptionChanged', 'error', 'close', 'timeout', 'parseError'];\nfunction destroyServer(server, options, callback) {\n  options = options || {};\n  SERVER_EVENTS.forEach(event => server.removeAllListeners(event));\n  server.destroy(options, callback);\n}\n\n/**\n * Initiate server connect\n */\nMongos.prototype.connect = function(options) {\n  var self = this;\n  // Add any connect level options to the internal state\n  this.s.connectOptions = options || {};\n\n  // Set connecting state\n  stateTransition(this, CONNECTING);\n\n  // Create server instances\n  var servers = this.s.seedlist.map(function(x) {\n    const server = new Server(\n      Object.assign({}, self.s.options, x, options, {\n        reconnect: false,\n        monitoring: false,\n        parent: self,\n        clientInfo: clone(self.s.clientInfo)\n      })\n    );\n\n    relayEvents(server, self, ['serverDescriptionChanged']);\n    return server;\n  });\n\n  // Emit the topology opening event\n  emitSDAMEvent(this, 'topologyOpening', { topologyId: this.id });\n\n  // Start all server connections\n  connectProxies(self, servers);\n};\n\n/**\n * Authenticate the topology.\n * @method\n * @param {MongoCredentials} credentials The credentials for authentication we are using\n * @param {authResultCallback} callback A callback function\n */\nMongos.prototype.auth = function(credentials, callback) {\n  if (typeof callback === 'function') callback(null, null);\n};\n\nfunction handleEvent(self) {\n  return function() {\n    if (self.state === DESTROYED || self.state === DESTROYING) {\n      return;\n    }\n\n    // Move to list of disconnectedProxies\n    moveServerFrom(self.connectedProxies, self.disconnectedProxies, this);\n    // Emit the initial topology\n    emitTopologyDescriptionChanged(self);\n    // Emit the left signal\n    self.emit('left', 'mongos', this);\n    // Emit the sdam event\n    self.emit('serverClosed', {\n      topologyId: self.id,\n      address: this.name\n    });\n  };\n}\n\nfunction handleInitialConnectEvent(self, event) {\n  return function() {\n    var _this = this;\n\n    // Destroy the instance\n    if (self.state === DESTROYED) {\n      // Emit the initial topology\n      emitTopologyDescriptionChanged(self);\n      // Move from connectingProxies\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this);\n      return this.destroy();\n    }\n\n    // Check the type of server\n    if (event === 'connect') {\n      // Get last known ismaster\n      self.ismaster = _this.lastIsMaster();\n\n      // Is this not a proxy, remove t\n      if (self.ismaster.msg === 'isdbgrid') {\n        // Add to the connectd list\n        for (let i = 0; i < self.connectedProxies.length; i++) {\n          if (self.connectedProxies[i].name === _this.name) {\n            // Move from connectingProxies\n            moveServerFrom(self.connectingProxies, self.disconnectedProxies, _this);\n            // Emit the initial topology\n            emitTopologyDescriptionChanged(self);\n            _this.destroy();\n            return self.emit('failed', _this);\n          }\n        }\n\n        // Remove the handlers\n        for (let i = 0; i < handlers.length; i++) {\n          _this.removeAllListeners(handlers[i]);\n        }\n\n        // Add stable state handlers\n        _this.on('error', handleEvent(self, 'error'));\n        _this.on('close', handleEvent(self, 'close'));\n        _this.on('timeout', handleEvent(self, 'timeout'));\n        _this.on('parseError', handleEvent(self, 'parseError'));\n\n        // Move from connecting proxies connected\n        moveServerFrom(self.connectingProxies, self.connectedProxies, _this);\n        // Emit the joined event\n        self.emit('joined', 'mongos', _this);\n      } else {\n        // Print warning if we did not find a mongos proxy\n        if (self.s.logger.isWarn()) {\n          var message = 'expected mongos proxy, but found replicaset member mongod for server %s';\n          // We have a standalone server\n          if (!self.ismaster.hosts) {\n            message = 'expected mongos proxy, but found standalone mongod for server %s';\n          }\n\n          self.s.logger.warn(f(message, _this.name));\n        }\n\n        // This is not a mongos proxy, destroy and remove it completely\n        _this.destroy(true);\n        removeProxyFrom(self.connectingProxies, _this);\n        // Emit the left event\n        self.emit('left', 'server', _this);\n        // Emit failed event\n        self.emit('failed', _this);\n      }\n    } else {\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this);\n      // Emit the left event\n      self.emit('left', 'mongos', this);\n      // Emit failed event\n      self.emit('failed', this);\n    }\n\n    // Emit the initial topology\n    emitTopologyDescriptionChanged(self);\n\n    // Trigger topologyMonitor\n    if (self.connectingProxies.length === 0) {\n      // Emit connected if we are connected\n      if (self.connectedProxies.length > 0 && self.state === CONNECTING) {\n        // Set the state to connected\n        stateTransition(self, CONNECTED);\n        // Emit the connect event\n        self.emit('connect', self);\n        self.emit('fullsetup', self);\n        self.emit('all', self);\n      } else if (self.disconnectedProxies.length === 0) {\n        // Print warning if we did not find a mongos proxy\n        if (self.s.logger.isWarn()) {\n          self.s.logger.warn(\n            f('no mongos proxies found in seed list, did you mean to connect to a replicaset')\n          );\n        }\n\n        // Emit the error that no proxies were found\n        return self.emit('error', new MongoError('no mongos proxies found in seed list'));\n      }\n\n      // Topology monitor\n      topologyMonitor(self, { firstConnect: true });\n    }\n  };\n}\n\nfunction connectProxies(self, servers) {\n  // Update connectingProxies\n  self.connectingProxies = self.connectingProxies.concat(servers);\n\n  // Index used to interleaf the server connects, avoiding\n  // runtime issues on io constrained vm's\n  var timeoutInterval = 0;\n\n  function connect(server, timeoutInterval) {\n    setTimeout(function() {\n      // Emit opening server event\n      self.emit('serverOpening', {\n        topologyId: self.id,\n        address: server.name\n      });\n\n      // Emit the initial topology\n      emitTopologyDescriptionChanged(self);\n\n      // Add event handlers\n      server.once('close', handleInitialConnectEvent(self, 'close'));\n      server.once('timeout', handleInitialConnectEvent(self, 'timeout'));\n      server.once('parseError', handleInitialConnectEvent(self, 'parseError'));\n      server.once('error', handleInitialConnectEvent(self, 'error'));\n      server.once('connect', handleInitialConnectEvent(self, 'connect'));\n\n      // Command Monitoring events\n      relayEvents(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);\n\n      // Start connection\n      server.connect(self.s.connectOptions);\n    }, timeoutInterval);\n  }\n\n  // Start all the servers\n  servers.forEach(server => connect(server, timeoutInterval++));\n}\n\nfunction pickProxy(self, session) {\n  // TODO: Destructure :)\n  const transaction = session && session.transaction;\n\n  if (transaction && transaction.server) {\n    if (transaction.server.isConnected()) {\n      return transaction.server;\n    } else {\n      transaction.unpinServer();\n    }\n  }\n\n  // Get the currently connected Proxies\n  var connectedProxies = self.connectedProxies.slice(0);\n\n  // Set lower bound\n  var lowerBoundLatency = Number.MAX_VALUE;\n\n  // Determine the lower bound for the Proxies\n  for (var i = 0; i < connectedProxies.length; i++) {\n    if (connectedProxies[i].lastIsMasterMS < lowerBoundLatency) {\n      lowerBoundLatency = connectedProxies[i].lastIsMasterMS;\n    }\n  }\n\n  // Filter out the possible servers\n  connectedProxies = connectedProxies.filter(function(server) {\n    if (\n      server.lastIsMasterMS <= lowerBoundLatency + self.s.localThresholdMS &&\n      server.isConnected()\n    ) {\n      return true;\n    }\n  });\n\n  let proxy;\n\n  // We have no connectedProxies pick first of the connected ones\n  if (connectedProxies.length === 0) {\n    proxy = self.connectedProxies[0];\n  } else {\n    // Get proxy\n    proxy = connectedProxies[self.index % connectedProxies.length];\n    // Update the index\n    self.index = (self.index + 1) % connectedProxies.length;\n  }\n\n  if (transaction && transaction.isActive && proxy && proxy.isConnected()) {\n    transaction.pinServer(proxy);\n  }\n\n  // Return the proxy\n  return proxy;\n}\n\nfunction moveServerFrom(from, to, proxy) {\n  for (var i = 0; i < from.length; i++) {\n    if (from[i].name === proxy.name) {\n      from.splice(i, 1);\n    }\n  }\n\n  for (i = 0; i < to.length; i++) {\n    if (to[i].name === proxy.name) {\n      to.splice(i, 1);\n    }\n  }\n\n  to.push(proxy);\n}\n\nfunction removeProxyFrom(from, proxy) {\n  for (var i = 0; i < from.length; i++) {\n    if (from[i].name === proxy.name) {\n      from.splice(i, 1);\n    }\n  }\n}\n\nfunction reconnectProxies(self, proxies, callback) {\n  // Count lefts\n  var count = proxies.length;\n\n  // Handle events\n  var _handleEvent = function(self, event) {\n    return function() {\n      var _self = this;\n      count = count - 1;\n\n      // Destroyed\n      if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n        return this.destroy();\n      }\n\n      if (event === 'connect') {\n        // Destroyed\n        if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n          moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n          return _self.destroy();\n        }\n\n        // Remove the handlers\n        for (var i = 0; i < handlers.length; i++) {\n          _self.removeAllListeners(handlers[i]);\n        }\n\n        // Add stable state handlers\n        _self.on('error', handleEvent(self, 'error'));\n        _self.on('close', handleEvent(self, 'close'));\n        _self.on('timeout', handleEvent(self, 'timeout'));\n        _self.on('parseError', handleEvent(self, 'parseError'));\n\n        // Move to the connected servers\n        moveServerFrom(self.connectingProxies, self.connectedProxies, _self);\n        // Emit topology Change\n        emitTopologyDescriptionChanged(self);\n        // Emit joined event\n        self.emit('joined', 'mongos', _self);\n      } else {\n        // Move from connectingProxies\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n        this.destroy();\n      }\n\n      // Are we done finish up callback\n      if (count === 0) {\n        callback();\n      }\n    };\n  };\n\n  // No new servers\n  if (count === 0) {\n    return callback();\n  }\n\n  // Execute method\n  function execute(_server, i) {\n    setTimeout(function() {\n      // Destroyed\n      if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n        return;\n      }\n\n      // Create a new server instance\n      var server = new Server(\n        Object.assign({}, self.s.options, {\n          host: _server.name.split(':')[0],\n          port: parseInt(_server.name.split(':')[1], 10),\n          reconnect: false,\n          monitoring: false,\n          parent: self,\n          clientInfo: clone(self.s.clientInfo)\n        })\n      );\n\n      destroyServer(_server, { force: true });\n      removeProxyFrom(self.disconnectedProxies, _server);\n\n      // Relay the server description change\n      relayEvents(server, self, ['serverDescriptionChanged']);\n\n      // Emit opening server event\n      self.emit('serverOpening', {\n        topologyId: server.s.topologyId !== -1 ? server.s.topologyId : self.id,\n        address: server.name\n      });\n\n      // Add temp handlers\n      server.once('connect', _handleEvent(self, 'connect'));\n      server.once('close', _handleEvent(self, 'close'));\n      server.once('timeout', _handleEvent(self, 'timeout'));\n      server.once('error', _handleEvent(self, 'error'));\n      server.once('parseError', _handleEvent(self, 'parseError'));\n\n      // Command Monitoring events\n      relayEvents(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);\n\n      // Connect to proxy\n      self.connectingProxies.push(server);\n      server.connect(self.s.connectOptions);\n    }, i);\n  }\n\n  // Create new instances\n  for (var i = 0; i < proxies.length; i++) {\n    execute(proxies[i], i);\n  }\n}\n\nfunction topologyMonitor(self, options) {\n  options = options || {};\n\n  // no need to set up the monitor if we're already closed\n  if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n    return;\n  }\n\n  // Set momitoring timeout\n  self.haTimeoutId = setTimeout(function() {\n    if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n      return;\n    }\n\n    // If we have a primary and a disconnect handler, execute\n    // buffered operations\n    if (self.isConnected() && self.s.disconnectHandler) {\n      self.s.disconnectHandler.execute();\n    }\n\n    // Get the connectingServers\n    var proxies = self.connectedProxies.slice(0);\n    // Get the count\n    var count = proxies.length;\n\n    // If the count is zero schedule a new fast\n    function pingServer(_self, _server, cb) {\n      // Measure running time\n      var start = new Date().getTime();\n\n      // Emit the server heartbeat start\n      emitSDAMEvent(self, 'serverHeartbeatStarted', { connectionId: _server.name });\n\n      // Execute ismaster\n      _server.command(\n        'admin.$cmd',\n        {\n          ismaster: true\n        },\n        {\n          monitoring: true,\n          socketTimeout: self.s.options.connectionTimeout || 2000\n        },\n        function(err, r) {\n          if (\n            self.state === DESTROYED ||\n            self.state === DESTROYING ||\n            self.state === UNREFERENCED\n          ) {\n            // Move from connectingProxies\n            moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\n            _server.destroy();\n            return cb(err, r);\n          }\n\n          // Calculate latency\n          var latencyMS = new Date().getTime() - start;\n\n          // We had an error, remove it from the state\n          if (err) {\n            // Emit the server heartbeat failure\n            emitSDAMEvent(self, 'serverHeartbeatFailed', {\n              durationMS: latencyMS,\n              failure: err,\n              connectionId: _server.name\n            });\n            // Move from connected proxies to disconnected proxies\n            moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\n          } else {\n            // Update the server ismaster\n            _server.ismaster = r.result;\n            _server.lastIsMasterMS = latencyMS;\n\n            // Server heart beat event\n            emitSDAMEvent(self, 'serverHeartbeatSucceeded', {\n              durationMS: latencyMS,\n              reply: r.result,\n              connectionId: _server.name\n            });\n          }\n\n          cb(err, r);\n        }\n      );\n    }\n\n    // No proxies initiate monitor again\n    if (proxies.length === 0) {\n      // Emit close event if any listeners registered\n      if (self.listeners('close').length > 0 && self.state === CONNECTING) {\n        self.emit('error', new MongoError('no mongos proxy available'));\n      } else {\n        self.emit('close', self);\n      }\n\n      // Attempt to connect to any unknown servers\n      return reconnectProxies(self, self.disconnectedProxies, function() {\n        if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n          return;\n        }\n\n        // Are we connected ? emit connect event\n        if (self.state === CONNECTING && options.firstConnect) {\n          self.emit('connect', self);\n          self.emit('fullsetup', self);\n          self.emit('all', self);\n        } else if (self.isConnected()) {\n          self.emit('reconnect', self);\n        } else if (!self.isConnected() && self.listeners('close').length > 0) {\n          self.emit('close', self);\n        }\n\n        // Perform topology monitor\n        topologyMonitor(self);\n      });\n    }\n\n    // Ping all servers\n    for (var i = 0; i < proxies.length; i++) {\n      pingServer(self, proxies[i], function() {\n        count = count - 1;\n\n        if (count === 0) {\n          if (\n            self.state === DESTROYED ||\n            self.state === DESTROYING ||\n            self.state === UNREFERENCED\n          ) {\n            return;\n          }\n\n          // Attempt to connect to any unknown servers\n          reconnectProxies(self, self.disconnectedProxies, function() {\n            if (\n              self.state === DESTROYED ||\n              self.state === DESTROYING ||\n              self.state === UNREFERENCED\n            ) {\n              return;\n            }\n\n            // Perform topology monitor\n            topologyMonitor(self);\n          });\n        }\n      });\n    }\n  }, self.s.haInterval);\n}\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nMongos.prototype.lastIsMaster = function() {\n  return this.ismaster;\n};\n\n/**\n * Unref all connections belong to this server\n * @method\n */\nMongos.prototype.unref = function() {\n  // Transition state\n  stateTransition(this, UNREFERENCED);\n  // Get all proxies\n  var proxies = this.connectedProxies.concat(this.connectingProxies);\n  proxies.forEach(function(x) {\n    x.unref();\n  });\n\n  clearTimeout(this.haTimeoutId);\n};\n\n/**\n * Destroy the server connection\n * @param {boolean} [options.force=false] Force destroy the pool\n * @method\n */\nMongos.prototype.destroy = function(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  stateTransition(this, DESTROYING);\n  if (this.haTimeoutId) {\n    clearTimeout(this.haTimeoutId);\n  }\n\n  const proxies = this.connectedProxies.concat(this.connectingProxies);\n  let serverCount = proxies.length;\n  const serverDestroyed = () => {\n    serverCount--;\n    if (serverCount > 0) {\n      return;\n    }\n\n    emitTopologyDescriptionChanged(this);\n    emitSDAMEvent(this, 'topologyClosed', { topologyId: this.id });\n    stateTransition(this, DESTROYED);\n    if (typeof callback === 'function') {\n      callback(null, null);\n    }\n  };\n\n  if (serverCount === 0) {\n    serverDestroyed();\n    return;\n  }\n\n  // Destroy all connecting servers\n  proxies.forEach(server => {\n    // Emit the sdam event\n    this.emit('serverClosed', {\n      topologyId: this.id,\n      address: server.name\n    });\n\n    destroyServer(server, options, serverDestroyed);\n    moveServerFrom(this.connectedProxies, this.disconnectedProxies, server);\n  });\n};\n\n/**\n * Figure out if the server is connected\n * @method\n * @return {boolean}\n */\nMongos.prototype.isConnected = function() {\n  return this.connectedProxies.length > 0;\n};\n\n/**\n * Figure out if the server instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\nMongos.prototype.isDestroyed = function() {\n  return this.state === DESTROYED;\n};\n\n//\n// Operations\n//\n\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // TODO: once we drop Node 4, use destructuring either here or in arguments.\n  const self = args.self;\n  const op = args.op;\n  const ns = args.ns;\n  const ops = args.ops;\n\n  // Pick a server\n  let server = pickProxy(self, options.session);\n  // No server found error out\n  if (!server) return callback(new MongoError('no mongos proxy available'));\n\n  const willRetryWrite =\n    !args.retrying &&\n    !!options.retryWrites &&\n    options.session &&\n    isRetryableWritesSupported(self) &&\n    !options.session.inTransaction();\n\n  const handler = (err, result) => {\n    if (!err) return callback(null, result);\n    if (!isRetryableError(err) || !willRetryWrite) {\n      err = getMMAPError(err);\n      return callback(err);\n    }\n\n    // Pick another server\n    server = pickProxy(self, options.session);\n\n    // No server found error out with original error\n    if (!server) {\n      return callback(err);\n    }\n\n    const newArgs = Object.assign({}, args, { retrying: true });\n    return executeWriteOperation(newArgs, options, callback);\n  };\n\n  if (callback.operationId) {\n    handler.operationId = callback.operationId;\n  }\n\n  // increment and assign txnNumber\n  if (willRetryWrite) {\n    options.session.incrementTransactionNumber();\n    options.willRetryWrite = willRetryWrite;\n  }\n\n  // rerun the operation\n  server[op](ns, ops, options, handler);\n}\n\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.insert = function(ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  }\n\n  // Not connected but we have a disconnecthandler\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('insert', ns, ops, options, callback);\n  }\n\n  // No mongos proxy available\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Execute write operation\n  executeWriteOperation({ self: this, op: 'insert', ns, ops }, options, callback);\n};\n\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.update = function(ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  }\n\n  // Not connected but we have a disconnecthandler\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('update', ns, ops, options, callback);\n  }\n\n  // No mongos proxy available\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Execute write operation\n  executeWriteOperation({ self: this, op: 'update', ns, ops }, options, callback);\n};\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.remove = function(ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  }\n\n  // Not connected but we have a disconnecthandler\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('remove', ns, ops, options, callback);\n  }\n\n  // No mongos proxy available\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Execute write operation\n  executeWriteOperation({ self: this, op: 'remove', ns, ops }, options, callback);\n};\n\nconst RETRYABLE_WRITE_OPERATIONS = ['findAndModify', 'insert', 'update', 'delete'];\n\nfunction isWriteCommand(command) {\n  return RETRYABLE_WRITE_OPERATIONS.some(op => command[op]);\n}\n\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Connection} [options.connection] Specify connection object to execute command against\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.command = function(ns, cmd, options, callback) {\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  }\n\n  var self = this;\n\n  // Pick a proxy\n  var server = pickProxy(self, options.session);\n\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if ((server == null || !server.isConnected()) && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  }\n\n  // No server returned we had an error\n  if (server == null) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Cloned options\n  var clonedOptions = cloneOptions(options);\n  clonedOptions.topology = self;\n\n  const willRetryWrite =\n    !options.retrying &&\n    options.retryWrites &&\n    options.session &&\n    isRetryableWritesSupported(self) &&\n    !options.session.inTransaction() &&\n    isWriteCommand(cmd);\n\n  const cb = (err, result) => {\n    if (!err) return callback(null, result);\n    if (!isRetryableError(err)) {\n      return callback(err);\n    }\n\n    if (willRetryWrite) {\n      const newOptions = Object.assign({}, clonedOptions, { retrying: true });\n      return this.command(ns, cmd, newOptions, callback);\n    }\n\n    return callback(err);\n  };\n\n  // increment and assign txnNumber\n  if (willRetryWrite) {\n    options.session.incrementTransactionNumber();\n    options.willRetryWrite = willRetryWrite;\n  }\n\n  // Execute the command\n  server.command(ns, cmd, clonedOptions, cb);\n};\n\n/**\n * Get a new cursor\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options] Options for the cursor\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {object} [options.topology] The internal topology of the created cursor\n * @returns {Cursor}\n */\nMongos.prototype.cursor = function(ns, cmd, options) {\n  options = options || {};\n  const topology = options.topology || this;\n\n  // Set up final cursor type\n  var FinalCursor = options.cursorFactory || this.s.Cursor;\n\n  // Return the cursor\n  return new FinalCursor(topology, ns, cmd, options);\n};\n\n/**\n * Selects a server\n *\n * @method\n * @param {function} selector Unused\n * @param {ReadPreference} [options.readPreference] Unused\n * @param {ClientSession} [options.session] Specify a session if it is being used\n * @param {function} callback\n */\nMongos.prototype.selectServer = function(selector, options, callback) {\n  if (typeof selector === 'function' && typeof callback === 'undefined')\n    (callback = selector), (selector = undefined), (options = {});\n  if (typeof options === 'function')\n    (callback = options), (options = selector), (selector = undefined);\n  options = options || {};\n\n  const server = pickProxy(this, options.session);\n  if (server == null) {\n    callback(new MongoError('server selection failed'));\n    return;\n  }\n\n  if (this.s.debug) this.emit('pickedServer', null, server);\n  callback(null, server);\n};\n\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\nMongos.prototype.connections = function() {\n  var connections = [];\n\n  for (var i = 0; i < this.connectedProxies.length; i++) {\n    connections = connections.concat(this.connectedProxies[i].connections());\n  }\n\n  return connections;\n};\n\nfunction emitTopologyDescriptionChanged(self) {\n  if (self.listeners('topologyDescriptionChanged').length > 0) {\n    var topology = 'Unknown';\n    if (self.connectedProxies.length > 0) {\n      topology = 'Sharded';\n    }\n\n    // Generate description\n    var description = {\n      topologyType: topology,\n      servers: []\n    };\n\n    // All proxies\n    var proxies = self.disconnectedProxies.concat(self.connectingProxies);\n\n    // Add all the disconnected proxies\n    description.servers = description.servers.concat(\n      proxies.map(function(x) {\n        var description = x.getDescription();\n        description.type = 'Unknown';\n        return description;\n      })\n    );\n\n    // Add all the connected proxies\n    description.servers = description.servers.concat(\n      self.connectedProxies.map(function(x) {\n        var description = x.getDescription();\n        description.type = 'Mongos';\n        return description;\n      })\n    );\n\n    // Get the diff\n    var diffResult = diff(self.topologyDescription, description);\n\n    // Create the result\n    var result = {\n      topologyId: self.id,\n      previousDescription: self.topologyDescription,\n      newDescription: description,\n      diff: diffResult\n    };\n\n    // Emit the topologyDescription change\n    if (diffResult.servers.length > 0) {\n      self.emit('topologyDescriptionChanged', result);\n    }\n\n    // Set the new description\n    self.topologyDescription = description;\n  }\n}\n\n/**\n * A mongos connect event, used to verify that the connection is up and running\n *\n * @event Mongos#connect\n * @type {Mongos}\n */\n\n/**\n * A mongos reconnect event, used to verify that the mongos topology has reconnected\n *\n * @event Mongos#reconnect\n * @type {Mongos}\n */\n\n/**\n * A mongos fullsetup event, used to signal that all topology members have been contacted.\n *\n * @event Mongos#fullsetup\n * @type {Mongos}\n */\n\n/**\n * A mongos all event, used to signal that all topology members have been contacted.\n *\n * @event Mongos#all\n * @type {Mongos}\n */\n\n/**\n * A server member left the mongos list\n *\n * @event Mongos#left\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the mongos list\n *\n * @event Mongos#joined\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that joined\n */\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event Mongos#serverOpening\n * @type {object}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Mongos#serverClosed\n * @type {object}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Mongos#serverDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Mongos#topologyOpening\n * @type {object}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Mongos#topologyClosed\n * @type {object}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Mongos#topologyDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event Mongos#serverHeartbeatStarted\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event Mongos#serverHeartbeatFailed\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event Mongos#serverHeartbeatSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command was started, if command monitoring is enabled\n *\n * @event Mongos#commandStarted\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command succeeded, if command monitoring is enabled\n *\n * @event Mongos#commandSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command failed, if command monitoring is enabled\n *\n * @event Mongos#commandFailed\n * @type {object}\n */\n\nmodule.exports = Mongos;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///91\n");

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst EventEmitter = __webpack_require__(39);\nconst ServerDescription = __webpack_require__(43).ServerDescription;\nconst ServerType = __webpack_require__(43).ServerType;\nconst TopologyDescription = __webpack_require__(44).TopologyDescription;\nconst TopologyType = __webpack_require__(44).TopologyType;\nconst monitoring = __webpack_require__(93);\nconst calculateDurationInMs = __webpack_require__(35).calculateDurationInMs;\nconst MongoTimeoutError = __webpack_require__(37).MongoTimeoutError;\nconst Server = __webpack_require__(94);\nconst relayEvents = __webpack_require__(35).relayEvents;\nconst ReadPreference = __webpack_require__(42);\nconst readPreferenceServerSelector = __webpack_require__(95).readPreferenceServerSelector;\nconst writableServerSelector = __webpack_require__(95).writableServerSelector;\nconst isRetryableWritesSupported = __webpack_require__(59).isRetryableWritesSupported;\nconst CoreCursor = __webpack_require__(82).CoreCursor;\nconst deprecate = __webpack_require__(12).deprecate;\nconst BSON = __webpack_require__(40).retrieveBSON();\nconst createCompressionInfo = __webpack_require__(59).createCompressionInfo;\nconst isRetryableError = __webpack_require__(37).isRetryableError;\nconst isSDAMUnrecoverableError = __webpack_require__(37).isSDAMUnrecoverableError;\nconst ClientSession = __webpack_require__(74).ClientSession;\nconst createClientInfo = __webpack_require__(59).createClientInfo;\nconst MongoError = __webpack_require__(37).MongoError;\nconst resolveClusterTime = __webpack_require__(59).resolveClusterTime;\nconst SrvPoller = __webpack_require__(96).SrvPoller;\nconst getMMAPError = __webpack_require__(59).getMMAPError;\n\n// Global state\nlet globalTopologyCounter = 0;\n\n// Constants\nconst TOPOLOGY_DEFAULTS = {\n  localThresholdMS: 15,\n  serverSelectionTimeoutMS: 30000,\n  heartbeatFrequencyMS: 10000,\n  minHeartbeatFrequencyMS: 500\n};\n\n// events that we relay to the `Topology`\nconst SERVER_RELAY_EVENTS = [\n  'serverHeartbeatStarted',\n  'serverHeartbeatSucceeded',\n  'serverHeartbeatFailed',\n  'commandStarted',\n  'commandSucceeded',\n  'commandFailed',\n\n  // NOTE: Legacy events\n  'monitoring'\n];\n\n// all events we listen to from `Server` instances\nconst LOCAL_SERVER_EVENTS = SERVER_RELAY_EVENTS.concat([\n  'error',\n  'connect',\n  'descriptionReceived',\n  'close',\n  'ended'\n]);\n\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n *\n * @fires Topology#serverOpening\n * @fires Topology#serverClosed\n * @fires Topology#serverDescriptionChanged\n * @fires Topology#topologyOpening\n * @fires Topology#topologyClosed\n * @fires Topology#topologyDescriptionChanged\n * @fires Topology#serverHeartbeatStarted\n * @fires Topology#serverHeartbeatSucceeded\n * @fires Topology#serverHeartbeatFailed\n */\nclass Topology extends EventEmitter {\n  /**\n   * Create a topology\n   *\n   * @param {Array|String} [seedlist] a string list, or array of Server instances to connect to\n   * @param {Object} [options] Optional settings\n   * @param {Number} [options.localThresholdMS=15] The size of the latency window for selecting among multiple suitable servers\n   * @param {Number} [options.serverSelectionTimeoutMS=30000] How long to block for server selection before throwing an error\n   * @param {Number} [options.heartbeatFrequencyMS=10000] The frequency with which topology updates are scheduled\n   */\n  constructor(seedlist, options) {\n    super();\n    if (typeof options === 'undefined' && typeof seedlist !== 'string') {\n      options = seedlist;\n      seedlist = [];\n\n      // this is for legacy single server constructor support\n      if (options.host) {\n        seedlist.push({ host: options.host, port: options.port });\n      }\n    }\n\n    seedlist = seedlist || [];\n    if (typeof seedlist === 'string') {\n      seedlist = parseStringSeedlist(seedlist);\n    }\n\n    options = Object.assign({}, TOPOLOGY_DEFAULTS, options);\n\n    const topologyType = topologyTypeFromSeedlist(seedlist, options);\n    const topologyId = globalTopologyCounter++;\n    const serverDescriptions = seedlist.reduce((result, seed) => {\n      if (seed.domain_socket) seed.host = seed.domain_socket;\n      const address = seed.port ? `${seed.host}:${seed.port}` : `${seed.host}:27017`;\n      result.set(address, new ServerDescription(address));\n      return result;\n    }, new Map());\n\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist: seedlist,\n      // the topology description\n      description: new TopologyDescription(\n        topologyType,\n        serverDescriptions,\n        options.replicaSet,\n        null,\n        null,\n        null,\n        options\n      ),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatIntervalMS: options.minHeartbeatIntervalMS,\n      // allow users to override the cursor factory\n      Cursor: options.cursorFactory || CoreCursor,\n      // the bson parser\n      bson:\n        options.bson ||\n        new BSON([\n          BSON.Binary,\n          BSON.Code,\n          BSON.DBRef,\n          BSON.Decimal128,\n          BSON.Double,\n          BSON.Int32,\n          BSON.Long,\n          BSON.Map,\n          BSON.MaxKey,\n          BSON.MinKey,\n          BSON.ObjectId,\n          BSON.BSONRegExp,\n          BSON.Symbol,\n          BSON.Timestamp\n        ]),\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      // Server Session Pool\n      sessionPool: null,\n      // Active client sessions\n      sessions: new Set(),\n      // Promise library\n      promiseLibrary: options.promiseLibrary || Promise,\n      credentials: options.credentials,\n      clusterTime: null,\n\n      // timer management\n      monitorTimers: [],\n      iterationTimers: []\n    };\n\n    // amend options for server instance creation\n    this.s.options.compression = { compressors: createCompressionInfo(options) };\n\n    // add client info\n    this.s.clientInfo = createClientInfo(options);\n\n    if (options.srvHost) {\n      this.s.srvPoller =\n        options.srvPoller ||\n        new SrvPoller({\n          heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n          srvHost: options.srvHost, // TODO: GET THIS\n          logger: options.logger,\n          loggerLevel: options.loggerLevel\n        });\n      this.s.detectTopologyDescriptionChange = ev => {\n        const previousType = ev.previousDescription.type;\n        const newType = ev.newDescription.type;\n\n        if (previousType !== TopologyType.Sharded && newType === TopologyType.Sharded) {\n          this.s.handleSrvPolling = srvPollingHandler(this);\n          this.s.srvPoller.on('srvRecordDiscovery', this.s.handleSrvPolling);\n          this.s.srvPoller.start();\n        }\n      };\n\n      this.on('topologyDescriptionChanged', this.s.detectTopologyDescriptionChange);\n    }\n  }\n\n  /**\n   * @return A `TopologyDescription` for this topology\n   */\n  get description() {\n    return this.s.description;\n  }\n\n  get parserType() {\n    return BSON.native ? 'c++' : 'js';\n  }\n\n  /**\n   * All raw connections\n   * @method\n   * @return {Connection[]}\n   */\n  connections() {\n    return Array.from(this.s.servers.values()).reduce((result, server) => {\n      return result.concat(server.s.pool.allConnections());\n    }, []);\n  }\n\n  /**\n   * Initiate server connect\n   *\n   * @param {Object} [options] Optional settings\n   * @param {Array} [options.auth=null] Array of auth options to apply on connect\n   * @param {function} [callback] An optional callback called once on the first connected server\n   */\n  connect(options, callback) {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options || {};\n\n    // emit SDAM monitoring events\n    this.emit('topologyOpening', new monitoring.TopologyOpeningEvent(this.s.id));\n\n    // emit an event for the topology change\n    this.emit(\n      'topologyDescriptionChanged',\n      new monitoring.TopologyDescriptionChangedEvent(\n        this.s.id,\n        new TopologyDescription(TopologyType.Unknown), // initial is always Unknown\n        this.s.description\n      )\n    );\n\n    connectServers(this, Array.from(this.s.description.servers.values()));\n    this.s.connected = true;\n\n    // otherwise, wait for a server to properly connect based on user provided read preference,\n    // or primary.\n\n    translateReadPreference(options);\n    const readPreference = options.readPreference || ReadPreference.primary;\n\n    this.selectServer(readPreferenceServerSelector(readPreference), options, (err, server) => {\n      if (err) {\n        if (typeof callback === 'function') {\n          callback(err, null);\n        } else {\n          this.emit('error', err);\n        }\n\n        return;\n      }\n\n      const errorHandler = err => {\n        server.removeListener('connect', connectHandler);\n        if (typeof callback === 'function') callback(err, null);\n      };\n\n      const connectHandler = (_, err) => {\n        server.removeListener('error', errorHandler);\n        this.emit('open', err, this);\n        this.emit('connect', this);\n\n        if (typeof callback === 'function') callback(err, this);\n      };\n\n      const STATE_CONNECTING = 1;\n      if (server.s.state === STATE_CONNECTING) {\n        server.once('error', errorHandler);\n        server.once('connect', connectHandler);\n        return;\n      }\n\n      connectHandler();\n    });\n  }\n\n  /**\n   * Close this topology\n   */\n  close(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof options === 'boolean') {\n      options = { force: options };\n    }\n\n    options = options || {};\n\n    // clear all existing monitor timers\n    this.s.monitorTimers.map(timer => clearTimeout(timer));\n    this.s.monitorTimers = [];\n\n    this.s.iterationTimers.map(timer => clearTimeout(timer));\n    this.s.iterationTimers = [];\n\n    if (this.s.sessionPool) {\n      this.s.sessions.forEach(session => session.endSession());\n      this.s.sessionPool.endAllPooledSessions();\n    }\n\n    if (this.s.srvPoller) {\n      this.s.srvPoller.stop();\n      if (this.s.handleSrvPolling) {\n        this.s.srvPoller.removeListener('srvRecordDiscovery', this.s.handleSrvPolling);\n        delete this.s.handleSrvPolling;\n      }\n    }\n\n    if (this.s.detectTopologyDescriptionChange) {\n      this.removeListener('topologyDescriptionChanged', this.s.detectTopologyDescriptionChange);\n      delete this.s.detectTopologyDescriptionChange;\n    }\n\n    const servers = this.s.servers;\n    if (servers.size === 0) {\n      this.s.connected = false;\n      if (typeof callback === 'function') {\n        callback(null, null);\n      }\n\n      return;\n    }\n\n    // destroy all child servers\n    let destroyed = 0;\n    servers.forEach(server =>\n      destroyServer(server, this, options, () => {\n        destroyed++;\n        if (destroyed === servers.size) {\n          // emit an event for close\n          this.emit('topologyClosed', new monitoring.TopologyClosedEvent(this.s.id));\n\n          this.s.connected = false;\n          if (typeof callback === 'function') {\n            callback(null, null);\n          }\n        }\n      })\n    );\n  }\n\n  /**\n   * Selects a server according to the selection predicate provided\n   *\n   * @param {function} [selector] An optional selector to select servers by, defaults to a random selection within a latency window\n   * @param {object} [options] Optional settings related to server selection\n   * @param {number} [options.serverSelectionTimeoutMS] How long to block for server selection before throwing an error\n   * @param {function} callback The callback used to indicate success or failure\n   * @return {Server} An instance of a `Server` meeting the criteria of the predicate provided\n   */\n  selectServer(selector, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      if (typeof selector !== 'function') {\n        options = selector;\n\n        let readPreference;\n        if (selector instanceof ReadPreference) {\n          readPreference = selector;\n        } else {\n          translateReadPreference(options);\n          readPreference = options.readPreference || ReadPreference.primary;\n        }\n\n        selector = readPreferenceServerSelector(readPreference);\n      } else {\n        options = {};\n      }\n    }\n\n    options = Object.assign(\n      {},\n      { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS },\n      options\n    );\n\n    const isSharded = this.description.type === TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n\n    if (isSharded && transaction && transaction.server) {\n      callback(null, transaction.server);\n      return;\n    }\n\n    // clear out any existing iteration timers\n    this.s.iterationTimers.map(timer => clearTimeout(timer));\n    this.s.iterationTimers = [];\n\n    selectServers(\n      this,\n      selector,\n      options.serverSelectionTimeoutMS,\n      process.hrtime(),\n      (err, servers) => {\n        if (err) return callback(err, null);\n\n        const selectedServer = randomSelection(servers);\n        if (isSharded && transaction && transaction.isActive) {\n          transaction.pinServer(selectedServer);\n        }\n\n        callback(null, selectedServer);\n      }\n    );\n  }\n\n  // Sessions related methods\n\n  /**\n   * @return Whether the topology should initiate selection to determine session support\n   */\n  shouldCheckForSessionSupport() {\n    return (\n      (this.description.type === TopologyType.Single && !this.description.hasKnownServers) ||\n      !this.description.hasDataBearingServers\n    );\n  }\n\n  /**\n   * @return Whether sessions are supported on the current topology\n   */\n  hasSessionSupport() {\n    return this.description.logicalSessionTimeoutMinutes != null;\n  }\n\n  /**\n   * Start a logical session\n   */\n  startSession(options, clientOptions) {\n    const session = new ClientSession(this, this.s.sessionPool, options, clientOptions);\n    session.once('ended', () => {\n      this.s.sessions.delete(session);\n    });\n\n    this.s.sessions.add(session);\n    return session;\n  }\n\n  /**\n   * Send endSessions command(s) with the given session ids\n   *\n   * @param {Array} sessions The sessions to end\n   * @param {function} [callback]\n   */\n  endSessions(sessions, callback) {\n    if (!Array.isArray(sessions)) {\n      sessions = [sessions];\n    }\n\n    this.command(\n      'admin.$cmd',\n      { endSessions: sessions },\n      { readPreference: ReadPreference.primaryPreferred, noResponse: true },\n      () => {\n        // intentionally ignored, per spec\n        if (typeof callback === 'function') callback();\n      }\n    );\n  }\n\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param {object} serverDescription The server to update in the internal list of server descriptions\n   */\n  serverUpdateHandler(serverDescription) {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    }\n\n    // these will be used for monitoring events later\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n\n    // first update the TopologyDescription\n    this.s.description = this.s.description.update(serverDescription);\n    if (this.s.description.compatibilityError) {\n      this.emit('error', new MongoError(this.s.description.compatibilityError));\n      return;\n    }\n\n    // emit monitoring events for this change\n    this.emit(\n      'serverDescriptionChanged',\n      new monitoring.ServerDescriptionChangedEvent(\n        this.s.id,\n        serverDescription.address,\n        previousServerDescription,\n        this.s.description.servers.get(serverDescription.address)\n      )\n    );\n\n    // update server list from updated descriptions\n    updateServers(this, serverDescription);\n\n    // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n    const clusterTime = serverDescription.$clusterTime;\n    if (clusterTime) {\n      resolveClusterTime(this, clusterTime);\n    }\n\n    this.emit(\n      'topologyDescriptionChanged',\n      new monitoring.TopologyDescriptionChangedEvent(\n        this.s.id,\n        previousTopologyDescription,\n        this.s.description\n      )\n    );\n  }\n\n  auth(credentials, callback) {\n    if (typeof credentials === 'function') (callback = credentials), (credentials = null);\n    if (typeof callback === 'function') callback(null, true);\n  }\n\n  logout(callback) {\n    if (typeof callback === 'function') callback(null, true);\n  }\n\n  // Basic operation support. Eventually this should be moved into command construction\n  // during the command refactor.\n\n  /**\n   * Insert one or more documents\n   *\n   * @param {String} ns The full qualified namespace for this operation\n   * @param {Array} ops An array of documents to insert\n   * @param {Boolean} [options.ordered=true] Execute in order or out of order\n   * @param {Object} [options.writeConcern] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n   * @param {opResultCallback} callback A callback function\n   */\n  insert(ns, ops, options, callback) {\n    executeWriteOperation({ topology: this, op: 'insert', ns, ops }, options, callback);\n  }\n\n  /**\n   * Perform one or more update operations\n   *\n   * @param {string} ns The fully qualified namespace for this operation\n   * @param {array} ops An array of updates\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n   * @param {opResultCallback} callback A callback function\n   */\n  update(ns, ops, options, callback) {\n    executeWriteOperation({ topology: this, op: 'update', ns, ops }, options, callback);\n  }\n\n  /**\n   * Perform one or more remove operations\n   *\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {array} ops An array of removes\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern={}] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n   * @param {opResultCallback} callback A callback function\n   */\n  remove(ns, ops, options, callback) {\n    executeWriteOperation({ topology: this, op: 'remove', ns, ops }, options, callback);\n  }\n\n  /**\n   * Execute a command\n   *\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object} cmd The command hash\n   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n   * @param {Connection} [options.connection] Specify connection object to execute command against\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {opResultCallback} callback A callback function\n   */\n  command(ns, cmd, options, callback) {\n    if (typeof options === 'function') {\n      (callback = options), (options = {}), (options = options || {});\n    }\n\n    translateReadPreference(options);\n    const readPreference = options.readPreference || ReadPreference.primary;\n\n    this.selectServer(readPreferenceServerSelector(readPreference), options, (err, server) => {\n      if (err) {\n        callback(err, null);\n        return;\n      }\n\n      const willRetryWrite =\n        !options.retrying &&\n        !!options.retryWrites &&\n        options.session &&\n        isRetryableWritesSupported(this) &&\n        !options.session.inTransaction() &&\n        isWriteCommand(cmd);\n\n      const cb = (err, result) => {\n        if (!err) return callback(null, result);\n        if (!isRetryableError(err)) {\n          return callback(err);\n        }\n\n        if (willRetryWrite) {\n          const newOptions = Object.assign({}, options, { retrying: true });\n          return this.command(ns, cmd, newOptions, callback);\n        }\n\n        return callback(err);\n      };\n\n      // increment and assign txnNumber\n      if (willRetryWrite) {\n        options.session.incrementTransactionNumber();\n        options.willRetryWrite = willRetryWrite;\n      }\n\n      server.command(ns, cmd, options, cb);\n    });\n  }\n\n  /**\n   * Create a new cursor\n   *\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\n   * @param {object} [options] Options for the cursor\n   * @param {object} [options.batchSize=0] Batchsize for the operation\n   * @param {array} [options.documents=[]] Initial documents list for cursor\n   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {object} [options.topology] The internal topology of the created cursor\n   * @returns {Cursor}\n   */\n  cursor(ns, cmd, options) {\n    options = options || {};\n    const topology = options.topology || this;\n    const CursorClass = options.cursorFactory || this.s.Cursor;\n    translateReadPreference(options);\n\n    return new CursorClass(topology, ns, cmd, options);\n  }\n\n  get clientInfo() {\n    return this.s.clientInfo;\n  }\n\n  // Legacy methods for compat with old topology types\n  isConnected() {\n    // console.log('not implemented: `isConnected`');\n    return true;\n  }\n\n  isDestroyed() {\n    // console.log('not implemented: `isDestroyed`');\n    return false;\n  }\n\n  unref() {\n    console.log('not implemented: `unref`');\n  }\n\n  // NOTE: There are many places in code where we explicitly check the last isMaster\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first isMaster seen, which should suffice.\n  lastIsMaster() {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n\n    const sd = serverDescriptions.filter(sd => sd.type !== ServerType.Unknown)[0];\n    const result = sd || { maxWireVersion: this.description.commonWireVersion };\n    return result;\n  }\n\n  get logicalSessionTimeoutMinutes() {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n\n  get bson() {\n    return this.s.bson;\n  }\n}\n\nObject.defineProperty(Topology.prototype, 'clusterTime', {\n  enumerable: true,\n  get: function() {\n    return this.s.clusterTime;\n  },\n  set: function(clusterTime) {\n    this.s.clusterTime = clusterTime;\n  }\n});\n\n// legacy aliases\nTopology.prototype.destroy = deprecate(\n  Topology.prototype.close,\n  'destroy() is deprecated, please use close() instead'\n);\n\nconst RETRYABLE_WRITE_OPERATIONS = ['findAndModify', 'insert', 'update', 'delete'];\nfunction isWriteCommand(command) {\n  return RETRYABLE_WRITE_OPERATIONS.some(op => command[op]);\n}\n\n/**\n * Destroys a server, and removes all event listeners from the instance\n *\n * @param {Server} server\n */\nfunction destroyServer(server, topology, options, callback) {\n  options = options || {};\n  LOCAL_SERVER_EVENTS.forEach(event => server.removeAllListeners(event));\n\n  server.destroy(options, () => {\n    topology.emit(\n      'serverClosed',\n      new monitoring.ServerClosedEvent(topology.s.id, server.description.address)\n    );\n\n    if (typeof callback === 'function') callback(null, null);\n  });\n}\n\n/**\n * Parses a basic seedlist in string form\n *\n * @param {string} seedlist The seedlist to parse\n */\nfunction parseStringSeedlist(seedlist) {\n  return seedlist.split(',').map(seed => ({\n    host: seed.split(':')[0],\n    port: seed.split(':')[1] || 27017\n  }));\n}\n\nfunction topologyTypeFromSeedlist(seedlist, options) {\n  const replicaSet = options.replicaSet || options.setName || options.rs_name;\n  if (seedlist.length === 1 && !replicaSet) return TopologyType.Single;\n  if (replicaSet) return TopologyType.ReplicaSetNoPrimary;\n  return TopologyType.Unknown;\n}\n\nfunction randomSelection(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\n/**\n * Selects servers using the provided selector\n *\n * @private\n * @param {Topology} topology The topology to select servers from\n * @param {function} selector The actual predicate used for selecting servers\n * @param {Number} timeout The max time we are willing wait for selection\n * @param {Number} start A high precision timestamp for the start of the selection process\n * @param {function} callback The callback used to convey errors or the resultant servers\n */\nfunction selectServers(topology, selector, timeout, start, callback) {\n  const duration = calculateDurationInMs(start);\n  if (duration >= timeout) {\n    return callback(\n      new MongoTimeoutError(`Server selection timed out after ${timeout} ms`),\n      topology.description.error\n    );\n  }\n\n  // ensure we are connected\n  if (!topology.s.connected) {\n    topology.connect();\n\n    // we want to make sure we're still within the requested timeout window\n    const failToConnectTimer = setTimeout(() => {\n      topology.removeListener('connect', connectHandler);\n      callback(\n        new MongoTimeoutError('Server selection timed out waiting to connect'),\n        topology.description.error\n      );\n    }, timeout - duration);\n\n    const connectHandler = () => {\n      clearTimeout(failToConnectTimer);\n      selectServers(topology, selector, timeout, process.hrtime(), callback);\n    };\n\n    topology.once('connect', connectHandler);\n    return;\n  }\n\n  // otherwise, attempt server selection\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  let descriptions;\n\n  // support server selection by options with readPreference\n  if (typeof selector === 'object') {\n    const readPreference = selector.readPreference\n      ? selector.readPreference\n      : ReadPreference.primary;\n\n    selector = readPreferenceServerSelector(readPreference);\n  }\n\n  try {\n    descriptions = selector\n      ? selector(topology.description, serverDescriptions)\n      : serverDescriptions;\n  } catch (e) {\n    return callback(e, null);\n  }\n\n  if (descriptions.length) {\n    const servers = descriptions.map(description => topology.s.servers.get(description.address));\n    return callback(null, servers);\n  }\n\n  const retrySelection = () => {\n    // clear all existing monitor timers\n    topology.s.monitorTimers.map(timer => clearTimeout(timer));\n    topology.s.monitorTimers = [];\n\n    // ensure all server monitors attempt monitoring soon\n    topology.s.servers.forEach(server => {\n      const timer = setTimeout(\n        () => server.monitor({ heartbeatFrequencyMS: topology.description.heartbeatFrequencyMS }),\n        TOPOLOGY_DEFAULTS.minHeartbeatFrequencyMS\n      );\n\n      topology.s.monitorTimers.push(timer);\n    });\n\n    const descriptionChangedHandler = () => {\n      // successful iteration, clear the check timer\n      clearTimeout(iterationTimer);\n      topology.s.iterationTimers.splice(timerIndex, 1);\n\n      // topology description has changed due to monitoring, reattempt server selection\n      selectServers(topology, selector, timeout, start, callback);\n    };\n\n    const iterationTimer = setTimeout(() => {\n      topology.removeListener('topologyDescriptionChanged', descriptionChangedHandler);\n      callback(\n        new MongoTimeoutError(\n          `Server selection timed out after ${timeout} ms`,\n          topology.description.error\n        )\n      );\n    }, timeout - duration);\n\n    // track this timer in case we need to clean it up outside this loop\n    const timerIndex = topology.s.iterationTimers.push(iterationTimer);\n\n    topology.once('topologyDescriptionChanged', descriptionChangedHandler);\n  };\n\n  retrySelection();\n}\n\nfunction createAndConnectServer(topology, serverDescription) {\n  topology.emit(\n    'serverOpening',\n    new monitoring.ServerOpeningEvent(topology.s.id, serverDescription.address)\n  );\n\n  const server = new Server(serverDescription, topology.s.options, topology);\n  relayEvents(server, topology, SERVER_RELAY_EVENTS);\n\n  server.once('connect', serverConnectEventHandler(server, topology));\n  server.on('descriptionReceived', topology.serverUpdateHandler.bind(topology));\n  server.on('error', serverErrorEventHandler(server, topology));\n  server.on('close', () => topology.emit('close', server));\n  server.connect();\n  return server;\n}\n\n/**\n * Create `Server` instances for all initially known servers, connect them, and assign\n * them to the passed in `Topology`.\n *\n * @param {Topology} topology The topology responsible for the servers\n * @param {ServerDescription[]} serverDescriptions A list of server descriptions to connect\n */\nfunction connectServers(topology, serverDescriptions) {\n  topology.s.servers = serverDescriptions.reduce((servers, serverDescription) => {\n    const server = createAndConnectServer(topology, serverDescription);\n    servers.set(serverDescription.address, server);\n    return servers;\n  }, new Map());\n}\n\nfunction updateServers(topology, incomingServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n    server.s.description = incomingServerDescription;\n  }\n\n  // add new servers for all descriptions we currently don't know about locally\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  }\n\n  // for all servers no longer known, remove their descriptions and destroy their instances\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress);\n\n    // prepare server for garbage collection\n    destroyServer(server, topology);\n  }\n}\n\nfunction serverConnectEventHandler(server, topology) {\n  return function(/* isMaster, err */) {\n    server.monitor({\n      initial: true,\n      heartbeatFrequencyMS: topology.description.heartbeatFrequencyMS\n    });\n  };\n}\n\nfunction serverErrorEventHandler(server /*, topology */) {\n  return function(err) {\n    if (isSDAMUnrecoverableError(err, server)) {\n      resetServerState(server, err, { clearPool: true });\n      return;\n    }\n\n    resetServerState(server, err);\n  };\n}\n\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // TODO: once we drop Node 4, use destructuring either here or in arguments.\n  const topology = args.topology;\n  const op = args.op;\n  const ns = args.ns;\n  const ops = args.ops;\n\n  const willRetryWrite =\n    !args.retrying &&\n    !!options.retryWrites &&\n    options.session &&\n    isRetryableWritesSupported(topology) &&\n    !options.session.inTransaction();\n\n  topology.selectServer(writableServerSelector(), options, (err, server) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n\n    const handler = (err, result) => {\n      if (!err) return callback(null, result);\n      if (!isRetryableError(err)) {\n        err = getMMAPError(err);\n        return callback(err);\n      }\n\n      if (willRetryWrite) {\n        const newArgs = Object.assign({}, args, { retrying: true });\n        return executeWriteOperation(newArgs, options, callback);\n      }\n\n      return callback(err);\n    };\n\n    if (callback.operationId) {\n      handler.operationId = callback.operationId;\n    }\n\n    // increment and assign txnNumber\n    if (willRetryWrite) {\n      options.session.incrementTransactionNumber();\n      options.willRetryWrite = willRetryWrite;\n    }\n\n    // execute the write operation\n    server[op](ns, ops, options, handler);\n  });\n}\n\n/**\n * Resets the internal state of this server to `Unknown` by simulating an empty ismaster\n *\n * @private\n * @param {Server} server\n * @param {MongoError} error The error that caused the state reset\n * @param {object} [options] Optional settings\n * @param {boolean} [options.clearPool=false] Pool should be cleared out on state reset\n */\nfunction resetServerState(server, error, options) {\n  options = Object.assign({}, { clearPool: false }, options);\n\n  function resetState() {\n    server.emit(\n      'descriptionReceived',\n      new ServerDescription(server.description.address, null, { error })\n    );\n\n    process.nextTick(() => server.monitor());\n  }\n\n  if (options.clearPool && server.s.pool) {\n    server.s.pool.reset(() => resetState());\n    return;\n  }\n\n  resetState();\n}\n\nfunction translateReadPreference(options) {\n  if (options.readPreference == null) {\n    return;\n  }\n\n  let r = options.readPreference;\n  if (typeof r === 'string') {\n    options.readPreference = new ReadPreference(r);\n  } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n    const mode = r.mode || r.preference;\n    if (mode && typeof mode === 'string') {\n      options.readPreference = new ReadPreference(mode, r.tags, {\n        maxStalenessSeconds: r.maxStalenessSeconds\n      });\n    }\n  } else if (!(r instanceof ReadPreference)) {\n    throw new TypeError('Invalid read preference: ' + r);\n  }\n\n  return options;\n}\n\nfunction srvPollingHandler(topology) {\n  return function handleSrvPolling(ev) {\n    const previousTopologyDescription = topology.s.description;\n    topology.s.description = topology.s.description.updateFromSrvPollingEvent(ev);\n    if (topology.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n\n    updateServers(topology);\n\n    topology.emit(\n      'topologyDescriptionChanged',\n      new monitoring.TopologyDescriptionChangedEvent(\n        topology.s.id,\n        previousTopologyDescription,\n        topology.s.description\n      )\n    );\n  };\n}\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event Topology#serverOpening\n * @type {ServerOpeningEvent}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Topology#serverClosed\n * @type {ServerClosedEvent}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Topology#serverDescriptionChanged\n * @type {ServerDescriptionChangedEvent}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Topology#topologyOpening\n * @type {TopologyOpeningEvent}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Topology#topologyClosed\n * @type {TopologyClosedEvent}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Topology#topologyDescriptionChanged\n * @type {TopologyDescriptionChangedEvent}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event Topology#serverHeartbeatStarted\n * @type {ServerHeartbeatStartedEvent}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event Topology#serverHeartbeatFailed\n * @type {ServerHearbeatFailedEvent}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event Topology#serverHeartbeatSucceeded\n * @type {ServerHeartbeatSucceededEvent}\n */\n\n/**\n * An event emitted indicating a command was started, if command monitoring is enabled\n *\n * @event Topology#commandStarted\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command succeeded, if command monitoring is enabled\n *\n * @event Topology#commandSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command failed, if command monitoring is enabled\n *\n * @event Topology#commandFailed\n * @type {object}\n */\n\nmodule.exports = Topology;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NvcmUvc2RhbS90b3BvbG9neS5qcz9mOGIyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IscUJBQXFCLG1CQUFPLENBQUMsRUFBUTtBQUNyQywwQkFBMEIsbUJBQU8sQ0FBQyxFQUFzQjtBQUN4RCxtQkFBbUIsbUJBQU8sQ0FBQyxFQUFzQjtBQUNqRCw0QkFBNEIsbUJBQU8sQ0FBQyxFQUF3QjtBQUM1RCxxQkFBcUIsbUJBQU8sQ0FBQyxFQUF3QjtBQUNyRCxtQkFBbUIsbUJBQU8sQ0FBQyxFQUFjO0FBQ3pDLDhCQUE4QixtQkFBTyxDQUFDLEVBQVU7QUFDaEQsMEJBQTBCLG1CQUFPLENBQUMsRUFBVTtBQUM1QyxlQUFlLG1CQUFPLENBQUMsRUFBVTtBQUNqQyxvQkFBb0IsbUJBQU8sQ0FBQyxFQUFVO0FBQ3RDLHVCQUF1QixtQkFBTyxDQUFDLEVBQStCO0FBQzlELHFDQUFxQyxtQkFBTyxDQUFDLEVBQW9CO0FBQ2pFLCtCQUErQixtQkFBTyxDQUFDLEVBQW9CO0FBQzNELG1DQUFtQyxtQkFBTyxDQUFDLEVBQXNCO0FBQ2pFLG1CQUFtQixtQkFBTyxDQUFDLEVBQVc7QUFDdEMsa0JBQWtCLG1CQUFPLENBQUMsRUFBTTtBQUNoQyxhQUFhLG1CQUFPLENBQUMsRUFBcUI7QUFDMUMsOEJBQThCLG1CQUFPLENBQUMsRUFBc0I7QUFDNUQseUJBQXlCLG1CQUFPLENBQUMsRUFBVTtBQUMzQyxpQ0FBaUMsbUJBQU8sQ0FBQyxFQUFVO0FBQ25ELHNCQUFzQixtQkFBTyxDQUFDLEVBQWE7QUFDM0MseUJBQXlCLG1CQUFPLENBQUMsRUFBc0I7QUFDdkQsbUJBQW1CLG1CQUFPLENBQUMsRUFBVTtBQUNyQywyQkFBMkIsbUJBQU8sQ0FBQyxFQUFzQjtBQUN6RCxrQkFBa0IsbUJBQU8sQ0FBQyxFQUFlO0FBQ3pDLHFCQUFxQixtQkFBTyxDQUFDLEVBQXNCOztBQUVuRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsYUFBYTtBQUMxQixhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBdUIseUNBQXlDO0FBQ2hFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsOEJBQThCOztBQUU5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxVQUFVLEdBQUcsVUFBVSxPQUFPLFVBQVU7QUFDN0U7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0NBQWtDOztBQUVsQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsTUFBTTtBQUNuQixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBLDBFQUEwRTtBQUMxRTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQjtBQUNqQjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFNBQVM7QUFDdEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLFNBQVM7QUFDdEIsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFFBQVE7QUFDUixPQUFPLDREQUE0RDtBQUNuRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsTUFBTTtBQUNuQixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTyx3QkFBd0I7QUFDL0IsT0FBTyxvRUFBb0U7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsTUFBTTtBQUNuQixhQUFhLFFBQVE7QUFDckIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxjQUFjO0FBQzNCLGFBQWEsUUFBUTtBQUNyQixhQUFhLGlCQUFpQjtBQUM5QjtBQUNBO0FBQ0EsMkJBQTJCLHdDQUF3QztBQUNuRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsYUFBYSxNQUFNO0FBQ25CLGFBQWEsUUFBUTtBQUNyQixhQUFhLE9BQU87QUFDcEIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLGNBQWM7QUFDM0IsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsaUJBQWlCO0FBQzlCO0FBQ0E7QUFDQSwyQkFBMkIsd0NBQXdDO0FBQ25FOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLE1BQU07QUFDbkIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsT0FBTyx5QkFBeUI7QUFDN0MsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLGNBQWM7QUFDM0IsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsaUJBQWlCO0FBQzlCO0FBQ0E7QUFDQSwyQkFBMkIsd0NBQXdDO0FBQ25FOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLGVBQWU7QUFDNUIsYUFBYSxXQUFXO0FBQ3hCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxjQUFjO0FBQzNCLGFBQWEsaUJBQWlCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QywyQkFBMkI7QUFDcEU7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw2Q0FBNkMsWUFBWSxpQkFBaUI7QUFDMUU7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsYUFBYSxZQUFZO0FBQ3pCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsYUFBYSxNQUFNO0FBQ25CLGFBQWEsZUFBZTtBQUM1QixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsY0FBYztBQUMzQixhQUFhLE9BQU87QUFDcEIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0UsUUFBUTtBQUN4RTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrRUFBa0U7QUFDaEc7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLFFBQVE7QUFDdEQ7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxvQkFBb0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGtCQUFrQjtBQUN2RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdFQUF3RTtBQUN4RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdDQUF3QyxTQUFTLGlCQUFpQjtBQUNsRTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLFdBQVc7QUFDdEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0EsNEJBQTRCLEdBQUcsbUJBQW1COztBQUVsRDtBQUNBO0FBQ0E7QUFDQSwrREFBK0QsUUFBUTtBQUN2RTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWOztBQUVBIiwiZmlsZSI6IjkyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5jb25zdCBTZXJ2ZXJEZXNjcmlwdGlvbiA9IHJlcXVpcmUoJy4vc2VydmVyX2Rlc2NyaXB0aW9uJykuU2VydmVyRGVzY3JpcHRpb247XG5jb25zdCBTZXJ2ZXJUeXBlID0gcmVxdWlyZSgnLi9zZXJ2ZXJfZGVzY3JpcHRpb24nKS5TZXJ2ZXJUeXBlO1xuY29uc3QgVG9wb2xvZ3lEZXNjcmlwdGlvbiA9IHJlcXVpcmUoJy4vdG9wb2xvZ3lfZGVzY3JpcHRpb24nKS5Ub3BvbG9neURlc2NyaXB0aW9uO1xuY29uc3QgVG9wb2xvZ3lUeXBlID0gcmVxdWlyZSgnLi90b3BvbG9neV9kZXNjcmlwdGlvbicpLlRvcG9sb2d5VHlwZTtcbmNvbnN0IG1vbml0b3JpbmcgPSByZXF1aXJlKCcuL21vbml0b3JpbmcnKTtcbmNvbnN0IGNhbGN1bGF0ZUR1cmF0aW9uSW5NcyA9IHJlcXVpcmUoJy4uL3V0aWxzJykuY2FsY3VsYXRlRHVyYXRpb25Jbk1zO1xuY29uc3QgTW9uZ29UaW1lb3V0RXJyb3IgPSByZXF1aXJlKCcuLi9lcnJvcicpLk1vbmdvVGltZW91dEVycm9yO1xuY29uc3QgU2VydmVyID0gcmVxdWlyZSgnLi9zZXJ2ZXInKTtcbmNvbnN0IHJlbGF5RXZlbnRzID0gcmVxdWlyZSgnLi4vdXRpbHMnKS5yZWxheUV2ZW50cztcbmNvbnN0IFJlYWRQcmVmZXJlbmNlID0gcmVxdWlyZSgnLi4vdG9wb2xvZ2llcy9yZWFkX3ByZWZlcmVuY2UnKTtcbmNvbnN0IHJlYWRQcmVmZXJlbmNlU2VydmVyU2VsZWN0b3IgPSByZXF1aXJlKCcuL3NlcnZlcl9zZWxlY3RvcnMnKS5yZWFkUHJlZmVyZW5jZVNlcnZlclNlbGVjdG9yO1xuY29uc3Qgd3JpdGFibGVTZXJ2ZXJTZWxlY3RvciA9IHJlcXVpcmUoJy4vc2VydmVyX3NlbGVjdG9ycycpLndyaXRhYmxlU2VydmVyU2VsZWN0b3I7XG5jb25zdCBpc1JldHJ5YWJsZVdyaXRlc1N1cHBvcnRlZCA9IHJlcXVpcmUoJy4uL3RvcG9sb2dpZXMvc2hhcmVkJykuaXNSZXRyeWFibGVXcml0ZXNTdXBwb3J0ZWQ7XG5jb25zdCBDb3JlQ3Vyc29yID0gcmVxdWlyZSgnLi4vY3Vyc29yJykuQ29yZUN1cnNvcjtcbmNvbnN0IGRlcHJlY2F0ZSA9IHJlcXVpcmUoJ3V0aWwnKS5kZXByZWNhdGU7XG5jb25zdCBCU09OID0gcmVxdWlyZSgnLi4vY29ubmVjdGlvbi91dGlscycpLnJldHJpZXZlQlNPTigpO1xuY29uc3QgY3JlYXRlQ29tcHJlc3Npb25JbmZvID0gcmVxdWlyZSgnLi4vdG9wb2xvZ2llcy9zaGFyZWQnKS5jcmVhdGVDb21wcmVzc2lvbkluZm87XG5jb25zdCBpc1JldHJ5YWJsZUVycm9yID0gcmVxdWlyZSgnLi4vZXJyb3InKS5pc1JldHJ5YWJsZUVycm9yO1xuY29uc3QgaXNTREFNVW5yZWNvdmVyYWJsZUVycm9yID0gcmVxdWlyZSgnLi4vZXJyb3InKS5pc1NEQU1VbnJlY292ZXJhYmxlRXJyb3I7XG5jb25zdCBDbGllbnRTZXNzaW9uID0gcmVxdWlyZSgnLi4vc2Vzc2lvbnMnKS5DbGllbnRTZXNzaW9uO1xuY29uc3QgY3JlYXRlQ2xpZW50SW5mbyA9IHJlcXVpcmUoJy4uL3RvcG9sb2dpZXMvc2hhcmVkJykuY3JlYXRlQ2xpZW50SW5mbztcbmNvbnN0IE1vbmdvRXJyb3IgPSByZXF1aXJlKCcuLi9lcnJvcicpLk1vbmdvRXJyb3I7XG5jb25zdCByZXNvbHZlQ2x1c3RlclRpbWUgPSByZXF1aXJlKCcuLi90b3BvbG9naWVzL3NoYXJlZCcpLnJlc29sdmVDbHVzdGVyVGltZTtcbmNvbnN0IFNydlBvbGxlciA9IHJlcXVpcmUoJy4vc3J2X3BvbGxpbmcnKS5TcnZQb2xsZXI7XG5jb25zdCBnZXRNTUFQRXJyb3IgPSByZXF1aXJlKCcuLi90b3BvbG9naWVzL3NoYXJlZCcpLmdldE1NQVBFcnJvcjtcblxuLy8gR2xvYmFsIHN0YXRlXG5sZXQgZ2xvYmFsVG9wb2xvZ3lDb3VudGVyID0gMDtcblxuLy8gQ29uc3RhbnRzXG5jb25zdCBUT1BPTE9HWV9ERUZBVUxUUyA9IHtcbiAgbG9jYWxUaHJlc2hvbGRNUzogMTUsXG4gIHNlcnZlclNlbGVjdGlvblRpbWVvdXRNUzogMzAwMDAsXG4gIGhlYXJ0YmVhdEZyZXF1ZW5jeU1TOiAxMDAwMCxcbiAgbWluSGVhcnRiZWF0RnJlcXVlbmN5TVM6IDUwMFxufTtcblxuLy8gZXZlbnRzIHRoYXQgd2UgcmVsYXkgdG8gdGhlIGBUb3BvbG9neWBcbmNvbnN0IFNFUlZFUl9SRUxBWV9FVkVOVFMgPSBbXG4gICdzZXJ2ZXJIZWFydGJlYXRTdGFydGVkJyxcbiAgJ3NlcnZlckhlYXJ0YmVhdFN1Y2NlZWRlZCcsXG4gICdzZXJ2ZXJIZWFydGJlYXRGYWlsZWQnLFxuICAnY29tbWFuZFN0YXJ0ZWQnLFxuICAnY29tbWFuZFN1Y2NlZWRlZCcsXG4gICdjb21tYW5kRmFpbGVkJyxcblxuICAvLyBOT1RFOiBMZWdhY3kgZXZlbnRzXG4gICdtb25pdG9yaW5nJ1xuXTtcblxuLy8gYWxsIGV2ZW50cyB3ZSBsaXN0ZW4gdG8gZnJvbSBgU2VydmVyYCBpbnN0YW5jZXNcbmNvbnN0IExPQ0FMX1NFUlZFUl9FVkVOVFMgPSBTRVJWRVJfUkVMQVlfRVZFTlRTLmNvbmNhdChbXG4gICdlcnJvcicsXG4gICdjb25uZWN0JyxcbiAgJ2Rlc2NyaXB0aW9uUmVjZWl2ZWQnLFxuICAnY2xvc2UnLFxuICAnZW5kZWQnXG5dKTtcblxuLyoqXG4gKiBBIGNvbnRhaW5lciBvZiBzZXJ2ZXIgaW5zdGFuY2VzIHJlcHJlc2VudGluZyBhIGNvbm5lY3Rpb24gdG8gYSBNb25nb0RCIHRvcG9sb2d5LlxuICpcbiAqIEBmaXJlcyBUb3BvbG9neSNzZXJ2ZXJPcGVuaW5nXG4gKiBAZmlyZXMgVG9wb2xvZ3kjc2VydmVyQ2xvc2VkXG4gKiBAZmlyZXMgVG9wb2xvZ3kjc2VydmVyRGVzY3JpcHRpb25DaGFuZ2VkXG4gKiBAZmlyZXMgVG9wb2xvZ3kjdG9wb2xvZ3lPcGVuaW5nXG4gKiBAZmlyZXMgVG9wb2xvZ3kjdG9wb2xvZ3lDbG9zZWRcbiAqIEBmaXJlcyBUb3BvbG9neSN0b3BvbG9neURlc2NyaXB0aW9uQ2hhbmdlZFxuICogQGZpcmVzIFRvcG9sb2d5I3NlcnZlckhlYXJ0YmVhdFN0YXJ0ZWRcbiAqIEBmaXJlcyBUb3BvbG9neSNzZXJ2ZXJIZWFydGJlYXRTdWNjZWVkZWRcbiAqIEBmaXJlcyBUb3BvbG9neSNzZXJ2ZXJIZWFydGJlYXRGYWlsZWRcbiAqL1xuY2xhc3MgVG9wb2xvZ3kgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICAvKipcbiAgICogQ3JlYXRlIGEgdG9wb2xvZ3lcbiAgICpcbiAgICogQHBhcmFtIHtBcnJheXxTdHJpbmd9IFtzZWVkbGlzdF0gYSBzdHJpbmcgbGlzdCwgb3IgYXJyYXkgb2YgU2VydmVyIGluc3RhbmNlcyB0byBjb25uZWN0IHRvXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9uYWwgc2V0dGluZ3NcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmxvY2FsVGhyZXNob2xkTVM9MTVdIFRoZSBzaXplIG9mIHRoZSBsYXRlbmN5IHdpbmRvdyBmb3Igc2VsZWN0aW5nIGFtb25nIG11bHRpcGxlIHN1aXRhYmxlIHNlcnZlcnNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnNlcnZlclNlbGVjdGlvblRpbWVvdXRNUz0zMDAwMF0gSG93IGxvbmcgdG8gYmxvY2sgZm9yIHNlcnZlciBzZWxlY3Rpb24gYmVmb3JlIHRocm93aW5nIGFuIGVycm9yXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5oZWFydGJlYXRGcmVxdWVuY3lNUz0xMDAwMF0gVGhlIGZyZXF1ZW5jeSB3aXRoIHdoaWNoIHRvcG9sb2d5IHVwZGF0ZXMgYXJlIHNjaGVkdWxlZFxuICAgKi9cbiAgY29uc3RydWN0b3Ioc2VlZGxpc3QsIG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHNlZWRsaXN0ICE9PSAnc3RyaW5nJykge1xuICAgICAgb3B0aW9ucyA9IHNlZWRsaXN0O1xuICAgICAgc2VlZGxpc3QgPSBbXTtcblxuICAgICAgLy8gdGhpcyBpcyBmb3IgbGVnYWN5IHNpbmdsZSBzZXJ2ZXIgY29uc3RydWN0b3Igc3VwcG9ydFxuICAgICAgaWYgKG9wdGlvbnMuaG9zdCkge1xuICAgICAgICBzZWVkbGlzdC5wdXNoKHsgaG9zdDogb3B0aW9ucy5ob3N0LCBwb3J0OiBvcHRpb25zLnBvcnQgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2VlZGxpc3QgPSBzZWVkbGlzdCB8fCBbXTtcbiAgICBpZiAodHlwZW9mIHNlZWRsaXN0ID09PSAnc3RyaW5nJykge1xuICAgICAgc2VlZGxpc3QgPSBwYXJzZVN0cmluZ1NlZWRsaXN0KHNlZWRsaXN0KTtcbiAgICB9XG5cbiAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgVE9QT0xPR1lfREVGQVVMVFMsIG9wdGlvbnMpO1xuXG4gICAgY29uc3QgdG9wb2xvZ3lUeXBlID0gdG9wb2xvZ3lUeXBlRnJvbVNlZWRsaXN0KHNlZWRsaXN0LCBvcHRpb25zKTtcbiAgICBjb25zdCB0b3BvbG9neUlkID0gZ2xvYmFsVG9wb2xvZ3lDb3VudGVyKys7XG4gICAgY29uc3Qgc2VydmVyRGVzY3JpcHRpb25zID0gc2VlZGxpc3QucmVkdWNlKChyZXN1bHQsIHNlZWQpID0+IHtcbiAgICAgIGlmIChzZWVkLmRvbWFpbl9zb2NrZXQpIHNlZWQuaG9zdCA9IHNlZWQuZG9tYWluX3NvY2tldDtcbiAgICAgIGNvbnN0IGFkZHJlc3MgPSBzZWVkLnBvcnQgPyBgJHtzZWVkLmhvc3R9OiR7c2VlZC5wb3J0fWAgOiBgJHtzZWVkLmhvc3R9OjI3MDE3YDtcbiAgICAgIHJlc3VsdC5zZXQoYWRkcmVzcywgbmV3IFNlcnZlckRlc2NyaXB0aW9uKGFkZHJlc3MpKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSwgbmV3IE1hcCgpKTtcblxuICAgIHRoaXMucyA9IHtcbiAgICAgIC8vIHRoZSBpZCBvZiB0aGlzIHRvcG9sb2d5XG4gICAgICBpZDogdG9wb2xvZ3lJZCxcbiAgICAgIC8vIHBhc3NlZCBpbiBvcHRpb25zXG4gICAgICBvcHRpb25zLFxuICAgICAgLy8gaW5pdGlhbCBzZWVkbGlzdCBvZiBzZXJ2ZXJzIHRvIGNvbm5lY3QgdG9cbiAgICAgIHNlZWRsaXN0OiBzZWVkbGlzdCxcbiAgICAgIC8vIHRoZSB0b3BvbG9neSBkZXNjcmlwdGlvblxuICAgICAgZGVzY3JpcHRpb246IG5ldyBUb3BvbG9neURlc2NyaXB0aW9uKFxuICAgICAgICB0b3BvbG9neVR5cGUsXG4gICAgICAgIHNlcnZlckRlc2NyaXB0aW9ucyxcbiAgICAgICAgb3B0aW9ucy5yZXBsaWNhU2V0LFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgICBvcHRpb25zXG4gICAgICApLFxuICAgICAgc2VydmVyU2VsZWN0aW9uVGltZW91dE1TOiBvcHRpb25zLnNlcnZlclNlbGVjdGlvblRpbWVvdXRNUyxcbiAgICAgIGhlYXJ0YmVhdEZyZXF1ZW5jeU1TOiBvcHRpb25zLmhlYXJ0YmVhdEZyZXF1ZW5jeU1TLFxuICAgICAgbWluSGVhcnRiZWF0SW50ZXJ2YWxNUzogb3B0aW9ucy5taW5IZWFydGJlYXRJbnRlcnZhbE1TLFxuICAgICAgLy8gYWxsb3cgdXNlcnMgdG8gb3ZlcnJpZGUgdGhlIGN1cnNvciBmYWN0b3J5XG4gICAgICBDdXJzb3I6IG9wdGlvbnMuY3Vyc29yRmFjdG9yeSB8fCBDb3JlQ3Vyc29yLFxuICAgICAgLy8gdGhlIGJzb24gcGFyc2VyXG4gICAgICBic29uOlxuICAgICAgICBvcHRpb25zLmJzb24gfHxcbiAgICAgICAgbmV3IEJTT04oW1xuICAgICAgICAgIEJTT04uQmluYXJ5LFxuICAgICAgICAgIEJTT04uQ29kZSxcbiAgICAgICAgICBCU09OLkRCUmVmLFxuICAgICAgICAgIEJTT04uRGVjaW1hbDEyOCxcbiAgICAgICAgICBCU09OLkRvdWJsZSxcbiAgICAgICAgICBCU09OLkludDMyLFxuICAgICAgICAgIEJTT04uTG9uZyxcbiAgICAgICAgICBCU09OLk1hcCxcbiAgICAgICAgICBCU09OLk1heEtleSxcbiAgICAgICAgICBCU09OLk1pbktleSxcbiAgICAgICAgICBCU09OLk9iamVjdElkLFxuICAgICAgICAgIEJTT04uQlNPTlJlZ0V4cCxcbiAgICAgICAgICBCU09OLlN5bWJvbCxcbiAgICAgICAgICBCU09OLlRpbWVzdGFtcFxuICAgICAgICBdKSxcbiAgICAgIC8vIGEgbWFwIG9mIHNlcnZlciBpbnN0YW5jZXMgdG8gbm9ybWFsaXplZCBhZGRyZXNzZXNcbiAgICAgIHNlcnZlcnM6IG5ldyBNYXAoKSxcbiAgICAgIC8vIFNlcnZlciBTZXNzaW9uIFBvb2xcbiAgICAgIHNlc3Npb25Qb29sOiBudWxsLFxuICAgICAgLy8gQWN0aXZlIGNsaWVudCBzZXNzaW9uc1xuICAgICAgc2Vzc2lvbnM6IG5ldyBTZXQoKSxcbiAgICAgIC8vIFByb21pc2UgbGlicmFyeVxuICAgICAgcHJvbWlzZUxpYnJhcnk6IG9wdGlvbnMucHJvbWlzZUxpYnJhcnkgfHwgUHJvbWlzZSxcbiAgICAgIGNyZWRlbnRpYWxzOiBvcHRpb25zLmNyZWRlbnRpYWxzLFxuICAgICAgY2x1c3RlclRpbWU6IG51bGwsXG5cbiAgICAgIC8vIHRpbWVyIG1hbmFnZW1lbnRcbiAgICAgIG1vbml0b3JUaW1lcnM6IFtdLFxuICAgICAgaXRlcmF0aW9uVGltZXJzOiBbXVxuICAgIH07XG5cbiAgICAvLyBhbWVuZCBvcHRpb25zIGZvciBzZXJ2ZXIgaW5zdGFuY2UgY3JlYXRpb25cbiAgICB0aGlzLnMub3B0aW9ucy5jb21wcmVzc2lvbiA9IHsgY29tcHJlc3NvcnM6IGNyZWF0ZUNvbXByZXNzaW9uSW5mbyhvcHRpb25zKSB9O1xuXG4gICAgLy8gYWRkIGNsaWVudCBpbmZvXG4gICAgdGhpcy5zLmNsaWVudEluZm8gPSBjcmVhdGVDbGllbnRJbmZvKG9wdGlvbnMpO1xuXG4gICAgaWYgKG9wdGlvbnMuc3J2SG9zdCkge1xuICAgICAgdGhpcy5zLnNydlBvbGxlciA9XG4gICAgICAgIG9wdGlvbnMuc3J2UG9sbGVyIHx8XG4gICAgICAgIG5ldyBTcnZQb2xsZXIoe1xuICAgICAgICAgIGhlYXJ0YmVhdEZyZXF1ZW5jeU1TOiB0aGlzLnMuaGVhcnRiZWF0RnJlcXVlbmN5TVMsXG4gICAgICAgICAgc3J2SG9zdDogb3B0aW9ucy5zcnZIb3N0LCAvLyBUT0RPOiBHRVQgVEhJU1xuICAgICAgICAgIGxvZ2dlcjogb3B0aW9ucy5sb2dnZXIsXG4gICAgICAgICAgbG9nZ2VyTGV2ZWw6IG9wdGlvbnMubG9nZ2VyTGV2ZWxcbiAgICAgICAgfSk7XG4gICAgICB0aGlzLnMuZGV0ZWN0VG9wb2xvZ3lEZXNjcmlwdGlvbkNoYW5nZSA9IGV2ID0+IHtcbiAgICAgICAgY29uc3QgcHJldmlvdXNUeXBlID0gZXYucHJldmlvdXNEZXNjcmlwdGlvbi50eXBlO1xuICAgICAgICBjb25zdCBuZXdUeXBlID0gZXYubmV3RGVzY3JpcHRpb24udHlwZTtcblxuICAgICAgICBpZiAocHJldmlvdXNUeXBlICE9PSBUb3BvbG9neVR5cGUuU2hhcmRlZCAmJiBuZXdUeXBlID09PSBUb3BvbG9neVR5cGUuU2hhcmRlZCkge1xuICAgICAgICAgIHRoaXMucy5oYW5kbGVTcnZQb2xsaW5nID0gc3J2UG9sbGluZ0hhbmRsZXIodGhpcyk7XG4gICAgICAgICAgdGhpcy5zLnNydlBvbGxlci5vbignc3J2UmVjb3JkRGlzY292ZXJ5JywgdGhpcy5zLmhhbmRsZVNydlBvbGxpbmcpO1xuICAgICAgICAgIHRoaXMucy5zcnZQb2xsZXIuc3RhcnQoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5vbigndG9wb2xvZ3lEZXNjcmlwdGlvbkNoYW5nZWQnLCB0aGlzLnMuZGV0ZWN0VG9wb2xvZ3lEZXNjcmlwdGlvbkNoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gQSBgVG9wb2xvZ3lEZXNjcmlwdGlvbmAgZm9yIHRoaXMgdG9wb2xvZ3lcbiAgICovXG4gIGdldCBkZXNjcmlwdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zLmRlc2NyaXB0aW9uO1xuICB9XG5cbiAgZ2V0IHBhcnNlclR5cGUoKSB7XG4gICAgcmV0dXJuIEJTT04ubmF0aXZlID8gJ2MrKycgOiAnanMnO1xuICB9XG5cbiAgLyoqXG4gICAqIEFsbCByYXcgY29ubmVjdGlvbnNcbiAgICogQG1ldGhvZFxuICAgKiBAcmV0dXJuIHtDb25uZWN0aW9uW119XG4gICAqL1xuICBjb25uZWN0aW9ucygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnMuc2VydmVycy52YWx1ZXMoKSkucmVkdWNlKChyZXN1bHQsIHNlcnZlcikgPT4ge1xuICAgICAgcmV0dXJuIHJlc3VsdC5jb25jYXQoc2VydmVyLnMucG9vbC5hbGxDb25uZWN0aW9ucygpKTtcbiAgICB9LCBbXSk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhdGUgc2VydmVyIGNvbm5lY3RcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25hbCBzZXR0aW5nc1xuICAgKiBAcGFyYW0ge0FycmF5fSBbb3B0aW9ucy5hdXRoPW51bGxdIEFycmF5IG9mIGF1dGggb3B0aW9ucyB0byBhcHBseSBvbiBjb25uZWN0XG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja10gQW4gb3B0aW9uYWwgY2FsbGJhY2sgY2FsbGVkIG9uY2Ugb24gdGhlIGZpcnN0IGNvbm5lY3RlZCBzZXJ2ZXJcbiAgICovXG4gIGNvbm5lY3Qob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIChjYWxsYmFjayA9IG9wdGlvbnMpLCAob3B0aW9ucyA9IHt9KTtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIC8vIGVtaXQgU0RBTSBtb25pdG9yaW5nIGV2ZW50c1xuICAgIHRoaXMuZW1pdCgndG9wb2xvZ3lPcGVuaW5nJywgbmV3IG1vbml0b3JpbmcuVG9wb2xvZ3lPcGVuaW5nRXZlbnQodGhpcy5zLmlkKSk7XG5cbiAgICAvLyBlbWl0IGFuIGV2ZW50IGZvciB0aGUgdG9wb2xvZ3kgY2hhbmdlXG4gICAgdGhpcy5lbWl0KFxuICAgICAgJ3RvcG9sb2d5RGVzY3JpcHRpb25DaGFuZ2VkJyxcbiAgICAgIG5ldyBtb25pdG9yaW5nLlRvcG9sb2d5RGVzY3JpcHRpb25DaGFuZ2VkRXZlbnQoXG4gICAgICAgIHRoaXMucy5pZCxcbiAgICAgICAgbmV3IFRvcG9sb2d5RGVzY3JpcHRpb24oVG9wb2xvZ3lUeXBlLlVua25vd24pLCAvLyBpbml0aWFsIGlzIGFsd2F5cyBVbmtub3duXG4gICAgICAgIHRoaXMucy5kZXNjcmlwdGlvblxuICAgICAgKVxuICAgICk7XG5cbiAgICBjb25uZWN0U2VydmVycyh0aGlzLCBBcnJheS5mcm9tKHRoaXMucy5kZXNjcmlwdGlvbi5zZXJ2ZXJzLnZhbHVlcygpKSk7XG4gICAgdGhpcy5zLmNvbm5lY3RlZCA9IHRydWU7XG5cbiAgICAvLyBvdGhlcndpc2UsIHdhaXQgZm9yIGEgc2VydmVyIHRvIHByb3Blcmx5IGNvbm5lY3QgYmFzZWQgb24gdXNlciBwcm92aWRlZCByZWFkIHByZWZlcmVuY2UsXG4gICAgLy8gb3IgcHJpbWFyeS5cblxuICAgIHRyYW5zbGF0ZVJlYWRQcmVmZXJlbmNlKG9wdGlvbnMpO1xuICAgIGNvbnN0IHJlYWRQcmVmZXJlbmNlID0gb3B0aW9ucy5yZWFkUHJlZmVyZW5jZSB8fCBSZWFkUHJlZmVyZW5jZS5wcmltYXJ5O1xuXG4gICAgdGhpcy5zZWxlY3RTZXJ2ZXIocmVhZFByZWZlcmVuY2VTZXJ2ZXJTZWxlY3RvcihyZWFkUHJlZmVyZW5jZSksIG9wdGlvbnMsIChlcnIsIHNlcnZlcikgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZXJyb3JIYW5kbGVyID0gZXJyID0+IHtcbiAgICAgICAgc2VydmVyLnJlbW92ZUxpc3RlbmVyKCdjb25uZWN0JywgY29ubmVjdEhhbmRsZXIpO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjayhlcnIsIG51bGwpO1xuICAgICAgfTtcblxuICAgICAgY29uc3QgY29ubmVjdEhhbmRsZXIgPSAoXywgZXJyKSA9PiB7XG4gICAgICAgIHNlcnZlci5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBlcnJvckhhbmRsZXIpO1xuICAgICAgICB0aGlzLmVtaXQoJ29wZW4nLCBlcnIsIHRoaXMpO1xuICAgICAgICB0aGlzLmVtaXQoJ2Nvbm5lY3QnLCB0aGlzKTtcblxuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjayhlcnIsIHRoaXMpO1xuICAgICAgfTtcblxuICAgICAgY29uc3QgU1RBVEVfQ09OTkVDVElORyA9IDE7XG4gICAgICBpZiAoc2VydmVyLnMuc3RhdGUgPT09IFNUQVRFX0NPTk5FQ1RJTkcpIHtcbiAgICAgICAgc2VydmVyLm9uY2UoJ2Vycm9yJywgZXJyb3JIYW5kbGVyKTtcbiAgICAgICAgc2VydmVyLm9uY2UoJ2Nvbm5lY3QnLCBjb25uZWN0SGFuZGxlcik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29ubmVjdEhhbmRsZXIoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZSB0aGlzIHRvcG9sb2d5XG4gICAqL1xuICBjbG9zZShvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICBvcHRpb25zID0geyBmb3JjZTogb3B0aW9ucyB9O1xuICAgIH1cblxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgLy8gY2xlYXIgYWxsIGV4aXN0aW5nIG1vbml0b3IgdGltZXJzXG4gICAgdGhpcy5zLm1vbml0b3JUaW1lcnMubWFwKHRpbWVyID0+IGNsZWFyVGltZW91dCh0aW1lcikpO1xuICAgIHRoaXMucy5tb25pdG9yVGltZXJzID0gW107XG5cbiAgICB0aGlzLnMuaXRlcmF0aW9uVGltZXJzLm1hcCh0aW1lciA9PiBjbGVhclRpbWVvdXQodGltZXIpKTtcbiAgICB0aGlzLnMuaXRlcmF0aW9uVGltZXJzID0gW107XG5cbiAgICBpZiAodGhpcy5zLnNlc3Npb25Qb29sKSB7XG4gICAgICB0aGlzLnMuc2Vzc2lvbnMuZm9yRWFjaChzZXNzaW9uID0+IHNlc3Npb24uZW5kU2Vzc2lvbigpKTtcbiAgICAgIHRoaXMucy5zZXNzaW9uUG9vbC5lbmRBbGxQb29sZWRTZXNzaW9ucygpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnMuc3J2UG9sbGVyKSB7XG4gICAgICB0aGlzLnMuc3J2UG9sbGVyLnN0b3AoKTtcbiAgICAgIGlmICh0aGlzLnMuaGFuZGxlU3J2UG9sbGluZykge1xuICAgICAgICB0aGlzLnMuc3J2UG9sbGVyLnJlbW92ZUxpc3RlbmVyKCdzcnZSZWNvcmREaXNjb3ZlcnknLCB0aGlzLnMuaGFuZGxlU3J2UG9sbGluZyk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnMuaGFuZGxlU3J2UG9sbGluZztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5zLmRldGVjdFRvcG9sb2d5RGVzY3JpcHRpb25DaGFuZ2UpIHtcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ3RvcG9sb2d5RGVzY3JpcHRpb25DaGFuZ2VkJywgdGhpcy5zLmRldGVjdFRvcG9sb2d5RGVzY3JpcHRpb25DaGFuZ2UpO1xuICAgICAgZGVsZXRlIHRoaXMucy5kZXRlY3RUb3BvbG9neURlc2NyaXB0aW9uQ2hhbmdlO1xuICAgIH1cblxuICAgIGNvbnN0IHNlcnZlcnMgPSB0aGlzLnMuc2VydmVycztcbiAgICBpZiAoc2VydmVycy5zaXplID09PSAwKSB7XG4gICAgICB0aGlzLnMuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIG51bGwpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gZGVzdHJveSBhbGwgY2hpbGQgc2VydmVyc1xuICAgIGxldCBkZXN0cm95ZWQgPSAwO1xuICAgIHNlcnZlcnMuZm9yRWFjaChzZXJ2ZXIgPT5cbiAgICAgIGRlc3Ryb3lTZXJ2ZXIoc2VydmVyLCB0aGlzLCBvcHRpb25zLCAoKSA9PiB7XG4gICAgICAgIGRlc3Ryb3llZCsrO1xuICAgICAgICBpZiAoZGVzdHJveWVkID09PSBzZXJ2ZXJzLnNpemUpIHtcbiAgICAgICAgICAvLyBlbWl0IGFuIGV2ZW50IGZvciBjbG9zZVxuICAgICAgICAgIHRoaXMuZW1pdCgndG9wb2xvZ3lDbG9zZWQnLCBuZXcgbW9uaXRvcmluZy5Ub3BvbG9neUNsb3NlZEV2ZW50KHRoaXMucy5pZCkpO1xuXG4gICAgICAgICAgdGhpcy5zLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbGVjdHMgYSBzZXJ2ZXIgYWNjb3JkaW5nIHRvIHRoZSBzZWxlY3Rpb24gcHJlZGljYXRlIHByb3ZpZGVkXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtzZWxlY3Rvcl0gQW4gb3B0aW9uYWwgc2VsZWN0b3IgdG8gc2VsZWN0IHNlcnZlcnMgYnksIGRlZmF1bHRzIHRvIGEgcmFuZG9tIHNlbGVjdGlvbiB3aXRoaW4gYSBsYXRlbmN5IHdpbmRvd1xuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIE9wdGlvbmFsIHNldHRpbmdzIHJlbGF0ZWQgdG8gc2VydmVyIHNlbGVjdGlvblxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuc2VydmVyU2VsZWN0aW9uVGltZW91dE1TXSBIb3cgbG9uZyB0byBibG9jayBmb3Igc2VydmVyIHNlbGVjdGlvbiBiZWZvcmUgdGhyb3dpbmcgYW4gZXJyb3JcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIHVzZWQgdG8gaW5kaWNhdGUgc3VjY2VzcyBvciBmYWlsdXJlXG4gICAqIEByZXR1cm4ge1NlcnZlcn0gQW4gaW5zdGFuY2Ugb2YgYSBgU2VydmVyYCBtZWV0aW5nIHRoZSBjcml0ZXJpYSBvZiB0aGUgcHJlZGljYXRlIHByb3ZpZGVkXG4gICAqL1xuICBzZWxlY3RTZXJ2ZXIoc2VsZWN0b3IsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICBpZiAodHlwZW9mIHNlbGVjdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG9wdGlvbnMgPSBzZWxlY3RvcjtcblxuICAgICAgICBsZXQgcmVhZFByZWZlcmVuY2U7XG4gICAgICAgIGlmIChzZWxlY3RvciBpbnN0YW5jZW9mIFJlYWRQcmVmZXJlbmNlKSB7XG4gICAgICAgICAgcmVhZFByZWZlcmVuY2UgPSBzZWxlY3RvcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cmFuc2xhdGVSZWFkUHJlZmVyZW5jZShvcHRpb25zKTtcbiAgICAgICAgICByZWFkUHJlZmVyZW5jZSA9IG9wdGlvbnMucmVhZFByZWZlcmVuY2UgfHwgUmVhZFByZWZlcmVuY2UucHJpbWFyeTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGVjdG9yID0gcmVhZFByZWZlcmVuY2VTZXJ2ZXJTZWxlY3RvcihyZWFkUHJlZmVyZW5jZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgICB9XG4gICAgfVxuXG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB7fSxcbiAgICAgIHsgc2VydmVyU2VsZWN0aW9uVGltZW91dE1TOiB0aGlzLnMuc2VydmVyU2VsZWN0aW9uVGltZW91dE1TIH0sXG4gICAgICBvcHRpb25zXG4gICAgKTtcblxuICAgIGNvbnN0IGlzU2hhcmRlZCA9IHRoaXMuZGVzY3JpcHRpb24udHlwZSA9PT0gVG9wb2xvZ3lUeXBlLlNoYXJkZWQ7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IG9wdGlvbnMuc2Vzc2lvbjtcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHNlc3Npb24gJiYgc2Vzc2lvbi50cmFuc2FjdGlvbjtcblxuICAgIGlmIChpc1NoYXJkZWQgJiYgdHJhbnNhY3Rpb24gJiYgdHJhbnNhY3Rpb24uc2VydmVyKSB7XG4gICAgICBjYWxsYmFjayhudWxsLCB0cmFuc2FjdGlvbi5zZXJ2ZXIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGNsZWFyIG91dCBhbnkgZXhpc3RpbmcgaXRlcmF0aW9uIHRpbWVyc1xuICAgIHRoaXMucy5pdGVyYXRpb25UaW1lcnMubWFwKHRpbWVyID0+IGNsZWFyVGltZW91dCh0aW1lcikpO1xuICAgIHRoaXMucy5pdGVyYXRpb25UaW1lcnMgPSBbXTtcblxuICAgIHNlbGVjdFNlcnZlcnMoXG4gICAgICB0aGlzLFxuICAgICAgc2VsZWN0b3IsXG4gICAgICBvcHRpb25zLnNlcnZlclNlbGVjdGlvblRpbWVvdXRNUyxcbiAgICAgIHByb2Nlc3MuaHJ0aW1lKCksXG4gICAgICAoZXJyLCBzZXJ2ZXJzKSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIsIG51bGwpO1xuXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkU2VydmVyID0gcmFuZG9tU2VsZWN0aW9uKHNlcnZlcnMpO1xuICAgICAgICBpZiAoaXNTaGFyZGVkICYmIHRyYW5zYWN0aW9uICYmIHRyYW5zYWN0aW9uLmlzQWN0aXZlKSB7XG4gICAgICAgICAgdHJhbnNhY3Rpb24ucGluU2VydmVyKHNlbGVjdGVkU2VydmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHNlbGVjdGVkU2VydmVyKTtcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgLy8gU2Vzc2lvbnMgcmVsYXRlZCBtZXRob2RzXG5cbiAgLyoqXG4gICAqIEByZXR1cm4gV2hldGhlciB0aGUgdG9wb2xvZ3kgc2hvdWxkIGluaXRpYXRlIHNlbGVjdGlvbiB0byBkZXRlcm1pbmUgc2Vzc2lvbiBzdXBwb3J0XG4gICAqL1xuICBzaG91bGRDaGVja0ZvclNlc3Npb25TdXBwb3J0KCkge1xuICAgIHJldHVybiAoXG4gICAgICAodGhpcy5kZXNjcmlwdGlvbi50eXBlID09PSBUb3BvbG9neVR5cGUuU2luZ2xlICYmICF0aGlzLmRlc2NyaXB0aW9uLmhhc0tub3duU2VydmVycykgfHxcbiAgICAgICF0aGlzLmRlc2NyaXB0aW9uLmhhc0RhdGFCZWFyaW5nU2VydmVyc1xuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiBXaGV0aGVyIHNlc3Npb25zIGFyZSBzdXBwb3J0ZWQgb24gdGhlIGN1cnJlbnQgdG9wb2xvZ3lcbiAgICovXG4gIGhhc1Nlc3Npb25TdXBwb3J0KCkge1xuICAgIHJldHVybiB0aGlzLmRlc2NyaXB0aW9uLmxvZ2ljYWxTZXNzaW9uVGltZW91dE1pbnV0ZXMgIT0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydCBhIGxvZ2ljYWwgc2Vzc2lvblxuICAgKi9cbiAgc3RhcnRTZXNzaW9uKG9wdGlvbnMsIGNsaWVudE9wdGlvbnMpIHtcbiAgICBjb25zdCBzZXNzaW9uID0gbmV3IENsaWVudFNlc3Npb24odGhpcywgdGhpcy5zLnNlc3Npb25Qb29sLCBvcHRpb25zLCBjbGllbnRPcHRpb25zKTtcbiAgICBzZXNzaW9uLm9uY2UoJ2VuZGVkJywgKCkgPT4ge1xuICAgICAgdGhpcy5zLnNlc3Npb25zLmRlbGV0ZShzZXNzaW9uKTtcbiAgICB9KTtcblxuICAgIHRoaXMucy5zZXNzaW9ucy5hZGQoc2Vzc2lvbik7XG4gICAgcmV0dXJuIHNlc3Npb247XG4gIH1cblxuICAvKipcbiAgICogU2VuZCBlbmRTZXNzaW9ucyBjb21tYW5kKHMpIHdpdGggdGhlIGdpdmVuIHNlc3Npb24gaWRzXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNlc3Npb25zIFRoZSBzZXNzaW9ucyB0byBlbmRcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXVxuICAgKi9cbiAgZW5kU2Vzc2lvbnMoc2Vzc2lvbnMsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHNlc3Npb25zKSkge1xuICAgICAgc2Vzc2lvbnMgPSBbc2Vzc2lvbnNdO1xuICAgIH1cblxuICAgIHRoaXMuY29tbWFuZChcbiAgICAgICdhZG1pbi4kY21kJyxcbiAgICAgIHsgZW5kU2Vzc2lvbnM6IHNlc3Npb25zIH0sXG4gICAgICB7IHJlYWRQcmVmZXJlbmNlOiBSZWFkUHJlZmVyZW5jZS5wcmltYXJ5UHJlZmVycmVkLCBub1Jlc3BvbnNlOiB0cnVlIH0sXG4gICAgICAoKSA9PiB7XG4gICAgICAgIC8vIGludGVudGlvbmFsbHkgaWdub3JlZCwgcGVyIHNwZWNcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgaW50ZXJuYWwgVG9wb2xvZ3lEZXNjcmlwdGlvbiB3aXRoIGEgU2VydmVyRGVzY3JpcHRpb25cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHNlcnZlckRlc2NyaXB0aW9uIFRoZSBzZXJ2ZXIgdG8gdXBkYXRlIGluIHRoZSBpbnRlcm5hbCBsaXN0IG9mIHNlcnZlciBkZXNjcmlwdGlvbnNcbiAgICovXG4gIHNlcnZlclVwZGF0ZUhhbmRsZXIoc2VydmVyRGVzY3JpcHRpb24pIHtcbiAgICBpZiAoIXRoaXMucy5kZXNjcmlwdGlvbi5oYXNTZXJ2ZXIoc2VydmVyRGVzY3JpcHRpb24uYWRkcmVzcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyB0aGVzZSB3aWxsIGJlIHVzZWQgZm9yIG1vbml0b3JpbmcgZXZlbnRzIGxhdGVyXG4gICAgY29uc3QgcHJldmlvdXNUb3BvbG9neURlc2NyaXB0aW9uID0gdGhpcy5zLmRlc2NyaXB0aW9uO1xuICAgIGNvbnN0IHByZXZpb3VzU2VydmVyRGVzY3JpcHRpb24gPSB0aGlzLnMuZGVzY3JpcHRpb24uc2VydmVycy5nZXQoc2VydmVyRGVzY3JpcHRpb24uYWRkcmVzcyk7XG5cbiAgICAvLyBmaXJzdCB1cGRhdGUgdGhlIFRvcG9sb2d5RGVzY3JpcHRpb25cbiAgICB0aGlzLnMuZGVzY3JpcHRpb24gPSB0aGlzLnMuZGVzY3JpcHRpb24udXBkYXRlKHNlcnZlckRlc2NyaXB0aW9uKTtcbiAgICBpZiAodGhpcy5zLmRlc2NyaXB0aW9uLmNvbXBhdGliaWxpdHlFcnJvcikge1xuICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBNb25nb0Vycm9yKHRoaXMucy5kZXNjcmlwdGlvbi5jb21wYXRpYmlsaXR5RXJyb3IpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBlbWl0IG1vbml0b3JpbmcgZXZlbnRzIGZvciB0aGlzIGNoYW5nZVxuICAgIHRoaXMuZW1pdChcbiAgICAgICdzZXJ2ZXJEZXNjcmlwdGlvbkNoYW5nZWQnLFxuICAgICAgbmV3IG1vbml0b3JpbmcuU2VydmVyRGVzY3JpcHRpb25DaGFuZ2VkRXZlbnQoXG4gICAgICAgIHRoaXMucy5pZCxcbiAgICAgICAgc2VydmVyRGVzY3JpcHRpb24uYWRkcmVzcyxcbiAgICAgICAgcHJldmlvdXNTZXJ2ZXJEZXNjcmlwdGlvbixcbiAgICAgICAgdGhpcy5zLmRlc2NyaXB0aW9uLnNlcnZlcnMuZ2V0KHNlcnZlckRlc2NyaXB0aW9uLmFkZHJlc3MpXG4gICAgICApXG4gICAgKTtcblxuICAgIC8vIHVwZGF0ZSBzZXJ2ZXIgbGlzdCBmcm9tIHVwZGF0ZWQgZGVzY3JpcHRpb25zXG4gICAgdXBkYXRlU2VydmVycyh0aGlzLCBzZXJ2ZXJEZXNjcmlwdGlvbik7XG5cbiAgICAvLyBEcml2ZXIgU2Vzc2lvbnMgU3BlYzogXCJXaGVuZXZlciBhIGRyaXZlciByZWNlaXZlcyBhIGNsdXN0ZXIgdGltZSBmcm9tXG4gICAgLy8gYSBzZXJ2ZXIgaXQgTVVTVCBjb21wYXJlIGl0IHRvIHRoZSBjdXJyZW50IGhpZ2hlc3Qgc2VlbiBjbHVzdGVyIHRpbWVcbiAgICAvLyBmb3IgdGhlIGRlcGxveW1lbnQuIElmIHRoZSBuZXcgY2x1c3RlciB0aW1lIGlzIGhpZ2hlciB0aGFuIHRoZVxuICAgIC8vIGhpZ2hlc3Qgc2VlbiBjbHVzdGVyIHRpbWUgaXQgTVVTVCBiZWNvbWUgdGhlIG5ldyBoaWdoZXN0IHNlZW4gY2x1c3RlclxuICAgIC8vIHRpbWUuIFR3byBjbHVzdGVyIHRpbWVzIGFyZSBjb21wYXJlZCB1c2luZyBvbmx5IHRoZSBCc29uVGltZXN0YW1wXG4gICAgLy8gdmFsdWUgb2YgdGhlIGNsdXN0ZXJUaW1lIGVtYmVkZGVkIGZpZWxkLlwiXG4gICAgY29uc3QgY2x1c3RlclRpbWUgPSBzZXJ2ZXJEZXNjcmlwdGlvbi4kY2x1c3RlclRpbWU7XG4gICAgaWYgKGNsdXN0ZXJUaW1lKSB7XG4gICAgICByZXNvbHZlQ2x1c3RlclRpbWUodGhpcywgY2x1c3RlclRpbWUpO1xuICAgIH1cblxuICAgIHRoaXMuZW1pdChcbiAgICAgICd0b3BvbG9neURlc2NyaXB0aW9uQ2hhbmdlZCcsXG4gICAgICBuZXcgbW9uaXRvcmluZy5Ub3BvbG9neURlc2NyaXB0aW9uQ2hhbmdlZEV2ZW50KFxuICAgICAgICB0aGlzLnMuaWQsXG4gICAgICAgIHByZXZpb3VzVG9wb2xvZ3lEZXNjcmlwdGlvbixcbiAgICAgICAgdGhpcy5zLmRlc2NyaXB0aW9uXG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIGF1dGgoY3JlZGVudGlhbHMsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiBjcmVkZW50aWFscyA9PT0gJ2Z1bmN0aW9uJykgKGNhbGxiYWNrID0gY3JlZGVudGlhbHMpLCAoY3JlZGVudGlhbHMgPSBudWxsKTtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjayhudWxsLCB0cnVlKTtcbiAgfVxuXG4gIGxvZ291dChjYWxsYmFjaykge1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKG51bGwsIHRydWUpO1xuICB9XG5cbiAgLy8gQmFzaWMgb3BlcmF0aW9uIHN1cHBvcnQuIEV2ZW50dWFsbHkgdGhpcyBzaG91bGQgYmUgbW92ZWQgaW50byBjb21tYW5kIGNvbnN0cnVjdGlvblxuICAvLyBkdXJpbmcgdGhlIGNvbW1hbmQgcmVmYWN0b3IuXG5cbiAgLyoqXG4gICAqIEluc2VydCBvbmUgb3IgbW9yZSBkb2N1bWVudHNcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IG5zIFRoZSBmdWxsIHF1YWxpZmllZCBuYW1lc3BhY2UgZm9yIHRoaXMgb3BlcmF0aW9uXG4gICAqIEBwYXJhbSB7QXJyYXl9IG9wcyBBbiBhcnJheSBvZiBkb2N1bWVudHMgdG8gaW5zZXJ0XG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMub3JkZXJlZD10cnVlXSBFeGVjdXRlIGluIG9yZGVyIG9yIG91dCBvZiBvcmRlclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMud3JpdGVDb25jZXJuXSBXcml0ZSBjb25jZXJuIGZvciB0aGUgb3BlcmF0aW9uXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuc2VyaWFsaXplRnVuY3Rpb25zPWZhbHNlXSBTcGVjaWZ5IGlmIGZ1bmN0aW9ucyBvbiBhbiBvYmplY3Qgc2hvdWxkIGJlIHNlcmlhbGl6ZWRcbiAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5pZ25vcmVVbmRlZmluZWQ9ZmFsc2VdIFNwZWNpZnkgaWYgdGhlIEJTT04gc2VyaWFsaXplciBzaG91bGQgaWdub3JlIHVuZGVmaW5lZCBmaWVsZHNcbiAgICogQHBhcmFtIHtDbGllbnRTZXNzaW9ufSBbb3B0aW9ucy5zZXNzaW9uXSBTZXNzaW9uIHRvIHVzZSBmb3IgdGhlIG9wZXJhdGlvblxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnJldHJ5V3JpdGVzXSBFbmFibGUgcmV0cnlhYmxlIHdyaXRlcyBmb3IgdGhpcyBvcGVyYXRpb25cbiAgICogQHBhcmFtIHtvcFJlc3VsdENhbGxiYWNrfSBjYWxsYmFjayBBIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAqL1xuICBpbnNlcnQobnMsIG9wcywgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICBleGVjdXRlV3JpdGVPcGVyYXRpb24oeyB0b3BvbG9neTogdGhpcywgb3A6ICdpbnNlcnQnLCBucywgb3BzIH0sIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIG9uZSBvciBtb3JlIHVwZGF0ZSBvcGVyYXRpb25zXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBucyBUaGUgZnVsbHkgcXVhbGlmaWVkIG5hbWVzcGFjZSBmb3IgdGhpcyBvcGVyYXRpb25cbiAgICogQHBhcmFtIHthcnJheX0gb3BzIEFuIGFycmF5IG9mIHVwZGF0ZXNcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5vcmRlcmVkPXRydWVdIEV4ZWN1dGUgaW4gb3JkZXIgb3Igb3V0IG9mIG9yZGVyXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy53cml0ZUNvbmNlcm5dIFdyaXRlIGNvbmNlcm4gZm9yIHRoZSBvcGVyYXRpb25cbiAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5zZXJpYWxpemVGdW5jdGlvbnM9ZmFsc2VdIFNwZWNpZnkgaWYgZnVuY3Rpb25zIG9uIGFuIG9iamVjdCBzaG91bGQgYmUgc2VyaWFsaXplZFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmlnbm9yZVVuZGVmaW5lZD1mYWxzZV0gU3BlY2lmeSBpZiB0aGUgQlNPTiBzZXJpYWxpemVyIHNob3VsZCBpZ25vcmUgdW5kZWZpbmVkIGZpZWxkc1xuICAgKiBAcGFyYW0ge0NsaWVudFNlc3Npb259IFtvcHRpb25zLnNlc3Npb25dIFNlc3Npb24gdG8gdXNlIGZvciB0aGUgb3BlcmF0aW9uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucmV0cnlXcml0ZXNdIEVuYWJsZSByZXRyeWFibGUgd3JpdGVzIGZvciB0aGlzIG9wZXJhdGlvblxuICAgKiBAcGFyYW0ge29wUmVzdWx0Q2FsbGJhY2t9IGNhbGxiYWNrIEEgY2FsbGJhY2sgZnVuY3Rpb25cbiAgICovXG4gIHVwZGF0ZShucywgb3BzLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIGV4ZWN1dGVXcml0ZU9wZXJhdGlvbih7IHRvcG9sb2d5OiB0aGlzLCBvcDogJ3VwZGF0ZScsIG5zLCBvcHMgfSwgb3B0aW9ucywgY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gb25lIG9yIG1vcmUgcmVtb3ZlIG9wZXJhdGlvbnNcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5zIFRoZSBNb25nb0RCIGZ1bGx5IHF1YWxpZmllZCBuYW1lc3BhY2UgKGV4OiBkYjEuY29sbGVjdGlvbjEpXG4gICAqIEBwYXJhbSB7YXJyYXl9IG9wcyBBbiBhcnJheSBvZiByZW1vdmVzXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMub3JkZXJlZD10cnVlXSBFeGVjdXRlIGluIG9yZGVyIG9yIG91dCBvZiBvcmRlclxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMud3JpdGVDb25jZXJuPXt9XSBXcml0ZSBjb25jZXJuIGZvciB0aGUgb3BlcmF0aW9uXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuc2VyaWFsaXplRnVuY3Rpb25zPWZhbHNlXSBTcGVjaWZ5IGlmIGZ1bmN0aW9ucyBvbiBhbiBvYmplY3Qgc2hvdWxkIGJlIHNlcmlhbGl6ZWQuXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuaWdub3JlVW5kZWZpbmVkPWZhbHNlXSBTcGVjaWZ5IGlmIHRoZSBCU09OIHNlcmlhbGl6ZXIgc2hvdWxkIGlnbm9yZSB1bmRlZmluZWQgZmllbGRzLlxuICAgKiBAcGFyYW0ge0NsaWVudFNlc3Npb259IFtvcHRpb25zLnNlc3Npb249bnVsbF0gU2Vzc2lvbiB0byB1c2UgZm9yIHRoZSBvcGVyYXRpb25cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yZXRyeVdyaXRlc10gRW5hYmxlIHJldHJ5YWJsZSB3cml0ZXMgZm9yIHRoaXMgb3BlcmF0aW9uXG4gICAqIEBwYXJhbSB7b3BSZXN1bHRDYWxsYmFja30gY2FsbGJhY2sgQSBjYWxsYmFjayBmdW5jdGlvblxuICAgKi9cbiAgcmVtb3ZlKG5zLCBvcHMsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgZXhlY3V0ZVdyaXRlT3BlcmF0aW9uKHsgdG9wb2xvZ3k6IHRoaXMsIG9wOiAncmVtb3ZlJywgbnMsIG9wcyB9LCBvcHRpb25zLCBjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZSBhIGNvbW1hbmRcbiAgICpcbiAgICogQG1ldGhvZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbnMgVGhlIE1vbmdvREIgZnVsbHkgcXVhbGlmaWVkIG5hbWVzcGFjZSAoZXg6IGRiMS5jb2xsZWN0aW9uMSlcbiAgICogQHBhcmFtIHtvYmplY3R9IGNtZCBUaGUgY29tbWFuZCBoYXNoXG4gICAqIEBwYXJhbSB7UmVhZFByZWZlcmVuY2V9IFtvcHRpb25zLnJlYWRQcmVmZXJlbmNlXSBTcGVjaWZ5IHJlYWQgcHJlZmVyZW5jZSBpZiBjb21tYW5kIHN1cHBvcnRzIGl0XG4gICAqIEBwYXJhbSB7Q29ubmVjdGlvbn0gW29wdGlvbnMuY29ubmVjdGlvbl0gU3BlY2lmeSBjb25uZWN0aW9uIG9iamVjdCB0byBleGVjdXRlIGNvbW1hbmQgYWdhaW5zdFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnNlcmlhbGl6ZUZ1bmN0aW9ucz1mYWxzZV0gU3BlY2lmeSBpZiBmdW5jdGlvbnMgb24gYW4gb2JqZWN0IHNob3VsZCBiZSBzZXJpYWxpemVkLlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmlnbm9yZVVuZGVmaW5lZD1mYWxzZV0gU3BlY2lmeSBpZiB0aGUgQlNPTiBzZXJpYWxpemVyIHNob3VsZCBpZ25vcmUgdW5kZWZpbmVkIGZpZWxkcy5cbiAgICogQHBhcmFtIHtDbGllbnRTZXNzaW9ufSBbb3B0aW9ucy5zZXNzaW9uPW51bGxdIFNlc3Npb24gdG8gdXNlIGZvciB0aGUgb3BlcmF0aW9uXG4gICAqIEBwYXJhbSB7b3BSZXN1bHRDYWxsYmFja30gY2FsbGJhY2sgQSBjYWxsYmFjayBmdW5jdGlvblxuICAgKi9cbiAgY29tbWFuZChucywgY21kLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgKGNhbGxiYWNrID0gb3B0aW9ucyksIChvcHRpb25zID0ge30pLCAob3B0aW9ucyA9IG9wdGlvbnMgfHwge30pO1xuICAgIH1cblxuICAgIHRyYW5zbGF0ZVJlYWRQcmVmZXJlbmNlKG9wdGlvbnMpO1xuICAgIGNvbnN0IHJlYWRQcmVmZXJlbmNlID0gb3B0aW9ucy5yZWFkUHJlZmVyZW5jZSB8fCBSZWFkUHJlZmVyZW5jZS5wcmltYXJ5O1xuXG4gICAgdGhpcy5zZWxlY3RTZXJ2ZXIocmVhZFByZWZlcmVuY2VTZXJ2ZXJTZWxlY3RvcihyZWFkUHJlZmVyZW5jZSksIG9wdGlvbnMsIChlcnIsIHNlcnZlcikgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBjYWxsYmFjayhlcnIsIG51bGwpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHdpbGxSZXRyeVdyaXRlID1cbiAgICAgICAgIW9wdGlvbnMucmV0cnlpbmcgJiZcbiAgICAgICAgISFvcHRpb25zLnJldHJ5V3JpdGVzICYmXG4gICAgICAgIG9wdGlvbnMuc2Vzc2lvbiAmJlxuICAgICAgICBpc1JldHJ5YWJsZVdyaXRlc1N1cHBvcnRlZCh0aGlzKSAmJlxuICAgICAgICAhb3B0aW9ucy5zZXNzaW9uLmluVHJhbnNhY3Rpb24oKSAmJlxuICAgICAgICBpc1dyaXRlQ29tbWFuZChjbWQpO1xuXG4gICAgICBjb25zdCBjYiA9IChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAoIWVycikgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHJlc3VsdCk7XG4gICAgICAgIGlmICghaXNSZXRyeWFibGVFcnJvcihlcnIpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod2lsbFJldHJ5V3JpdGUpIHtcbiAgICAgICAgICBjb25zdCBuZXdPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywgeyByZXRyeWluZzogdHJ1ZSB9KTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5jb21tYW5kKG5zLCBjbWQsIG5ld09wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgfTtcblxuICAgICAgLy8gaW5jcmVtZW50IGFuZCBhc3NpZ24gdHhuTnVtYmVyXG4gICAgICBpZiAod2lsbFJldHJ5V3JpdGUpIHtcbiAgICAgICAgb3B0aW9ucy5zZXNzaW9uLmluY3JlbWVudFRyYW5zYWN0aW9uTnVtYmVyKCk7XG4gICAgICAgIG9wdGlvbnMud2lsbFJldHJ5V3JpdGUgPSB3aWxsUmV0cnlXcml0ZTtcbiAgICAgIH1cblxuICAgICAgc2VydmVyLmNvbW1hbmQobnMsIGNtZCwgb3B0aW9ucywgY2IpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBjdXJzb3JcbiAgICpcbiAgICogQG1ldGhvZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbnMgVGhlIE1vbmdvREIgZnVsbHkgcXVhbGlmaWVkIG5hbWVzcGFjZSAoZXg6IGRiMS5jb2xsZWN0aW9uMSlcbiAgICogQHBhcmFtIHtvYmplY3R8TG9uZ30gY21kIENhbiBiZSBlaXRoZXIgYSBjb21tYW5kIHJldHVybmluZyBhIGN1cnNvciBvciBhIGN1cnNvcklkXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBmb3IgdGhlIGN1cnNvclxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMuYmF0Y2hTaXplPTBdIEJhdGNoc2l6ZSBmb3IgdGhlIG9wZXJhdGlvblxuICAgKiBAcGFyYW0ge2FycmF5fSBbb3B0aW9ucy5kb2N1bWVudHM9W11dIEluaXRpYWwgZG9jdW1lbnRzIGxpc3QgZm9yIGN1cnNvclxuICAgKiBAcGFyYW0ge1JlYWRQcmVmZXJlbmNlfSBbb3B0aW9ucy5yZWFkUHJlZmVyZW5jZV0gU3BlY2lmeSByZWFkIHByZWZlcmVuY2UgaWYgY29tbWFuZCBzdXBwb3J0cyBpdFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnNlcmlhbGl6ZUZ1bmN0aW9ucz1mYWxzZV0gU3BlY2lmeSBpZiBmdW5jdGlvbnMgb24gYW4gb2JqZWN0IHNob3VsZCBiZSBzZXJpYWxpemVkLlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmlnbm9yZVVuZGVmaW5lZD1mYWxzZV0gU3BlY2lmeSBpZiB0aGUgQlNPTiBzZXJpYWxpemVyIHNob3VsZCBpZ25vcmUgdW5kZWZpbmVkIGZpZWxkcy5cbiAgICogQHBhcmFtIHtDbGllbnRTZXNzaW9ufSBbb3B0aW9ucy5zZXNzaW9uPW51bGxdIFNlc3Npb24gdG8gdXNlIGZvciB0aGUgb3BlcmF0aW9uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy50b3BvbG9neV0gVGhlIGludGVybmFsIHRvcG9sb2d5IG9mIHRoZSBjcmVhdGVkIGN1cnNvclxuICAgKiBAcmV0dXJucyB7Q3Vyc29yfVxuICAgKi9cbiAgY3Vyc29yKG5zLCBjbWQsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBjb25zdCB0b3BvbG9neSA9IG9wdGlvbnMudG9wb2xvZ3kgfHwgdGhpcztcbiAgICBjb25zdCBDdXJzb3JDbGFzcyA9IG9wdGlvbnMuY3Vyc29yRmFjdG9yeSB8fCB0aGlzLnMuQ3Vyc29yO1xuICAgIHRyYW5zbGF0ZVJlYWRQcmVmZXJlbmNlKG9wdGlvbnMpO1xuXG4gICAgcmV0dXJuIG5ldyBDdXJzb3JDbGFzcyh0b3BvbG9neSwgbnMsIGNtZCwgb3B0aW9ucyk7XG4gIH1cblxuICBnZXQgY2xpZW50SW5mbygpIHtcbiAgICByZXR1cm4gdGhpcy5zLmNsaWVudEluZm87XG4gIH1cblxuICAvLyBMZWdhY3kgbWV0aG9kcyBmb3IgY29tcGF0IHdpdGggb2xkIHRvcG9sb2d5IHR5cGVzXG4gIGlzQ29ubmVjdGVkKCkge1xuICAgIC8vIGNvbnNvbGUubG9nKCdub3QgaW1wbGVtZW50ZWQ6IGBpc0Nvbm5lY3RlZGAnKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlzRGVzdHJveWVkKCkge1xuICAgIC8vIGNvbnNvbGUubG9nKCdub3QgaW1wbGVtZW50ZWQ6IGBpc0Rlc3Ryb3llZGAnKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB1bnJlZigpIHtcbiAgICBjb25zb2xlLmxvZygnbm90IGltcGxlbWVudGVkOiBgdW5yZWZgJyk7XG4gIH1cblxuICAvLyBOT1RFOiBUaGVyZSBhcmUgbWFueSBwbGFjZXMgaW4gY29kZSB3aGVyZSB3ZSBleHBsaWNpdGx5IGNoZWNrIHRoZSBsYXN0IGlzTWFzdGVyXG4gIC8vICAgICAgIHRvIGRvIGZlYXR1cmUgc3VwcG9ydCBkZXRlY3Rpb24uIFRoaXMgc2hvdWxkIGJlIGRvbmUgYW55IG90aGVyIHdheSwgYnV0IGZvclxuICAvLyAgICAgICBub3cgd2Ugd2lsbCBqdXN0IHJldHVybiB0aGUgZmlyc3QgaXNNYXN0ZXIgc2Vlbiwgd2hpY2ggc2hvdWxkIHN1ZmZpY2UuXG4gIGxhc3RJc01hc3RlcigpIHtcbiAgICBjb25zdCBzZXJ2ZXJEZXNjcmlwdGlvbnMgPSBBcnJheS5mcm9tKHRoaXMuZGVzY3JpcHRpb24uc2VydmVycy52YWx1ZXMoKSk7XG4gICAgaWYgKHNlcnZlckRlc2NyaXB0aW9ucy5sZW5ndGggPT09IDApIHJldHVybiB7fTtcblxuICAgIGNvbnN0IHNkID0gc2VydmVyRGVzY3JpcHRpb25zLmZpbHRlcihzZCA9PiBzZC50eXBlICE9PSBTZXJ2ZXJUeXBlLlVua25vd24pWzBdO1xuICAgIGNvbnN0IHJlc3VsdCA9IHNkIHx8IHsgbWF4V2lyZVZlcnNpb246IHRoaXMuZGVzY3JpcHRpb24uY29tbW9uV2lyZVZlcnNpb24gfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZ2V0IGxvZ2ljYWxTZXNzaW9uVGltZW91dE1pbnV0ZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVzY3JpcHRpb24ubG9naWNhbFNlc3Npb25UaW1lb3V0TWludXRlcztcbiAgfVxuXG4gIGdldCBic29uKCkge1xuICAgIHJldHVybiB0aGlzLnMuYnNvbjtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVG9wb2xvZ3kucHJvdG90eXBlLCAnY2x1c3RlclRpbWUnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucy5jbHVzdGVyVGltZTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihjbHVzdGVyVGltZSkge1xuICAgIHRoaXMucy5jbHVzdGVyVGltZSA9IGNsdXN0ZXJUaW1lO1xuICB9XG59KTtcblxuLy8gbGVnYWN5IGFsaWFzZXNcblRvcG9sb2d5LnByb3RvdHlwZS5kZXN0cm95ID0gZGVwcmVjYXRlKFxuICBUb3BvbG9neS5wcm90b3R5cGUuY2xvc2UsXG4gICdkZXN0cm95KCkgaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBjbG9zZSgpIGluc3RlYWQnXG4pO1xuXG5jb25zdCBSRVRSWUFCTEVfV1JJVEVfT1BFUkFUSU9OUyA9IFsnZmluZEFuZE1vZGlmeScsICdpbnNlcnQnLCAndXBkYXRlJywgJ2RlbGV0ZSddO1xuZnVuY3Rpb24gaXNXcml0ZUNvbW1hbmQoY29tbWFuZCkge1xuICByZXR1cm4gUkVUUllBQkxFX1dSSVRFX09QRVJBVElPTlMuc29tZShvcCA9PiBjb21tYW5kW29wXSk7XG59XG5cbi8qKlxuICogRGVzdHJveXMgYSBzZXJ2ZXIsIGFuZCByZW1vdmVzIGFsbCBldmVudCBsaXN0ZW5lcnMgZnJvbSB0aGUgaW5zdGFuY2VcbiAqXG4gKiBAcGFyYW0ge1NlcnZlcn0gc2VydmVyXG4gKi9cbmZ1bmN0aW9uIGRlc3Ryb3lTZXJ2ZXIoc2VydmVyLCB0b3BvbG9neSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIExPQ0FMX1NFUlZFUl9FVkVOVFMuZm9yRWFjaChldmVudCA9PiBzZXJ2ZXIucmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50KSk7XG5cbiAgc2VydmVyLmRlc3Ryb3kob3B0aW9ucywgKCkgPT4ge1xuICAgIHRvcG9sb2d5LmVtaXQoXG4gICAgICAnc2VydmVyQ2xvc2VkJyxcbiAgICAgIG5ldyBtb25pdG9yaW5nLlNlcnZlckNsb3NlZEV2ZW50KHRvcG9sb2d5LnMuaWQsIHNlcnZlci5kZXNjcmlwdGlvbi5hZGRyZXNzKVxuICAgICk7XG5cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjayhudWxsLCBudWxsKTtcbiAgfSk7XG59XG5cbi8qKlxuICogUGFyc2VzIGEgYmFzaWMgc2VlZGxpc3QgaW4gc3RyaW5nIGZvcm1cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VlZGxpc3QgVGhlIHNlZWRsaXN0IHRvIHBhcnNlXG4gKi9cbmZ1bmN0aW9uIHBhcnNlU3RyaW5nU2VlZGxpc3Qoc2VlZGxpc3QpIHtcbiAgcmV0dXJuIHNlZWRsaXN0LnNwbGl0KCcsJykubWFwKHNlZWQgPT4gKHtcbiAgICBob3N0OiBzZWVkLnNwbGl0KCc6JylbMF0sXG4gICAgcG9ydDogc2VlZC5zcGxpdCgnOicpWzFdIHx8IDI3MDE3XG4gIH0pKTtcbn1cblxuZnVuY3Rpb24gdG9wb2xvZ3lUeXBlRnJvbVNlZWRsaXN0KHNlZWRsaXN0LCBvcHRpb25zKSB7XG4gIGNvbnN0IHJlcGxpY2FTZXQgPSBvcHRpb25zLnJlcGxpY2FTZXQgfHwgb3B0aW9ucy5zZXROYW1lIHx8IG9wdGlvbnMucnNfbmFtZTtcbiAgaWYgKHNlZWRsaXN0Lmxlbmd0aCA9PT0gMSAmJiAhcmVwbGljYVNldCkgcmV0dXJuIFRvcG9sb2d5VHlwZS5TaW5nbGU7XG4gIGlmIChyZXBsaWNhU2V0KSByZXR1cm4gVG9wb2xvZ3lUeXBlLlJlcGxpY2FTZXROb1ByaW1hcnk7XG4gIHJldHVybiBUb3BvbG9neVR5cGUuVW5rbm93bjtcbn1cblxuZnVuY3Rpb24gcmFuZG9tU2VsZWN0aW9uKGFycmF5KSB7XG4gIHJldHVybiBhcnJheVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhcnJheS5sZW5ndGgpXTtcbn1cblxuLyoqXG4gKiBTZWxlY3RzIHNlcnZlcnMgdXNpbmcgdGhlIHByb3ZpZGVkIHNlbGVjdG9yXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7VG9wb2xvZ3l9IHRvcG9sb2d5IFRoZSB0b3BvbG9neSB0byBzZWxlY3Qgc2VydmVycyBmcm9tXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzZWxlY3RvciBUaGUgYWN0dWFsIHByZWRpY2F0ZSB1c2VkIGZvciBzZWxlY3Rpbmcgc2VydmVyc1xuICogQHBhcmFtIHtOdW1iZXJ9IHRpbWVvdXQgVGhlIG1heCB0aW1lIHdlIGFyZSB3aWxsaW5nIHdhaXQgZm9yIHNlbGVjdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IHN0YXJ0IEEgaGlnaCBwcmVjaXNpb24gdGltZXN0YW1wIGZvciB0aGUgc3RhcnQgb2YgdGhlIHNlbGVjdGlvbiBwcm9jZXNzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdXNlZCB0byBjb252ZXkgZXJyb3JzIG9yIHRoZSByZXN1bHRhbnQgc2VydmVyc1xuICovXG5mdW5jdGlvbiBzZWxlY3RTZXJ2ZXJzKHRvcG9sb2d5LCBzZWxlY3RvciwgdGltZW91dCwgc3RhcnQsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGR1cmF0aW9uID0gY2FsY3VsYXRlRHVyYXRpb25Jbk1zKHN0YXJ0KTtcbiAgaWYgKGR1cmF0aW9uID49IHRpbWVvdXQpIHtcbiAgICByZXR1cm4gY2FsbGJhY2soXG4gICAgICBuZXcgTW9uZ29UaW1lb3V0RXJyb3IoYFNlcnZlciBzZWxlY3Rpb24gdGltZWQgb3V0IGFmdGVyICR7dGltZW91dH0gbXNgKSxcbiAgICAgIHRvcG9sb2d5LmRlc2NyaXB0aW9uLmVycm9yXG4gICAgKTtcbiAgfVxuXG4gIC8vIGVuc3VyZSB3ZSBhcmUgY29ubmVjdGVkXG4gIGlmICghdG9wb2xvZ3kucy5jb25uZWN0ZWQpIHtcbiAgICB0b3BvbG9neS5jb25uZWN0KCk7XG5cbiAgICAvLyB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB3ZSdyZSBzdGlsbCB3aXRoaW4gdGhlIHJlcXVlc3RlZCB0aW1lb3V0IHdpbmRvd1xuICAgIGNvbnN0IGZhaWxUb0Nvbm5lY3RUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdG9wb2xvZ3kucmVtb3ZlTGlzdGVuZXIoJ2Nvbm5lY3QnLCBjb25uZWN0SGFuZGxlcik7XG4gICAgICBjYWxsYmFjayhcbiAgICAgICAgbmV3IE1vbmdvVGltZW91dEVycm9yKCdTZXJ2ZXIgc2VsZWN0aW9uIHRpbWVkIG91dCB3YWl0aW5nIHRvIGNvbm5lY3QnKSxcbiAgICAgICAgdG9wb2xvZ3kuZGVzY3JpcHRpb24uZXJyb3JcbiAgICAgICk7XG4gICAgfSwgdGltZW91dCAtIGR1cmF0aW9uKTtcblxuICAgIGNvbnN0IGNvbm5lY3RIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgY2xlYXJUaW1lb3V0KGZhaWxUb0Nvbm5lY3RUaW1lcik7XG4gICAgICBzZWxlY3RTZXJ2ZXJzKHRvcG9sb2d5LCBzZWxlY3RvciwgdGltZW91dCwgcHJvY2Vzcy5ocnRpbWUoKSwgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICB0b3BvbG9neS5vbmNlKCdjb25uZWN0JywgY29ubmVjdEhhbmRsZXIpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIG90aGVyd2lzZSwgYXR0ZW1wdCBzZXJ2ZXIgc2VsZWN0aW9uXG4gIGNvbnN0IHNlcnZlckRlc2NyaXB0aW9ucyA9IEFycmF5LmZyb20odG9wb2xvZ3kuZGVzY3JpcHRpb24uc2VydmVycy52YWx1ZXMoKSk7XG4gIGxldCBkZXNjcmlwdGlvbnM7XG5cbiAgLy8gc3VwcG9ydCBzZXJ2ZXIgc2VsZWN0aW9uIGJ5IG9wdGlvbnMgd2l0aCByZWFkUHJlZmVyZW5jZVxuICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnb2JqZWN0Jykge1xuICAgIGNvbnN0IHJlYWRQcmVmZXJlbmNlID0gc2VsZWN0b3IucmVhZFByZWZlcmVuY2VcbiAgICAgID8gc2VsZWN0b3IucmVhZFByZWZlcmVuY2VcbiAgICAgIDogUmVhZFByZWZlcmVuY2UucHJpbWFyeTtcblxuICAgIHNlbGVjdG9yID0gcmVhZFByZWZlcmVuY2VTZXJ2ZXJTZWxlY3RvcihyZWFkUHJlZmVyZW5jZSk7XG4gIH1cblxuICB0cnkge1xuICAgIGRlc2NyaXB0aW9ucyA9IHNlbGVjdG9yXG4gICAgICA/IHNlbGVjdG9yKHRvcG9sb2d5LmRlc2NyaXB0aW9uLCBzZXJ2ZXJEZXNjcmlwdGlvbnMpXG4gICAgICA6IHNlcnZlckRlc2NyaXB0aW9ucztcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBjYWxsYmFjayhlLCBudWxsKTtcbiAgfVxuXG4gIGlmIChkZXNjcmlwdGlvbnMubGVuZ3RoKSB7XG4gICAgY29uc3Qgc2VydmVycyA9IGRlc2NyaXB0aW9ucy5tYXAoZGVzY3JpcHRpb24gPT4gdG9wb2xvZ3kucy5zZXJ2ZXJzLmdldChkZXNjcmlwdGlvbi5hZGRyZXNzKSk7XG4gICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHNlcnZlcnMpO1xuICB9XG5cbiAgY29uc3QgcmV0cnlTZWxlY3Rpb24gPSAoKSA9PiB7XG4gICAgLy8gY2xlYXIgYWxsIGV4aXN0aW5nIG1vbml0b3IgdGltZXJzXG4gICAgdG9wb2xvZ3kucy5tb25pdG9yVGltZXJzLm1hcCh0aW1lciA9PiBjbGVhclRpbWVvdXQodGltZXIpKTtcbiAgICB0b3BvbG9neS5zLm1vbml0b3JUaW1lcnMgPSBbXTtcblxuICAgIC8vIGVuc3VyZSBhbGwgc2VydmVyIG1vbml0b3JzIGF0dGVtcHQgbW9uaXRvcmluZyBzb29uXG4gICAgdG9wb2xvZ3kucy5zZXJ2ZXJzLmZvckVhY2goc2VydmVyID0+IHtcbiAgICAgIGNvbnN0IHRpbWVyID0gc2V0VGltZW91dChcbiAgICAgICAgKCkgPT4gc2VydmVyLm1vbml0b3IoeyBoZWFydGJlYXRGcmVxdWVuY3lNUzogdG9wb2xvZ3kuZGVzY3JpcHRpb24uaGVhcnRiZWF0RnJlcXVlbmN5TVMgfSksXG4gICAgICAgIFRPUE9MT0dZX0RFRkFVTFRTLm1pbkhlYXJ0YmVhdEZyZXF1ZW5jeU1TXG4gICAgICApO1xuXG4gICAgICB0b3BvbG9neS5zLm1vbml0b3JUaW1lcnMucHVzaCh0aW1lcik7XG4gICAgfSk7XG5cbiAgICBjb25zdCBkZXNjcmlwdGlvbkNoYW5nZWRIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgLy8gc3VjY2Vzc2Z1bCBpdGVyYXRpb24sIGNsZWFyIHRoZSBjaGVjayB0aW1lclxuICAgICAgY2xlYXJUaW1lb3V0KGl0ZXJhdGlvblRpbWVyKTtcbiAgICAgIHRvcG9sb2d5LnMuaXRlcmF0aW9uVGltZXJzLnNwbGljZSh0aW1lckluZGV4LCAxKTtcblxuICAgICAgLy8gdG9wb2xvZ3kgZGVzY3JpcHRpb24gaGFzIGNoYW5nZWQgZHVlIHRvIG1vbml0b3JpbmcsIHJlYXR0ZW1wdCBzZXJ2ZXIgc2VsZWN0aW9uXG4gICAgICBzZWxlY3RTZXJ2ZXJzKHRvcG9sb2d5LCBzZWxlY3RvciwgdGltZW91dCwgc3RhcnQsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgY29uc3QgaXRlcmF0aW9uVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRvcG9sb2d5LnJlbW92ZUxpc3RlbmVyKCd0b3BvbG9neURlc2NyaXB0aW9uQ2hhbmdlZCcsIGRlc2NyaXB0aW9uQ2hhbmdlZEhhbmRsZXIpO1xuICAgICAgY2FsbGJhY2soXG4gICAgICAgIG5ldyBNb25nb1RpbWVvdXRFcnJvcihcbiAgICAgICAgICBgU2VydmVyIHNlbGVjdGlvbiB0aW1lZCBvdXQgYWZ0ZXIgJHt0aW1lb3V0fSBtc2AsXG4gICAgICAgICAgdG9wb2xvZ3kuZGVzY3JpcHRpb24uZXJyb3JcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9LCB0aW1lb3V0IC0gZHVyYXRpb24pO1xuXG4gICAgLy8gdHJhY2sgdGhpcyB0aW1lciBpbiBjYXNlIHdlIG5lZWQgdG8gY2xlYW4gaXQgdXAgb3V0c2lkZSB0aGlzIGxvb3BcbiAgICBjb25zdCB0aW1lckluZGV4ID0gdG9wb2xvZ3kucy5pdGVyYXRpb25UaW1lcnMucHVzaChpdGVyYXRpb25UaW1lcik7XG5cbiAgICB0b3BvbG9neS5vbmNlKCd0b3BvbG9neURlc2NyaXB0aW9uQ2hhbmdlZCcsIGRlc2NyaXB0aW9uQ2hhbmdlZEhhbmRsZXIpO1xuICB9O1xuXG4gIHJldHJ5U2VsZWN0aW9uKCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFuZENvbm5lY3RTZXJ2ZXIodG9wb2xvZ3ksIHNlcnZlckRlc2NyaXB0aW9uKSB7XG4gIHRvcG9sb2d5LmVtaXQoXG4gICAgJ3NlcnZlck9wZW5pbmcnLFxuICAgIG5ldyBtb25pdG9yaW5nLlNlcnZlck9wZW5pbmdFdmVudCh0b3BvbG9neS5zLmlkLCBzZXJ2ZXJEZXNjcmlwdGlvbi5hZGRyZXNzKVxuICApO1xuXG4gIGNvbnN0IHNlcnZlciA9IG5ldyBTZXJ2ZXIoc2VydmVyRGVzY3JpcHRpb24sIHRvcG9sb2d5LnMub3B0aW9ucywgdG9wb2xvZ3kpO1xuICByZWxheUV2ZW50cyhzZXJ2ZXIsIHRvcG9sb2d5LCBTRVJWRVJfUkVMQVlfRVZFTlRTKTtcblxuICBzZXJ2ZXIub25jZSgnY29ubmVjdCcsIHNlcnZlckNvbm5lY3RFdmVudEhhbmRsZXIoc2VydmVyLCB0b3BvbG9neSkpO1xuICBzZXJ2ZXIub24oJ2Rlc2NyaXB0aW9uUmVjZWl2ZWQnLCB0b3BvbG9neS5zZXJ2ZXJVcGRhdGVIYW5kbGVyLmJpbmQodG9wb2xvZ3kpKTtcbiAgc2VydmVyLm9uKCdlcnJvcicsIHNlcnZlckVycm9yRXZlbnRIYW5kbGVyKHNlcnZlciwgdG9wb2xvZ3kpKTtcbiAgc2VydmVyLm9uKCdjbG9zZScsICgpID0+IHRvcG9sb2d5LmVtaXQoJ2Nsb3NlJywgc2VydmVyKSk7XG4gIHNlcnZlci5jb25uZWN0KCk7XG4gIHJldHVybiBzZXJ2ZXI7XG59XG5cbi8qKlxuICogQ3JlYXRlIGBTZXJ2ZXJgIGluc3RhbmNlcyBmb3IgYWxsIGluaXRpYWxseSBrbm93biBzZXJ2ZXJzLCBjb25uZWN0IHRoZW0sIGFuZCBhc3NpZ25cbiAqIHRoZW0gdG8gdGhlIHBhc3NlZCBpbiBgVG9wb2xvZ3lgLlxuICpcbiAqIEBwYXJhbSB7VG9wb2xvZ3l9IHRvcG9sb2d5IFRoZSB0b3BvbG9neSByZXNwb25zaWJsZSBmb3IgdGhlIHNlcnZlcnNcbiAqIEBwYXJhbSB7U2VydmVyRGVzY3JpcHRpb25bXX0gc2VydmVyRGVzY3JpcHRpb25zIEEgbGlzdCBvZiBzZXJ2ZXIgZGVzY3JpcHRpb25zIHRvIGNvbm5lY3RcbiAqL1xuZnVuY3Rpb24gY29ubmVjdFNlcnZlcnModG9wb2xvZ3ksIHNlcnZlckRlc2NyaXB0aW9ucykge1xuICB0b3BvbG9neS5zLnNlcnZlcnMgPSBzZXJ2ZXJEZXNjcmlwdGlvbnMucmVkdWNlKChzZXJ2ZXJzLCBzZXJ2ZXJEZXNjcmlwdGlvbikgPT4ge1xuICAgIGNvbnN0IHNlcnZlciA9IGNyZWF0ZUFuZENvbm5lY3RTZXJ2ZXIodG9wb2xvZ3ksIHNlcnZlckRlc2NyaXB0aW9uKTtcbiAgICBzZXJ2ZXJzLnNldChzZXJ2ZXJEZXNjcmlwdGlvbi5hZGRyZXNzLCBzZXJ2ZXIpO1xuICAgIHJldHVybiBzZXJ2ZXJzO1xuICB9LCBuZXcgTWFwKCkpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTZXJ2ZXJzKHRvcG9sb2d5LCBpbmNvbWluZ1NlcnZlckRlc2NyaXB0aW9uKSB7XG4gIC8vIHVwZGF0ZSB0aGUgaW50ZXJuYWwgc2VydmVyJ3MgZGVzY3JpcHRpb25cbiAgaWYgKGluY29taW5nU2VydmVyRGVzY3JpcHRpb24gJiYgdG9wb2xvZ3kucy5zZXJ2ZXJzLmhhcyhpbmNvbWluZ1NlcnZlckRlc2NyaXB0aW9uLmFkZHJlc3MpKSB7XG4gICAgY29uc3Qgc2VydmVyID0gdG9wb2xvZ3kucy5zZXJ2ZXJzLmdldChpbmNvbWluZ1NlcnZlckRlc2NyaXB0aW9uLmFkZHJlc3MpO1xuICAgIHNlcnZlci5zLmRlc2NyaXB0aW9uID0gaW5jb21pbmdTZXJ2ZXJEZXNjcmlwdGlvbjtcbiAgfVxuXG4gIC8vIGFkZCBuZXcgc2VydmVycyBmb3IgYWxsIGRlc2NyaXB0aW9ucyB3ZSBjdXJyZW50bHkgZG9uJ3Qga25vdyBhYm91dCBsb2NhbGx5XG4gIGZvciAoY29uc3Qgc2VydmVyRGVzY3JpcHRpb24gb2YgdG9wb2xvZ3kuZGVzY3JpcHRpb24uc2VydmVycy52YWx1ZXMoKSkge1xuICAgIGlmICghdG9wb2xvZ3kucy5zZXJ2ZXJzLmhhcyhzZXJ2ZXJEZXNjcmlwdGlvbi5hZGRyZXNzKSkge1xuICAgICAgY29uc3Qgc2VydmVyID0gY3JlYXRlQW5kQ29ubmVjdFNlcnZlcih0b3BvbG9neSwgc2VydmVyRGVzY3JpcHRpb24pO1xuICAgICAgdG9wb2xvZ3kucy5zZXJ2ZXJzLnNldChzZXJ2ZXJEZXNjcmlwdGlvbi5hZGRyZXNzLCBzZXJ2ZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGZvciBhbGwgc2VydmVycyBubyBsb25nZXIga25vd24sIHJlbW92ZSB0aGVpciBkZXNjcmlwdGlvbnMgYW5kIGRlc3Ryb3kgdGhlaXIgaW5zdGFuY2VzXG4gIGZvciAoY29uc3QgZW50cnkgb2YgdG9wb2xvZ3kucy5zZXJ2ZXJzKSB7XG4gICAgY29uc3Qgc2VydmVyQWRkcmVzcyA9IGVudHJ5WzBdO1xuICAgIGlmICh0b3BvbG9neS5kZXNjcmlwdGlvbi5oYXNTZXJ2ZXIoc2VydmVyQWRkcmVzcykpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNvbnN0IHNlcnZlciA9IHRvcG9sb2d5LnMuc2VydmVycy5nZXQoc2VydmVyQWRkcmVzcyk7XG4gICAgdG9wb2xvZ3kucy5zZXJ2ZXJzLmRlbGV0ZShzZXJ2ZXJBZGRyZXNzKTtcblxuICAgIC8vIHByZXBhcmUgc2VydmVyIGZvciBnYXJiYWdlIGNvbGxlY3Rpb25cbiAgICBkZXN0cm95U2VydmVyKHNlcnZlciwgdG9wb2xvZ3kpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNlcnZlckNvbm5lY3RFdmVudEhhbmRsZXIoc2VydmVyLCB0b3BvbG9neSkge1xuICByZXR1cm4gZnVuY3Rpb24oLyogaXNNYXN0ZXIsIGVyciAqLykge1xuICAgIHNlcnZlci5tb25pdG9yKHtcbiAgICAgIGluaXRpYWw6IHRydWUsXG4gICAgICBoZWFydGJlYXRGcmVxdWVuY3lNUzogdG9wb2xvZ3kuZGVzY3JpcHRpb24uaGVhcnRiZWF0RnJlcXVlbmN5TVNcbiAgICB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2VydmVyRXJyb3JFdmVudEhhbmRsZXIoc2VydmVyIC8qLCB0b3BvbG9neSAqLykge1xuICByZXR1cm4gZnVuY3Rpb24oZXJyKSB7XG4gICAgaWYgKGlzU0RBTVVucmVjb3ZlcmFibGVFcnJvcihlcnIsIHNlcnZlcikpIHtcbiAgICAgIHJlc2V0U2VydmVyU3RhdGUoc2VydmVyLCBlcnIsIHsgY2xlYXJQb29sOiB0cnVlIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJlc2V0U2VydmVyU3RhdGUoc2VydmVyLCBlcnIpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBleGVjdXRlV3JpdGVPcGVyYXRpb24oYXJncywgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSAoY2FsbGJhY2sgPSBvcHRpb25zKSwgKG9wdGlvbnMgPSB7fSk7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIFRPRE86IG9uY2Ugd2UgZHJvcCBOb2RlIDQsIHVzZSBkZXN0cnVjdHVyaW5nIGVpdGhlciBoZXJlIG9yIGluIGFyZ3VtZW50cy5cbiAgY29uc3QgdG9wb2xvZ3kgPSBhcmdzLnRvcG9sb2d5O1xuICBjb25zdCBvcCA9IGFyZ3Mub3A7XG4gIGNvbnN0IG5zID0gYXJncy5ucztcbiAgY29uc3Qgb3BzID0gYXJncy5vcHM7XG5cbiAgY29uc3Qgd2lsbFJldHJ5V3JpdGUgPVxuICAgICFhcmdzLnJldHJ5aW5nICYmXG4gICAgISFvcHRpb25zLnJldHJ5V3JpdGVzICYmXG4gICAgb3B0aW9ucy5zZXNzaW9uICYmXG4gICAgaXNSZXRyeWFibGVXcml0ZXNTdXBwb3J0ZWQodG9wb2xvZ3kpICYmXG4gICAgIW9wdGlvbnMuc2Vzc2lvbi5pblRyYW5zYWN0aW9uKCk7XG5cbiAgdG9wb2xvZ3kuc2VsZWN0U2VydmVyKHdyaXRhYmxlU2VydmVyU2VsZWN0b3IoKSwgb3B0aW9ucywgKGVyciwgc2VydmVyKSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBoYW5kbGVyID0gKGVyciwgcmVzdWx0KSA9PiB7XG4gICAgICBpZiAoIWVycikgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHJlc3VsdCk7XG4gICAgICBpZiAoIWlzUmV0cnlhYmxlRXJyb3IoZXJyKSkge1xuICAgICAgICBlcnIgPSBnZXRNTUFQRXJyb3IoZXJyKTtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICB9XG5cbiAgICAgIGlmICh3aWxsUmV0cnlXcml0ZSkge1xuICAgICAgICBjb25zdCBuZXdBcmdzID0gT2JqZWN0LmFzc2lnbih7fSwgYXJncywgeyByZXRyeWluZzogdHJ1ZSB9KTtcbiAgICAgICAgcmV0dXJuIGV4ZWN1dGVXcml0ZU9wZXJhdGlvbihuZXdBcmdzLCBvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgIH07XG5cbiAgICBpZiAoY2FsbGJhY2sub3BlcmF0aW9uSWQpIHtcbiAgICAgIGhhbmRsZXIub3BlcmF0aW9uSWQgPSBjYWxsYmFjay5vcGVyYXRpb25JZDtcbiAgICB9XG5cbiAgICAvLyBpbmNyZW1lbnQgYW5kIGFzc2lnbiB0eG5OdW1iZXJcbiAgICBpZiAod2lsbFJldHJ5V3JpdGUpIHtcbiAgICAgIG9wdGlvbnMuc2Vzc2lvbi5pbmNyZW1lbnRUcmFuc2FjdGlvbk51bWJlcigpO1xuICAgICAgb3B0aW9ucy53aWxsUmV0cnlXcml0ZSA9IHdpbGxSZXRyeVdyaXRlO1xuICAgIH1cblxuICAgIC8vIGV4ZWN1dGUgdGhlIHdyaXRlIG9wZXJhdGlvblxuICAgIHNlcnZlcltvcF0obnMsIG9wcywgb3B0aW9ucywgaGFuZGxlcik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFJlc2V0cyB0aGUgaW50ZXJuYWwgc3RhdGUgb2YgdGhpcyBzZXJ2ZXIgdG8gYFVua25vd25gIGJ5IHNpbXVsYXRpbmcgYW4gZW1wdHkgaXNtYXN0ZXJcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtTZXJ2ZXJ9IHNlcnZlclxuICogQHBhcmFtIHtNb25nb0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdGhhdCBjYXVzZWQgdGhlIHN0YXRlIHJlc2V0XG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIE9wdGlvbmFsIHNldHRpbmdzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNsZWFyUG9vbD1mYWxzZV0gUG9vbCBzaG91bGQgYmUgY2xlYXJlZCBvdXQgb24gc3RhdGUgcmVzZXRcbiAqL1xuZnVuY3Rpb24gcmVzZXRTZXJ2ZXJTdGF0ZShzZXJ2ZXIsIGVycm9yLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB7IGNsZWFyUG9vbDogZmFsc2UgfSwgb3B0aW9ucyk7XG5cbiAgZnVuY3Rpb24gcmVzZXRTdGF0ZSgpIHtcbiAgICBzZXJ2ZXIuZW1pdChcbiAgICAgICdkZXNjcmlwdGlvblJlY2VpdmVkJyxcbiAgICAgIG5ldyBTZXJ2ZXJEZXNjcmlwdGlvbihzZXJ2ZXIuZGVzY3JpcHRpb24uYWRkcmVzcywgbnVsbCwgeyBlcnJvciB9KVxuICAgICk7XG5cbiAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IHNlcnZlci5tb25pdG9yKCkpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuY2xlYXJQb29sICYmIHNlcnZlci5zLnBvb2wpIHtcbiAgICBzZXJ2ZXIucy5wb29sLnJlc2V0KCgpID0+IHJlc2V0U3RhdGUoKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmVzZXRTdGF0ZSgpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVSZWFkUHJlZmVyZW5jZShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLnJlYWRQcmVmZXJlbmNlID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgciA9IG9wdGlvbnMucmVhZFByZWZlcmVuY2U7XG4gIGlmICh0eXBlb2YgciA9PT0gJ3N0cmluZycpIHtcbiAgICBvcHRpb25zLnJlYWRQcmVmZXJlbmNlID0gbmV3IFJlYWRQcmVmZXJlbmNlKHIpO1xuICB9IGVsc2UgaWYgKHIgJiYgIShyIGluc3RhbmNlb2YgUmVhZFByZWZlcmVuY2UpICYmIHR5cGVvZiByID09PSAnb2JqZWN0Jykge1xuICAgIGNvbnN0IG1vZGUgPSByLm1vZGUgfHwgci5wcmVmZXJlbmNlO1xuICAgIGlmIChtb2RlICYmIHR5cGVvZiBtb2RlID09PSAnc3RyaW5nJykge1xuICAgICAgb3B0aW9ucy5yZWFkUHJlZmVyZW5jZSA9IG5ldyBSZWFkUHJlZmVyZW5jZShtb2RlLCByLnRhZ3MsIHtcbiAgICAgICAgbWF4U3RhbGVuZXNzU2Vjb25kczogci5tYXhTdGFsZW5lc3NTZWNvbmRzXG4gICAgICB9KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIShyIGluc3RhbmNlb2YgUmVhZFByZWZlcmVuY2UpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCByZWFkIHByZWZlcmVuY2U6ICcgKyByKTtcbiAgfVxuXG4gIHJldHVybiBvcHRpb25zO1xufVxuXG5mdW5jdGlvbiBzcnZQb2xsaW5nSGFuZGxlcih0b3BvbG9neSkge1xuICByZXR1cm4gZnVuY3Rpb24gaGFuZGxlU3J2UG9sbGluZyhldikge1xuICAgIGNvbnN0IHByZXZpb3VzVG9wb2xvZ3lEZXNjcmlwdGlvbiA9IHRvcG9sb2d5LnMuZGVzY3JpcHRpb247XG4gICAgdG9wb2xvZ3kucy5kZXNjcmlwdGlvbiA9IHRvcG9sb2d5LnMuZGVzY3JpcHRpb24udXBkYXRlRnJvbVNydlBvbGxpbmdFdmVudChldik7XG4gICAgaWYgKHRvcG9sb2d5LnMuZGVzY3JpcHRpb24gPT09IHByZXZpb3VzVG9wb2xvZ3lEZXNjcmlwdGlvbikge1xuICAgICAgLy8gTm90aGluZyBjaGFuZ2VkLCBzbyByZXR1cm5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB1cGRhdGVTZXJ2ZXJzKHRvcG9sb2d5KTtcblxuICAgIHRvcG9sb2d5LmVtaXQoXG4gICAgICAndG9wb2xvZ3lEZXNjcmlwdGlvbkNoYW5nZWQnLFxuICAgICAgbmV3IG1vbml0b3JpbmcuVG9wb2xvZ3lEZXNjcmlwdGlvbkNoYW5nZWRFdmVudChcbiAgICAgICAgdG9wb2xvZ3kucy5pZCxcbiAgICAgICAgcHJldmlvdXNUb3BvbG9neURlc2NyaXB0aW9uLFxuICAgICAgICB0b3BvbG9neS5zLmRlc2NyaXB0aW9uXG4gICAgICApXG4gICAgKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBBIHNlcnZlciBvcGVuaW5nIFNEQU0gbW9uaXRvcmluZyBldmVudFxuICpcbiAqIEBldmVudCBUb3BvbG9neSNzZXJ2ZXJPcGVuaW5nXG4gKiBAdHlwZSB7U2VydmVyT3BlbmluZ0V2ZW50fVxuICovXG5cbi8qKlxuICogQSBzZXJ2ZXIgY2xvc2VkIFNEQU0gbW9uaXRvcmluZyBldmVudFxuICpcbiAqIEBldmVudCBUb3BvbG9neSNzZXJ2ZXJDbG9zZWRcbiAqIEB0eXBlIHtTZXJ2ZXJDbG9zZWRFdmVudH1cbiAqL1xuXG4vKipcbiAqIEEgc2VydmVyIGRlc2NyaXB0aW9uIFNEQU0gY2hhbmdlIG1vbml0b3JpbmcgZXZlbnRcbiAqXG4gKiBAZXZlbnQgVG9wb2xvZ3kjc2VydmVyRGVzY3JpcHRpb25DaGFuZ2VkXG4gKiBAdHlwZSB7U2VydmVyRGVzY3JpcHRpb25DaGFuZ2VkRXZlbnR9XG4gKi9cblxuLyoqXG4gKiBBIHRvcG9sb2d5IG9wZW4gU0RBTSBldmVudFxuICpcbiAqIEBldmVudCBUb3BvbG9neSN0b3BvbG9neU9wZW5pbmdcbiAqIEB0eXBlIHtUb3BvbG9neU9wZW5pbmdFdmVudH1cbiAqL1xuXG4vKipcbiAqIEEgdG9wb2xvZ3kgY2xvc2VkIFNEQU0gZXZlbnRcbiAqXG4gKiBAZXZlbnQgVG9wb2xvZ3kjdG9wb2xvZ3lDbG9zZWRcbiAqIEB0eXBlIHtUb3BvbG9neUNsb3NlZEV2ZW50fVxuICovXG5cbi8qKlxuICogQSB0b3BvbG9neSBzdHJ1Y3R1cmUgU0RBTSBjaGFuZ2UgZXZlbnRcbiAqXG4gKiBAZXZlbnQgVG9wb2xvZ3kjdG9wb2xvZ3lEZXNjcmlwdGlvbkNoYW5nZWRcbiAqIEB0eXBlIHtUb3BvbG9neURlc2NyaXB0aW9uQ2hhbmdlZEV2ZW50fVxuICovXG5cbi8qKlxuICogQSB0b3BvbG9neSBzZXJ2ZXJIZWFydGJlYXRTdGFydGVkIFNEQU0gZXZlbnRcbiAqXG4gKiBAZXZlbnQgVG9wb2xvZ3kjc2VydmVySGVhcnRiZWF0U3RhcnRlZFxuICogQHR5cGUge1NlcnZlckhlYXJ0YmVhdFN0YXJ0ZWRFdmVudH1cbiAqL1xuXG4vKipcbiAqIEEgdG9wb2xvZ3kgc2VydmVySGVhcnRiZWF0RmFpbGVkIFNEQU0gZXZlbnRcbiAqXG4gKiBAZXZlbnQgVG9wb2xvZ3kjc2VydmVySGVhcnRiZWF0RmFpbGVkXG4gKiBAdHlwZSB7U2VydmVySGVhcmJlYXRGYWlsZWRFdmVudH1cbiAqL1xuXG4vKipcbiAqIEEgdG9wb2xvZ3kgc2VydmVySGVhcnRiZWF0U3VjY2VlZGVkIFNEQU0gY2hhbmdlIGV2ZW50XG4gKlxuICogQGV2ZW50IFRvcG9sb2d5I3NlcnZlckhlYXJ0YmVhdFN1Y2NlZWRlZFxuICogQHR5cGUge1NlcnZlckhlYXJ0YmVhdFN1Y2NlZWRlZEV2ZW50fVxuICovXG5cbi8qKlxuICogQW4gZXZlbnQgZW1pdHRlZCBpbmRpY2F0aW5nIGEgY29tbWFuZCB3YXMgc3RhcnRlZCwgaWYgY29tbWFuZCBtb25pdG9yaW5nIGlzIGVuYWJsZWRcbiAqXG4gKiBAZXZlbnQgVG9wb2xvZ3kjY29tbWFuZFN0YXJ0ZWRcbiAqIEB0eXBlIHtvYmplY3R9XG4gKi9cblxuLyoqXG4gKiBBbiBldmVudCBlbWl0dGVkIGluZGljYXRpbmcgYSBjb21tYW5kIHN1Y2NlZWRlZCwgaWYgY29tbWFuZCBtb25pdG9yaW5nIGlzIGVuYWJsZWRcbiAqXG4gKiBAZXZlbnQgVG9wb2xvZ3kjY29tbWFuZFN1Y2NlZWRlZFxuICogQHR5cGUge29iamVjdH1cbiAqL1xuXG4vKipcbiAqIEFuIGV2ZW50IGVtaXR0ZWQgaW5kaWNhdGluZyBhIGNvbW1hbmQgZmFpbGVkLCBpZiBjb21tYW5kIG1vbml0b3JpbmcgaXMgZW5hYmxlZFxuICpcbiAqIEBldmVudCBUb3BvbG9neSNjb21tYW5kRmFpbGVkXG4gKiBAdHlwZSB7b2JqZWN0fVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gVG9wb2xvZ3k7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///92\n");

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst ServerDescription = __webpack_require__(43).ServerDescription;\nconst calculateDurationInMs = __webpack_require__(35).calculateDurationInMs;\n\n// pulled from `Server` implementation\nconst STATE_DISCONNECTED = 'disconnected';\nconst STATE_DISCONNECTING = 'disconnecting';\n\n/**\n * Published when server description changes, but does NOT include changes to the RTT.\n *\n * @property {Object} topologyId A unique identifier for the topology\n * @property {ServerAddress} address The address (host/port pair) of the server\n * @property {ServerDescription} previousDescription The previous server description\n * @property {ServerDescription} newDescription The new server description\n */\nclass ServerDescriptionChangedEvent {\n  constructor(topologyId, address, previousDescription, newDescription) {\n    Object.assign(this, { topologyId, address, previousDescription, newDescription });\n  }\n}\n\n/**\n * Published when server is initialized.\n *\n * @property {Object} topologyId A unique identifier for the topology\n * @property {ServerAddress} address The address (host/port pair) of the server\n */\nclass ServerOpeningEvent {\n  constructor(topologyId, address) {\n    Object.assign(this, { topologyId, address });\n  }\n}\n\n/**\n * Published when server is closed.\n *\n * @property {ServerAddress} address The address (host/port pair) of the server\n * @property {Object} topologyId A unique identifier for the topology\n */\nclass ServerClosedEvent {\n  constructor(topologyId, address) {\n    Object.assign(this, { topologyId, address });\n  }\n}\n\n/**\n * Published when topology description changes.\n *\n * @property {Object} topologyId\n * @property {TopologyDescription} previousDescription The old topology description\n * @property {TopologyDescription} newDescription The new topology description\n */\nclass TopologyDescriptionChangedEvent {\n  constructor(topologyId, previousDescription, newDescription) {\n    Object.assign(this, { topologyId, previousDescription, newDescription });\n  }\n}\n\n/**\n * Published when topology is initialized.\n *\n * @param {Object} topologyId A unique identifier for the topology\n */\nclass TopologyOpeningEvent {\n  constructor(topologyId) {\n    Object.assign(this, { topologyId });\n  }\n}\n\n/**\n * Published when topology is closed.\n *\n * @param {Object} topologyId A unique identifier for the topology\n */\nclass TopologyClosedEvent {\n  constructor(topologyId) {\n    Object.assign(this, { topologyId });\n  }\n}\n\n/**\n * Fired when the server monitor’s ismaster command is started - immediately before\n * the ismaster command is serialized into raw BSON and written to the socket.\n *\n * @property {Object} connectionId The connection id for the command\n */\nclass ServerHeartbeatStartedEvent {\n  constructor(connectionId) {\n    Object.assign(this, { connectionId });\n  }\n}\n\n/**\n * Fired when the server monitor’s ismaster succeeds.\n *\n * @param {Number} duration The execution time of the event in ms\n * @param {Object} reply The command reply\n * @param {Object} connectionId The connection id for the command\n */\nclass ServerHeartbeatSucceededEvent {\n  constructor(duration, reply, connectionId) {\n    Object.assign(this, { duration, reply, connectionId });\n  }\n}\n\n/**\n * Fired when the server monitor’s ismaster fails, either with an “ok: 0” or a socket exception.\n *\n * @param {Number} duration The execution time of the event in ms\n * @param {MongoError|Object} failure The command failure\n * @param {Object} connectionId The connection id for the command\n */\nclass ServerHeartbeatFailedEvent {\n  constructor(duration, failure, connectionId) {\n    Object.assign(this, { duration, failure, connectionId });\n  }\n}\n\n/**\n * Performs a server check as described by the SDAM spec.\n *\n * NOTE: This method automatically reschedules itself, so that there is always an active\n * monitoring process\n *\n * @param {Server} server The server to monitor\n */\nfunction monitorServer(server, options) {\n  options = options || {};\n  const heartbeatFrequencyMS = options.heartbeatFrequencyMS || 10000;\n\n  if (options.initial === true) {\n    server.s.monitorId = setTimeout(() => monitorServer(server), heartbeatFrequencyMS);\n    return;\n  }\n\n  // executes a single check of a server\n  const checkServer = callback => {\n    let start = process.hrtime();\n\n    // emit a signal indicating we have started the heartbeat\n    server.emit('serverHeartbeatStarted', new ServerHeartbeatStartedEvent(server.name));\n\n    // NOTE: legacy monitoring event\n    process.nextTick(() => server.emit('monitoring', server));\n\n    server.command(\n      'admin.$cmd',\n      { ismaster: true },\n      {\n        monitoring: true,\n        socketTimeout: server.s.options.connectionTimeout || 2000\n      },\n      (err, result) => {\n        let duration = calculateDurationInMs(start);\n\n        if (err) {\n          server.emit(\n            'serverHeartbeatFailed',\n            new ServerHeartbeatFailedEvent(duration, err, server.name)\n          );\n\n          return callback(err, null);\n        }\n\n        const isMaster = result.result;\n        server.emit(\n          'serverHeartbeatSucceeded',\n          new ServerHeartbeatSucceededEvent(duration, isMaster, server.name)\n        );\n\n        return callback(null, isMaster);\n      }\n    );\n  };\n\n  const successHandler = isMaster => {\n    server.s.monitoring = false;\n\n    // emit an event indicating that our description has changed\n    server.emit('descriptionReceived', new ServerDescription(server.description.address, isMaster));\n    if (server.s.state === STATE_DISCONNECTED || server.s.state === STATE_DISCONNECTING) {\n      return;\n    }\n\n    // schedule the next monitoring process\n    server.s.monitorId = setTimeout(() => monitorServer(server), heartbeatFrequencyMS);\n  };\n\n  // run the actual monitoring loop\n  server.s.monitoring = true;\n  checkServer((err, isMaster) => {\n    if (!err) {\n      successHandler(isMaster);\n      return;\n    }\n\n    // According to the SDAM specification's \"Network error during server check\" section, if\n    // an ismaster call fails we reset the server's pool. If a server was once connected,\n    // change its type to `Unknown` only after retrying once.\n    server.s.pool.reset(() => {\n      // otherwise re-attempt monitoring once\n      checkServer((error, isMaster) => {\n        if (error) {\n          server.s.monitoring = false;\n\n          // we revert to an `Unknown` by emitting a default description with no isMaster\n          server.emit(\n            'descriptionReceived',\n            new ServerDescription(server.description.address, null, { error })\n          );\n\n          // we do not reschedule monitoring in this case\n          return;\n        }\n\n        successHandler(isMaster);\n      });\n    });\n  });\n}\n\nmodule.exports = {\n  ServerDescriptionChangedEvent,\n  ServerOpeningEvent,\n  ServerClosedEvent,\n  TopologyDescriptionChangedEvent,\n  TopologyOpeningEvent,\n  TopologyClosedEvent,\n  ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent,\n  ServerHeartbeatFailedEvent,\n  monitorServer\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///93\n");

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst EventEmitter = __webpack_require__(39);\nconst MongoError = __webpack_require__(37).MongoError;\nconst Pool = __webpack_require__(53);\nconst relayEvents = __webpack_require__(35).relayEvents;\nconst wireProtocol = __webpack_require__(76);\nconst BSON = __webpack_require__(40).retrieveBSON();\nconst createClientInfo = __webpack_require__(59).createClientInfo;\nconst Logger = __webpack_require__(51);\nconst ServerDescription = __webpack_require__(43).ServerDescription;\nconst ReadPreference = __webpack_require__(42);\nconst monitorServer = __webpack_require__(93).monitorServer;\nconst MongoParseError = __webpack_require__(37).MongoParseError;\nconst MongoNetworkError = __webpack_require__(37).MongoNetworkError;\nconst collationNotSupported = __webpack_require__(35).collationNotSupported;\nconst debugOptions = __webpack_require__(40).debugOptions;\nconst isSDAMUnrecoverableError = __webpack_require__(37).isSDAMUnrecoverableError;\n\n// Used for filtering out fields for logging\nconst DEBUG_FIELDS = [\n  'reconnect',\n  'reconnectTries',\n  'reconnectInterval',\n  'emitError',\n  'cursorFactory',\n  'host',\n  'port',\n  'size',\n  'keepAlive',\n  'keepAliveInitialDelay',\n  'noDelay',\n  'connectionTimeout',\n  'checkServerIdentity',\n  'socketTimeout',\n  'ssl',\n  'ca',\n  'crl',\n  'cert',\n  'key',\n  'rejectUnauthorized',\n  'promoteLongs',\n  'promoteValues',\n  'promoteBuffers',\n  'servername'\n];\n\nconst STATE_DISCONNECTING = 'disconnecting';\nconst STATE_DISCONNECTED = 'disconnected';\nconst STATE_CONNECTING = 'connecting';\nconst STATE_CONNECTED = 'connected';\n\n/**\n *\n * @fires Server#serverHeartbeatStarted\n * @fires Server#serverHeartbeatSucceeded\n * @fires Server#serverHeartbeatFailed\n */\nclass Server extends EventEmitter {\n  /**\n   * Create a server\n   *\n   * @param {ServerDescription} description\n   * @param {Object} options\n   */\n  constructor(description, options, topology) {\n    super();\n\n    this.s = {\n      // the server description\n      description,\n      // a saved copy of the incoming options\n      options,\n      // the server logger\n      logger: Logger('Server', options),\n      // the bson parser\n      bson:\n        options.bson ||\n        new BSON([\n          BSON.Binary,\n          BSON.Code,\n          BSON.DBRef,\n          BSON.Decimal128,\n          BSON.Double,\n          BSON.Int32,\n          BSON.Long,\n          BSON.Map,\n          BSON.MaxKey,\n          BSON.MinKey,\n          BSON.ObjectId,\n          BSON.BSONRegExp,\n          BSON.Symbol,\n          BSON.Timestamp\n        ]),\n      // client metadata for the initial handshake\n      clientInfo: createClientInfo(options),\n      // state variable to determine if there is an active server check in progress\n      monitoring: false,\n      // the implementation of the monitoring method\n      monitorFunction: options.monitorFunction || monitorServer,\n      // the connection pool\n      pool: null,\n      // the server state\n      state: STATE_DISCONNECTED,\n      credentials: options.credentials,\n      topology\n    };\n  }\n\n  get description() {\n    return this.s.description;\n  }\n\n  get name() {\n    return this.s.description.address;\n  }\n\n  get autoEncrypter() {\n    if (this.s.options && this.s.options.autoEncrypter) {\n      return this.s.options.autoEncrypter;\n    }\n    return null;\n  }\n\n  /**\n   * Initiate server connect\n   */\n  connect(options) {\n    options = options || {};\n\n    // do not allow connect to be called on anything that's not disconnected\n    if (this.s.pool && !this.s.pool.isDisconnected() && !this.s.pool.isDestroyed()) {\n      throw new MongoError(`Server instance in invalid state ${this.s.pool.state}`);\n    }\n\n    // create a pool\n    const addressParts = this.description.address.split(':');\n    const poolOptions = Object.assign(\n      { host: addressParts[0], port: parseInt(addressParts[1], 10) },\n      this.s.options,\n      options,\n      { bson: this.s.bson }\n    );\n\n    // NOTE: this should only be the case if we are connecting to a single server\n    poolOptions.reconnect = true;\n    poolOptions.legacyCompatMode = false;\n\n    this.s.pool = new Pool(this, poolOptions);\n\n    // setup listeners\n    this.s.pool.on('connect', connectEventHandler(this));\n    this.s.pool.on('close', errorEventHandler(this));\n    this.s.pool.on('error', errorEventHandler(this));\n    this.s.pool.on('parseError', parseErrorEventHandler(this));\n\n    // it is unclear whether consumers should even know about these events\n    // this.s.pool.on('timeout', timeoutEventHandler(this));\n    // this.s.pool.on('reconnect', reconnectEventHandler(this));\n    // this.s.pool.on('reconnectFailed', errorEventHandler(this));\n\n    // relay all command monitoring events\n    relayEvents(this.s.pool, this, ['commandStarted', 'commandSucceeded', 'commandFailed']);\n\n    this.s.state = STATE_CONNECTING;\n\n    // If auth settings have been provided, use them\n    if (options.auth) {\n      this.s.pool.connect.apply(this.s.pool, options.auth);\n      return;\n    }\n\n    this.s.pool.connect();\n  }\n\n  /**\n   * Destroy the server connection\n   *\n   * @param {Boolean} [options.force=false] Force destroy the pool\n   */\n  destroy(options, callback) {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = Object.assign({}, { force: false }, options);\n\n    this.s.state = STATE_DISCONNECTING;\n    const done = err => {\n      this.emit('closed');\n      this.s.state = STATE_DISCONNECTED;\n      if (typeof callback === 'function') {\n        callback(err, null);\n      }\n    };\n\n    if (!this.s.pool) {\n      return done();\n    }\n\n    ['close', 'error', 'timeout', 'parseError', 'connect'].forEach(event => {\n      this.s.pool.removeAllListeners(event);\n    });\n\n    if (this.s.monitorId) {\n      clearTimeout(this.s.monitorId);\n    }\n\n    this.s.pool.destroy(options.force, done);\n  }\n\n  /**\n   * Immediately schedule monitoring of this server. If there already an attempt being made\n   * this will be a no-op.\n   */\n  monitor(options) {\n    options = options || {};\n    if (this.s.state !== STATE_CONNECTED || this.s.monitoring) return;\n    if (this.s.monitorId) clearTimeout(this.s.monitorId);\n    this.s.monitorFunction(this, options);\n  }\n\n  /**\n   * Execute a command\n   *\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object} cmd The command hash\n   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.checkKeys=false] Specify if the bson parser should validate keys.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {Boolean} [options.fullResult=false] Return the full envelope instead of just the result document.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {opResultCallback} callback A callback function\n   */\n  command(ns, cmd, options, callback) {\n    if (typeof options === 'function') {\n      (callback = options), (options = {}), (options = options || {});\n    }\n\n    const error = basicReadValidations(this, options);\n    if (error) {\n      return callback(error, null);\n    }\n\n    // Clone the options\n    options = Object.assign({}, options, { wireProtocolCommand: false });\n\n    // Debug log\n    if (this.s.logger.isDebug()) {\n      this.s.logger.debug(\n        `executing command [${JSON.stringify({\n          ns,\n          cmd,\n          options: debugOptions(DEBUG_FIELDS, options)\n        })}] against ${this.name}`\n      );\n    }\n\n    // error if collation not supported\n    if (collationNotSupported(this, cmd)) {\n      callback(new MongoError(`server ${this.name} does not support collation`));\n      return;\n    }\n\n    wireProtocol.command(this, ns, cmd, options, (err, result) => {\n      if (err) {\n        if (options.session && err instanceof MongoNetworkError) {\n          options.session.serverSession.isDirty = true;\n        }\n\n        if (isSDAMUnrecoverableError(err, this)) {\n          this.emit('error', err);\n        }\n      }\n\n      callback(err, result);\n    });\n  }\n\n  /**\n   * Execute a query against the server\n   *\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object} cmd The command document for the query\n   * @param {object} options Optional settings\n   * @param {function} callback\n   */\n  query(ns, cmd, cursorState, options, callback) {\n    wireProtocol.query(this, ns, cmd, cursorState, options, (err, result) => {\n      if (err) {\n        if (options.session && err instanceof MongoNetworkError) {\n          options.session.serverSession.isDirty = true;\n        }\n\n        if (isSDAMUnrecoverableError(err, this)) {\n          this.emit('error', err);\n        }\n      }\n\n      callback(err, result);\n    });\n  }\n\n  /**\n   * Execute a `getMore` against the server\n   *\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object} cursorState State data associated with the cursor calling this method\n   * @param {object} options Optional settings\n   * @param {function} callback\n   */\n  getMore(ns, cursorState, batchSize, options, callback) {\n    wireProtocol.getMore(this, ns, cursorState, batchSize, options, (err, result) => {\n      if (err) {\n        if (options.session && err instanceof MongoNetworkError) {\n          options.session.serverSession.isDirty = true;\n        }\n\n        if (isSDAMUnrecoverableError(err, this)) {\n          this.emit('error', err);\n        }\n      }\n\n      callback(err, result);\n    });\n  }\n\n  /**\n   * Execute a `killCursors` command against the server\n   *\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object} cursorState State data associated with the cursor calling this method\n   * @param {function} callback\n   */\n  killCursors(ns, cursorState, callback) {\n    wireProtocol.killCursors(this, ns, cursorState, (err, result) => {\n      if (err && isSDAMUnrecoverableError(err, this)) {\n        this.emit('error', err);\n      }\n\n      if (typeof callback === 'function') {\n        callback(err, result);\n      }\n    });\n  }\n\n  /**\n   * Insert one or more documents\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {array} ops An array of documents to insert\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern={}] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {opResultCallback} callback A callback function\n   */\n  insert(ns, ops, options, callback) {\n    executeWriteOperation({ server: this, op: 'insert', ns, ops }, options, callback);\n  }\n\n  /**\n   * Perform one or more update operations\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {array} ops An array of updates\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern={}] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {opResultCallback} callback A callback function\n   */\n  update(ns, ops, options, callback) {\n    executeWriteOperation({ server: this, op: 'update', ns, ops }, options, callback);\n  }\n\n  /**\n   * Perform one or more remove operations\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {array} ops An array of removes\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern={}] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {opResultCallback} callback A callback function\n   */\n  remove(ns, ops, options, callback) {\n    executeWriteOperation({ server: this, op: 'remove', ns, ops }, options, callback);\n  }\n}\n\nObject.defineProperty(Server.prototype, 'clusterTime', {\n  get: function() {\n    return this.s.topology.clusterTime;\n  },\n  set: function(clusterTime) {\n    this.s.topology.clusterTime = clusterTime;\n  }\n});\n\nfunction basicWriteValidations(server) {\n  if (!server.s.pool) {\n    return new MongoError('server instance is not connected');\n  }\n\n  if (server.s.pool.isDestroyed()) {\n    return new MongoError('server instance pool was destroyed');\n  }\n\n  return null;\n}\n\nfunction basicReadValidations(server, options) {\n  const error = basicWriteValidations(server, options);\n  if (error) {\n    return error;\n  }\n\n  if (options.readPreference && !(options.readPreference instanceof ReadPreference)) {\n    return new MongoError('readPreference must be an instance of ReadPreference');\n  }\n}\n\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // TODO: once we drop Node 4, use destructuring either here or in arguments.\n  const server = args.server;\n  const op = args.op;\n  const ns = args.ns;\n  const ops = Array.isArray(args.ops) ? args.ops : [args.ops];\n\n  const error = basicWriteValidations(server, options);\n  if (error) {\n    callback(error, null);\n    return;\n  }\n\n  if (collationNotSupported(server, options)) {\n    callback(new MongoError(`server ${server.name} does not support collation`));\n    return;\n  }\n\n  return wireProtocol[op](server, ns, ops, options, (err, result) => {\n    if (err) {\n      if (options.session && err instanceof MongoNetworkError) {\n        options.session.serverSession.isDirty = true;\n      }\n\n      if (isSDAMUnrecoverableError(err, server)) {\n        server.emit('error', err);\n      }\n    }\n\n    callback(err, result);\n  });\n}\n\nfunction connectEventHandler(server) {\n  return function(pool, conn) {\n    const ismaster = conn.ismaster;\n    server.s.lastIsMasterMS = conn.lastIsMasterMS;\n    if (conn.agreedCompressor) {\n      server.s.pool.options.agreedCompressor = conn.agreedCompressor;\n    }\n\n    if (conn.zlibCompressionLevel) {\n      server.s.pool.options.zlibCompressionLevel = conn.zlibCompressionLevel;\n    }\n\n    if (conn.ismaster.$clusterTime) {\n      const $clusterTime = conn.ismaster.$clusterTime;\n      server.s.sclusterTime = $clusterTime;\n    }\n\n    // log the connection event if requested\n    if (server.s.logger.isInfo()) {\n      server.s.logger.info(\n        `server ${server.name} connected with ismaster [${JSON.stringify(ismaster)}]`\n      );\n    }\n\n    // emit an event indicating that our description has changed\n    server.emit('descriptionReceived', new ServerDescription(server.description.address, ismaster));\n\n    // we are connected and handshaked (guaranteed by the pool)\n    server.s.state = STATE_CONNECTED;\n    server.emit('connect', server);\n  };\n}\n\nfunction errorEventHandler(server) {\n  return function(err) {\n    if (err) {\n      server.emit('error', new MongoNetworkError(err));\n    }\n\n    server.emit('close');\n  };\n}\n\nfunction parseErrorEventHandler(server) {\n  return function(err) {\n    server.s.state = STATE_DISCONNECTED;\n    server.emit('error', new MongoParseError(err));\n  };\n}\n\nmodule.exports = Server;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///94\n");

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst ServerType = __webpack_require__(43).ServerType;\nconst TopologyType = __webpack_require__(44).TopologyType;\nconst ReadPreference = __webpack_require__(42);\nconst MongoError = __webpack_require__(37).MongoError;\n\n// max staleness constants\nconst IDLE_WRITE_PERIOD = 10000;\nconst SMALLEST_MAX_STALENESS_SECONDS = 90;\n\n/**\n * Returns a server selector that selects for writable servers\n */\nfunction writableServerSelector() {\n  return function(topologyDescription, servers) {\n    return latencyWindowReducer(topologyDescription, servers.filter(s => s.isWritable));\n  };\n}\n\n/**\n * Reduces the passed in array of servers by the rules of the \"Max Staleness\" specification\n * found here: https://github.com/mongodb/specifications/blob/master/source/max-staleness/max-staleness.rst\n *\n * @param {ReadPreference} readPreference The read preference providing max staleness guidance\n * @param {topologyDescription} topologyDescription The topology description\n * @param {ServerDescription[]} servers The list of server descriptions to be reduced\n * @return {ServerDescription[]} The list of servers that satisfy the requirements of max staleness\n */\nfunction maxStalenessReducer(readPreference, topologyDescription, servers) {\n  if (readPreference.maxStalenessSeconds == null || readPreference.maxStalenessSeconds < 0) {\n    return servers;\n  }\n\n  const maxStaleness = readPreference.maxStalenessSeconds;\n  const maxStalenessVariance =\n    (topologyDescription.heartbeatFrequencyMS + IDLE_WRITE_PERIOD) / 1000;\n  if (maxStaleness < maxStalenessVariance) {\n    throw new MongoError(`maxStalenessSeconds must be at least ${maxStalenessVariance} seconds`);\n  }\n\n  if (maxStaleness < SMALLEST_MAX_STALENESS_SECONDS) {\n    throw new MongoError(\n      `maxStalenessSeconds must be at least ${SMALLEST_MAX_STALENESS_SECONDS} seconds`\n    );\n  }\n\n  if (topologyDescription.type === TopologyType.ReplicaSetWithPrimary) {\n    const primary = servers.filter(primaryFilter)[0];\n    return servers.reduce((result, server) => {\n      const stalenessMS =\n        server.lastUpdateTime -\n        server.lastWriteDate -\n        (primary.lastUpdateTime - primary.lastWriteDate) +\n        topologyDescription.heartbeatFrequencyMS;\n\n      const staleness = stalenessMS / 1000;\n      if (staleness <= readPreference.maxStalenessSeconds) result.push(server);\n      return result;\n    }, []);\n  } else if (topologyDescription.type === TopologyType.ReplicaSetNoPrimary) {\n    const sMax = servers.reduce((max, s) => (s.lastWriteDate > max.lastWriteDate ? s : max));\n    return servers.reduce((result, server) => {\n      const stalenessMS =\n        sMax.lastWriteDate - server.lastWriteDate + topologyDescription.heartbeatFrequencyMS;\n\n      const staleness = stalenessMS / 1000;\n      if (staleness <= readPreference.maxStalenessSeconds) result.push(server);\n      return result;\n    }, []);\n  }\n\n  return servers;\n}\n\n/**\n * Determines whether a server's tags match a given set of tags\n *\n * @param {String[]} tagSet The requested tag set to match\n * @param {String[]} serverTags The server's tags\n */\nfunction tagSetMatch(tagSet, serverTags) {\n  const keys = Object.keys(tagSet);\n  const serverTagKeys = Object.keys(serverTags);\n  for (let i = 0; i < keys.length; ++i) {\n    const key = keys[i];\n    if (serverTagKeys.indexOf(key) === -1 || serverTags[key] !== tagSet[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Reduces a set of server descriptions based on tags requested by the read preference\n *\n * @param {ReadPreference} readPreference The read preference providing the requested tags\n * @param {ServerDescription[]} servers The list of server descriptions to reduce\n * @return {ServerDescription[]} The list of servers matching the requested tags\n */\nfunction tagSetReducer(readPreference, servers) {\n  if (\n    readPreference.tags == null ||\n    (Array.isArray(readPreference.tags) && readPreference.tags.length === 0)\n  ) {\n    return servers;\n  }\n\n  for (let i = 0; i < readPreference.tags.length; ++i) {\n    const tagSet = readPreference.tags[i];\n    const serversMatchingTagset = servers.reduce((matched, server) => {\n      if (tagSetMatch(tagSet, server.tags)) matched.push(server);\n      return matched;\n    }, []);\n\n    if (serversMatchingTagset.length) {\n      return serversMatchingTagset;\n    }\n  }\n\n  return [];\n}\n\n/**\n * Reduces a list of servers to ensure they fall within an acceptable latency window. This is\n * further specified in the \"Server Selection\" specification, found here:\n * https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.rst\n *\n * @param {topologyDescription} topologyDescription The topology description\n * @param {ServerDescription[]} servers The list of servers to reduce\n * @returns {ServerDescription[]} The servers which fall within an acceptable latency window\n */\nfunction latencyWindowReducer(topologyDescription, servers) {\n  const low = servers.reduce(\n    (min, server) => (min === -1 ? server.roundTripTime : Math.min(server.roundTripTime, min)),\n    -1\n  );\n\n  const high = low + topologyDescription.localThresholdMS;\n\n  return servers.reduce((result, server) => {\n    if (server.roundTripTime <= high && server.roundTripTime >= low) result.push(server);\n    return result;\n  }, []);\n}\n\n// filters\nfunction primaryFilter(server) {\n  return server.type === ServerType.RSPrimary;\n}\n\nfunction secondaryFilter(server) {\n  return server.type === ServerType.RSSecondary;\n}\n\nfunction nearestFilter(server) {\n  return server.type === ServerType.RSSecondary || server.type === ServerType.RSPrimary;\n}\n\nfunction knownFilter(server) {\n  return server.type !== ServerType.Unknown;\n}\n\n/**\n * Returns a function which selects servers based on a provided read preference\n *\n * @param {ReadPreference} readPreference The read preference to select with\n */\nfunction readPreferenceServerSelector(readPreference) {\n  if (!readPreference.isValid()) {\n    throw new TypeError('Invalid read preference specified');\n  }\n\n  return function(topologyDescription, servers) {\n    const commonWireVersion = topologyDescription.commonWireVersion;\n    if (\n      commonWireVersion &&\n      (readPreference.minWireVersion && readPreference.minWireVersion > commonWireVersion)\n    ) {\n      throw new MongoError(\n        `Minimum wire version '${\n          readPreference.minWireVersion\n        }' required, but found '${commonWireVersion}'`\n      );\n    }\n\n    if (\n      topologyDescription.type === TopologyType.Single ||\n      topologyDescription.type === TopologyType.Sharded\n    ) {\n      return latencyWindowReducer(topologyDescription, servers.filter(knownFilter));\n    }\n\n    if (readPreference.mode === ReadPreference.PRIMARY) {\n      return servers.filter(primaryFilter);\n    }\n\n    if (readPreference.mode === ReadPreference.SECONDARY) {\n      return latencyWindowReducer(\n        topologyDescription,\n        tagSetReducer(\n          readPreference,\n          maxStalenessReducer(readPreference, topologyDescription, servers)\n        )\n      ).filter(secondaryFilter);\n    } else if (readPreference.mode === ReadPreference.NEAREST) {\n      return latencyWindowReducer(\n        topologyDescription,\n        tagSetReducer(\n          readPreference,\n          maxStalenessReducer(readPreference, topologyDescription, servers)\n        )\n      ).filter(nearestFilter);\n    } else if (readPreference.mode === ReadPreference.SECONDARY_PREFERRED) {\n      const result = latencyWindowReducer(\n        topologyDescription,\n        tagSetReducer(\n          readPreference,\n          maxStalenessReducer(readPreference, topologyDescription, servers)\n        )\n      ).filter(secondaryFilter);\n\n      return result.length === 0 ? servers.filter(primaryFilter) : result;\n    } else if (readPreference.mode === ReadPreference.PRIMARY_PREFERRED) {\n      const result = servers.filter(primaryFilter);\n      if (result.length) {\n        return result;\n      }\n\n      return latencyWindowReducer(\n        topologyDescription,\n        tagSetReducer(\n          readPreference,\n          maxStalenessReducer(readPreference, topologyDescription, servers)\n        )\n      ).filter(secondaryFilter);\n    }\n  };\n}\n\nmodule.exports = {\n  writableServerSelector,\n  readPreferenceServerSelector\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///95\n");

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Logger = __webpack_require__(51);\nconst EventEmitter = __webpack_require__(39).EventEmitter;\nconst dns = __webpack_require__(97);\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param {String} srvAddress The address to check against a domain\n * @param {String} parentDomain The domain to check the provided address against\n * @return {Boolean} Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n\nclass SrvPollingEvent {\n  constructor(srvRecords) {\n    this.srvRecords = srvRecords;\n  }\n\n  addresses() {\n    return new Set(this.srvRecords.map(record => `${record.name}:${record.port}`));\n  }\n}\n\nclass SrvPoller extends EventEmitter {\n  /**\n   * @param {object} options\n   * @param {string} options.srvHost\n   * @param {number} [options.heartbeatFrequencyMS]\n   * @param {function} [options.logger]\n   * @param {string} [options.loggerLevel]\n   */\n  constructor(options) {\n    super();\n\n    if (!options || !options.srvHost) {\n      throw new TypeError('options for SrvPoller must exist and include srvHost');\n    }\n\n    this.srvHost = options.srvHost;\n    this.rescanSrvIntervalMS = 60000;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS || 10000;\n    this.logger = Logger('srvPoller', options);\n\n    this.haMode = false;\n    this.generation = 0;\n\n    this._timeout = null;\n  }\n\n  get srvAddress() {\n    return `_mongodb._tcp.${this.srvHost}`;\n  }\n\n  get intervalMS() {\n    return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMs;\n  }\n\n  start() {\n    if (!this._timeout) {\n      this.schedule();\n    }\n  }\n\n  stop() {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n      this.generation += 1;\n      this._timeout = null;\n    }\n  }\n\n  schedule() {\n    clearTimeout(this._timeout);\n    this._timeout = setTimeout(() => this._poll(), this.intervalMS);\n  }\n\n  success(srvRecords) {\n    this.haMode = false;\n    this.schedule();\n    this.emit('srvRecordDiscovery', new SrvPollingEvent(srvRecords));\n  }\n\n  failure(message, obj) {\n    this.logger.warn(message, obj);\n    this.haMode = true;\n    this.schedule();\n  }\n\n  parentDomainMismatch(srvRecord) {\n    this.logger.warn(\n      `parent domain mismatch on SRV record (${srvRecord.name}:${srvRecord.port})`,\n      srvRecord\n    );\n  }\n\n  _poll() {\n    const generation = this.generation;\n    dns.resolveSrv(this.srvAddress, (err, srvRecords) => {\n      if (generation !== this.generation) {\n        return;\n      }\n\n      if (err) {\n        this.failure('DNS error', err);\n        return;\n      }\n\n      const finalAddresses = [];\n      srvRecords.forEach(record => {\n        if (matchesParentDomain(record.name, this.srvHost)) {\n          finalAddresses.push(record);\n        } else {\n          this.parentDomainMismatch(record);\n        }\n      });\n\n      if (!finalAddresses.length) {\n        this.failure('No valid addresses found at host');\n        return;\n      }\n\n      this.success(finalAddresses);\n    });\n  }\n}\n\nmodule.exports.SrvPollingEvent = SrvPollingEvent;\nmodule.exports.SrvPoller = SrvPoller;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NvcmUvc2RhbS9zcnZfcG9sbGluZy5qcz8zNzFmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGVBQWUsbUJBQU8sQ0FBQyxFQUFzQjtBQUM3QyxxQkFBcUIsbUJBQU8sQ0FBQyxFQUFRO0FBQ3JDLFlBQVksbUJBQU8sQ0FBQyxFQUFLO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDhCQUE4QjtBQUNoRCxxQkFBcUIsZ0NBQWdDO0FBQ3JEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvREFBb0QsWUFBWSxHQUFHLFlBQVk7QUFDL0U7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsYUFBYSxTQUFTO0FBQ3RCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLDRCQUE0QixhQUFhO0FBQ3pDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0NBQStDLGVBQWUsR0FBRyxlQUFlO0FBQ2hGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBIiwiZmlsZSI6Ijk2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBMb2dnZXIgPSByZXF1aXJlKCcuLi9jb25uZWN0aW9uL2xvZ2dlcicpO1xuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuY29uc3QgZG5zID0gcmVxdWlyZSgnZG5zJyk7XG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhIHByb3ZpZGVkIGFkZHJlc3MgbWF0Y2hlcyB0aGUgcHJvdmlkZWQgcGFyZW50IGRvbWFpbiBpbiBvcmRlclxuICogdG8gYXZvaWQgY2VydGFpbiBhdHRhY2sgdmVjdG9ycy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3J2QWRkcmVzcyBUaGUgYWRkcmVzcyB0byBjaGVjayBhZ2FpbnN0IGEgZG9tYWluXG4gKiBAcGFyYW0ge1N0cmluZ30gcGFyZW50RG9tYWluIFRoZSBkb21haW4gdG8gY2hlY2sgdGhlIHByb3ZpZGVkIGFkZHJlc3MgYWdhaW5zdFxuICogQHJldHVybiB7Qm9vbGVhbn0gV2hldGhlciB0aGUgcHJvdmlkZWQgYWRkcmVzcyBtYXRjaGVzIHRoZSBwYXJlbnQgZG9tYWluXG4gKi9cbmZ1bmN0aW9uIG1hdGNoZXNQYXJlbnREb21haW4oc3J2QWRkcmVzcywgcGFyZW50RG9tYWluKSB7XG4gIGNvbnN0IHJlZ2V4ID0gL14uKj9cXC4vO1xuICBjb25zdCBzcnYgPSBgLiR7c3J2QWRkcmVzcy5yZXBsYWNlKHJlZ2V4LCAnJyl9YDtcbiAgY29uc3QgcGFyZW50ID0gYC4ke3BhcmVudERvbWFpbi5yZXBsYWNlKHJlZ2V4LCAnJyl9YDtcbiAgcmV0dXJuIHNydi5lbmRzV2l0aChwYXJlbnQpO1xufVxuXG5jbGFzcyBTcnZQb2xsaW5nRXZlbnQge1xuICBjb25zdHJ1Y3RvcihzcnZSZWNvcmRzKSB7XG4gICAgdGhpcy5zcnZSZWNvcmRzID0gc3J2UmVjb3JkcztcbiAgfVxuXG4gIGFkZHJlc3NlcygpIHtcbiAgICByZXR1cm4gbmV3IFNldCh0aGlzLnNydlJlY29yZHMubWFwKHJlY29yZCA9PiBgJHtyZWNvcmQubmFtZX06JHtyZWNvcmQucG9ydH1gKSk7XG4gIH1cbn1cblxuY2xhc3MgU3J2UG9sbGVyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnNydkhvc3RcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmhlYXJ0YmVhdEZyZXF1ZW5jeU1TXVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbb3B0aW9ucy5sb2dnZXJdXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sb2dnZXJMZXZlbF1cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLnNydkhvc3QpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbnMgZm9yIFNydlBvbGxlciBtdXN0IGV4aXN0IGFuZCBpbmNsdWRlIHNydkhvc3QnKTtcbiAgICB9XG5cbiAgICB0aGlzLnNydkhvc3QgPSBvcHRpb25zLnNydkhvc3Q7XG4gICAgdGhpcy5yZXNjYW5TcnZJbnRlcnZhbE1TID0gNjAwMDA7XG4gICAgdGhpcy5oZWFydGJlYXRGcmVxdWVuY3lNUyA9IG9wdGlvbnMuaGVhcnRiZWF0RnJlcXVlbmN5TVMgfHwgMTAwMDA7XG4gICAgdGhpcy5sb2dnZXIgPSBMb2dnZXIoJ3NydlBvbGxlcicsIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5oYU1vZGUgPSBmYWxzZTtcbiAgICB0aGlzLmdlbmVyYXRpb24gPSAwO1xuXG4gICAgdGhpcy5fdGltZW91dCA9IG51bGw7XG4gIH1cblxuICBnZXQgc3J2QWRkcmVzcygpIHtcbiAgICByZXR1cm4gYF9tb25nb2RiLl90Y3AuJHt0aGlzLnNydkhvc3R9YDtcbiAgfVxuXG4gIGdldCBpbnRlcnZhbE1TKCkge1xuICAgIHJldHVybiB0aGlzLmhhTW9kZSA/IHRoaXMuaGVhcnRiZWF0RnJlcXVlbmN5TVMgOiB0aGlzLnJlc2NhblNydkludGVydmFsTXM7XG4gIH1cblxuICBzdGFydCgpIHtcbiAgICBpZiAoIXRoaXMuX3RpbWVvdXQpIHtcbiAgICAgIHRoaXMuc2NoZWR1bGUoKTtcbiAgICB9XG4gIH1cblxuICBzdG9wKCkge1xuICAgIGlmICh0aGlzLl90aW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XG4gICAgICB0aGlzLmdlbmVyYXRpb24gKz0gMTtcbiAgICAgIHRoaXMuX3RpbWVvdXQgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHNjaGVkdWxlKCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KTtcbiAgICB0aGlzLl90aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLl9wb2xsKCksIHRoaXMuaW50ZXJ2YWxNUyk7XG4gIH1cblxuICBzdWNjZXNzKHNydlJlY29yZHMpIHtcbiAgICB0aGlzLmhhTW9kZSA9IGZhbHNlO1xuICAgIHRoaXMuc2NoZWR1bGUoKTtcbiAgICB0aGlzLmVtaXQoJ3NydlJlY29yZERpc2NvdmVyeScsIG5ldyBTcnZQb2xsaW5nRXZlbnQoc3J2UmVjb3JkcykpO1xuICB9XG5cbiAgZmFpbHVyZShtZXNzYWdlLCBvYmopIHtcbiAgICB0aGlzLmxvZ2dlci53YXJuKG1lc3NhZ2UsIG9iaik7XG4gICAgdGhpcy5oYU1vZGUgPSB0cnVlO1xuICAgIHRoaXMuc2NoZWR1bGUoKTtcbiAgfVxuXG4gIHBhcmVudERvbWFpbk1pc21hdGNoKHNydlJlY29yZCkge1xuICAgIHRoaXMubG9nZ2VyLndhcm4oXG4gICAgICBgcGFyZW50IGRvbWFpbiBtaXNtYXRjaCBvbiBTUlYgcmVjb3JkICgke3NydlJlY29yZC5uYW1lfToke3NydlJlY29yZC5wb3J0fSlgLFxuICAgICAgc3J2UmVjb3JkXG4gICAgKTtcbiAgfVxuXG4gIF9wb2xsKCkge1xuICAgIGNvbnN0IGdlbmVyYXRpb24gPSB0aGlzLmdlbmVyYXRpb247XG4gICAgZG5zLnJlc29sdmVTcnYodGhpcy5zcnZBZGRyZXNzLCAoZXJyLCBzcnZSZWNvcmRzKSA9PiB7XG4gICAgICBpZiAoZ2VuZXJhdGlvbiAhPT0gdGhpcy5nZW5lcmF0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGVycikge1xuICAgICAgICB0aGlzLmZhaWx1cmUoJ0ROUyBlcnJvcicsIGVycik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZmluYWxBZGRyZXNzZXMgPSBbXTtcbiAgICAgIHNydlJlY29yZHMuZm9yRWFjaChyZWNvcmQgPT4ge1xuICAgICAgICBpZiAobWF0Y2hlc1BhcmVudERvbWFpbihyZWNvcmQubmFtZSwgdGhpcy5zcnZIb3N0KSkge1xuICAgICAgICAgIGZpbmFsQWRkcmVzc2VzLnB1c2gocmVjb3JkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnBhcmVudERvbWFpbk1pc21hdGNoKHJlY29yZCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIWZpbmFsQWRkcmVzc2VzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmZhaWx1cmUoJ05vIHZhbGlkIGFkZHJlc3NlcyBmb3VuZCBhdCBob3N0Jyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zdWNjZXNzKGZpbmFsQWRkcmVzc2VzKTtcbiAgICB9KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cy5TcnZQb2xsaW5nRXZlbnQgPSBTcnZQb2xsaW5nRXZlbnQ7XG5tb2R1bGUuZXhwb3J0cy5TcnZQb2xsZXIgPSBTcnZQb2xsZXI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///96\n");

/***/ }),
/* 97 */
/***/ (function(module, exports) {

eval("module.exports = require(\"dns\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0L2V4dGVybmFsIFwiZG5zXCI/MzM2ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI5Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImRuc1wiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///97\n");

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// Resolves the default auth mechanism according to\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\nfunction getDefaultAuthMechanism(ismaster) {\n  if (ismaster) {\n    // If ismaster contains saslSupportedMechs, use scram-sha-256\n    // if it is available, else scram-sha-1\n    if (Array.isArray(ismaster.saslSupportedMechs)) {\n      return ismaster.saslSupportedMechs.indexOf('SCRAM-SHA-256') >= 0\n        ? 'scram-sha-256'\n        : 'scram-sha-1';\n    }\n\n    // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n    if (ismaster.maxWireVersion >= 3) {\n      return 'scram-sha-1';\n    }\n  }\n\n  // Default for wireprotocol < 3\n  return 'mongocr';\n}\n\n/**\n * A representation of the credentials used by MongoDB\n * @class\n * @property {string} mechanism The method used to authenticate\n * @property {string} [username] The username used for authentication\n * @property {string} [password] The password used for authentication\n * @property {string} [source] The database that the user should authenticate against\n * @property {object} [mechanismProperties] Special properties used by some types of auth mechanisms\n */\nclass MongoCredentials {\n  /**\n   * Creates a new MongoCredentials object\n   * @param {object} [options]\n   * @param {string} [options.username] The username used for authentication\n   * @param {string} [options.password] The password used for authentication\n   * @param {string} [options.source] The database that the user should authenticate against\n   * @param {string} [options.mechanism] The method used to authenticate\n   * @param {object} [options.mechanismProperties] Special properties used by some types of auth mechanisms\n   */\n  constructor(options) {\n    options = options || {};\n    this.username = options.username;\n    this.password = options.password;\n    this.source = options.source || options.db;\n    this.mechanism = options.mechanism || 'default';\n    this.mechanismProperties = options.mechanismProperties;\n  }\n\n  /**\n   * Determines if two MongoCredentials objects are equivalent\n   * @param {MongoCredentials} other another MongoCredentials object\n   * @returns {boolean} true if the two objects are equal.\n   */\n  equals(other) {\n    return (\n      this.mechanism === other.mechanism &&\n      this.username === other.username &&\n      this.password === other.password &&\n      this.source === other.source\n    );\n  }\n\n  /**\n   * If the authentication mechanism is set to \"default\", resolves the authMechanism\n   * based on the server version and server supported sasl mechanisms.\n   *\n   * @param {Object} [ismaster] An ismaster response from the server\n   */\n  resolveAuthMechanism(ismaster) {\n    // If the mechanism is not \"default\", then it does not need to be resolved\n    if (this.mechanism.toLowerCase() === 'default') {\n      this.mechanism = getDefaultAuthMechanism(ismaster);\n    }\n  }\n}\n\nmodule.exports = { MongoCredentials };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NvcmUvYXV0aC9tb25nb19jcmVkZW50aWFscy5qcz9iZjc3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxpQkFBaUI7QUFDOUIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQiIsImZpbGUiOiI5OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gUmVzb2x2ZXMgdGhlIGRlZmF1bHQgYXV0aCBtZWNoYW5pc20gYWNjb3JkaW5nIHRvXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbW9uZ29kYi9zcGVjaWZpY2F0aW9ucy9ibG9iL21hc3Rlci9zb3VyY2UvYXV0aC9hdXRoLnJzdFxuZnVuY3Rpb24gZ2V0RGVmYXVsdEF1dGhNZWNoYW5pc20oaXNtYXN0ZXIpIHtcbiAgaWYgKGlzbWFzdGVyKSB7XG4gICAgLy8gSWYgaXNtYXN0ZXIgY29udGFpbnMgc2FzbFN1cHBvcnRlZE1lY2hzLCB1c2Ugc2NyYW0tc2hhLTI1NlxuICAgIC8vIGlmIGl0IGlzIGF2YWlsYWJsZSwgZWxzZSBzY3JhbS1zaGEtMVxuICAgIGlmIChBcnJheS5pc0FycmF5KGlzbWFzdGVyLnNhc2xTdXBwb3J0ZWRNZWNocykpIHtcbiAgICAgIHJldHVybiBpc21hc3Rlci5zYXNsU3VwcG9ydGVkTWVjaHMuaW5kZXhPZignU0NSQU0tU0hBLTI1NicpID49IDBcbiAgICAgICAgPyAnc2NyYW0tc2hhLTI1NidcbiAgICAgICAgOiAnc2NyYW0tc2hhLTEnO1xuICAgIH1cblxuICAgIC8vIEZhbGxiYWNrIHRvIGxlZ2FjeSBzZWxlY3Rpb24gbWV0aG9kLiBJZiB3aXJlIHZlcnNpb24gPj0gMywgdXNlIHNjcmFtLXNoYS0xXG4gICAgaWYgKGlzbWFzdGVyLm1heFdpcmVWZXJzaW9uID49IDMpIHtcbiAgICAgIHJldHVybiAnc2NyYW0tc2hhLTEnO1xuICAgIH1cbiAgfVxuXG4gIC8vIERlZmF1bHQgZm9yIHdpcmVwcm90b2NvbCA8IDNcbiAgcmV0dXJuICdtb25nb2NyJztcbn1cblxuLyoqXG4gKiBBIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjcmVkZW50aWFscyB1c2VkIGJ5IE1vbmdvREJcbiAqIEBjbGFzc1xuICogQHByb3BlcnR5IHtzdHJpbmd9IG1lY2hhbmlzbSBUaGUgbWV0aG9kIHVzZWQgdG8gYXV0aGVudGljYXRlXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3VzZXJuYW1lXSBUaGUgdXNlcm5hbWUgdXNlZCBmb3IgYXV0aGVudGljYXRpb25cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcGFzc3dvcmRdIFRoZSBwYXNzd29yZCB1c2VkIGZvciBhdXRoZW50aWNhdGlvblxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtzb3VyY2VdIFRoZSBkYXRhYmFzZSB0aGF0IHRoZSB1c2VyIHNob3VsZCBhdXRoZW50aWNhdGUgYWdhaW5zdFxuICogQHByb3BlcnR5IHtvYmplY3R9IFttZWNoYW5pc21Qcm9wZXJ0aWVzXSBTcGVjaWFsIHByb3BlcnRpZXMgdXNlZCBieSBzb21lIHR5cGVzIG9mIGF1dGggbWVjaGFuaXNtc1xuICovXG5jbGFzcyBNb25nb0NyZWRlbnRpYWxzIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgTW9uZ29DcmVkZW50aWFscyBvYmplY3RcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudXNlcm5hbWVdIFRoZSB1c2VybmFtZSB1c2VkIGZvciBhdXRoZW50aWNhdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMucGFzc3dvcmRdIFRoZSBwYXNzd29yZCB1c2VkIGZvciBhdXRoZW50aWNhdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc291cmNlXSBUaGUgZGF0YWJhc2UgdGhhdCB0aGUgdXNlciBzaG91bGQgYXV0aGVudGljYXRlIGFnYWluc3RcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm1lY2hhbmlzbV0gVGhlIG1ldGhvZCB1c2VkIHRvIGF1dGhlbnRpY2F0ZVxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMubWVjaGFuaXNtUHJvcGVydGllc10gU3BlY2lhbCBwcm9wZXJ0aWVzIHVzZWQgYnkgc29tZSB0eXBlcyBvZiBhdXRoIG1lY2hhbmlzbXNcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB0aGlzLnVzZXJuYW1lID0gb3B0aW9ucy51c2VybmFtZTtcbiAgICB0aGlzLnBhc3N3b3JkID0gb3B0aW9ucy5wYXNzd29yZDtcbiAgICB0aGlzLnNvdXJjZSA9IG9wdGlvbnMuc291cmNlIHx8IG9wdGlvbnMuZGI7XG4gICAgdGhpcy5tZWNoYW5pc20gPSBvcHRpb25zLm1lY2hhbmlzbSB8fCAnZGVmYXVsdCc7XG4gICAgdGhpcy5tZWNoYW5pc21Qcm9wZXJ0aWVzID0gb3B0aW9ucy5tZWNoYW5pc21Qcm9wZXJ0aWVzO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgdHdvIE1vbmdvQ3JlZGVudGlhbHMgb2JqZWN0cyBhcmUgZXF1aXZhbGVudFxuICAgKiBAcGFyYW0ge01vbmdvQ3JlZGVudGlhbHN9IG90aGVyIGFub3RoZXIgTW9uZ29DcmVkZW50aWFscyBvYmplY3RcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIHR3byBvYmplY3RzIGFyZSBlcXVhbC5cbiAgICovXG4gIGVxdWFscyhvdGhlcikge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLm1lY2hhbmlzbSA9PT0gb3RoZXIubWVjaGFuaXNtICYmXG4gICAgICB0aGlzLnVzZXJuYW1lID09PSBvdGhlci51c2VybmFtZSAmJlxuICAgICAgdGhpcy5wYXNzd29yZCA9PT0gb3RoZXIucGFzc3dvcmQgJiZcbiAgICAgIHRoaXMuc291cmNlID09PSBvdGhlci5zb3VyY2VcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIElmIHRoZSBhdXRoZW50aWNhdGlvbiBtZWNoYW5pc20gaXMgc2V0IHRvIFwiZGVmYXVsdFwiLCByZXNvbHZlcyB0aGUgYXV0aE1lY2hhbmlzbVxuICAgKiBiYXNlZCBvbiB0aGUgc2VydmVyIHZlcnNpb24gYW5kIHNlcnZlciBzdXBwb3J0ZWQgc2FzbCBtZWNoYW5pc21zLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW2lzbWFzdGVyXSBBbiBpc21hc3RlciByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXJcbiAgICovXG4gIHJlc29sdmVBdXRoTWVjaGFuaXNtKGlzbWFzdGVyKSB7XG4gICAgLy8gSWYgdGhlIG1lY2hhbmlzbSBpcyBub3QgXCJkZWZhdWx0XCIsIHRoZW4gaXQgZG9lcyBub3QgbmVlZCB0byBiZSByZXNvbHZlZFxuICAgIGlmICh0aGlzLm1lY2hhbmlzbS50b0xvd2VyQ2FzZSgpID09PSAnZGVmYXVsdCcpIHtcbiAgICAgIHRoaXMubWVjaGFuaXNtID0gZ2V0RGVmYXVsdEF1dGhNZWNoYW5pc20oaXNtYXN0ZXIpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgTW9uZ29DcmVkZW50aWFscyB9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///98\n");

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst URL = __webpack_require__(100);\nconst qs = __webpack_require__(101);\nconst dns = __webpack_require__(97);\nconst MongoParseError = __webpack_require__(37).MongoParseError;\nconst ReadPreference = __webpack_require__(42);\n\n/**\n * The following regular expression validates a connection string and breaks the\n * provide string into the following capture groups: [protocol, username, password, hosts]\n */\nconst HOSTS_RX = /(mongodb(?:\\+srv|)):\\/\\/(?: (?:[^:]*) (?: : ([^@]*) )? @ )?([^/?]*)(?:\\/|)(.*)/;\n\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param {String} srvAddress The address to check against a domain\n * @param {String} parentDomain The domain to check the provided address against\n * @return {Boolean} Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param {string} uri The connection string to parse\n * @param {object} options Optional user provided connection string options\n * @param {function} callback\n */\nfunction parseSrvConnectionString(uri, options, callback) {\n  const result = URL.parse(uri, true);\n\n  if (result.hostname.split('.').length < 3) {\n    return callback(new MongoParseError('URI does not have hostname, domain name and tld'));\n  }\n\n  result.domainLength = result.hostname.split('.').length;\n  if (result.pathname && result.pathname.match(',')) {\n    return callback(new MongoParseError('Invalid URI, cannot contain multiple hostnames'));\n  }\n\n  if (result.port) {\n    return callback(new MongoParseError(`Ports not accepted with '${PROTOCOL_MONGODB_SRV}' URIs`));\n  }\n\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\n  const lookupAddress = result.host;\n  dns.resolveSrv(`_mongodb._tcp.${lookupAddress}`, (err, addresses) => {\n    if (err) return callback(err);\n\n    if (addresses.length === 0) {\n      return callback(new MongoParseError('No addresses found at host'));\n    }\n\n    for (let i = 0; i < addresses.length; i++) {\n      if (!matchesParentDomain(addresses[i].name, result.hostname, result.domainLength)) {\n        return callback(\n          new MongoParseError('Server record does not share hostname with parent URI')\n        );\n      }\n    }\n\n    // Convert the original URL to a non-SRV URL.\n    result.protocol = 'mongodb';\n    result.host = addresses.map(address => `${address.name}:${address.port}`).join(',');\n\n    // Default to SSL true if it's not specified.\n    if (\n      !('ssl' in options) &&\n      (!result.search || !('ssl' in result.query) || result.query.ssl === null)\n    ) {\n      result.query.ssl = true;\n    }\n\n    // Resolve TXT record and add options from there if they exist.\n    dns.resolveTxt(lookupAddress, (err, record) => {\n      if (err) {\n        if (err.code !== 'ENODATA') {\n          return callback(err);\n        }\n        record = null;\n      }\n\n      if (record) {\n        if (record.length > 1) {\n          return callback(new MongoParseError('Multiple text records not allowed'));\n        }\n\n        record = qs.parse(record[0].join(''));\n        if (Object.keys(record).some(key => key !== 'authSource' && key !== 'replicaSet')) {\n          return callback(\n            new MongoParseError('Text record must only set `authSource` or `replicaSet`')\n          );\n        }\n\n        Object.assign(result.query, record);\n      }\n\n      // Set completed options back into the URL object.\n      result.search = qs.stringify(result.query);\n\n      const finalString = URL.format(result);\n      parseConnectionString(finalString, options, (err, ret) => {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        callback(null, Object.assign({}, ret, { srvHost: lookupAddress }));\n      });\n    });\n  });\n}\n\n/**\n * Parses a query string item according to the connection string spec\n *\n * @param {string} key The key for the parsed value\n * @param {Array|String} value The value to parse\n * @return {Array|Object|String} The parsed value\n */\nfunction parseQueryStringItemValue(key, value) {\n  if (Array.isArray(value)) {\n    // deduplicate and simplify arrays\n    value = value.filter((v, idx) => value.indexOf(v) === idx);\n    if (value.length === 1) value = value[0];\n  } else if (value.indexOf(':') > 0) {\n    value = value.split(',').reduce((result, pair) => {\n      const parts = pair.split(':');\n      result[parts[0]] = parseQueryStringItemValue(key, parts[1]);\n      return result;\n    }, {});\n  } else if (value.indexOf(',') > 0) {\n    value = value.split(',').map(v => {\n      return parseQueryStringItemValue(key, v);\n    });\n  } else if (value.toLowerCase() === 'true' || value.toLowerCase() === 'false') {\n    value = value.toLowerCase() === 'true';\n  } else if (!Number.isNaN(value) && !STRING_OPTIONS.has(key)) {\n    const numericValue = parseFloat(value);\n    if (!Number.isNaN(numericValue)) {\n      value = parseFloat(value);\n    }\n  }\n\n  return value;\n}\n\n// Options that are known boolean types\nconst BOOLEAN_OPTIONS = new Set([\n  'slaveok',\n  'slave_ok',\n  'sslvalidate',\n  'fsync',\n  'safe',\n  'retrywrites',\n  'j'\n]);\n\n// Known string options, only used to bypass Number coercion in `parseQueryStringItemValue`\nconst STRING_OPTIONS = new Set(['authsource', 'replicaset']);\n\n// Supported text representations of auth mechanisms\n// NOTE: this list exists in native already, if it is merged here we should deduplicate\nconst AUTH_MECHANISMS = new Set([\n  'GSSAPI',\n  'MONGODB-X509',\n  'MONGODB-CR',\n  'DEFAULT',\n  'SCRAM-SHA-1',\n  'SCRAM-SHA-256',\n  'PLAIN'\n]);\n\n// Lookup table used to translate normalized (lower-cased) forms of connection string\n// options to their expected camelCase version\nconst CASE_TRANSLATION = {\n  replicaset: 'replicaSet',\n  connecttimeoutms: 'connectTimeoutMS',\n  sockettimeoutms: 'socketTimeoutMS',\n  maxpoolsize: 'maxPoolSize',\n  minpoolsize: 'minPoolSize',\n  maxidletimems: 'maxIdleTimeMS',\n  waitqueuemultiple: 'waitQueueMultiple',\n  waitqueuetimeoutms: 'waitQueueTimeoutMS',\n  wtimeoutms: 'wtimeoutMS',\n  readconcern: 'readConcern',\n  readconcernlevel: 'readConcernLevel',\n  readpreference: 'readPreference',\n  maxstalenessseconds: 'maxStalenessSeconds',\n  readpreferencetags: 'readPreferenceTags',\n  authsource: 'authSource',\n  authmechanism: 'authMechanism',\n  authmechanismproperties: 'authMechanismProperties',\n  gssapiservicename: 'gssapiServiceName',\n  localthresholdms: 'localThresholdMS',\n  serverselectiontimeoutms: 'serverSelectionTimeoutMS',\n  serverselectiontryonce: 'serverSelectionTryOnce',\n  heartbeatfrequencyms: 'heartbeatFrequencyMS',\n  retrywrites: 'retryWrites',\n  uuidrepresentation: 'uuidRepresentation',\n  zlibcompressionlevel: 'zlibCompressionLevel',\n  tlsallowinvalidcertificates: 'tlsAllowInvalidCertificates',\n  tlsallowinvalidhostnames: 'tlsAllowInvalidHostnames',\n  tlsinsecure: 'tlsInsecure',\n  tlscafile: 'tlsCAFile',\n  tlscertificatekeyfile: 'tlsCertificateKeyFile',\n  tlscertificatekeyfilepassword: 'tlsCertificateKeyFilePassword',\n  wtimeout: 'wTimeoutMS',\n  j: 'journal'\n};\n\n/**\n * Sets the value for `key`, allowing for any required translation\n *\n * @param {object} obj The object to set the key on\n * @param {string} key The key to set the value for\n * @param {*} value The value to set\n * @param {object} options The options used for option parsing\n */\nfunction applyConnectionStringOption(obj, key, value, options) {\n  // simple key translation\n  if (key === 'journal') {\n    key = 'j';\n  } else if (key === 'wtimeoutms') {\n    key = 'wtimeout';\n  }\n\n  // more complicated translation\n  if (BOOLEAN_OPTIONS.has(key)) {\n    value = value === 'true' || value === true;\n  } else if (key === 'appname') {\n    value = decodeURIComponent(value);\n  } else if (key === 'readconcernlevel') {\n    obj['readConcernLevel'] = value;\n    key = 'readconcern';\n    value = { level: value };\n  }\n\n  // simple validation\n  if (key === 'compressors') {\n    value = Array.isArray(value) ? value : [value];\n\n    if (!value.every(c => c === 'snappy' || c === 'zlib')) {\n      throw new MongoParseError(\n        'Value for `compressors` must be at least one of: `snappy`, `zlib`'\n      );\n    }\n  }\n\n  if (key === 'authmechanism' && !AUTH_MECHANISMS.has(value)) {\n    throw new MongoParseError(\n      'Value for `authMechanism` must be one of: `DEFAULT`, `GSSAPI`, `PLAIN`, `MONGODB-X509`, `SCRAM-SHA-1`, `SCRAM-SHA-256`'\n    );\n  }\n\n  if (key === 'readpreference' && !ReadPreference.isValid(value)) {\n    throw new MongoParseError(\n      'Value for `readPreference` must be one of: `primary`, `primaryPreferred`, `secondary`, `secondaryPreferred`, `nearest`'\n    );\n  }\n\n  if (key === 'zlibcompressionlevel' && (value < -1 || value > 9)) {\n    throw new MongoParseError('zlibCompressionLevel must be an integer between -1 and 9');\n  }\n\n  // special cases\n  if (key === 'compressors' || key === 'zlibcompressionlevel') {\n    obj.compression = obj.compression || {};\n    obj = obj.compression;\n  }\n\n  if (key === 'authmechanismproperties') {\n    if (typeof value.SERVICE_NAME === 'string') obj.gssapiServiceName = value.SERVICE_NAME;\n    if (typeof value.SERVICE_REALM === 'string') obj.gssapiServiceRealm = value.SERVICE_REALM;\n    if (typeof value.CANONICALIZE_HOST_NAME !== 'undefined') {\n      obj.gssapiCanonicalizeHostName = value.CANONICALIZE_HOST_NAME;\n    }\n  }\n\n  if (key === 'readpreferencetags' && Array.isArray(value)) {\n    value = splitArrayOfMultipleReadPreferenceTags(value);\n  }\n\n  // set the actual value\n  if (options.caseTranslate && CASE_TRANSLATION[key]) {\n    obj[CASE_TRANSLATION[key]] = value;\n    return;\n  }\n\n  obj[key] = value;\n}\n\nconst USERNAME_REQUIRED_MECHANISMS = new Set([\n  'GSSAPI',\n  'MONGODB-CR',\n  'PLAIN',\n  'SCRAM-SHA-1',\n  'SCRAM-SHA-256'\n]);\n\nfunction splitArrayOfMultipleReadPreferenceTags(value) {\n  const parsedTags = [];\n\n  for (let i = 0; i < value.length; i++) {\n    parsedTags[i] = {};\n    value[i].split(',').forEach(individualTag => {\n      const splitTag = individualTag.split(':');\n      parsedTags[i][splitTag[0]] = splitTag[1];\n    });\n  }\n\n  return parsedTags;\n}\n\n/**\n * Modifies the parsed connection string object taking into account expectations we\n * have for authentication-related options.\n *\n * @param {object} parsed The parsed connection string result\n * @return The parsed connection string result possibly modified for auth expectations\n */\nfunction applyAuthExpectations(parsed) {\n  if (parsed.options == null) {\n    return;\n  }\n\n  const options = parsed.options;\n  const authSource = options.authsource || options.authSource;\n  if (authSource != null) {\n    parsed.auth = Object.assign({}, parsed.auth, { db: authSource });\n  }\n\n  const authMechanism = options.authmechanism || options.authMechanism;\n  if (authMechanism != null) {\n    if (\n      USERNAME_REQUIRED_MECHANISMS.has(authMechanism) &&\n      (!parsed.auth || parsed.auth.username == null)\n    ) {\n      throw new MongoParseError(`Username required for mechanism \\`${authMechanism}\\``);\n    }\n\n    if (authMechanism === 'GSSAPI') {\n      if (authSource != null && authSource !== '$external') {\n        throw new MongoParseError(\n          `Invalid source \\`${authSource}\\` for mechanism \\`${authMechanism}\\` specified.`\n        );\n      }\n\n      parsed.auth = Object.assign({}, parsed.auth, { db: '$external' });\n    }\n\n    if (authMechanism === 'MONGODB-X509') {\n      if (parsed.auth && parsed.auth.password != null) {\n        throw new MongoParseError(`Password not allowed for mechanism \\`${authMechanism}\\``);\n      }\n\n      if (authSource != null && authSource !== '$external') {\n        throw new MongoParseError(\n          `Invalid source \\`${authSource}\\` for mechanism \\`${authMechanism}\\` specified.`\n        );\n      }\n\n      parsed.auth = Object.assign({}, parsed.auth, { db: '$external' });\n    }\n\n    if (authMechanism === 'PLAIN') {\n      if (parsed.auth && parsed.auth.db == null) {\n        parsed.auth = Object.assign({}, parsed.auth, { db: '$external' });\n      }\n    }\n  }\n\n  // default to `admin` if nothing else was resolved\n  if (parsed.auth && parsed.auth.db == null) {\n    parsed.auth = Object.assign({}, parsed.auth, { db: 'admin' });\n  }\n\n  return parsed;\n}\n\n/**\n * Parses a query string according the connection string spec.\n *\n * @param {String} query The query string to parse\n * @param {object} [options] The options used for options parsing\n * @return {Object|Error} The parsed query string as an object, or an error if one was encountered\n */\nfunction parseQueryString(query, options) {\n  const result = {};\n  let parsedQueryString = qs.parse(query);\n\n  checkTLSOptions(parsedQueryString);\n\n  for (const key in parsedQueryString) {\n    const value = parsedQueryString[key];\n    if (value === '' || value == null) {\n      throw new MongoParseError('Incomplete key value pair for option');\n    }\n\n    const normalizedKey = key.toLowerCase();\n    const parsedValue = parseQueryStringItemValue(normalizedKey, value);\n    applyConnectionStringOption(result, normalizedKey, parsedValue, options);\n  }\n\n  // special cases for known deprecated options\n  if (result.wtimeout && result.wtimeoutms) {\n    delete result.wtimeout;\n    console.warn('Unsupported option `wtimeout` specified');\n  }\n\n  return Object.keys(result).length ? result : null;\n}\n\n/**\n * Checks a query string for invalid tls options according to the URI options spec.\n *\n * @param {string} queryString The query string to check\n * @throws {MongoParseError}\n */\nfunction checkTLSOptions(queryString) {\n  const queryStringKeys = Object.keys(queryString);\n  if (\n    queryStringKeys.indexOf('tlsInsecure') !== -1 &&\n    (queryStringKeys.indexOf('tlsAllowInvalidCertificates') !== -1 ||\n      queryStringKeys.indexOf('tlsAllowInvalidHostnames') !== -1)\n  ) {\n    throw new MongoParseError(\n      'The `tlsInsecure` option cannot be used with `tlsAllowInvalidCertificates` or `tlsAllowInvalidHostnames`.'\n    );\n  }\n\n  const tlsValue = assertTlsOptionsAreEqual('tls', queryString, queryStringKeys);\n  const sslValue = assertTlsOptionsAreEqual('ssl', queryString, queryStringKeys);\n\n  if (tlsValue != null && sslValue != null) {\n    if (tlsValue !== sslValue) {\n      throw new MongoParseError('All values of `tls` and `ssl` must be the same.');\n    }\n  }\n}\n\n/**\n * Checks a query string to ensure all tls/ssl options are the same.\n *\n * @param {string} key The key (tls or ssl) to check\n * @param {string} queryString The query string to check\n * @throws {MongoParseError}\n * @return The value of the tls/ssl option\n */\nfunction assertTlsOptionsAreEqual(optionName, queryString, queryStringKeys) {\n  const queryStringHasTLSOption = queryStringKeys.indexOf(optionName) !== -1;\n\n  let optionValue;\n  if (Array.isArray(queryString[optionName])) {\n    optionValue = queryString[optionName][0];\n  } else {\n    optionValue = queryString[optionName];\n  }\n\n  if (queryStringHasTLSOption) {\n    if (Array.isArray(queryString[optionName])) {\n      const firstValue = queryString[optionName][0];\n      queryString[optionName].forEach(tlsValue => {\n        if (tlsValue !== firstValue) {\n          throw new MongoParseError('All values of ${optionName} must be the same.');\n        }\n      });\n    }\n  }\n\n  return optionValue;\n}\n\nconst PROTOCOL_MONGODB = 'mongodb';\nconst PROTOCOL_MONGODB_SRV = 'mongodb+srv';\nconst SUPPORTED_PROTOCOLS = [PROTOCOL_MONGODB, PROTOCOL_MONGODB_SRV];\n\n/**\n * Parses a MongoDB connection string\n *\n * @param {*} uri the MongoDB connection string to parse\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.caseTranslate] Whether the parser should translate options back into camelCase after normalization\n * @param {parseCallback} callback\n */\nfunction parseConnectionString(uri, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = Object.assign({}, { caseTranslate: true }, options);\n\n  // Check for bad uris before we parse\n  try {\n    URL.parse(uri);\n  } catch (e) {\n    return callback(new MongoParseError('URI malformed, cannot be parsed'));\n  }\n\n  const cap = uri.match(HOSTS_RX);\n  if (!cap) {\n    return callback(new MongoParseError('Invalid connection string'));\n  }\n\n  const protocol = cap[1];\n  if (SUPPORTED_PROTOCOLS.indexOf(protocol) === -1) {\n    return callback(new MongoParseError('Invalid protocol provided'));\n  }\n\n  if (protocol === PROTOCOL_MONGODB_SRV) {\n    return parseSrvConnectionString(uri, options, callback);\n  }\n\n  const dbAndQuery = cap[4].split('?');\n  const db = dbAndQuery.length > 0 ? dbAndQuery[0] : null;\n  const query = dbAndQuery.length > 1 ? dbAndQuery[1] : null;\n\n  let parsedOptions;\n  try {\n    parsedOptions = parseQueryString(query, options);\n  } catch (parseError) {\n    return callback(parseError);\n  }\n\n  parsedOptions = Object.assign({}, parsedOptions, options);\n  const auth = { username: null, password: null, db: db && db !== '' ? qs.unescape(db) : null };\n  if (parsedOptions.auth) {\n    // maintain support for legacy options passed into `MongoClient`\n    if (parsedOptions.auth.username) auth.username = parsedOptions.auth.username;\n    if (parsedOptions.auth.user) auth.username = parsedOptions.auth.user;\n    if (parsedOptions.auth.password) auth.password = parsedOptions.auth.password;\n  } else {\n    if (parsedOptions.username) auth.username = parsedOptions.username;\n    if (parsedOptions.user) auth.username = parsedOptions.user;\n    if (parsedOptions.password) auth.password = parsedOptions.password;\n  }\n\n  if (cap[4].split('?')[0].indexOf('@') !== -1) {\n    return callback(new MongoParseError('Unescaped slash in userinfo section'));\n  }\n\n  const authorityParts = cap[3].split('@');\n  if (authorityParts.length > 2) {\n    return callback(new MongoParseError('Unescaped at-sign in authority section'));\n  }\n\n  if (authorityParts.length > 1) {\n    const authParts = authorityParts.shift().split(':');\n    if (authParts.length > 2) {\n      return callback(new MongoParseError('Unescaped colon in authority section'));\n    }\n\n    if (!auth.username) auth.username = qs.unescape(authParts[0]);\n    if (!auth.password) auth.password = authParts[1] ? qs.unescape(authParts[1]) : null;\n  }\n\n  let hostParsingError = null;\n  const hosts = authorityParts\n    .shift()\n    .split(',')\n    .map(host => {\n      let parsedHost = URL.parse(`mongodb://${host}`);\n      if (parsedHost.path === '/:') {\n        hostParsingError = new MongoParseError('Double colon in host identifier');\n        return null;\n      }\n\n      // heuristically determine if we're working with a domain socket\n      if (host.match(/\\.sock/)) {\n        parsedHost.hostname = qs.unescape(host);\n        parsedHost.port = null;\n      }\n\n      if (Number.isNaN(parsedHost.port)) {\n        hostParsingError = new MongoParseError('Invalid port (non-numeric string)');\n        return;\n      }\n\n      const result = {\n        host: parsedHost.hostname,\n        port: parsedHost.port ? parseInt(parsedHost.port) : 27017\n      };\n\n      if (result.port === 0) {\n        hostParsingError = new MongoParseError('Invalid port (zero) with hostname');\n        return;\n      }\n\n      if (result.port > 65535) {\n        hostParsingError = new MongoParseError('Invalid port (larger than 65535) with hostname');\n        return;\n      }\n\n      if (result.port < 0) {\n        hostParsingError = new MongoParseError('Invalid port (negative number)');\n        return;\n      }\n\n      return result;\n    })\n    .filter(host => !!host);\n\n  if (hostParsingError) {\n    return callback(hostParsingError);\n  }\n\n  if (hosts.length === 0 || hosts[0].host === '' || hosts[0].host === null) {\n    return callback(new MongoParseError('No hostname or hostnames provided in connection string'));\n  }\n\n  const result = {\n    hosts: hosts,\n    auth: auth.db || auth.username ? auth : null,\n    options: Object.keys(parsedOptions).length ? parsedOptions : null\n  };\n\n  if (result.auth && result.auth.db) {\n    result.defaultDatabase = result.auth.db;\n  } else {\n    result.defaultDatabase = 'test';\n  }\n\n  try {\n    applyAuthExpectations(result);\n  } catch (authError) {\n    return callback(authError);\n  }\n\n  callback(null, result);\n}\n\nmodule.exports = parseConnectionString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///99\n");

/***/ }),
/* 100 */
/***/ (function(module, exports) {

eval("module.exports = require(\"url\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0L2V4dGVybmFsIFwidXJsXCI/NjFlOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIxMDAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ1cmxcIik7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///100\n");

/***/ }),
/* 101 */
/***/ (function(module, exports) {

eval("module.exports = require(\"querystring\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0L2V4dGVybmFsIFwicXVlcnlzdHJpbmdcIj8zMGM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjEwMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInF1ZXJ5c3RyaW5nXCIpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///101\n");

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst EventEmitter = __webpack_require__(39).EventEmitter;\n\nclass Instrumentation extends EventEmitter {\n  constructor() {\n    super();\n  }\n\n  instrument(MongoClient, callback) {\n    // store a reference to the original functions\n    this.$MongoClient = MongoClient;\n    const $prototypeConnect = (this.$prototypeConnect = MongoClient.prototype.connect);\n\n    const instrumentation = this;\n    MongoClient.prototype.connect = function(callback) {\n      this.s.options.monitorCommands = true;\n      this.on('commandStarted', event => instrumentation.emit('started', event));\n      this.on('commandSucceeded', event => instrumentation.emit('succeeded', event));\n      this.on('commandFailed', event => instrumentation.emit('failed', event));\n      return $prototypeConnect.call(this, callback);\n    };\n\n    if (typeof callback === 'function') callback(null, this);\n  }\n\n  uninstrument() {\n    this.$MongoClient.prototype.connect = this.$prototypeConnect;\n  }\n}\n\nmodule.exports = Instrumentation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2FwbS5qcz9jYjNlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IscUJBQXFCLG1CQUFPLENBQUMsRUFBUTs7QUFFckM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjEwMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcblxuY2xhc3MgSW5zdHJ1bWVudGF0aW9uIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGluc3RydW1lbnQoTW9uZ29DbGllbnQsIGNhbGxiYWNrKSB7XG4gICAgLy8gc3RvcmUgYSByZWZlcmVuY2UgdG8gdGhlIG9yaWdpbmFsIGZ1bmN0aW9uc1xuICAgIHRoaXMuJE1vbmdvQ2xpZW50ID0gTW9uZ29DbGllbnQ7XG4gICAgY29uc3QgJHByb3RvdHlwZUNvbm5lY3QgPSAodGhpcy4kcHJvdG90eXBlQ29ubmVjdCA9IE1vbmdvQ2xpZW50LnByb3RvdHlwZS5jb25uZWN0KTtcblxuICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbiA9IHRoaXM7XG4gICAgTW9uZ29DbGllbnQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgdGhpcy5zLm9wdGlvbnMubW9uaXRvckNvbW1hbmRzID0gdHJ1ZTtcbiAgICAgIHRoaXMub24oJ2NvbW1hbmRTdGFydGVkJywgZXZlbnQgPT4gaW5zdHJ1bWVudGF0aW9uLmVtaXQoJ3N0YXJ0ZWQnLCBldmVudCkpO1xuICAgICAgdGhpcy5vbignY29tbWFuZFN1Y2NlZWRlZCcsIGV2ZW50ID0+IGluc3RydW1lbnRhdGlvbi5lbWl0KCdzdWNjZWVkZWQnLCBldmVudCkpO1xuICAgICAgdGhpcy5vbignY29tbWFuZEZhaWxlZCcsIGV2ZW50ID0+IGluc3RydW1lbnRhdGlvbi5lbWl0KCdmYWlsZWQnLCBldmVudCkpO1xuICAgICAgcmV0dXJuICRwcm90b3R5cGVDb25uZWN0LmNhbGwodGhpcywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjayhudWxsLCB0aGlzKTtcbiAgfVxuXG4gIHVuaW5zdHJ1bWVudCgpIHtcbiAgICB0aGlzLiRNb25nb0NsaWVudC5wcm90b3R5cGUuY29ubmVjdCA9IHRoaXMuJHByb3RvdHlwZUNvbm5lY3Q7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBJbnN0cnVtZW50YXRpb247XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///102\n");

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst ChangeStream = __webpack_require__(104);\nconst Db = __webpack_require__(150);\nconst EventEmitter = __webpack_require__(39).EventEmitter;\nconst executeOperation = __webpack_require__(83);\nconst inherits = __webpack_require__(12).inherits;\nconst MongoError = __webpack_require__(3).MongoError;\nconst deprecate = __webpack_require__(12).deprecate;\nconst WriteConcern = __webpack_require__(87);\nconst MongoDBNamespace = __webpack_require__(86).MongoDBNamespace;\nconst ReadPreference = __webpack_require__(42);\n\n// Operations\nconst ConnectOperation = __webpack_require__(173);\nconst CloseOperation = __webpack_require__(180);\n\n/**\n * @fileOverview The **MongoClient** class is a class that allows for making Connections to MongoDB.\n *\n * @example\n * // Connect using a MongoClient instance\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * const mongoClient = new MongoClient(url);\n * mongoClient.connect(function(err, client) {\n *   const db = client.db(dbName);\n *   client.close();\n * });\n *\n * @example\n * // Connect using the MongoClient.connect static method\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   const db = client.db(dbName);\n *   client.close();\n * });\n */\n\n/**\n * A string specifying the level of a ReadConcern\n * @typedef {'local'|'available'|'majority'|'linearizable'|'snapshot'} ReadConcernLevel\n * @see https://docs.mongodb.com/manual/reference/read-concern/index.html#read-concern-levels\n */\n\n/**\n * Configuration options for a automatic client encryption.\n *\n * **NOTE**: Support for client side encryption is in beta. Backwards-breaking changes may be made before the final release.\n *\n * @typedef {Object} AutoEncryptionOptions\n * @property {MongoClient} [keyVaultClient] A `MongoClient` used to fetch keys from a key vault\n * @property {string} [keyVaultNamespace] The namespace where keys are stored in the key vault\n * @property {object} [kmsProviders] Provider details for the desired Key Management Service to use for encryption\n * @property {object} [kmsProviders.aws] Optional settings for the AWS KMS provider\n * @property {string} [kmsProviders.aws.accessKeyId] The access key used for the AWS KMS provider\n * @property {string} [kmsProviders.aws.secretAccessKey] The secret access key used for the AWS KMS provider\n * @property {object} [kmsProviders.local] Optional settings for the local KMS provider\n * @property {string} [kmsProviders.local.key] The master key used to encrypt/decrypt data keys\n * @property {object} [schemaMap] A map of namespaces to a local JSON schema for encryption\n * @property {boolean} [bypassAutoEncryption] Allows the user to bypass auto encryption, maintaining implicit decryption\n * @property {object} [extraOptions] Extra options related to the mongocryptd process\n * @property {string} [extraOptions.mongocryptURI] A local process the driver communicates with to determine how to encrypt values in a command. Defaults to \"mongodb://%2Fvar%2Fmongocryptd.sock\" if domain sockets are available or \"mongodb://localhost:27020\" otherwise\n * @property {boolean} [extraOptions.mongocryptdBypassSpawn=false] If true, autoEncryption will not attempt to spawn a mongocryptd before connecting\n * @property {string} [extraOptions.mongocryptdSpawnPath] The path to the mongocryptd executable on the system\n * @property {string[]} [extraOptions.mongocryptdSpawnArgs] Command line arguments to use when auto-spawning a mongocryptd\n */\n\n/**\n * Creates a new MongoClient instance\n * @class\n * @param {string} url The connection URI string\n * @param {object} [options] Optional settings\n * @param {number} [options.poolSize=5] The maximum size of the individual server pool\n * @param {boolean} [options.ssl=false] Enable SSL connection.\n * @param {boolean} [options.sslValidate=false] Validate mongod server certificate against Certificate Authority\n * @param {buffer} [options.sslCA=undefined] SSL Certificate store binary buffer\n * @param {buffer} [options.sslCert=undefined] SSL Certificate binary buffer\n * @param {buffer} [options.sslKey=undefined] SSL Key file binary buffer\n * @param {string} [options.sslPass=undefined] SSL Certificate pass phrase\n * @param {buffer} [options.sslCRL=undefined] SSL Certificate revocation list binary buffer\n * @param {boolean} [options.autoReconnect=true] Enable autoReconnect for single server instances\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=30000] The number of milliseconds to wait before initiating keepAlive on the TCP socket\n * @param {number} [options.connectTimeoutMS=30000] TCP Connection timeout setting\n * @param {number} [options.family] Version of IP stack. Can be 4, 6 or null (default).\n * If null, will attempt to connect with IPv6, and will fall back to IPv4 on failure\n * @param {number} [options.socketTimeoutMS=360000] TCP Socket timeout setting\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @param {boolean} [options.ha=true] Control if high availability monitoring runs for Replicaset or Mongos proxies\n * @param {number} [options.haInterval=10000] The High availability period for replicaset inquiry\n * @param {string} [options.replicaSet=undefined] The Replicaset set name\n * @param {number} [options.secondaryAcceptableLatencyMS=15] Cutoff latency point in MS for Replicaset member selection\n * @param {number} [options.acceptableLatencyMS=15] Cutoff latency point in MS for Mongos proxies selection\n * @param {boolean} [options.connectWithNoPrimary=false] Sets if the driver should connect even if no primary is available\n * @param {string} [options.authSource=undefined] Define the database to authenticate against\n * @param {(number|string)} [options.w] The write concern\n * @param {number} [options.wtimeout] The write concern timeout\n * @param {boolean} [options.j=false] Specify a journal write concern\n * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers\n * @param {number} [options.bufferMaxEntries=-1] Sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST)\n * @param {object} [options.pkFactory] A primary key factory object for generation of custom _id keys\n * @param {object} [options.promiseLibrary] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {object} [options.readConcern] Specify a read concern for the collection (only MongoDB 3.2 or higher supported)\n * @param {ReadConcernLevel} [options.readConcern.level='local'] Specify a read concern level for the collection operations (only MongoDB 3.2 or higher supported)\n * @param {number} [options.maxStalenessSeconds=undefined] The max staleness to secondary reads (values under 10 seconds cannot be guaranteed)\n * @param {string} [options.loggerLevel=undefined] The logging level (error/warn/info/debug)\n * @param {object} [options.logger=undefined] Custom logger object\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers\n * @param {boolean} [options.promoteLongs=true] Promotes long values to number if they fit inside the 53 bits resolution\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function\n * @param {object} [options.validateOptions=false] Validate MongoClient passed in options for correctness\n * @param {string} [options.appname=undefined] The name of the application that created this MongoClient instance. MongoDB 3.4 and newer will print this value in the server log upon establishing each connection. It is also recorded in the slow query log and profile collections\n * @param {string} [options.auth.user=undefined] The username for auth\n * @param {string} [options.auth.password=undefined] The password for auth\n * @param {string} [options.authMechanism=undefined] Mechanism for authentication: MDEFAULT, GSSAPI, PLAIN, MONGODB-X509, or SCRAM-SHA-1\n * @param {object} [options.compression] Type of compression to use: snappy or zlib\n * @param {boolean} [options.fsync=false] Specify a file sync write concern\n * @param {array} [options.readPreferenceTags] Read preference tags\n * @param {number} [options.numberOfRetries=5] The number of retries for a tailable cursor\n * @param {boolean} [options.auto_reconnect=true] Enable auto reconnecting for single server instances\n * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this client\n * @param {number} [options.minSize] If present, the connection pool will be initialized with minSize connections, and will never dip below minSize connections\n * @param {boolean} [options.useNewUrlParser=true] Determines whether or not to use the new url parser. Enables the new, spec-compliant, url parser shipped in the core driver. This url parser fixes a number of problems with the original parser, and aims to outright replace that parser in the near future. Defaults to true, and must be explicitly set to false to use the legacy url parser.\n * @param {boolean} [options.useUnifiedTopology] Enables the new unified topology layer\n * @param {AutoEncryptionOptions} [options.autoEncryption] Optionally enable client side auto encryption\n * @param {MongoClient~connectCallback} [callback] The command result callback\n * @return {MongoClient} a MongoClient instance\n */\nfunction MongoClient(url, options) {\n  if (!(this instanceof MongoClient)) return new MongoClient(url, options);\n  // Set up event emitter\n  EventEmitter.call(this);\n\n  // The internal state\n  this.s = {\n    url: url,\n    options: options || {},\n    promiseLibrary: null,\n    dbCache: new Map(),\n    sessions: new Set(),\n    writeConcern: WriteConcern.fromOptions(options),\n    namespace: new MongoDBNamespace('admin')\n  };\n\n  // Get the promiseLibrary\n  const promiseLibrary = this.s.options.promiseLibrary || Promise;\n\n  // Add the promise to the internal state\n  this.s.promiseLibrary = promiseLibrary;\n}\n\n/**\n * @ignore\n */\ninherits(MongoClient, EventEmitter);\n\nObject.defineProperty(MongoClient.prototype, 'writeConcern', {\n  enumerable: true,\n  get: function() {\n    return this.s.writeConcern;\n  }\n});\n\nObject.defineProperty(MongoClient.prototype, 'readPreference', {\n  enumerable: true,\n  get: function() {\n    return ReadPreference.primary;\n  }\n});\n\n/**\n * The callback format for results\n * @callback MongoClient~connectCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {MongoClient} client The connected client.\n */\n\n/**\n * Connect to MongoDB using a url as documented at\n *\n *  docs.mongodb.org/manual/reference/connection-string/\n *\n * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver\n *\n * @method\n * @param {MongoClient~connectCallback} [callback] The command result callback\n * @return {Promise<MongoClient>} returns Promise if no callback passed\n */\nMongoClient.prototype.connect = function(callback) {\n  if (typeof callback === 'string') {\n    throw new TypeError('`connect` only accepts a callback');\n  }\n\n  const operation = new ConnectOperation(this);\n\n  return executeOperation(this, operation, callback);\n};\n\nMongoClient.prototype.logout = deprecate(function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  if (typeof callback === 'function') callback(null, true);\n}, 'Multiple authentication is prohibited on a connected client, please only authenticate once per MongoClient');\n\n/**\n * Close the db and its underlying connections\n * @method\n * @param {boolean} [force=false] Force close, emitting no events\n * @param {Db~noResultCallback} [callback] The result callback\n * @return {Promise} returns Promise if no callback passed\n */\nMongoClient.prototype.close = function(force, callback) {\n  if (typeof force === 'function') (callback = force), (force = false);\n  const operation = new CloseOperation(this, force);\n  return executeOperation(this, operation, callback);\n};\n\n/**\n * Create a new Db instance sharing the current socket connections. Be aware that the new db instances are\n * related in a parent-child relationship to the original instance so that events are correctly emitted on child\n * db instances. Child db instances are cached so performing db('db1') twice will return the same instance.\n * You can control these behaviors with the options noListener and returnNonCachedInstance.\n *\n * @method\n * @param {string} [dbName] The name of the database we want to use. If not provided, use database name from connection string.\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.noListener=false] Do not make the db an event listener to the original connection.\n * @param {boolean} [options.returnNonCachedInstance=false] Control if you want to return a cached instance or have a new one created\n * @return {Db}\n */\nMongoClient.prototype.db = function(dbName, options) {\n  options = options || {};\n\n  // Default to db from connection string if not provided\n  if (!dbName) {\n    dbName = this.s.options.dbName;\n  }\n\n  // Copy the options and add out internal override of the not shared flag\n  const finalOptions = Object.assign({}, this.s.options, options);\n\n  // Do we have the db in the cache already\n  if (this.s.dbCache.has(dbName) && finalOptions.returnNonCachedInstance !== true) {\n    return this.s.dbCache.get(dbName);\n  }\n\n  // Add promiseLibrary\n  finalOptions.promiseLibrary = this.s.promiseLibrary;\n\n  // If no topology throw an error message\n  if (!this.topology) {\n    throw new MongoError('MongoClient must be connected before calling MongoClient.prototype.db');\n  }\n\n  // Return the db object\n  const db = new Db(dbName, this.topology, finalOptions);\n\n  // Add the db to the cache\n  this.s.dbCache.set(dbName, db);\n  // Return the database\n  return db;\n};\n\n/**\n * Check if MongoClient is connected\n *\n * @method\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.noListener=false] Do not make the db an event listener to the original connection.\n * @param {boolean} [options.returnNonCachedInstance=false] Control if you want to return a cached instance or have a new one created\n * @return {boolean}\n */\nMongoClient.prototype.isConnected = function(options) {\n  options = options || {};\n\n  if (!this.topology) return false;\n  return this.topology.isConnected(options);\n};\n\n/**\n * Connect to MongoDB using a url as documented at\n *\n *  docs.mongodb.org/manual/reference/connection-string/\n *\n * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver\n *\n * @method\n * @static\n * @param {string} url The connection URI string\n * @param {object} [options] Optional settings\n * @param {number} [options.poolSize=5] The maximum size of the individual server pool\n * @param {boolean} [options.ssl=false] Enable SSL connection.\n * @param {boolean} [options.sslValidate=false] Validate mongod server certificate against Certificate Authority\n * @param {buffer} [options.sslCA=undefined] SSL Certificate store binary buffer\n * @param {buffer} [options.sslCert=undefined] SSL Certificate binary buffer\n * @param {buffer} [options.sslKey=undefined] SSL Key file binary buffer\n * @param {string} [options.sslPass=undefined] SSL Certificate pass phrase\n * @param {buffer} [options.sslCRL=undefined] SSL Certificate revocation list binary buffer\n * @param {boolean} [options.autoReconnect=true] Enable autoReconnect for single server instances\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {boolean} [options.keepAliveInitialDelay=30000] The number of milliseconds to wait before initiating keepAlive on the TCP socket\n * @param {number} [options.connectTimeoutMS=30000] TCP Connection timeout setting\n * @param {number} [options.family] Version of IP stack. Can be 4, 6 or null (default).\n * If null, will attempt to connect with IPv6, and will fall back to IPv4 on failure\n * @param {number} [options.socketTimeoutMS=360000] TCP Socket timeout setting\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @param {boolean} [options.ha=true] Control if high availability monitoring runs for Replicaset or Mongos proxies\n * @param {number} [options.haInterval=10000] The High availability period for replicaset inquiry\n * @param {string} [options.replicaSet=undefined] The Replicaset set name\n * @param {number} [options.secondaryAcceptableLatencyMS=15] Cutoff latency point in MS for Replicaset member selection\n * @param {number} [options.acceptableLatencyMS=15] Cutoff latency point in MS for Mongos proxies selection\n * @param {boolean} [options.connectWithNoPrimary=false] Sets if the driver should connect even if no primary is available\n * @param {string} [options.authSource=undefined] Define the database to authenticate against\n * @param {(number|string)} [options.w] The write concern\n * @param {number} [options.wtimeout] The write concern timeout\n * @param {boolean} [options.j=false] Specify a journal write concern\n * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers\n * @param {number} [options.bufferMaxEntries=-1] Sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST)\n * @param {object} [options.pkFactory] A primary key factory object for generation of custom _id keys\n * @param {object} [options.promiseLibrary] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {object} [options.readConcern] Specify a read concern for the collection (only MongoDB 3.2 or higher supported)\n * @param {ReadConcernLevel} [options.readConcern.level='local'] Specify a read concern level for the collection operations (only MongoDB 3.2 or higher supported)\n * @param {number} [options.maxStalenessSeconds=undefined] The max staleness to secondary reads (values under 10 seconds cannot be guaranteed)\n * @param {string} [options.loggerLevel=undefined] The logging level (error/warn/info/debug)\n * @param {object} [options.logger=undefined] Custom logger object\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers\n * @param {boolean} [options.promoteLongs=true] Promotes long values to number if they fit inside the 53 bits resolution\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function\n * @param {object} [options.validateOptions=false] Validate MongoClient passed in options for correctness\n * @param {string} [options.appname=undefined] The name of the application that created this MongoClient instance. MongoDB 3.4 and newer will print this value in the server log upon establishing each connection. It is also recorded in the slow query log and profile collections\n * @param {string} [options.auth.user=undefined] The username for auth\n * @param {string} [options.auth.password=undefined] The password for auth\n * @param {string} [options.authMechanism=undefined] Mechanism for authentication: MDEFAULT, GSSAPI, PLAIN, MONGODB-X509, or SCRAM-SHA-1\n * @param {object} [options.compression] Type of compression to use: snappy or zlib\n * @param {boolean} [options.fsync=false] Specify a file sync write concern\n * @param {array} [options.readPreferenceTags] Read preference tags\n * @param {number} [options.numberOfRetries=5] The number of retries for a tailable cursor\n * @param {boolean} [options.auto_reconnect=true] Enable auto reconnecting for single server instances\n * @param {number} [options.minSize] If present, the connection pool will be initialized with minSize connections, and will never dip below minSize connections\n * @param {MongoClient~connectCallback} [callback] The command result callback\n * @return {Promise<MongoClient>} returns Promise if no callback passed\n */\nMongoClient.connect = function(url, options, callback) {\n  const args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  options = args.length ? args.shift() : null;\n  options = options || {};\n\n  // Create client\n  const mongoClient = new MongoClient(url, options);\n  // Execute the connect method\n  return mongoClient.connect(callback);\n};\n\n/**\n * Starts a new session on the server\n *\n * @param {SessionOptions} [options] optional settings for a driver session\n * @return {ClientSession} the newly established session\n */\nMongoClient.prototype.startSession = function(options) {\n  options = Object.assign({ explicit: true }, options);\n  if (!this.topology) {\n    throw new MongoError('Must connect to a server before calling this method');\n  }\n\n  if (!this.topology.hasSessionSupport()) {\n    throw new MongoError('Current topology does not support sessions');\n  }\n\n  return this.topology.startSession(options, this.s.options);\n};\n\n/**\n * Runs a given operation with an implicitly created session. The lifetime of the session\n * will be handled without the need for user interaction.\n *\n * NOTE: presently the operation MUST return a Promise (either explicit or implicity as an async function)\n *\n * @param {Object} [options] Optional settings to be appled to implicitly created session\n * @param {Function} operation An operation to execute with an implicitly created session. The signature of this MUST be `(session) => {}`\n * @return {Promise}\n */\nMongoClient.prototype.withSession = function(options, operation) {\n  if (typeof options === 'function') (operation = options), (options = undefined);\n  const session = this.startSession(options);\n\n  let cleanupHandler = (err, result, opts) => {\n    // prevent multiple calls to cleanupHandler\n    cleanupHandler = () => {\n      throw new ReferenceError('cleanupHandler was called too many times');\n    };\n\n    opts = Object.assign({ throw: true }, opts);\n    session.endSession();\n\n    if (err) {\n      if (opts.throw) throw err;\n      return Promise.reject(err);\n    }\n  };\n\n  try {\n    const result = operation(session);\n    return Promise.resolve(result)\n      .then(result => cleanupHandler(null, result))\n      .catch(err => cleanupHandler(err, null, { throw: true }));\n  } catch (err) {\n    return cleanupHandler(err, null, { throw: false });\n  }\n};\n/**\n * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this cluster. Will ignore all changes to system collections, as well as the local, admin,\n * and config databases.\n * @method\n * @since 3.1.0\n * @param {Array} [pipeline] An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n * @param {object} [options] Optional settings\n * @param {string} [options.fullDocument='default'] Allowed values: ‘default’, ‘updateLookup’. When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred.\n * @param {object} [options.resumeAfter] Specifies the logical starting point for the new change stream. This should be the _id field from a previously returned change stream document.\n * @param {number} [options.maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a change stream query\n * @param {number} [options.batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @param {object} [options.collation] Specify collation settings for operation. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @param {ReadPreference} [options.readPreference] The read preference. See {@link https://docs.mongodb.com/manual/reference/read-preference|read preference documentation}.\n * @param {Timestamp} [options.startAtOperationTime] receive change events that occur after the specified timestamp\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @return {ChangeStream} a ChangeStream instance.\n */\nMongoClient.prototype.watch = function(pipeline, options) {\n  pipeline = pipeline || [];\n  options = options || {};\n\n  // Allow optionally not specifying a pipeline\n  if (!Array.isArray(pipeline)) {\n    options = pipeline;\n    pipeline = [];\n  }\n\n  return new ChangeStream(this, pipeline, options);\n};\n\n/**\n * Return the mongo client logger\n * @method\n * @return {Logger} return the mongo client logger\n * @ignore\n */\nMongoClient.prototype.getLogger = function() {\n  return this.s.options.logger;\n};\n\nmodule.exports = MongoClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///103\n");

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst EventEmitter = __webpack_require__(39);\nconst isResumableError = __webpack_require__(105).isResumableError;\nconst MongoError = __webpack_require__(3).MongoError;\nconst Cursor = __webpack_require__(106);\nconst relayEvents = __webpack_require__(35).relayEvents;\nconst maxWireVersion = __webpack_require__(35).maxWireVersion;\nconst AggregateOperation = __webpack_require__(119);\n\nconst CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument'];\nconst CURSOR_OPTIONS = ['batchSize', 'maxAwaitTimeMS', 'collation', 'readPreference'].concat(\n  CHANGE_STREAM_OPTIONS\n);\n\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\n\n/**\n * @typedef ResumeToken\n * @description Represents the logical starting point for a new or resuming {@link ChangeStream} on the server.\n * @see https://docs.mongodb.com/master/changeStreams/#change-stream-resume-token\n */\n\n/**\n * @typedef OperationTime\n * @description Represents a specific point in time on a server. Can be retrieved by using {@link Db#command}\n * @see https://docs.mongodb.com/manual/reference/method/db.runCommand/#response\n */\n\n/**\n * @typedef ChangeStreamOptions\n * @description Options that can be passed to a ChangeStream. Note that startAfter, resumeAfter, and startAtOperationTime are all mutually exclusive, and the server will error if more than one is specified.\n * @property {string} [fullDocument='default'] Allowed values: ‘default’, ‘updateLookup’. When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred.\n * @property {number} [maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a change stream query.\n * @property {ResumeToken} [resumeAfter] Allows you to start a changeStream after a specified event. See {@link https://docs.mongodb.com/master/changeStreams/#resumeafter-for-change-streams|ChangeStream documentation}.\n * @property {ResumeToken} [startAfter] Similar to resumeAfter, but will allow you to start after an invalidated event. See {@link https://docs.mongodb.com/master/changeStreams/#startafter-for-change-streams|ChangeStream documentation}.\n * @property {OperationTime} [startAtOperationTime] Will start the changeStream after the specified operationTime.\n * @property {number} [batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @property {object} [collation] Specify collation settings for operation. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @property {ReadPreference} [readPreference] The read preference. Defaults to the read preference of the database or collection. See {@link https://docs.mongodb.com/manual/reference/read-preference|read preference documentation}.\n */\n\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @class ChangeStream\n * @since 3.0.0\n * @param {(MongoClient|Db|Collection)} parent The parent object that created this change stream\n * @param {Array} pipeline An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n * @param {ChangeStreamOptions} [options] Optional settings\n * @fires ChangeStream#close\n * @fires ChangeStream#change\n * @fires ChangeStream#end\n * @fires ChangeStream#error\n * @fires ChangeStream#resumeTokenChanged\n * @return {ChangeStream} a ChangeStream instance.\n */\nclass ChangeStream extends EventEmitter {\n  constructor(parent, pipeline, options) {\n    super();\n    const Collection = __webpack_require__(111);\n    const Db = __webpack_require__(150);\n    const MongoClient = __webpack_require__(103);\n\n    this.pipeline = pipeline || [];\n    this.options = options || {};\n\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n    if (parent instanceof Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n      this.topology = parent.s.db.serverConfig;\n    } else if (parent instanceof Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n      this.topology = parent.serverConfig;\n    } else if (parent instanceof MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n      this.topology = parent.topology;\n    } else {\n      throw new TypeError(\n        'parent provided to ChangeStream constructor is not an instance of Collection, Db, or MongoClient'\n      );\n    }\n\n    this.promiseLibrary = parent.s.promiseLibrary;\n    if (!this.options.readPreference && parent.s.readPreference) {\n      this.options.readPreference = parent.s.readPreference;\n    }\n\n    // Create contained Change Stream cursor\n    this.cursor = createChangeStreamCursor(this, options);\n\n    // Listen for any `change` listeners being added to ChangeStream\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        this.cursor.on('data', change =>\n          processNewChange({ changeStream: this, change, eventEmitter: true })\n        );\n      }\n    });\n\n    // Listen for all `change` listeners being removed from ChangeStream\n    this.on('removeListener', eventName => {\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        this.cursor.removeAllListeners('data');\n      }\n    });\n  }\n\n  /**\n   * @property {ResumeToken} resumeToken\n   * The cached resume token that will be used to resume\n   * after the most recently returned change.\n   */\n  get resumeToken() {\n    return this.cursor.resumeToken;\n  }\n\n  /**\n   * Check if there is any document still available in the Change Stream\n   * @function ChangeStream.prototype.hasNext\n   * @param {ChangeStream~resultCallback} [callback] The result callback.\n   * @throws {MongoError}\n   * @return {Promise} returns Promise if no callback passed\n   */\n  hasNext(callback) {\n    return this.cursor.hasNext(callback);\n  }\n\n  /**\n   * Get the next available document from the Change Stream, returns null if no more documents are available.\n   * @function ChangeStream.prototype.next\n   * @param {ChangeStream~resultCallback} [callback] The result callback.\n   * @throws {MongoError}\n   * @return {Promise} returns Promise if no callback passed\n   */\n  next(callback) {\n    var self = this;\n    if (this.isClosed()) {\n      if (callback) return callback(new Error('Change Stream is not open.'), null);\n      return self.promiseLibrary.reject(new Error('Change Stream is not open.'));\n    }\n\n    return this.cursor\n      .next()\n      .then(change => processNewChange({ changeStream: self, change, callback }))\n      .catch(error => processNewChange({ changeStream: self, error, callback }));\n  }\n\n  /**\n   * Is the cursor closed\n   * @method ChangeStream.prototype.isClosed\n   * @return {boolean}\n   */\n  isClosed() {\n    if (this.cursor) {\n      return this.cursor.isClosed();\n    }\n    return true;\n  }\n\n  /**\n   * Close the Change Stream\n   * @method ChangeStream.prototype.close\n   * @param {ChangeStream~resultCallback} [callback] The result callback.\n   * @return {Promise} returns Promise if no callback passed\n   */\n  close(callback) {\n    if (!this.cursor) {\n      if (callback) return callback();\n      return this.promiseLibrary.resolve();\n    }\n\n    // Tidy up the existing cursor\n    const cursor = this.cursor;\n\n    if (callback) {\n      return cursor.close(err => {\n        ['data', 'close', 'end', 'error'].forEach(event => cursor.removeAllListeners(event));\n        delete this.cursor;\n\n        return callback(err);\n      });\n    }\n\n    const PromiseCtor = this.promiseLibrary || Promise;\n    return new PromiseCtor((resolve, reject) => {\n      cursor.close(err => {\n        ['data', 'close', 'end', 'error'].forEach(event => cursor.removeAllListeners(event));\n        delete this.cursor;\n\n        if (err) return reject(err);\n        resolve();\n      });\n    });\n  }\n\n  /**\n   * This method pulls all the data out of a readable stream, and writes it to the supplied destination, automatically managing the flow so that the destination is not overwhelmed by a fast readable stream.\n   * @method\n   * @param {Writable} destination The destination for writing data\n   * @param {object} [options] {@link https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options|Pipe options}\n   * @return {null}\n   */\n  pipe(destination, options) {\n    if (!this.pipeDestinations) {\n      this.pipeDestinations = [];\n    }\n    this.pipeDestinations.push(destination);\n    return this.cursor.pipe(destination, options);\n  }\n\n  /**\n   * This method will remove the hooks set up for a previous pipe() call.\n   * @param {Writable} [destination] The destination for writing data\n   * @return {null}\n   */\n  unpipe(destination) {\n    if (this.pipeDestinations && this.pipeDestinations.indexOf(destination) > -1) {\n      this.pipeDestinations.splice(this.pipeDestinations.indexOf(destination), 1);\n    }\n    return this.cursor.unpipe(destination);\n  }\n\n  /**\n   * Return a modified Readable stream including a possible transform method.\n   * @method\n   * @param {object} [options] Optional settings.\n   * @param {function} [options.transform] A transformation method applied to each document emitted by the stream.\n   * @return {Cursor}\n   */\n  stream(options) {\n    this.streamOptions = options;\n    return this.cursor.stream(options);\n  }\n\n  /**\n   * This method will cause a stream in flowing mode to stop emitting data events. Any data that becomes available will remain in the internal buffer.\n   * @return {null}\n   */\n  pause() {\n    return this.cursor.pause();\n  }\n\n  /**\n   * This method will cause the readable stream to resume emitting data events.\n   * @return {null}\n   */\n  resume() {\n    return this.cursor.resume();\n  }\n}\n\nclass ChangeStreamCursor extends Cursor {\n  constructor(topology, operation, options) {\n    super(topology, operation, options);\n\n    options = options || {};\n    this._resumeToken = null;\n    this.startAtOperationTime = options.startAtOperationTime;\n\n    if (options.startAfter) {\n      this.resumeToken = options.startAfter;\n    } else if (options.resumeAfter) {\n      this.resumeToken = options.resumeAfter;\n    }\n  }\n\n  set resumeToken(token) {\n    this._resumeToken = token;\n    this.emit('resumeTokenChanged', token);\n  }\n\n  get resumeToken() {\n    return this._resumeToken;\n  }\n\n  get resumeOptions() {\n    const result = {};\n    for (const optionName of CURSOR_OPTIONS) {\n      if (this.options[optionName]) result[optionName] = this.options[optionName];\n    }\n\n    if (this.resumeToken || this.startAtOperationTime) {\n      ['resumeAfter', 'startAfter', 'startAtOperationTime'].forEach(key => delete result[key]);\n\n      if (this.resumeToken) {\n        result.resumeAfter = this.resumeToken;\n      } else if (this.startAtOperationTime && maxWireVersion(this.server) >= 7) {\n        result.startAtOperationTime = this.startAtOperationTime;\n      }\n    }\n\n    return result;\n  }\n\n  _initializeCursor(callback) {\n    super._initializeCursor((err, result) => {\n      if (err) {\n        callback(err, null);\n        return;\n      }\n\n      const response = result.documents[0];\n\n      if (\n        this.startAtOperationTime == null &&\n        this.resumeAfter == null &&\n        this.startAfter == null &&\n        maxWireVersion(this.server) >= 7\n      ) {\n        this.startAtOperationTime = response.operationTime;\n      }\n\n      const cursor = response.cursor;\n      if (cursor.postBatchResumeToken) {\n        this.cursorState.postBatchResumeToken = cursor.postBatchResumeToken;\n\n        if (cursor.firstBatch.length === 0) {\n          this.resumeToken = cursor.postBatchResumeToken;\n        }\n      }\n\n      this.emit('response');\n      callback(err, result);\n    });\n  }\n\n  _getMore(callback) {\n    super._getMore((err, response) => {\n      if (err) {\n        callback(err, null);\n        return;\n      }\n\n      const cursor = response.cursor;\n      if (cursor.postBatchResumeToken) {\n        this.cursorState.postBatchResumeToken = cursor.postBatchResumeToken;\n\n        if (cursor.nextBatch.length === 0) {\n          this.resumeToken = cursor.postBatchResumeToken;\n        }\n      }\n\n      this.emit('response');\n      callback(err, response);\n    });\n  }\n}\n\n/**\n * @event ChangeStreamCursor#response\n * internal event DO NOT USE\n * @ignore\n */\n\n// Create a new change stream cursor based on self's configuration\nfunction createChangeStreamCursor(self, options) {\n  const changeStreamStageOptions = { fullDocument: options.fullDocument || 'default' };\n  applyKnownOptions(changeStreamStageOptions, options, CHANGE_STREAM_OPTIONS);\n  if (self.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n    changeStreamStageOptions.allChangesForCluster = true;\n  }\n\n  const pipeline = [{ $changeStream: changeStreamStageOptions }].concat(self.pipeline);\n  const cursorOptions = applyKnownOptions({}, options, CURSOR_OPTIONS);\n  const changeStreamCursor = new ChangeStreamCursor(\n    self.topology,\n    new AggregateOperation(self.parent, pipeline, options),\n    cursorOptions\n  );\n\n  relayEvents(changeStreamCursor, self, ['resumeTokenChanged', 'end', 'close']);\n\n  /**\n   * Fired for each new matching change in the specified namespace. Attaching a `change`\n   * event listener to a Change Stream will switch the stream into flowing mode. Data will\n   * then be passed as soon as it is available.\n   *\n   * @event ChangeStream#change\n   * @type {object}\n   */\n  if (self.listenerCount('change') > 0) {\n    changeStreamCursor.on('data', function(change) {\n      processNewChange({ changeStream: self, change, eventEmitter: true });\n    });\n  }\n\n  /**\n   * Change stream close event\n   *\n   * @event ChangeStream#close\n   * @type {null}\n   */\n\n  /**\n   * Change stream end event\n   *\n   * @event ChangeStream#end\n   * @type {null}\n   */\n\n  /**\n   * Emitted each time the change stream stores a new resume token.\n   *\n   * @event ChangeStream#resumeTokenChanged\n   * @type {ResumeToken}\n   */\n\n  /**\n   * Fired when the stream encounters an error.\n   *\n   * @event ChangeStream#error\n   * @type {Error}\n   */\n  changeStreamCursor.on('error', function(error) {\n    processNewChange({ changeStream: self, error, eventEmitter: true });\n  });\n\n  if (self.pipeDestinations) {\n    const cursorStream = changeStreamCursor.stream(self.streamOptions);\n    for (let pipeDestination in self.pipeDestinations) {\n      cursorStream.pipe(pipeDestination);\n    }\n  }\n\n  return changeStreamCursor;\n}\n\nfunction applyKnownOptions(target, source, optionNames) {\n  optionNames.forEach(name => {\n    if (source[name]) {\n      target[name] = source[name];\n    }\n  });\n\n  return target;\n}\n\n// This method performs a basic server selection loop, satisfying the requirements of\n// ChangeStream resumability until the new SDAM layer can be used.\nconst SELECTION_TIMEOUT = 30000;\nfunction waitForTopologyConnected(topology, options, callback) {\n  setTimeout(() => {\n    if (options && options.start == null) options.start = process.hrtime();\n    const start = options.start || process.hrtime();\n    const timeout = options.timeout || SELECTION_TIMEOUT;\n    const readPreference = options.readPreference;\n\n    if (topology.isConnected({ readPreference })) return callback(null, null);\n    const hrElapsed = process.hrtime(start);\n    const elapsed = (hrElapsed[0] * 1e9 + hrElapsed[1]) / 1e6;\n    if (elapsed > timeout) return callback(new MongoError('Timed out waiting for connection'));\n    waitForTopologyConnected(topology, options, callback);\n  }, 3000); // this is an arbitrary wait time to allow SDAM to transition\n}\n\n// Handle new change events. This method brings together the routes from the callback, event emitter, and promise ways of using ChangeStream.\nfunction processNewChange(args) {\n  const changeStream = args.changeStream;\n  const error = args.error;\n  const change = args.change;\n  const callback = args.callback;\n  const eventEmitter = args.eventEmitter || false;\n\n  // If the changeStream is closed, then it should not process a change.\n  if (changeStream.isClosed()) {\n    // We do not error in the eventEmitter case.\n    if (eventEmitter) {\n      return;\n    }\n\n    const error = new MongoError('ChangeStream is closed');\n    return typeof callback === 'function'\n      ? callback(error, null)\n      : changeStream.promiseLibrary.reject(error);\n  }\n\n  const cursor = changeStream.cursor;\n  const topology = changeStream.topology;\n  const options = changeStream.cursor.options;\n\n  if (error) {\n    if (isResumableError(error) && !changeStream.attemptingResume) {\n      changeStream.attemptingResume = true;\n\n      // stop listening to all events from old cursor\n      ['data', 'close', 'end', 'error'].forEach(event =>\n        changeStream.cursor.removeAllListeners(event)\n      );\n\n      // close internal cursor, ignore errors\n      changeStream.cursor.close();\n\n      // attempt recreating the cursor\n      if (eventEmitter) {\n        waitForTopologyConnected(topology, { readPreference: options.readPreference }, err => {\n          if (err) {\n            changeStream.emit('error', err);\n            changeStream.emit('close');\n            return;\n          }\n          changeStream.cursor = createChangeStreamCursor(changeStream, cursor.resumeOptions);\n        });\n\n        return;\n      }\n\n      if (callback) {\n        waitForTopologyConnected(topology, { readPreference: options.readPreference }, err => {\n          if (err) return callback(err, null);\n\n          changeStream.cursor = createChangeStreamCursor(changeStream, cursor.resumeOptions);\n          changeStream.next(callback);\n        });\n\n        return;\n      }\n\n      return new Promise((resolve, reject) => {\n        waitForTopologyConnected(topology, { readPreference: options.readPreference }, err => {\n          if (err) return reject(err);\n          resolve();\n        });\n      })\n        .then(\n          () => (changeStream.cursor = createChangeStreamCursor(changeStream, cursor.resumeOptions))\n        )\n        .then(() => changeStream.next());\n    }\n\n    if (eventEmitter) return changeStream.emit('error', error);\n    if (typeof callback === 'function') return callback(error, null);\n    return changeStream.promiseLibrary.reject(error);\n  }\n\n  changeStream.attemptingResume = false;\n\n  if (change && !change._id) {\n    const noResumeTokenError = new Error(\n      'A change stream document has been received that lacks a resume token (_id).'\n    );\n\n    if (eventEmitter) return changeStream.emit('error', noResumeTokenError);\n    if (typeof callback === 'function') return callback(noResumeTokenError, null);\n    return changeStream.promiseLibrary.reject(noResumeTokenError);\n  }\n\n  // cache the resume token\n  if (cursor.bufferedCount() === 0 && cursor.cursorState.postBatchResumeToken) {\n    cursor.resumeToken = cursor.cursorState.postBatchResumeToken;\n  } else {\n    cursor.resumeToken = change._id;\n  }\n\n  // wipe the startAtOperationTime if there was one so that there won't be a conflict\n  // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n  changeStream.options.startAtOperationTime = undefined;\n\n  // Return the change\n  if (eventEmitter) return changeStream.emit('change', change);\n  if (typeof callback === 'function') return callback(error, change);\n  return changeStream.promiseLibrary.resolve(change);\n}\n\n/**\n * The callback format for results\n * @callback ChangeStream~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {(object|null)} result The result object if the command was executed successfully.\n */\n\nmodule.exports = ChangeStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NoYW5nZV9zdHJlYW0uanM/ZjdhOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixxQkFBcUIsbUJBQU8sQ0FBQyxFQUFRO0FBQ3JDLHlCQUF5QixtQkFBTyxDQUFDLEdBQVM7QUFDMUMsbUJBQW1CLG1CQUFPLENBQUMsQ0FBUTtBQUNuQyxlQUFlLG1CQUFPLENBQUMsR0FBVTtBQUNqQyxvQkFBb0IsbUJBQU8sQ0FBQyxFQUFjO0FBQzFDLHVCQUF1QixtQkFBTyxDQUFDLEVBQWM7QUFDN0MsMkJBQTJCLG1CQUFPLENBQUMsR0FBd0I7O0FBRTNEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDZFQUE2RSxtQkFBbUI7QUFDaEc7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNEZBQTRGO0FBQzVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLFlBQVksZ0ZBQWdGLCtHQUErRztBQUN6TixjQUFjLFlBQVksbUdBQW1HLDhHQUE4RztBQUMzTyxjQUFjLGNBQWM7QUFDNUIsY0FBYyxPQUFPLG9FQUFvRSw0RkFBNEY7QUFDckwsY0FBYyxPQUFPLDREQUE0RCw0RkFBNEY7QUFDN0ssY0FBYyxlQUFlLDJHQUEyRyw4RkFBOEY7QUFDdE87O0FBRUE7QUFDQSxpRUFBaUUsMENBQTBDO0FBQzNHO0FBQ0E7QUFDQSxXQUFXLDRCQUE0QjtBQUN2QyxXQUFXLE1BQU0sdUJBQXVCLDJHQUEyRztBQUNuSixXQUFXLG9CQUFvQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxhQUFhO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG1CQUFPLENBQUMsR0FBYztBQUM3QyxlQUFlLG1CQUFPLENBQUMsR0FBTTtBQUM3Qix3QkFBd0IsbUJBQU8sQ0FBQyxHQUFnQjs7QUFFaEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGlEQUFpRDtBQUM3RTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0EsZ0JBQWdCLFlBQVk7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsNEJBQTRCO0FBQ3pDLGNBQWM7QUFDZCxjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSw0QkFBNEI7QUFDekMsY0FBYztBQUNkLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0NBQXdDLHVDQUF1QztBQUMvRSx3Q0FBd0Msc0NBQXNDO0FBQzlFOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLDRCQUE0QjtBQUN6QyxjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFNBQVM7QUFDdEIsYUFBYSxPQUFPLFlBQVk7QUFDaEMsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsU0FBUztBQUN0QixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsU0FBUztBQUN0QixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLDBDQUEwQztBQUMvRCw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGlEQUFpRDtBQUN6RSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLHNCQUFzQixnREFBZ0Q7QUFDdEUsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEIsaUJBQWlCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxRQUFRO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEMseUNBQXlDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTs7QUFFQTtBQUNBLDRDQUE0Qyx5Q0FBeUM7QUFDckY7O0FBRUE7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTs7QUFFQTtBQUNBLDRDQUE0Qyx5Q0FBeUM7QUFDckY7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFdBQVc7QUFDdEIsV0FBVyxjQUFjO0FBQ3pCOztBQUVBIiwiZmlsZSI6IjEwNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5jb25zdCBpc1Jlc3VtYWJsZUVycm9yID0gcmVxdWlyZSgnLi9lcnJvcicpLmlzUmVzdW1hYmxlRXJyb3I7XG5jb25zdCBNb25nb0Vycm9yID0gcmVxdWlyZSgnLi9jb3JlJykuTW9uZ29FcnJvcjtcbmNvbnN0IEN1cnNvciA9IHJlcXVpcmUoJy4vY3Vyc29yJyk7XG5jb25zdCByZWxheUV2ZW50cyA9IHJlcXVpcmUoJy4vY29yZS91dGlscycpLnJlbGF5RXZlbnRzO1xuY29uc3QgbWF4V2lyZVZlcnNpb24gPSByZXF1aXJlKCcuL2NvcmUvdXRpbHMnKS5tYXhXaXJlVmVyc2lvbjtcbmNvbnN0IEFnZ3JlZ2F0ZU9wZXJhdGlvbiA9IHJlcXVpcmUoJy4vb3BlcmF0aW9ucy9hZ2dyZWdhdGUnKTtcblxuY29uc3QgQ0hBTkdFX1NUUkVBTV9PUFRJT05TID0gWydyZXN1bWVBZnRlcicsICdzdGFydEFmdGVyJywgJ3N0YXJ0QXRPcGVyYXRpb25UaW1lJywgJ2Z1bGxEb2N1bWVudCddO1xuY29uc3QgQ1VSU09SX09QVElPTlMgPSBbJ2JhdGNoU2l6ZScsICdtYXhBd2FpdFRpbWVNUycsICdjb2xsYXRpb24nLCAncmVhZFByZWZlcmVuY2UnXS5jb25jYXQoXG4gIENIQU5HRV9TVFJFQU1fT1BUSU9OU1xuKTtcblxuY29uc3QgQ0hBTkdFX0RPTUFJTl9UWVBFUyA9IHtcbiAgQ09MTEVDVElPTjogU3ltYm9sKCdDb2xsZWN0aW9uJyksXG4gIERBVEFCQVNFOiBTeW1ib2woJ0RhdGFiYXNlJyksXG4gIENMVVNURVI6IFN5bWJvbCgnQ2x1c3RlcicpXG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIFJlc3VtZVRva2VuXG4gKiBAZGVzY3JpcHRpb24gUmVwcmVzZW50cyB0aGUgbG9naWNhbCBzdGFydGluZyBwb2ludCBmb3IgYSBuZXcgb3IgcmVzdW1pbmcge0BsaW5rIENoYW5nZVN0cmVhbX0gb24gdGhlIHNlcnZlci5cbiAqIEBzZWUgaHR0cHM6Ly9kb2NzLm1vbmdvZGIuY29tL21hc3Rlci9jaGFuZ2VTdHJlYW1zLyNjaGFuZ2Utc3RyZWFtLXJlc3VtZS10b2tlblxuICovXG5cbi8qKlxuICogQHR5cGVkZWYgT3BlcmF0aW9uVGltZVxuICogQGRlc2NyaXB0aW9uIFJlcHJlc2VudHMgYSBzcGVjaWZpYyBwb2ludCBpbiB0aW1lIG9uIGEgc2VydmVyLiBDYW4gYmUgcmV0cmlldmVkIGJ5IHVzaW5nIHtAbGluayBEYiNjb21tYW5kfVxuICogQHNlZSBodHRwczovL2RvY3MubW9uZ29kYi5jb20vbWFudWFsL3JlZmVyZW5jZS9tZXRob2QvZGIucnVuQ29tbWFuZC8jcmVzcG9uc2VcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIENoYW5nZVN0cmVhbU9wdGlvbnNcbiAqIEBkZXNjcmlwdGlvbiBPcHRpb25zIHRoYXQgY2FuIGJlIHBhc3NlZCB0byBhIENoYW5nZVN0cmVhbS4gTm90ZSB0aGF0IHN0YXJ0QWZ0ZXIsIHJlc3VtZUFmdGVyLCBhbmQgc3RhcnRBdE9wZXJhdGlvblRpbWUgYXJlIGFsbCBtdXR1YWxseSBleGNsdXNpdmUsIGFuZCB0aGUgc2VydmVyIHdpbGwgZXJyb3IgaWYgbW9yZSB0aGFuIG9uZSBpcyBzcGVjaWZpZWQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2Z1bGxEb2N1bWVudD0nZGVmYXVsdCddIEFsbG93ZWQgdmFsdWVzOiDigJhkZWZhdWx04oCZLCDigJh1cGRhdGVMb29rdXDigJkuIFdoZW4gc2V0IHRvIOKAmHVwZGF0ZUxvb2t1cOKAmSwgdGhlIGNoYW5nZSBzdHJlYW0gd2lsbCBpbmNsdWRlIGJvdGggYSBkZWx0YSBkZXNjcmliaW5nIHRoZSBjaGFuZ2VzIHRvIHRoZSBkb2N1bWVudCwgYXMgd2VsbCBhcyBhIGNvcHkgb2YgdGhlIGVudGlyZSBkb2N1bWVudCB0aGF0IHdhcyBjaGFuZ2VkIGZyb20gc29tZSB0aW1lIGFmdGVyIHRoZSBjaGFuZ2Ugb2NjdXJyZWQuXG4gKiBAcHJvcGVydHkge251bWJlcn0gW21heEF3YWl0VGltZU1TXSBUaGUgbWF4aW11bSBhbW91bnQgb2YgdGltZSBmb3IgdGhlIHNlcnZlciB0byB3YWl0IG9uIG5ldyBkb2N1bWVudHMgdG8gc2F0aXNmeSBhIGNoYW5nZSBzdHJlYW0gcXVlcnkuXG4gKiBAcHJvcGVydHkge1Jlc3VtZVRva2VufSBbcmVzdW1lQWZ0ZXJdIEFsbG93cyB5b3UgdG8gc3RhcnQgYSBjaGFuZ2VTdHJlYW0gYWZ0ZXIgYSBzcGVjaWZpZWQgZXZlbnQuIFNlZSB7QGxpbmsgaHR0cHM6Ly9kb2NzLm1vbmdvZGIuY29tL21hc3Rlci9jaGFuZ2VTdHJlYW1zLyNyZXN1bWVhZnRlci1mb3ItY2hhbmdlLXN0cmVhbXN8Q2hhbmdlU3RyZWFtIGRvY3VtZW50YXRpb259LlxuICogQHByb3BlcnR5IHtSZXN1bWVUb2tlbn0gW3N0YXJ0QWZ0ZXJdIFNpbWlsYXIgdG8gcmVzdW1lQWZ0ZXIsIGJ1dCB3aWxsIGFsbG93IHlvdSB0byBzdGFydCBhZnRlciBhbiBpbnZhbGlkYXRlZCBldmVudC4gU2VlIHtAbGluayBodHRwczovL2RvY3MubW9uZ29kYi5jb20vbWFzdGVyL2NoYW5nZVN0cmVhbXMvI3N0YXJ0YWZ0ZXItZm9yLWNoYW5nZS1zdHJlYW1zfENoYW5nZVN0cmVhbSBkb2N1bWVudGF0aW9ufS5cbiAqIEBwcm9wZXJ0eSB7T3BlcmF0aW9uVGltZX0gW3N0YXJ0QXRPcGVyYXRpb25UaW1lXSBXaWxsIHN0YXJ0IHRoZSBjaGFuZ2VTdHJlYW0gYWZ0ZXIgdGhlIHNwZWNpZmllZCBvcGVyYXRpb25UaW1lLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtiYXRjaFNpemU9MTAwMF0gVGhlIG51bWJlciBvZiBkb2N1bWVudHMgdG8gcmV0dXJuIHBlciBiYXRjaC4gU2VlIHtAbGluayBodHRwczovL2RvY3MubW9uZ29kYi5jb20vbWFudWFsL3JlZmVyZW5jZS9jb21tYW5kL2FnZ3JlZ2F0ZXxhZ2dyZWdhdGlvbiBkb2N1bWVudGF0aW9ufS5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbY29sbGF0aW9uXSBTcGVjaWZ5IGNvbGxhdGlvbiBzZXR0aW5ncyBmb3Igb3BlcmF0aW9uLiBTZWUge0BsaW5rIGh0dHBzOi8vZG9jcy5tb25nb2RiLmNvbS9tYW51YWwvcmVmZXJlbmNlL2NvbW1hbmQvYWdncmVnYXRlfGFnZ3JlZ2F0aW9uIGRvY3VtZW50YXRpb259LlxuICogQHByb3BlcnR5IHtSZWFkUHJlZmVyZW5jZX0gW3JlYWRQcmVmZXJlbmNlXSBUaGUgcmVhZCBwcmVmZXJlbmNlLiBEZWZhdWx0cyB0byB0aGUgcmVhZCBwcmVmZXJlbmNlIG9mIHRoZSBkYXRhYmFzZSBvciBjb2xsZWN0aW9uLiBTZWUge0BsaW5rIGh0dHBzOi8vZG9jcy5tb25nb2RiLmNvbS9tYW51YWwvcmVmZXJlbmNlL3JlYWQtcHJlZmVyZW5jZXxyZWFkIHByZWZlcmVuY2UgZG9jdW1lbnRhdGlvbn0uXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IENoYW5nZSBTdHJlYW0gaW5zdGFuY2UuIE5vcm1hbGx5IGNyZWF0ZWQgdXNpbmcge0BsaW5rIENvbGxlY3Rpb24jd2F0Y2h8Q29sbGVjdGlvbi53YXRjaCgpfS5cbiAqIEBjbGFzcyBDaGFuZ2VTdHJlYW1cbiAqIEBzaW5jZSAzLjAuMFxuICogQHBhcmFtIHsoTW9uZ29DbGllbnR8RGJ8Q29sbGVjdGlvbil9IHBhcmVudCBUaGUgcGFyZW50IG9iamVjdCB0aGF0IGNyZWF0ZWQgdGhpcyBjaGFuZ2Ugc3RyZWFtXG4gKiBAcGFyYW0ge0FycmF5fSBwaXBlbGluZSBBbiBhcnJheSBvZiB7QGxpbmsgaHR0cHM6Ly9kb2NzLm1vbmdvZGIuY29tL21hbnVhbC9yZWZlcmVuY2Uvb3BlcmF0b3IvYWdncmVnYXRpb24tcGlwZWxpbmUvfGFnZ3JlZ2F0aW9uIHBpcGVsaW5lIHN0YWdlc30gdGhyb3VnaCB3aGljaCB0byBwYXNzIGNoYW5nZSBzdHJlYW0gZG9jdW1lbnRzXG4gKiBAcGFyYW0ge0NoYW5nZVN0cmVhbU9wdGlvbnN9IFtvcHRpb25zXSBPcHRpb25hbCBzZXR0aW5nc1xuICogQGZpcmVzIENoYW5nZVN0cmVhbSNjbG9zZVxuICogQGZpcmVzIENoYW5nZVN0cmVhbSNjaGFuZ2VcbiAqIEBmaXJlcyBDaGFuZ2VTdHJlYW0jZW5kXG4gKiBAZmlyZXMgQ2hhbmdlU3RyZWFtI2Vycm9yXG4gKiBAZmlyZXMgQ2hhbmdlU3RyZWFtI3Jlc3VtZVRva2VuQ2hhbmdlZFxuICogQHJldHVybiB7Q2hhbmdlU3RyZWFtfSBhIENoYW5nZVN0cmVhbSBpbnN0YW5jZS5cbiAqL1xuY2xhc3MgQ2hhbmdlU3RyZWFtIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3IocGFyZW50LCBwaXBlbGluZSwgb3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgY29uc3QgQ29sbGVjdGlvbiA9IHJlcXVpcmUoJy4vY29sbGVjdGlvbicpO1xuICAgIGNvbnN0IERiID0gcmVxdWlyZSgnLi9kYicpO1xuICAgIGNvbnN0IE1vbmdvQ2xpZW50ID0gcmVxdWlyZSgnLi9tb25nb19jbGllbnQnKTtcblxuICAgIHRoaXMucGlwZWxpbmUgPSBwaXBlbGluZSB8fCBbXTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy5uYW1lc3BhY2UgPSBwYXJlbnQucy5uYW1lc3BhY2U7XG4gICAgaWYgKHBhcmVudCBpbnN0YW5jZW9mIENvbGxlY3Rpb24pIHtcbiAgICAgIHRoaXMudHlwZSA9IENIQU5HRV9ET01BSU5fVFlQRVMuQ09MTEVDVElPTjtcbiAgICAgIHRoaXMudG9wb2xvZ3kgPSBwYXJlbnQucy5kYi5zZXJ2ZXJDb25maWc7XG4gICAgfSBlbHNlIGlmIChwYXJlbnQgaW5zdGFuY2VvZiBEYikge1xuICAgICAgdGhpcy50eXBlID0gQ0hBTkdFX0RPTUFJTl9UWVBFUy5EQVRBQkFTRTtcbiAgICAgIHRoaXMudG9wb2xvZ3kgPSBwYXJlbnQuc2VydmVyQ29uZmlnO1xuICAgIH0gZWxzZSBpZiAocGFyZW50IGluc3RhbmNlb2YgTW9uZ29DbGllbnQpIHtcbiAgICAgIHRoaXMudHlwZSA9IENIQU5HRV9ET01BSU5fVFlQRVMuQ0xVU1RFUjtcbiAgICAgIHRoaXMudG9wb2xvZ3kgPSBwYXJlbnQudG9wb2xvZ3k7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdwYXJlbnQgcHJvdmlkZWQgdG8gQ2hhbmdlU3RyZWFtIGNvbnN0cnVjdG9yIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBDb2xsZWN0aW9uLCBEYiwgb3IgTW9uZ29DbGllbnQnXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMucHJvbWlzZUxpYnJhcnkgPSBwYXJlbnQucy5wcm9taXNlTGlicmFyeTtcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5yZWFkUHJlZmVyZW5jZSAmJiBwYXJlbnQucy5yZWFkUHJlZmVyZW5jZSkge1xuICAgICAgdGhpcy5vcHRpb25zLnJlYWRQcmVmZXJlbmNlID0gcGFyZW50LnMucmVhZFByZWZlcmVuY2U7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGNvbnRhaW5lZCBDaGFuZ2UgU3RyZWFtIGN1cnNvclxuICAgIHRoaXMuY3Vyc29yID0gY3JlYXRlQ2hhbmdlU3RyZWFtQ3Vyc29yKHRoaXMsIG9wdGlvbnMpO1xuXG4gICAgLy8gTGlzdGVuIGZvciBhbnkgYGNoYW5nZWAgbGlzdGVuZXJzIGJlaW5nIGFkZGVkIHRvIENoYW5nZVN0cmVhbVxuICAgIHRoaXMub24oJ25ld0xpc3RlbmVyJywgZXZlbnROYW1lID0+IHtcbiAgICAgIGlmIChldmVudE5hbWUgPT09ICdjaGFuZ2UnICYmIHRoaXMuY3Vyc29yICYmIHRoaXMubGlzdGVuZXJDb3VudCgnY2hhbmdlJykgPT09IDApIHtcbiAgICAgICAgdGhpcy5jdXJzb3Iub24oJ2RhdGEnLCBjaGFuZ2UgPT5cbiAgICAgICAgICBwcm9jZXNzTmV3Q2hhbmdlKHsgY2hhbmdlU3RyZWFtOiB0aGlzLCBjaGFuZ2UsIGV2ZW50RW1pdHRlcjogdHJ1ZSB9KVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gTGlzdGVuIGZvciBhbGwgYGNoYW5nZWAgbGlzdGVuZXJzIGJlaW5nIHJlbW92ZWQgZnJvbSBDaGFuZ2VTdHJlYW1cbiAgICB0aGlzLm9uKCdyZW1vdmVMaXN0ZW5lcicsIGV2ZW50TmFtZSA9PiB7XG4gICAgICBpZiAoZXZlbnROYW1lID09PSAnY2hhbmdlJyAmJiB0aGlzLmxpc3RlbmVyQ291bnQoJ2NoYW5nZScpID09PSAwICYmIHRoaXMuY3Vyc29yKSB7XG4gICAgICAgIHRoaXMuY3Vyc29yLnJlbW92ZUFsbExpc3RlbmVycygnZGF0YScpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7UmVzdW1lVG9rZW59IHJlc3VtZVRva2VuXG4gICAqIFRoZSBjYWNoZWQgcmVzdW1lIHRva2VuIHRoYXQgd2lsbCBiZSB1c2VkIHRvIHJlc3VtZVxuICAgKiBhZnRlciB0aGUgbW9zdCByZWNlbnRseSByZXR1cm5lZCBjaGFuZ2UuXG4gICAqL1xuICBnZXQgcmVzdW1lVG9rZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuY3Vyc29yLnJlc3VtZVRva2VuO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZXJlIGlzIGFueSBkb2N1bWVudCBzdGlsbCBhdmFpbGFibGUgaW4gdGhlIENoYW5nZSBTdHJlYW1cbiAgICogQGZ1bmN0aW9uIENoYW5nZVN0cmVhbS5wcm90b3R5cGUuaGFzTmV4dFxuICAgKiBAcGFyYW0ge0NoYW5nZVN0cmVhbX5yZXN1bHRDYWxsYmFja30gW2NhbGxiYWNrXSBUaGUgcmVzdWx0IGNhbGxiYWNrLlxuICAgKiBAdGhyb3dzIHtNb25nb0Vycm9yfVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIFByb21pc2UgaWYgbm8gY2FsbGJhY2sgcGFzc2VkXG4gICAqL1xuICBoYXNOZXh0KGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuY3Vyc29yLmhhc05leHQoY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbmV4dCBhdmFpbGFibGUgZG9jdW1lbnQgZnJvbSB0aGUgQ2hhbmdlIFN0cmVhbSwgcmV0dXJucyBudWxsIGlmIG5vIG1vcmUgZG9jdW1lbnRzIGFyZSBhdmFpbGFibGUuXG4gICAqIEBmdW5jdGlvbiBDaGFuZ2VTdHJlYW0ucHJvdG90eXBlLm5leHRcbiAgICogQHBhcmFtIHtDaGFuZ2VTdHJlYW1+cmVzdWx0Q2FsbGJhY2t9IFtjYWxsYmFja10gVGhlIHJlc3VsdCBjYWxsYmFjay5cbiAgICogQHRocm93cyB7TW9uZ29FcnJvcn1cbiAgICogQHJldHVybiB7UHJvbWlzZX0gcmV0dXJucyBQcm9taXNlIGlmIG5vIGNhbGxiYWNrIHBhc3NlZFxuICAgKi9cbiAgbmV4dChjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAodGhpcy5pc0Nsb3NlZCgpKSB7XG4gICAgICBpZiAoY2FsbGJhY2spIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoJ0NoYW5nZSBTdHJlYW0gaXMgbm90IG9wZW4uJyksIG51bGwpO1xuICAgICAgcmV0dXJuIHNlbGYucHJvbWlzZUxpYnJhcnkucmVqZWN0KG5ldyBFcnJvcignQ2hhbmdlIFN0cmVhbSBpcyBub3Qgb3Blbi4nKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY3Vyc29yXG4gICAgICAubmV4dCgpXG4gICAgICAudGhlbihjaGFuZ2UgPT4gcHJvY2Vzc05ld0NoYW5nZSh7IGNoYW5nZVN0cmVhbTogc2VsZiwgY2hhbmdlLCBjYWxsYmFjayB9KSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiBwcm9jZXNzTmV3Q2hhbmdlKHsgY2hhbmdlU3RyZWFtOiBzZWxmLCBlcnJvciwgY2FsbGJhY2sgfSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIElzIHRoZSBjdXJzb3IgY2xvc2VkXG4gICAqIEBtZXRob2QgQ2hhbmdlU3RyZWFtLnByb3RvdHlwZS5pc0Nsb3NlZFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNDbG9zZWQoKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yKSB7XG4gICAgICByZXR1cm4gdGhpcy5jdXJzb3IuaXNDbG9zZWQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2UgdGhlIENoYW5nZSBTdHJlYW1cbiAgICogQG1ldGhvZCBDaGFuZ2VTdHJlYW0ucHJvdG90eXBlLmNsb3NlXG4gICAqIEBwYXJhbSB7Q2hhbmdlU3RyZWFtfnJlc3VsdENhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSByZXN1bHQgY2FsbGJhY2suXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgUHJvbWlzZSBpZiBubyBjYWxsYmFjayBwYXNzZWRcbiAgICovXG4gIGNsb3NlKGNhbGxiYWNrKSB7XG4gICAgaWYgKCF0aGlzLmN1cnNvcikge1xuICAgICAgaWYgKGNhbGxiYWNrKSByZXR1cm4gY2FsbGJhY2soKTtcbiAgICAgIHJldHVybiB0aGlzLnByb21pc2VMaWJyYXJ5LnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICAvLyBUaWR5IHVwIHRoZSBleGlzdGluZyBjdXJzb3JcbiAgICBjb25zdCBjdXJzb3IgPSB0aGlzLmN1cnNvcjtcblxuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGN1cnNvci5jbG9zZShlcnIgPT4ge1xuICAgICAgICBbJ2RhdGEnLCAnY2xvc2UnLCAnZW5kJywgJ2Vycm9yJ10uZm9yRWFjaChldmVudCA9PiBjdXJzb3IucmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50KSk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmN1cnNvcjtcblxuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IFByb21pc2VDdG9yID0gdGhpcy5wcm9taXNlTGlicmFyeSB8fCBQcm9taXNlO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZUN0b3IoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY3Vyc29yLmNsb3NlKGVyciA9PiB7XG4gICAgICAgIFsnZGF0YScsICdjbG9zZScsICdlbmQnLCAnZXJyb3InXS5mb3JFYWNoKGV2ZW50ID0+IGN1cnNvci5yZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnQpKTtcbiAgICAgICAgZGVsZXRlIHRoaXMuY3Vyc29yO1xuXG4gICAgICAgIGlmIChlcnIpIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgcHVsbHMgYWxsIHRoZSBkYXRhIG91dCBvZiBhIHJlYWRhYmxlIHN0cmVhbSwgYW5kIHdyaXRlcyBpdCB0byB0aGUgc3VwcGxpZWQgZGVzdGluYXRpb24sIGF1dG9tYXRpY2FsbHkgbWFuYWdpbmcgdGhlIGZsb3cgc28gdGhhdCB0aGUgZGVzdGluYXRpb24gaXMgbm90IG92ZXJ3aGVsbWVkIGJ5IGEgZmFzdCByZWFkYWJsZSBzdHJlYW0uXG4gICAqIEBtZXRob2RcbiAgICogQHBhcmFtIHtXcml0YWJsZX0gZGVzdGluYXRpb24gVGhlIGRlc3RpbmF0aW9uIGZvciB3cml0aW5nIGRhdGFcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSB7QGxpbmsgaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9zdHJlYW0uaHRtbCNzdHJlYW1fcmVhZGFibGVfcGlwZV9kZXN0aW5hdGlvbl9vcHRpb25zfFBpcGUgb3B0aW9uc31cbiAgICogQHJldHVybiB7bnVsbH1cbiAgICovXG4gIHBpcGUoZGVzdGluYXRpb24sIG9wdGlvbnMpIHtcbiAgICBpZiAoIXRoaXMucGlwZURlc3RpbmF0aW9ucykge1xuICAgICAgdGhpcy5waXBlRGVzdGluYXRpb25zID0gW107XG4gICAgfVxuICAgIHRoaXMucGlwZURlc3RpbmF0aW9ucy5wdXNoKGRlc3RpbmF0aW9uKTtcbiAgICByZXR1cm4gdGhpcy5jdXJzb3IucGlwZShkZXN0aW5hdGlvbiwgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2Qgd2lsbCByZW1vdmUgdGhlIGhvb2tzIHNldCB1cCBmb3IgYSBwcmV2aW91cyBwaXBlKCkgY2FsbC5cbiAgICogQHBhcmFtIHtXcml0YWJsZX0gW2Rlc3RpbmF0aW9uXSBUaGUgZGVzdGluYXRpb24gZm9yIHdyaXRpbmcgZGF0YVxuICAgKiBAcmV0dXJuIHtudWxsfVxuICAgKi9cbiAgdW5waXBlKGRlc3RpbmF0aW9uKSB7XG4gICAgaWYgKHRoaXMucGlwZURlc3RpbmF0aW9ucyAmJiB0aGlzLnBpcGVEZXN0aW5hdGlvbnMuaW5kZXhPZihkZXN0aW5hdGlvbikgPiAtMSkge1xuICAgICAgdGhpcy5waXBlRGVzdGluYXRpb25zLnNwbGljZSh0aGlzLnBpcGVEZXN0aW5hdGlvbnMuaW5kZXhPZihkZXN0aW5hdGlvbiksIDEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jdXJzb3IudW5waXBlKGRlc3RpbmF0aW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYSBtb2RpZmllZCBSZWFkYWJsZSBzdHJlYW0gaW5jbHVkaW5nIGEgcG9zc2libGUgdHJhbnNmb3JtIG1ldGhvZC5cbiAgICogQG1ldGhvZFxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIE9wdGlvbmFsIHNldHRpbmdzLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbb3B0aW9ucy50cmFuc2Zvcm1dIEEgdHJhbnNmb3JtYXRpb24gbWV0aG9kIGFwcGxpZWQgdG8gZWFjaCBkb2N1bWVudCBlbWl0dGVkIGJ5IHRoZSBzdHJlYW0uXG4gICAqIEByZXR1cm4ge0N1cnNvcn1cbiAgICovXG4gIHN0cmVhbShvcHRpb25zKSB7XG4gICAgdGhpcy5zdHJlYW1PcHRpb25zID0gb3B0aW9ucztcbiAgICByZXR1cm4gdGhpcy5jdXJzb3Iuc3RyZWFtKG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgY2F1c2UgYSBzdHJlYW0gaW4gZmxvd2luZyBtb2RlIHRvIHN0b3AgZW1pdHRpbmcgZGF0YSBldmVudHMuIEFueSBkYXRhIHRoYXQgYmVjb21lcyBhdmFpbGFibGUgd2lsbCByZW1haW4gaW4gdGhlIGludGVybmFsIGJ1ZmZlci5cbiAgICogQHJldHVybiB7bnVsbH1cbiAgICovXG4gIHBhdXNlKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnNvci5wYXVzZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgY2F1c2UgdGhlIHJlYWRhYmxlIHN0cmVhbSB0byByZXN1bWUgZW1pdHRpbmcgZGF0YSBldmVudHMuXG4gICAqIEByZXR1cm4ge251bGx9XG4gICAqL1xuICByZXN1bWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3Vyc29yLnJlc3VtZSgpO1xuICB9XG59XG5cbmNsYXNzIENoYW5nZVN0cmVhbUN1cnNvciBleHRlbmRzIEN1cnNvciB7XG4gIGNvbnN0cnVjdG9yKHRvcG9sb2d5LCBvcGVyYXRpb24sIG9wdGlvbnMpIHtcbiAgICBzdXBlcih0b3BvbG9neSwgb3BlcmF0aW9uLCBvcHRpb25zKTtcblxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHRoaXMuX3Jlc3VtZVRva2VuID0gbnVsbDtcbiAgICB0aGlzLnN0YXJ0QXRPcGVyYXRpb25UaW1lID0gb3B0aW9ucy5zdGFydEF0T3BlcmF0aW9uVGltZTtcblxuICAgIGlmIChvcHRpb25zLnN0YXJ0QWZ0ZXIpIHtcbiAgICAgIHRoaXMucmVzdW1lVG9rZW4gPSBvcHRpb25zLnN0YXJ0QWZ0ZXI7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLnJlc3VtZUFmdGVyKSB7XG4gICAgICB0aGlzLnJlc3VtZVRva2VuID0gb3B0aW9ucy5yZXN1bWVBZnRlcjtcbiAgICB9XG4gIH1cblxuICBzZXQgcmVzdW1lVG9rZW4odG9rZW4pIHtcbiAgICB0aGlzLl9yZXN1bWVUb2tlbiA9IHRva2VuO1xuICAgIHRoaXMuZW1pdCgncmVzdW1lVG9rZW5DaGFuZ2VkJywgdG9rZW4pO1xuICB9XG5cbiAgZ2V0IHJlc3VtZVRva2VuKCkge1xuICAgIHJldHVybiB0aGlzLl9yZXN1bWVUb2tlbjtcbiAgfVxuXG4gIGdldCByZXN1bWVPcHRpb25zKCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3Qgb3B0aW9uTmFtZSBvZiBDVVJTT1JfT1BUSU9OUykge1xuICAgICAgaWYgKHRoaXMub3B0aW9uc1tvcHRpb25OYW1lXSkgcmVzdWx0W29wdGlvbk5hbWVdID0gdGhpcy5vcHRpb25zW29wdGlvbk5hbWVdO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlc3VtZVRva2VuIHx8IHRoaXMuc3RhcnRBdE9wZXJhdGlvblRpbWUpIHtcbiAgICAgIFsncmVzdW1lQWZ0ZXInLCAnc3RhcnRBZnRlcicsICdzdGFydEF0T3BlcmF0aW9uVGltZSddLmZvckVhY2goa2V5ID0+IGRlbGV0ZSByZXN1bHRba2V5XSk7XG5cbiAgICAgIGlmICh0aGlzLnJlc3VtZVRva2VuKSB7XG4gICAgICAgIHJlc3VsdC5yZXN1bWVBZnRlciA9IHRoaXMucmVzdW1lVG9rZW47XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhcnRBdE9wZXJhdGlvblRpbWUgJiYgbWF4V2lyZVZlcnNpb24odGhpcy5zZXJ2ZXIpID49IDcpIHtcbiAgICAgICAgcmVzdWx0LnN0YXJ0QXRPcGVyYXRpb25UaW1lID0gdGhpcy5zdGFydEF0T3BlcmF0aW9uVGltZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgX2luaXRpYWxpemVDdXJzb3IoY2FsbGJhY2spIHtcbiAgICBzdXBlci5faW5pdGlhbGl6ZUN1cnNvcigoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZXNwb25zZSA9IHJlc3VsdC5kb2N1bWVudHNbMF07XG5cbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5zdGFydEF0T3BlcmF0aW9uVGltZSA9PSBudWxsICYmXG4gICAgICAgIHRoaXMucmVzdW1lQWZ0ZXIgPT0gbnVsbCAmJlxuICAgICAgICB0aGlzLnN0YXJ0QWZ0ZXIgPT0gbnVsbCAmJlxuICAgICAgICBtYXhXaXJlVmVyc2lvbih0aGlzLnNlcnZlcikgPj0gN1xuICAgICAgKSB7XG4gICAgICAgIHRoaXMuc3RhcnRBdE9wZXJhdGlvblRpbWUgPSByZXNwb25zZS5vcGVyYXRpb25UaW1lO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjdXJzb3IgPSByZXNwb25zZS5jdXJzb3I7XG4gICAgICBpZiAoY3Vyc29yLnBvc3RCYXRjaFJlc3VtZVRva2VuKSB7XG4gICAgICAgIHRoaXMuY3Vyc29yU3RhdGUucG9zdEJhdGNoUmVzdW1lVG9rZW4gPSBjdXJzb3IucG9zdEJhdGNoUmVzdW1lVG9rZW47XG5cbiAgICAgICAgaWYgKGN1cnNvci5maXJzdEJhdGNoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMucmVzdW1lVG9rZW4gPSBjdXJzb3IucG9zdEJhdGNoUmVzdW1lVG9rZW47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5lbWl0KCdyZXNwb25zZScpO1xuICAgICAgY2FsbGJhY2soZXJyLCByZXN1bHQpO1xuICAgIH0pO1xuICB9XG5cbiAgX2dldE1vcmUoY2FsbGJhY2spIHtcbiAgICBzdXBlci5fZ2V0TW9yZSgoZXJyLCByZXNwb25zZSkgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBjYWxsYmFjayhlcnIsIG51bGwpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGN1cnNvciA9IHJlc3BvbnNlLmN1cnNvcjtcbiAgICAgIGlmIChjdXJzb3IucG9zdEJhdGNoUmVzdW1lVG9rZW4pIHtcbiAgICAgICAgdGhpcy5jdXJzb3JTdGF0ZS5wb3N0QmF0Y2hSZXN1bWVUb2tlbiA9IGN1cnNvci5wb3N0QmF0Y2hSZXN1bWVUb2tlbjtcblxuICAgICAgICBpZiAoY3Vyc29yLm5leHRCYXRjaC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLnJlc3VtZVRva2VuID0gY3Vyc29yLnBvc3RCYXRjaFJlc3VtZVRva2VuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZW1pdCgncmVzcG9uc2UnKTtcbiAgICAgIGNhbGxiYWNrKGVyciwgcmVzcG9uc2UpO1xuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogQGV2ZW50IENoYW5nZVN0cmVhbUN1cnNvciNyZXNwb25zZVxuICogaW50ZXJuYWwgZXZlbnQgRE8gTk9UIFVTRVxuICogQGlnbm9yZVxuICovXG5cbi8vIENyZWF0ZSBhIG5ldyBjaGFuZ2Ugc3RyZWFtIGN1cnNvciBiYXNlZCBvbiBzZWxmJ3MgY29uZmlndXJhdGlvblxuZnVuY3Rpb24gY3JlYXRlQ2hhbmdlU3RyZWFtQ3Vyc29yKHNlbGYsIG9wdGlvbnMpIHtcbiAgY29uc3QgY2hhbmdlU3RyZWFtU3RhZ2VPcHRpb25zID0geyBmdWxsRG9jdW1lbnQ6IG9wdGlvbnMuZnVsbERvY3VtZW50IHx8ICdkZWZhdWx0JyB9O1xuICBhcHBseUtub3duT3B0aW9ucyhjaGFuZ2VTdHJlYW1TdGFnZU9wdGlvbnMsIG9wdGlvbnMsIENIQU5HRV9TVFJFQU1fT1BUSU9OUyk7XG4gIGlmIChzZWxmLnR5cGUgPT09IENIQU5HRV9ET01BSU5fVFlQRVMuQ0xVU1RFUikge1xuICAgIGNoYW5nZVN0cmVhbVN0YWdlT3B0aW9ucy5hbGxDaGFuZ2VzRm9yQ2x1c3RlciA9IHRydWU7XG4gIH1cblxuICBjb25zdCBwaXBlbGluZSA9IFt7ICRjaGFuZ2VTdHJlYW06IGNoYW5nZVN0cmVhbVN0YWdlT3B0aW9ucyB9XS5jb25jYXQoc2VsZi5waXBlbGluZSk7XG4gIGNvbnN0IGN1cnNvck9wdGlvbnMgPSBhcHBseUtub3duT3B0aW9ucyh7fSwgb3B0aW9ucywgQ1VSU09SX09QVElPTlMpO1xuICBjb25zdCBjaGFuZ2VTdHJlYW1DdXJzb3IgPSBuZXcgQ2hhbmdlU3RyZWFtQ3Vyc29yKFxuICAgIHNlbGYudG9wb2xvZ3ksXG4gICAgbmV3IEFnZ3JlZ2F0ZU9wZXJhdGlvbihzZWxmLnBhcmVudCwgcGlwZWxpbmUsIG9wdGlvbnMpLFxuICAgIGN1cnNvck9wdGlvbnNcbiAgKTtcblxuICByZWxheUV2ZW50cyhjaGFuZ2VTdHJlYW1DdXJzb3IsIHNlbGYsIFsncmVzdW1lVG9rZW5DaGFuZ2VkJywgJ2VuZCcsICdjbG9zZSddKTtcblxuICAvKipcbiAgICogRmlyZWQgZm9yIGVhY2ggbmV3IG1hdGNoaW5nIGNoYW5nZSBpbiB0aGUgc3BlY2lmaWVkIG5hbWVzcGFjZS4gQXR0YWNoaW5nIGEgYGNoYW5nZWBcbiAgICogZXZlbnQgbGlzdGVuZXIgdG8gYSBDaGFuZ2UgU3RyZWFtIHdpbGwgc3dpdGNoIHRoZSBzdHJlYW0gaW50byBmbG93aW5nIG1vZGUuIERhdGEgd2lsbFxuICAgKiB0aGVuIGJlIHBhc3NlZCBhcyBzb29uIGFzIGl0IGlzIGF2YWlsYWJsZS5cbiAgICpcbiAgICogQGV2ZW50IENoYW5nZVN0cmVhbSNjaGFuZ2VcbiAgICogQHR5cGUge29iamVjdH1cbiAgICovXG4gIGlmIChzZWxmLmxpc3RlbmVyQ291bnQoJ2NoYW5nZScpID4gMCkge1xuICAgIGNoYW5nZVN0cmVhbUN1cnNvci5vbignZGF0YScsIGZ1bmN0aW9uKGNoYW5nZSkge1xuICAgICAgcHJvY2Vzc05ld0NoYW5nZSh7IGNoYW5nZVN0cmVhbTogc2VsZiwgY2hhbmdlLCBldmVudEVtaXR0ZXI6IHRydWUgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hhbmdlIHN0cmVhbSBjbG9zZSBldmVudFxuICAgKlxuICAgKiBAZXZlbnQgQ2hhbmdlU3RyZWFtI2Nsb3NlXG4gICAqIEB0eXBlIHtudWxsfVxuICAgKi9cblxuICAvKipcbiAgICogQ2hhbmdlIHN0cmVhbSBlbmQgZXZlbnRcbiAgICpcbiAgICogQGV2ZW50IENoYW5nZVN0cmVhbSNlbmRcbiAgICogQHR5cGUge251bGx9XG4gICAqL1xuXG4gIC8qKlxuICAgKiBFbWl0dGVkIGVhY2ggdGltZSB0aGUgY2hhbmdlIHN0cmVhbSBzdG9yZXMgYSBuZXcgcmVzdW1lIHRva2VuLlxuICAgKlxuICAgKiBAZXZlbnQgQ2hhbmdlU3RyZWFtI3Jlc3VtZVRva2VuQ2hhbmdlZFxuICAgKiBAdHlwZSB7UmVzdW1lVG9rZW59XG4gICAqL1xuXG4gIC8qKlxuICAgKiBGaXJlZCB3aGVuIHRoZSBzdHJlYW0gZW5jb3VudGVycyBhbiBlcnJvci5cbiAgICpcbiAgICogQGV2ZW50IENoYW5nZVN0cmVhbSNlcnJvclxuICAgKiBAdHlwZSB7RXJyb3J9XG4gICAqL1xuICBjaGFuZ2VTdHJlYW1DdXJzb3Iub24oJ2Vycm9yJywgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICBwcm9jZXNzTmV3Q2hhbmdlKHsgY2hhbmdlU3RyZWFtOiBzZWxmLCBlcnJvciwgZXZlbnRFbWl0dGVyOiB0cnVlIH0pO1xuICB9KTtcblxuICBpZiAoc2VsZi5waXBlRGVzdGluYXRpb25zKSB7XG4gICAgY29uc3QgY3Vyc29yU3RyZWFtID0gY2hhbmdlU3RyZWFtQ3Vyc29yLnN0cmVhbShzZWxmLnN0cmVhbU9wdGlvbnMpO1xuICAgIGZvciAobGV0IHBpcGVEZXN0aW5hdGlvbiBpbiBzZWxmLnBpcGVEZXN0aW5hdGlvbnMpIHtcbiAgICAgIGN1cnNvclN0cmVhbS5waXBlKHBpcGVEZXN0aW5hdGlvbik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNoYW5nZVN0cmVhbUN1cnNvcjtcbn1cblxuZnVuY3Rpb24gYXBwbHlLbm93bk9wdGlvbnModGFyZ2V0LCBzb3VyY2UsIG9wdGlvbk5hbWVzKSB7XG4gIG9wdGlvbk5hbWVzLmZvckVhY2gobmFtZSA9PiB7XG4gICAgaWYgKHNvdXJjZVtuYW1lXSkge1xuICAgICAgdGFyZ2V0W25hbWVdID0gc291cmNlW25hbWVdO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLy8gVGhpcyBtZXRob2QgcGVyZm9ybXMgYSBiYXNpYyBzZXJ2ZXIgc2VsZWN0aW9uIGxvb3AsIHNhdGlzZnlpbmcgdGhlIHJlcXVpcmVtZW50cyBvZlxuLy8gQ2hhbmdlU3RyZWFtIHJlc3VtYWJpbGl0eSB1bnRpbCB0aGUgbmV3IFNEQU0gbGF5ZXIgY2FuIGJlIHVzZWQuXG5jb25zdCBTRUxFQ1RJT05fVElNRU9VVCA9IDMwMDAwO1xuZnVuY3Rpb24gd2FpdEZvclRvcG9sb2d5Q29ubmVjdGVkKHRvcG9sb2d5LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnN0YXJ0ID09IG51bGwpIG9wdGlvbnMuc3RhcnQgPSBwcm9jZXNzLmhydGltZSgpO1xuICAgIGNvbnN0IHN0YXJ0ID0gb3B0aW9ucy5zdGFydCB8fCBwcm9jZXNzLmhydGltZSgpO1xuICAgIGNvbnN0IHRpbWVvdXQgPSBvcHRpb25zLnRpbWVvdXQgfHwgU0VMRUNUSU9OX1RJTUVPVVQ7XG4gICAgY29uc3QgcmVhZFByZWZlcmVuY2UgPSBvcHRpb25zLnJlYWRQcmVmZXJlbmNlO1xuXG4gICAgaWYgKHRvcG9sb2d5LmlzQ29ubmVjdGVkKHsgcmVhZFByZWZlcmVuY2UgfSkpIHJldHVybiBjYWxsYmFjayhudWxsLCBudWxsKTtcbiAgICBjb25zdCBockVsYXBzZWQgPSBwcm9jZXNzLmhydGltZShzdGFydCk7XG4gICAgY29uc3QgZWxhcHNlZCA9IChockVsYXBzZWRbMF0gKiAxZTkgKyBockVsYXBzZWRbMV0pIC8gMWU2O1xuICAgIGlmIChlbGFwc2VkID4gdGltZW91dCkgcmV0dXJuIGNhbGxiYWNrKG5ldyBNb25nb0Vycm9yKCdUaW1lZCBvdXQgd2FpdGluZyBmb3IgY29ubmVjdGlvbicpKTtcbiAgICB3YWl0Rm9yVG9wb2xvZ3lDb25uZWN0ZWQodG9wb2xvZ3ksIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfSwgMzAwMCk7IC8vIHRoaXMgaXMgYW4gYXJiaXRyYXJ5IHdhaXQgdGltZSB0byBhbGxvdyBTREFNIHRvIHRyYW5zaXRpb25cbn1cblxuLy8gSGFuZGxlIG5ldyBjaGFuZ2UgZXZlbnRzLiBUaGlzIG1ldGhvZCBicmluZ3MgdG9nZXRoZXIgdGhlIHJvdXRlcyBmcm9tIHRoZSBjYWxsYmFjaywgZXZlbnQgZW1pdHRlciwgYW5kIHByb21pc2Ugd2F5cyBvZiB1c2luZyBDaGFuZ2VTdHJlYW0uXG5mdW5jdGlvbiBwcm9jZXNzTmV3Q2hhbmdlKGFyZ3MpIHtcbiAgY29uc3QgY2hhbmdlU3RyZWFtID0gYXJncy5jaGFuZ2VTdHJlYW07XG4gIGNvbnN0IGVycm9yID0gYXJncy5lcnJvcjtcbiAgY29uc3QgY2hhbmdlID0gYXJncy5jaGFuZ2U7XG4gIGNvbnN0IGNhbGxiYWNrID0gYXJncy5jYWxsYmFjaztcbiAgY29uc3QgZXZlbnRFbWl0dGVyID0gYXJncy5ldmVudEVtaXR0ZXIgfHwgZmFsc2U7XG5cbiAgLy8gSWYgdGhlIGNoYW5nZVN0cmVhbSBpcyBjbG9zZWQsIHRoZW4gaXQgc2hvdWxkIG5vdCBwcm9jZXNzIGEgY2hhbmdlLlxuICBpZiAoY2hhbmdlU3RyZWFtLmlzQ2xvc2VkKCkpIHtcbiAgICAvLyBXZSBkbyBub3QgZXJyb3IgaW4gdGhlIGV2ZW50RW1pdHRlciBjYXNlLlxuICAgIGlmIChldmVudEVtaXR0ZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBlcnJvciA9IG5ldyBNb25nb0Vycm9yKCdDaGFuZ2VTdHJlYW0gaXMgY2xvc2VkJyk7XG4gICAgcmV0dXJuIHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBjYWxsYmFjayhlcnJvciwgbnVsbClcbiAgICAgIDogY2hhbmdlU3RyZWFtLnByb21pc2VMaWJyYXJ5LnJlamVjdChlcnJvcik7XG4gIH1cblxuICBjb25zdCBjdXJzb3IgPSBjaGFuZ2VTdHJlYW0uY3Vyc29yO1xuICBjb25zdCB0b3BvbG9neSA9IGNoYW5nZVN0cmVhbS50b3BvbG9neTtcbiAgY29uc3Qgb3B0aW9ucyA9IGNoYW5nZVN0cmVhbS5jdXJzb3Iub3B0aW9ucztcblxuICBpZiAoZXJyb3IpIHtcbiAgICBpZiAoaXNSZXN1bWFibGVFcnJvcihlcnJvcikgJiYgIWNoYW5nZVN0cmVhbS5hdHRlbXB0aW5nUmVzdW1lKSB7XG4gICAgICBjaGFuZ2VTdHJlYW0uYXR0ZW1wdGluZ1Jlc3VtZSA9IHRydWU7XG5cbiAgICAgIC8vIHN0b3AgbGlzdGVuaW5nIHRvIGFsbCBldmVudHMgZnJvbSBvbGQgY3Vyc29yXG4gICAgICBbJ2RhdGEnLCAnY2xvc2UnLCAnZW5kJywgJ2Vycm9yJ10uZm9yRWFjaChldmVudCA9PlxuICAgICAgICBjaGFuZ2VTdHJlYW0uY3Vyc29yLnJlbW92ZUFsbExpc3RlbmVycyhldmVudClcbiAgICAgICk7XG5cbiAgICAgIC8vIGNsb3NlIGludGVybmFsIGN1cnNvciwgaWdub3JlIGVycm9yc1xuICAgICAgY2hhbmdlU3RyZWFtLmN1cnNvci5jbG9zZSgpO1xuXG4gICAgICAvLyBhdHRlbXB0IHJlY3JlYXRpbmcgdGhlIGN1cnNvclxuICAgICAgaWYgKGV2ZW50RW1pdHRlcikge1xuICAgICAgICB3YWl0Rm9yVG9wb2xvZ3lDb25uZWN0ZWQodG9wb2xvZ3ksIHsgcmVhZFByZWZlcmVuY2U6IG9wdGlvbnMucmVhZFByZWZlcmVuY2UgfSwgZXJyID0+IHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBjaGFuZ2VTdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICAgICAgY2hhbmdlU3RyZWFtLmVtaXQoJ2Nsb3NlJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoYW5nZVN0cmVhbS5jdXJzb3IgPSBjcmVhdGVDaGFuZ2VTdHJlYW1DdXJzb3IoY2hhbmdlU3RyZWFtLCBjdXJzb3IucmVzdW1lT3B0aW9ucyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIHdhaXRGb3JUb3BvbG9neUNvbm5lY3RlZCh0b3BvbG9neSwgeyByZWFkUHJlZmVyZW5jZTogb3B0aW9ucy5yZWFkUHJlZmVyZW5jZSB9LCBlcnIgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIsIG51bGwpO1xuXG4gICAgICAgICAgY2hhbmdlU3RyZWFtLmN1cnNvciA9IGNyZWF0ZUNoYW5nZVN0cmVhbUN1cnNvcihjaGFuZ2VTdHJlYW0sIGN1cnNvci5yZXN1bWVPcHRpb25zKTtcbiAgICAgICAgICBjaGFuZ2VTdHJlYW0ubmV4dChjYWxsYmFjayk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgd2FpdEZvclRvcG9sb2d5Q29ubmVjdGVkKHRvcG9sb2d5LCB7IHJlYWRQcmVmZXJlbmNlOiBvcHRpb25zLnJlYWRQcmVmZXJlbmNlIH0sIGVyciA9PiB7XG4gICAgICAgICAgaWYgKGVycikgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgICAudGhlbihcbiAgICAgICAgICAoKSA9PiAoY2hhbmdlU3RyZWFtLmN1cnNvciA9IGNyZWF0ZUNoYW5nZVN0cmVhbUN1cnNvcihjaGFuZ2VTdHJlYW0sIGN1cnNvci5yZXN1bWVPcHRpb25zKSlcbiAgICAgICAgKVxuICAgICAgICAudGhlbigoKSA9PiBjaGFuZ2VTdHJlYW0ubmV4dCgpKTtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnRFbWl0dGVyKSByZXR1cm4gY2hhbmdlU3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyb3IpO1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHJldHVybiBjYWxsYmFjayhlcnJvciwgbnVsbCk7XG4gICAgcmV0dXJuIGNoYW5nZVN0cmVhbS5wcm9taXNlTGlicmFyeS5yZWplY3QoZXJyb3IpO1xuICB9XG5cbiAgY2hhbmdlU3RyZWFtLmF0dGVtcHRpbmdSZXN1bWUgPSBmYWxzZTtcblxuICBpZiAoY2hhbmdlICYmICFjaGFuZ2UuX2lkKSB7XG4gICAgY29uc3Qgbm9SZXN1bWVUb2tlbkVycm9yID0gbmV3IEVycm9yKFxuICAgICAgJ0EgY2hhbmdlIHN0cmVhbSBkb2N1bWVudCBoYXMgYmVlbiByZWNlaXZlZCB0aGF0IGxhY2tzIGEgcmVzdW1lIHRva2VuIChfaWQpLidcbiAgICApO1xuXG4gICAgaWYgKGV2ZW50RW1pdHRlcikgcmV0dXJuIGNoYW5nZVN0cmVhbS5lbWl0KCdlcnJvcicsIG5vUmVzdW1lVG9rZW5FcnJvcik7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGNhbGxiYWNrKG5vUmVzdW1lVG9rZW5FcnJvciwgbnVsbCk7XG4gICAgcmV0dXJuIGNoYW5nZVN0cmVhbS5wcm9taXNlTGlicmFyeS5yZWplY3Qobm9SZXN1bWVUb2tlbkVycm9yKTtcbiAgfVxuXG4gIC8vIGNhY2hlIHRoZSByZXN1bWUgdG9rZW5cbiAgaWYgKGN1cnNvci5idWZmZXJlZENvdW50KCkgPT09IDAgJiYgY3Vyc29yLmN1cnNvclN0YXRlLnBvc3RCYXRjaFJlc3VtZVRva2VuKSB7XG4gICAgY3Vyc29yLnJlc3VtZVRva2VuID0gY3Vyc29yLmN1cnNvclN0YXRlLnBvc3RCYXRjaFJlc3VtZVRva2VuO1xuICB9IGVsc2Uge1xuICAgIGN1cnNvci5yZXN1bWVUb2tlbiA9IGNoYW5nZS5faWQ7XG4gIH1cblxuICAvLyB3aXBlIHRoZSBzdGFydEF0T3BlcmF0aW9uVGltZSBpZiB0aGVyZSB3YXMgb25lIHNvIHRoYXQgdGhlcmUgd29uJ3QgYmUgYSBjb25mbGljdFxuICAvLyBiZXR3ZWVuIHJlc3VtZVRva2VuIGFuZCBzdGFydEF0T3BlcmF0aW9uVGltZSBpZiB3ZSBuZWVkIHRvIHJlY29ubmVjdCB0aGUgY3Vyc29yXG4gIGNoYW5nZVN0cmVhbS5vcHRpb25zLnN0YXJ0QXRPcGVyYXRpb25UaW1lID0gdW5kZWZpbmVkO1xuXG4gIC8vIFJldHVybiB0aGUgY2hhbmdlXG4gIGlmIChldmVudEVtaXR0ZXIpIHJldHVybiBjaGFuZ2VTdHJlYW0uZW1pdCgnY2hhbmdlJywgY2hhbmdlKTtcbiAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGNhbGxiYWNrKGVycm9yLCBjaGFuZ2UpO1xuICByZXR1cm4gY2hhbmdlU3RyZWFtLnByb21pc2VMaWJyYXJ5LnJlc29sdmUoY2hhbmdlKTtcbn1cblxuLyoqXG4gKiBUaGUgY2FsbGJhY2sgZm9ybWF0IGZvciByZXN1bHRzXG4gKiBAY2FsbGJhY2sgQ2hhbmdlU3RyZWFtfnJlc3VsdENhbGxiYWNrXG4gKiBAcGFyYW0ge01vbmdvRXJyb3J9IGVycm9yIEFuIGVycm9yIGluc3RhbmNlIHJlcHJlc2VudGluZyB0aGUgZXJyb3IgZHVyaW5nIHRoZSBleGVjdXRpb24uXG4gKiBAcGFyYW0geyhvYmplY3R8bnVsbCl9IHJlc3VsdCBUaGUgcmVzdWx0IG9iamVjdCBpZiB0aGUgY29tbWFuZCB3YXMgZXhlY3V0ZWQgc3VjY2Vzc2Z1bGx5LlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gQ2hhbmdlU3RyZWFtO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///104\n");

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst MongoNetworkError = __webpack_require__(3).MongoNetworkError;\nconst mongoErrorContextSymbol = __webpack_require__(3).mongoErrorContextSymbol;\n\nconst GET_MORE_NON_RESUMABLE_CODES = new Set([\n  136, // CappedPositionLost\n  237, // CursorKilled\n  11601 // Interrupted\n]);\n\n// From spec@https://github.com/mongodb/specifications/blob/7a2e93d85935ee4b1046a8d2ad3514c657dc74fa/source/change-streams/change-streams.rst#resumable-error:\n//\n// An error is considered resumable if it meets any of the following criteria:\n// - any error encountered which is not a server error (e.g. a timeout error or network error)\n// - any server error response from a getMore command excluding those containing the error label\n//   NonRetryableChangeStreamError and those containing the following error codes:\n//   - Interrupted: 11601\n//   - CappedPositionLost: 136\n//   - CursorKilled: 237\n//\n// An error on an aggregate command is not a resumable error. Only errors on a getMore command may be considered resumable errors.\n\nfunction isGetMoreError(error) {\n  if (error[mongoErrorContextSymbol]) {\n    return error[mongoErrorContextSymbol].isGetMore;\n  }\n}\n\nfunction isResumableError(error) {\n  if (!isGetMoreError(error)) {\n    return false;\n  }\n\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n\n  return !(\n    GET_MORE_NON_RESUMABLE_CODES.has(error.code) ||\n    error.hasErrorLabel('NonRetryableChangeStreamError')\n  );\n}\n\nmodule.exports = { GET_MORE_NON_RESUMABLE_CODES, isResumableError };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2Vycm9yLmpzPzBjNDgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsMEJBQTBCLG1CQUFPLENBQUMsQ0FBUTtBQUMxQyxnQ0FBZ0MsbUJBQU8sQ0FBQyxDQUFROztBQUVoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IiLCJmaWxlIjoiMTA1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBNb25nb05ldHdvcmtFcnJvciA9IHJlcXVpcmUoJy4vY29yZScpLk1vbmdvTmV0d29ya0Vycm9yO1xuY29uc3QgbW9uZ29FcnJvckNvbnRleHRTeW1ib2wgPSByZXF1aXJlKCcuL2NvcmUnKS5tb25nb0Vycm9yQ29udGV4dFN5bWJvbDtcblxuY29uc3QgR0VUX01PUkVfTk9OX1JFU1VNQUJMRV9DT0RFUyA9IG5ldyBTZXQoW1xuICAxMzYsIC8vIENhcHBlZFBvc2l0aW9uTG9zdFxuICAyMzcsIC8vIEN1cnNvcktpbGxlZFxuICAxMTYwMSAvLyBJbnRlcnJ1cHRlZFxuXSk7XG5cbi8vIEZyb20gc3BlY0BodHRwczovL2dpdGh1Yi5jb20vbW9uZ29kYi9zcGVjaWZpY2F0aW9ucy9ibG9iLzdhMmU5M2Q4NTkzNWVlNGIxMDQ2YThkMmFkMzUxNGM2NTdkYzc0ZmEvc291cmNlL2NoYW5nZS1zdHJlYW1zL2NoYW5nZS1zdHJlYW1zLnJzdCNyZXN1bWFibGUtZXJyb3I6XG4vL1xuLy8gQW4gZXJyb3IgaXMgY29uc2lkZXJlZCByZXN1bWFibGUgaWYgaXQgbWVldHMgYW55IG9mIHRoZSBmb2xsb3dpbmcgY3JpdGVyaWE6XG4vLyAtIGFueSBlcnJvciBlbmNvdW50ZXJlZCB3aGljaCBpcyBub3QgYSBzZXJ2ZXIgZXJyb3IgKGUuZy4gYSB0aW1lb3V0IGVycm9yIG9yIG5ldHdvcmsgZXJyb3IpXG4vLyAtIGFueSBzZXJ2ZXIgZXJyb3IgcmVzcG9uc2UgZnJvbSBhIGdldE1vcmUgY29tbWFuZCBleGNsdWRpbmcgdGhvc2UgY29udGFpbmluZyB0aGUgZXJyb3IgbGFiZWxcbi8vICAgTm9uUmV0cnlhYmxlQ2hhbmdlU3RyZWFtRXJyb3IgYW5kIHRob3NlIGNvbnRhaW5pbmcgdGhlIGZvbGxvd2luZyBlcnJvciBjb2Rlczpcbi8vICAgLSBJbnRlcnJ1cHRlZDogMTE2MDFcbi8vICAgLSBDYXBwZWRQb3NpdGlvbkxvc3Q6IDEzNlxuLy8gICAtIEN1cnNvcktpbGxlZDogMjM3XG4vL1xuLy8gQW4gZXJyb3Igb24gYW4gYWdncmVnYXRlIGNvbW1hbmQgaXMgbm90IGEgcmVzdW1hYmxlIGVycm9yLiBPbmx5IGVycm9ycyBvbiBhIGdldE1vcmUgY29tbWFuZCBtYXkgYmUgY29uc2lkZXJlZCByZXN1bWFibGUgZXJyb3JzLlxuXG5mdW5jdGlvbiBpc0dldE1vcmVFcnJvcihlcnJvcikge1xuICBpZiAoZXJyb3JbbW9uZ29FcnJvckNvbnRleHRTeW1ib2xdKSB7XG4gICAgcmV0dXJuIGVycm9yW21vbmdvRXJyb3JDb250ZXh0U3ltYm9sXS5pc0dldE1vcmU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNSZXN1bWFibGVFcnJvcihlcnJvcikge1xuICBpZiAoIWlzR2V0TW9yZUVycm9yKGVycm9yKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChlcnJvciBpbnN0YW5jZW9mIE1vbmdvTmV0d29ya0Vycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gIShcbiAgICBHRVRfTU9SRV9OT05fUkVTVU1BQkxFX0NPREVTLmhhcyhlcnJvci5jb2RlKSB8fFxuICAgIGVycm9yLmhhc0Vycm9yTGFiZWwoJ05vblJldHJ5YWJsZUNoYW5nZVN0cmVhbUVycm9yJylcbiAgKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IEdFVF9NT1JFX05PTl9SRVNVTUFCTEVfQ09ERVMsIGlzUmVzdW1hYmxlRXJyb3IgfTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///105\n");

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Transform = __webpack_require__(85).Transform;\nconst PassThrough = __webpack_require__(85).PassThrough;\nconst deprecate = __webpack_require__(12).deprecate;\nconst handleCallback = __webpack_require__(86).handleCallback;\nconst ReadPreference = __webpack_require__(3).ReadPreference;\nconst MongoError = __webpack_require__(3).MongoError;\nconst CoreCursor = __webpack_require__(82).CoreCursor;\nconst CursorState = __webpack_require__(82).CursorState;\nconst Map = __webpack_require__(3).BSON.Map;\n\nconst each = __webpack_require__(107).each;\n\nconst CountOperation = __webpack_require__(168);\nconst ExplainOperation = __webpack_require__(169);\nconst HasNextOperation = __webpack_require__(170);\nconst NextOperation = __webpack_require__(171);\nconst ToArrayOperation = __webpack_require__(172);\n\nconst executeOperation = __webpack_require__(83);\n\n/**\n * @fileOverview The **Cursor** class is an internal class that embodies a cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n *\n * **CURSORS Cannot directly be instantiated**\n * @example\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Create a collection we want to drop later\n *   const col = client.db(dbName).collection('createIndexExample1');\n *   // Insert a bunch of documents\n *   col.insert([{a:1, b:1}\n *     , {a:2, b:2}, {a:3, b:3}\n *     , {a:4, b:4}], {w:1}, function(err, result) {\n *     test.equal(null, err);\n *     // Show that duplicate records got dropped\n *     col.find({}).toArray(function(err, items) {\n *       test.equal(null, err);\n *       test.equal(4, items.length);\n *       client.close();\n *     });\n *   });\n * });\n */\n\n/**\n * Namespace provided by the code module\n * @external CoreCursor\n * @external Readable\n */\n\n// Flags allowed for cursor\nconst flags = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'];\nconst fields = ['numberOfRetries', 'tailableRetryInterval'];\n\n/**\n * Creates a new Cursor instance (INTERNAL TYPE, do not instantiate directly)\n * @class Cursor\n * @extends external:CoreCursor\n * @extends external:Readable\n * @property {string} sortValue Cursor query sort setting.\n * @property {boolean} timeout Is Cursor able to time out.\n * @property {ReadPreference} readPreference Get cursor ReadPreference.\n * @fires Cursor#data\n * @fires Cursor#end\n * @fires Cursor#close\n * @fires Cursor#readable\n * @return {Cursor} a Cursor instance.\n * @example\n * Cursor cursor options.\n *\n * collection.find({}).project({a:1})                             // Create a projection of field a\n * collection.find({}).skip(1).limit(10)                          // Skip 1 and limit 10\n * collection.find({}).batchSize(5)                               // Set batchSize on cursor to 5\n * collection.find({}).filter({a:1})                              // Set query on the cursor\n * collection.find({}).comment('add a comment')                   // Add a comment to the query, allowing to correlate queries\n * collection.find({}).addCursorFlag('tailable', true)            // Set cursor as tailable\n * collection.find({}).addCursorFlag('oplogReplay', true)         // Set cursor as oplogReplay\n * collection.find({}).addCursorFlag('noCursorTimeout', true)     // Set cursor as noCursorTimeout\n * collection.find({}).addCursorFlag('awaitData', true)           // Set cursor as awaitData\n * collection.find({}).addCursorFlag('partial', true)             // Set cursor as partial\n * collection.find({}).addQueryModifier('$orderby', {a:1})        // Set $orderby {a:1}\n * collection.find({}).max(10)                                    // Set the cursor max\n * collection.find({}).maxTimeMS(1000)                            // Set the cursor maxTimeMS\n * collection.find({}).min(100)                                   // Set the cursor min\n * collection.find({}).returnKey(true)                            // Set the cursor returnKey\n * collection.find({}).setReadPreference(ReadPreference.PRIMARY)  // Set the cursor readPreference\n * collection.find({}).showRecordId(true)                         // Set the cursor showRecordId\n * collection.find({}).sort([['a', 1]])                           // Sets the sort order of the cursor query\n * collection.find({}).hint('a_1')                                // Set the cursor hint\n *\n * All options are chainable, so one can do the following.\n *\n * collection.find({}).maxTimeMS(1000).maxScan(100).skip(1).toArray(..)\n */\nclass Cursor extends CoreCursor {\n  constructor(topology, ns, cmd, options) {\n    super(topology, ns, cmd, options);\n    if (this.operation) {\n      options = this.operation.options;\n    }\n\n    // Tailable cursor options\n    const numberOfRetries = options.numberOfRetries || 5;\n    const tailableRetryInterval = options.tailableRetryInterval || 500;\n    const currentNumberOfRetries = numberOfRetries;\n\n    // Get the promiseLibrary\n    const promiseLibrary = options.promiseLibrary || Promise;\n\n    // Internal cursor state\n    this.s = {\n      // Tailable cursor options\n      numberOfRetries: numberOfRetries,\n      tailableRetryInterval: tailableRetryInterval,\n      currentNumberOfRetries: currentNumberOfRetries,\n      // State\n      state: CursorState.INIT,\n      // Promise library\n      promiseLibrary,\n      // Current doc\n      currentDoc: null,\n      // explicitlyIgnoreSession\n      explicitlyIgnoreSession: !!options.explicitlyIgnoreSession\n    };\n\n    // Optional ClientSession\n    if (!options.explicitlyIgnoreSession && options.session) {\n      this.cursorState.session = options.session;\n    }\n\n    // Translate correctly\n    if (this.options.noCursorTimeout === true) {\n      this.addCursorFlag('noCursorTimeout', true);\n    }\n\n    // Get the batchSize\n    let batchSize = 1000;\n    if (this.cmd.cursor && this.cmd.cursor.batchSize) {\n      batchSize = this.cmd.cursor.batchSize;\n    } else if (options.cursor && options.cursor.batchSize) {\n      batchSize = options.cursor.batchSize;\n    } else if (typeof options.batchSize === 'number') {\n      batchSize = options.batchSize;\n    }\n\n    // Set the batchSize\n    this.setCursorBatchSize(batchSize);\n  }\n\n  get readPreference() {\n    if (this.operation) {\n      return this.operation.readPreference;\n    }\n\n    return this.options.readPreference;\n  }\n\n  get sortValue() {\n    return this.cmd.sort;\n  }\n\n  _initializeCursor(callback) {\n    if (this.operation && this.operation.session != null) {\n      this.cursorState.session = this.operation.session;\n    } else {\n      // implicitly create a session if one has not been provided\n      if (\n        !this.s.explicitlyIgnoreSession &&\n        !this.cursorState.session &&\n        this.topology.hasSessionSupport()\n      ) {\n        this.cursorState.session = this.topology.startSession({ owner: this });\n\n        if (this.operation) {\n          this.operation.session = this.cursorState.session;\n        }\n      }\n    }\n\n    super._initializeCursor(callback);\n  }\n\n  /**\n   * Check if there is any document still available in the cursor\n   * @method\n   * @param {Cursor~resultCallback} [callback] The result callback.\n   * @throws {MongoError}\n   * @return {Promise} returns Promise if no callback passed\n   */\n  hasNext(callback) {\n    const hasNextOperation = new HasNextOperation(this);\n\n    return executeOperation(this.topology, hasNextOperation, callback);\n  }\n\n  /**\n   * Get the next available document from the cursor, returns null if no more documents are available.\n   * @method\n   * @param {Cursor~resultCallback} [callback] The result callback.\n   * @throws {MongoError}\n   * @return {Promise} returns Promise if no callback passed\n   */\n  next(callback) {\n    const nextOperation = new NextOperation(this);\n\n    return executeOperation(this.topology, nextOperation, callback);\n  }\n\n  /**\n   * Set the cursor query\n   * @method\n   * @param {object} filter The filter object used for the cursor.\n   * @return {Cursor}\n   */\n  filter(filter) {\n    if (this.s.state === CursorState.CLOSED || this.s.state === CursorState.OPEN || this.isDead()) {\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\n    }\n\n    this.cmd.query = filter;\n    return this;\n  }\n\n  /**\n   * Set the cursor maxScan\n   * @method\n   * @param {object} maxScan Constrains the query to only scan the specified number of documents when fulfilling the query\n   * @deprecated as of MongoDB 4.0\n   * @return {Cursor}\n   */\n  maxScan(maxScan) {\n    if (this.s.state === CursorState.CLOSED || this.s.state === CursorState.OPEN || this.isDead()) {\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\n    }\n\n    this.cmd.maxScan = maxScan;\n    return this;\n  }\n\n  /**\n   * Set the cursor hint\n   * @method\n   * @param {object} hint If specified, then the query system will only consider plans using the hinted index.\n   * @return {Cursor}\n   */\n  hint(hint) {\n    if (this.s.state === CursorState.CLOSED || this.s.state === CursorState.OPEN || this.isDead()) {\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\n    }\n\n    this.cmd.hint = hint;\n    return this;\n  }\n\n  /**\n   * Set the cursor min\n   * @method\n   * @param {object} min Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n   * @return {Cursor}\n   */\n  min(min) {\n    if (this.s.state === CursorState.CLOSED || this.s.state === CursorState.OPEN || this.isDead()) {\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\n    }\n\n    this.cmd.min = min;\n    return this;\n  }\n\n  /**\n   * Set the cursor max\n   * @method\n   * @param {object} max Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n   * @return {Cursor}\n   */\n  max(max) {\n    if (this.s.state === CursorState.CLOSED || this.s.state === CursorState.OPEN || this.isDead()) {\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\n    }\n\n    this.cmd.max = max;\n    return this;\n  }\n\n  /**\n   * Set the cursor returnKey. If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents. If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n   * @method\n   * @param {bool} returnKey the returnKey value.\n   * @return {Cursor}\n   */\n  returnKey(value) {\n    if (this.s.state === CursorState.CLOSED || this.s.state === CursorState.OPEN || this.isDead()) {\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\n    }\n\n    this.cmd.returnKey = value;\n    return this;\n  }\n\n  /**\n   * Set the cursor showRecordId\n   * @method\n   * @param {object} showRecordId The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n   * @return {Cursor}\n   */\n  showRecordId(value) {\n    if (this.s.state === CursorState.CLOSED || this.s.state === CursorState.OPEN || this.isDead()) {\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\n    }\n\n    this.cmd.showDiskLoc = value;\n    return this;\n  }\n\n  /**\n   * Set the cursor snapshot\n   * @method\n   * @param {object} snapshot The $snapshot operator prevents the cursor from returning a document more than once because an intervening write operation results in a move of the document.\n   * @deprecated as of MongoDB 4.0\n   * @return {Cursor}\n   */\n  snapshot(value) {\n    if (this.s.state === CursorState.CLOSED || this.s.state === CursorState.OPEN || this.isDead()) {\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\n    }\n\n    this.cmd.snapshot = value;\n    return this;\n  }\n\n  /**\n   * Set a node.js specific cursor option\n   * @method\n   * @param {string} field The cursor option to set ['numberOfRetries', 'tailableRetryInterval'].\n   * @param {object} value The field value.\n   * @throws {MongoError}\n   * @return {Cursor}\n   */\n  setCursorOption(field, value) {\n    if (this.s.state === CursorState.CLOSED || this.s.state === CursorState.OPEN || this.isDead()) {\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\n    }\n\n    if (fields.indexOf(field) === -1) {\n      throw MongoError.create({\n        message: `option ${field} is not a supported option ${fields}`,\n        driver: true\n      });\n    }\n\n    this.s[field] = value;\n    if (field === 'numberOfRetries') this.s.currentNumberOfRetries = value;\n    return this;\n  }\n\n  /**\n   * Add a cursor flag to the cursor\n   * @method\n   * @param {string} flag The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial'].\n   * @param {boolean} value The flag boolean value.\n   * @throws {MongoError}\n   * @return {Cursor}\n   */\n  addCursorFlag(flag, value) {\n    if (this.s.state === CursorState.CLOSED || this.s.state === CursorState.OPEN || this.isDead()) {\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\n    }\n\n    if (flags.indexOf(flag) === -1) {\n      throw MongoError.create({\n        message: `flag ${flag} is not a supported flag ${flags}`,\n        driver: true\n      });\n    }\n\n    if (typeof value !== 'boolean') {\n      throw MongoError.create({ message: `flag ${flag} must be a boolean value`, driver: true });\n    }\n\n    this.cmd[flag] = value;\n    return this;\n  }\n\n  /**\n   * Add a query modifier to the cursor query\n   * @method\n   * @param {string} name The query modifier (must start with $, such as $orderby etc)\n   * @param {string|boolean|number} value The modifier value.\n   * @throws {MongoError}\n   * @return {Cursor}\n   */\n  addQueryModifier(name, value) {\n    if (this.s.state === CursorState.CLOSED || this.s.state === CursorState.OPEN || this.isDead()) {\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\n    }\n\n    if (name[0] !== '$') {\n      throw MongoError.create({ message: `${name} is not a valid query modifier`, driver: true });\n    }\n\n    // Strip of the $\n    const field = name.substr(1);\n    // Set on the command\n    this.cmd[field] = value;\n    // Deal with the special case for sort\n    if (field === 'orderby') this.cmd.sort = this.cmd[field];\n    return this;\n  }\n\n  /**\n   * Add a comment to the cursor query allowing for tracking the comment in the log.\n   * @method\n   * @param {string} value The comment attached to this query.\n   * @throws {MongoError}\n   * @return {Cursor}\n   */\n  comment(value) {\n    if (this.s.state === CursorState.CLOSED || this.s.state === CursorState.OPEN || this.isDead()) {\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\n    }\n\n    this.cmd.comment = value;\n    return this;\n  }\n\n  /**\n   * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n   * @method\n   * @param {number} value Number of milliseconds to wait before aborting the tailed query.\n   * @throws {MongoError}\n   * @return {Cursor}\n   */\n  maxAwaitTimeMS(value) {\n    if (typeof value !== 'number') {\n      throw MongoError.create({ message: 'maxAwaitTimeMS must be a number', driver: true });\n    }\n\n    if (this.s.state === CursorState.CLOSED || this.s.state === CursorState.OPEN || this.isDead()) {\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\n    }\n\n    this.cmd.maxAwaitTimeMS = value;\n    return this;\n  }\n\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   * @method\n   * @param {number} value Number of milliseconds to wait before aborting the query.\n   * @throws {MongoError}\n   * @return {Cursor}\n   */\n  maxTimeMS(value) {\n    if (typeof value !== 'number') {\n      throw MongoError.create({ message: 'maxTimeMS must be a number', driver: true });\n    }\n\n    if (this.s.state === CursorState.CLOSED || this.s.state === CursorState.OPEN || this.isDead()) {\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\n    }\n\n    this.cmd.maxTimeMS = value;\n    return this;\n  }\n\n  /**\n   * Sets a field projection for the query.\n   * @method\n   * @param {object} value The field projection object.\n   * @throws {MongoError}\n   * @return {Cursor}\n   */\n  project(value) {\n    if (this.s.state === CursorState.CLOSED || this.s.state === CursorState.OPEN || this.isDead()) {\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\n    }\n\n    this.cmd.fields = value;\n    return this;\n  }\n\n  /**\n   * Sets the sort order of the cursor query.\n   * @method\n   * @param {(string|array|object)} keyOrList The key or keys set for the sort.\n   * @param {number} [direction] The direction of the sorting (1 or -1).\n   * @throws {MongoError}\n   * @return {Cursor}\n   */\n  sort(keyOrList, direction) {\n    if (this.options.tailable) {\n      throw MongoError.create({ message: \"Tailable cursor doesn't support sorting\", driver: true });\n    }\n\n    if (this.s.state === CursorState.CLOSED || this.s.state === CursorState.OPEN || this.isDead()) {\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\n    }\n\n    let order = keyOrList;\n\n    // We have an array of arrays, we need to preserve the order of the sort\n    // so we will us a Map\n    if (Array.isArray(order) && Array.isArray(order[0])) {\n      order = new Map(\n        order.map(x => {\n          const value = [x[0], null];\n          if (x[1] === 'asc') {\n            value[1] = 1;\n          } else if (x[1] === 'desc') {\n            value[1] = -1;\n          } else if (x[1] === 1 || x[1] === -1 || x[1].$meta) {\n            value[1] = x[1];\n          } else {\n            throw new MongoError(\n              \"Illegal sort clause, must be of the form [['field1', '(ascending|descending)'], ['field2', '(ascending|descending)']]\"\n            );\n          }\n\n          return value;\n        })\n      );\n    }\n\n    if (direction != null) {\n      order = [[keyOrList, direction]];\n    }\n\n    this.cmd.sort = order;\n    return this;\n  }\n\n  /**\n   * Set the batch size for the cursor.\n   * @method\n   * @param {number} value The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/find/|find command documentation}.\n   * @throws {MongoError}\n   * @return {Cursor}\n   */\n  batchSize(value) {\n    if (this.options.tailable) {\n      throw MongoError.create({\n        message: \"Tailable cursor doesn't support batchSize\",\n        driver: true\n      });\n    }\n\n    if (this.s.state === CursorState.CLOSED || this.isDead()) {\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\n    }\n\n    if (typeof value !== 'number') {\n      throw MongoError.create({ message: 'batchSize requires an integer', driver: true });\n    }\n\n    this.cmd.batchSize = value;\n    this.setCursorBatchSize(value);\n    return this;\n  }\n\n  /**\n   * Set the collation options for the cursor.\n   * @method\n   * @param {object} value The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n   * @throws {MongoError}\n   * @return {Cursor}\n   */\n  collation(value) {\n    this.cmd.collation = value;\n    return this;\n  }\n\n  /**\n   * Set the limit for the cursor.\n   * @method\n   * @param {number} value The limit for the cursor query.\n   * @throws {MongoError}\n   * @return {Cursor}\n   */\n  limit(value) {\n    if (this.options.tailable) {\n      throw MongoError.create({ message: \"Tailable cursor doesn't support limit\", driver: true });\n    }\n\n    if (this.s.state === CursorState.OPEN || this.s.state === CursorState.CLOSED || this.isDead()) {\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\n    }\n\n    if (typeof value !== 'number') {\n      throw MongoError.create({ message: 'limit requires an integer', driver: true });\n    }\n\n    this.cmd.limit = value;\n    this.setCursorLimit(value);\n    return this;\n  }\n\n  /**\n   * Set the skip for the cursor.\n   * @method\n   * @param {number} value The skip for the cursor query.\n   * @throws {MongoError}\n   * @return {Cursor}\n   */\n  skip(value) {\n    if (this.options.tailable) {\n      throw MongoError.create({ message: \"Tailable cursor doesn't support skip\", driver: true });\n    }\n\n    if (this.s.state === CursorState.OPEN || this.s.state === CursorState.CLOSED || this.isDead()) {\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\n    }\n\n    if (typeof value !== 'number') {\n      throw MongoError.create({ message: 'skip requires an integer', driver: true });\n    }\n\n    this.cmd.skip = value;\n    this.setCursorSkip(value);\n    return this;\n  }\n\n  /**\n   * The callback format for results\n   * @callback Cursor~resultCallback\n   * @param {MongoError} error An error instance representing the error during the execution.\n   * @param {(object|null|boolean)} result The result object if the command was executed successfully.\n   */\n\n  /**\n   * Clone the cursor\n   * @function external:CoreCursor#clone\n   * @return {Cursor}\n   */\n\n  /**\n   * Resets the cursor\n   * @function external:CoreCursor#rewind\n   * @return {null}\n   */\n\n  /**\n   * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,\n   * not all of the elements will be iterated if this cursor had been previously accessed.\n   * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike\n   * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements\n   * at any given time if batch size is specified. Otherwise, the caller is responsible\n   * for making sure that the entire result can fit the memory.\n   * @method\n   * @deprecated\n   * @param {Cursor~resultCallback} callback The result callback.\n   * @throws {MongoError}\n   * @return {null}\n   */\n  each(callback) {\n    // Rewind cursor state\n    this.rewind();\n    // Set current cursor to INIT\n    this.s.state = CursorState.INIT;\n    // Run the query\n    each(this, callback);\n  }\n\n  /**\n   * The callback format for the forEach iterator method\n   * @callback Cursor~iteratorCallback\n   * @param {Object} doc An emitted document for the iterator\n   */\n\n  /**\n   * The callback error format for the forEach iterator method\n   * @callback Cursor~endCallback\n   * @param {MongoError} error An error instance representing the error during the execution.\n   */\n\n  /**\n   * Iterates over all the documents for this cursor using the iterator, callback pattern.\n   * @method\n   * @param {Cursor~iteratorCallback} iterator The iteration callback.\n   * @param {Cursor~endCallback} callback The end callback.\n   * @throws {MongoError}\n   * @return {Promise} if no callback supplied\n   */\n  forEach(iterator, callback) {\n    // Rewind cursor state\n    this.rewind();\n\n    // Set current cursor to INIT\n    this.s.state = CursorState.INIT;\n\n    if (typeof callback === 'function') {\n      each(this, (err, doc) => {\n        if (err) {\n          callback(err);\n          return false;\n        }\n        if (doc != null) {\n          iterator(doc);\n          return true;\n        }\n        if (doc == null && callback) {\n          const internalCallback = callback;\n          callback = null;\n          internalCallback(null);\n          return false;\n        }\n      });\n    } else {\n      return new this.s.promiseLibrary((fulfill, reject) => {\n        each(this, (err, doc) => {\n          if (err) {\n            reject(err);\n            return false;\n          } else if (doc == null) {\n            fulfill(null);\n            return false;\n          } else {\n            iterator(doc);\n            return true;\n          }\n        });\n      });\n    }\n  }\n\n  /**\n   * Set the ReadPreference for the cursor.\n   * @method\n   * @param {(string|ReadPreference)} readPreference The new read preference for the cursor.\n   * @throws {MongoError}\n   * @return {Cursor}\n   */\n  setReadPreference(readPreference) {\n    if (this.s.state !== CursorState.INIT) {\n      throw MongoError.create({\n        message: 'cannot change cursor readPreference after cursor has been accessed',\n        driver: true\n      });\n    }\n\n    if (readPreference instanceof ReadPreference) {\n      this.options.readPreference = readPreference;\n    } else if (typeof readPreference === 'string') {\n      this.options.readPreference = new ReadPreference(readPreference);\n    } else {\n      throw new TypeError('Invalid read preference: ' + readPreference);\n    }\n\n    return this;\n  }\n\n  /**\n   * The callback format for results\n   * @callback Cursor~toArrayResultCallback\n   * @param {MongoError} error An error instance representing the error during the execution.\n   * @param {object[]} documents All the documents the satisfy the cursor.\n   */\n\n  /**\n   * Returns an array of documents. The caller is responsible for making sure that there\n   * is enough memory to store the results. Note that the array only contains partial\n   * results when this cursor had been previously accessed. In that case,\n   * cursor.rewind() can be used to reset the cursor.\n   * @method\n   * @param {Cursor~toArrayResultCallback} [callback] The result callback.\n   * @throws {MongoError}\n   * @return {Promise} returns Promise if no callback passed\n   */\n  toArray(callback) {\n    if (this.options.tailable) {\n      throw MongoError.create({\n        message: 'Tailable cursor cannot be converted to array',\n        driver: true\n      });\n    }\n\n    const toArrayOperation = new ToArrayOperation(this);\n\n    return executeOperation(this.topology, toArrayOperation, callback);\n  }\n\n  /**\n   * The callback format for results\n   * @callback Cursor~countResultCallback\n   * @param {MongoError} error An error instance representing the error during the execution.\n   * @param {number} count The count of documents.\n   */\n\n  /**\n   * Get the count of documents for this cursor\n   * @method\n   * @param {boolean} [applySkipLimit=true] Should the count command apply limit and skip settings on the cursor or in the passed in options.\n   * @param {object} [options] Optional settings.\n   * @param {number} [options.skip] The number of documents to skip.\n   * @param {number} [options.limit] The maximum amounts to count before aborting.\n   * @param {number} [options.maxTimeMS] Number of milliseconds to wait before aborting the query.\n   * @param {string} [options.hint] An index name hint for the query.\n   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n   * @param {Cursor~countResultCallback} [callback] The result callback.\n   * @return {Promise} returns Promise if no callback passed\n   */\n  count(applySkipLimit, opts, callback) {\n    if (this.cmd.query == null)\n      throw MongoError.create({\n        message: 'count can only be used with find command',\n        driver: true\n      });\n    if (typeof opts === 'function') (callback = opts), (opts = {});\n    opts = opts || {};\n\n    if (typeof applySkipLimit === 'function') {\n      callback = applySkipLimit;\n      applySkipLimit = true;\n    }\n\n    if (this.cursorState.session) {\n      opts = Object.assign({}, opts, { session: this.cursorState.session });\n    }\n\n    const countOperation = new CountOperation(this, applySkipLimit, opts);\n\n    return executeOperation(this.topology, countOperation, callback);\n  }\n\n  /**\n   * Close the cursor, sending a KillCursor command and emitting close.\n   * @method\n   * @param {object} [options] Optional settings.\n   * @param {boolean} [options.skipKillCursors] Bypass calling killCursors when closing the cursor.\n   * @param {Cursor~resultCallback} [callback] The result callback.\n   * @return {Promise} returns Promise if no callback passed\n   */\n  close(options, callback) {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = Object.assign({}, { skipKillCursors: false }, options);\n\n    this.s.state = CursorState.CLOSED;\n    if (!options.skipKillCursors) {\n      // Kill the cursor\n      this.kill();\n    }\n\n    const completeClose = () => {\n      // Emit the close event for the cursor\n      this.emit('close');\n\n      // Callback if provided\n      if (typeof callback === 'function') {\n        return handleCallback(callback, null, this);\n      }\n\n      // Return a Promise\n      return new this.s.promiseLibrary(resolve => {\n        resolve();\n      });\n    };\n\n    if (this.cursorState.session) {\n      if (typeof callback === 'function') {\n        return this._endSession(() => completeClose());\n      }\n\n      return new this.s.promiseLibrary(resolve => {\n        this._endSession(() => completeClose().then(resolve));\n      });\n    }\n\n    return completeClose();\n  }\n\n  /**\n   * Map all documents using the provided function\n   * @method\n   * @param {function} [transform] The mapping transformation method.\n   * @return {Cursor}\n   */\n  map(transform) {\n    if (this.cursorState.transforms && this.cursorState.transforms.doc) {\n      const oldTransform = this.cursorState.transforms.doc;\n      this.cursorState.transforms.doc = doc => {\n        return transform(oldTransform(doc));\n      };\n    } else {\n      this.cursorState.transforms = { doc: transform };\n    }\n\n    return this;\n  }\n\n  /**\n   * Is the cursor closed\n   * @method\n   * @return {boolean}\n   */\n  isClosed() {\n    return this.isDead();\n  }\n\n  destroy(err) {\n    if (err) this.emit('error', err);\n    this.pause();\n    this.close();\n  }\n\n  /**\n   * Return a modified Readable stream including a possible transform method.\n   * @method\n   * @param {object} [options] Optional settings.\n   * @param {function} [options.transform] A transformation method applied to each document emitted by the stream.\n   * @return {Cursor}\n   * TODO: replace this method with transformStream in next major release\n   */\n  stream(options) {\n    this.cursorState.streamOptions = options || {};\n    return this;\n  }\n\n  /**\n   * Return a modified Readable stream that applies a given transform function, if supplied. If none supplied,\n   * returns a stream of unmodified docs.\n   * @method\n   * @param {object} [options] Optional settings.\n   * @param {function} [options.transform] A transformation method applied to each document emitted by the stream.\n   * @return {stream}\n   */\n  transformStream(options) {\n    const streamOptions = options || {};\n    if (typeof streamOptions.transform === 'function') {\n      const stream = new Transform({\n        objectMode: true,\n        transform: function(chunk, encoding, callback) {\n          this.push(streamOptions.transform(chunk));\n          callback();\n        }\n      });\n\n      return this.pipe(stream);\n    }\n\n    return this.pipe(new PassThrough({ objectMode: true }));\n  }\n\n  /**\n   * Execute the explain for the cursor\n   * @method\n   * @param {Cursor~resultCallback} [callback] The result callback.\n   * @return {Promise} returns Promise if no callback passed\n   */\n  explain(callback) {\n    // NOTE: the next line includes a special case for operations which do not\n    //       subclass `CommandOperationV2`. To be removed asap.\n    if (this.operation && this.operation.cmd == null) {\n      this.operation.options.explain = true;\n      this.operation.fullResponse = false;\n      return executeOperation(this.topology, this.operation, callback);\n    }\n\n    this.cmd.explain = true;\n\n    // Do we have a readConcern\n    if (this.cmd.readConcern) {\n      delete this.cmd['readConcern'];\n    }\n\n    const explainOperation = new ExplainOperation(this);\n\n    return executeOperation(this.topology, explainOperation, callback);\n  }\n\n  /**\n   * Return the cursor logger\n   * @method\n   * @return {Logger} return the cursor logger\n   * @ignore\n   */\n  getLogger() {\n    return this.logger;\n  }\n}\n\n/**\n * Cursor stream data event, fired for each document in the cursor.\n *\n * @event Cursor#data\n * @type {object}\n */\n\n/**\n * Cursor stream end event\n *\n * @event Cursor#end\n * @type {null}\n */\n\n/**\n * Cursor stream close event\n *\n * @event Cursor#close\n * @type {null}\n */\n\n/**\n * Cursor stream readable event\n *\n * @event Cursor#readable\n * @type {null}\n */\n\n// aliases\nCursor.prototype.maxTimeMs = Cursor.prototype.maxTimeMS;\n\n// deprecated methods\ndeprecate(Cursor.prototype.each, 'Cursor.each is deprecated. Use Cursor.forEach instead.');\ndeprecate(\n  Cursor.prototype.maxScan,\n  'Cursor.maxScan is deprecated, and will be removed in a later version'\n);\n\ndeprecate(\n  Cursor.prototype.snapshot,\n  'Cursor Snapshot is deprecated, and will be removed in a later version'\n);\n\n/**\n * The read() method pulls some data out of the internal buffer and returns it. If there is no data available, then it will return null.\n * @function external:Readable#read\n * @param {number} size Optional argument to specify how much data to read.\n * @return {(String | Buffer | null)}\n */\n\n/**\n * Call this function to cause the stream to return strings of the specified encoding instead of Buffer objects.\n * @function external:Readable#setEncoding\n * @param {string} encoding The encoding to use.\n * @return {null}\n */\n\n/**\n * This method will cause the readable stream to resume emitting data events.\n * @function external:Readable#resume\n * @return {null}\n */\n\n/**\n * This method will cause a stream in flowing-mode to stop emitting data events. Any data that becomes available will remain in the internal buffer.\n * @function external:Readable#pause\n * @return {null}\n */\n\n/**\n * This method pulls all the data out of a readable stream, and writes it to the supplied destination, automatically managing the flow so that the destination is not overwhelmed by a fast readable stream.\n * @function external:Readable#pipe\n * @param {Writable} destination The destination for writing data\n * @param {object} [options] Pipe options\n * @return {null}\n */\n\n/**\n * This method will remove the hooks set up for a previous pipe() call.\n * @function external:Readable#unpipe\n * @param {Writable} [destination] The destination for writing data\n * @return {null}\n */\n\n/**\n * This is useful in certain cases where a stream is being consumed by a parser, which needs to \"un-consume\" some data that it has optimistically pulled out of the source, so that the stream can be passed on to some other party.\n * @function external:Readable#unshift\n * @param {(Buffer|string)} chunk Chunk of data to unshift onto the read queue.\n * @return {null}\n */\n\n/**\n * Versions of Node prior to v0.10 had streams that did not implement the entire Streams API as it is today. (See \"Compatibility\" below for more information.)\n * @function external:Readable#wrap\n * @param {Stream} stream An \"old style\" readable stream.\n * @return {null}\n */\n\nmodule.exports = Cursor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///106\n");

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst buildCountCommand = __webpack_require__(108).buildCountCommand;\nconst formattedOrderClause = __webpack_require__(86).formattedOrderClause;\nconst handleCallback = __webpack_require__(86).handleCallback;\nconst MongoError = __webpack_require__(3).MongoError;\nconst push = Array.prototype.push;\nconst CursorState = __webpack_require__(82).CursorState;\n\n/**\n * Get the count of documents for this cursor.\n *\n * @method\n * @param {Cursor} cursor The Cursor instance on which to count.\n * @param {boolean} [applySkipLimit=true] Specifies whether the count command apply limit and skip settings should be applied on the cursor or in the provided options.\n * @param {object} [options] Optional settings. See Cursor.prototype.count for a list of options.\n * @param {Cursor~countResultCallback} [callback] The result callback.\n */\nfunction count(cursor, applySkipLimit, opts, callback) {\n  if (applySkipLimit) {\n    if (typeof cursor.cursorSkip() === 'number') opts.skip = cursor.cursorSkip();\n    if (typeof cursor.cursorLimit() === 'number') opts.limit = cursor.cursorLimit();\n  }\n\n  // Ensure we have the right read preference inheritance\n  if (opts.readPreference) {\n    cursor.setReadPreference(opts.readPreference);\n  }\n\n  if (\n    typeof opts.maxTimeMS !== 'number' &&\n    cursor.cmd &&\n    typeof cursor.cmd.maxTimeMS === 'number'\n  ) {\n    opts.maxTimeMS = cursor.cmd.maxTimeMS;\n  }\n\n  let options = {};\n  options.skip = opts.skip;\n  options.limit = opts.limit;\n  options.hint = opts.hint;\n  options.maxTimeMS = opts.maxTimeMS;\n\n  // Command\n  options.collectionName = cursor.namespace.collection;\n\n  let command;\n  try {\n    command = buildCountCommand(cursor, cursor.cmd.query, options);\n  } catch (err) {\n    return callback(err);\n  }\n\n  // Set cursor server to the same as the topology\n  cursor.server = cursor.topology.s.coreTopology;\n\n  // Execute the command\n  cursor.topology.command(\n    cursor.namespace.withCollection('$cmd'),\n    command,\n    cursor.options,\n    (err, result) => {\n      callback(err, result ? result.result.n : null);\n    }\n  );\n}\n\n/**\n * Iterates over all the documents for this cursor. See Cursor.prototype.each for more information.\n *\n * @method\n * @deprecated\n * @param {Cursor} cursor The Cursor instance on which to run.\n * @param {Cursor~resultCallback} callback The result callback.\n */\nfunction each(cursor, callback) {\n  if (!callback) throw MongoError.create({ message: 'callback is mandatory', driver: true });\n  if (cursor.isNotified()) return;\n  if (cursor.s.state === CursorState.CLOSED || cursor.isDead()) {\n    return handleCallback(\n      callback,\n      MongoError.create({ message: 'Cursor is closed', driver: true })\n    );\n  }\n\n  if (cursor.s.state === CursorState.INIT) {\n    cursor.s.state = CursorState.OPEN;\n  }\n\n  // Define function to avoid global scope escape\n  let fn = null;\n  // Trampoline all the entries\n  if (cursor.bufferedCount() > 0) {\n    while ((fn = loop(cursor, callback))) fn(cursor, callback);\n    each(cursor, callback);\n  } else {\n    cursor.next((err, item) => {\n      if (err) return handleCallback(callback, err);\n      if (item == null) {\n        return cursor.close({ skipKillCursors: true }, () => handleCallback(callback, null, null));\n      }\n\n      if (handleCallback(callback, null, item) === false) return;\n      each(cursor, callback);\n    });\n  }\n}\n\n/**\n * Check if there is any document still available in the cursor.\n *\n * @method\n * @param {Cursor} cursor The Cursor instance on which to run.\n * @param {Cursor~resultCallback} [callback] The result callback.\n */\nfunction hasNext(cursor, callback) {\n  if (cursor.s.currentDoc) {\n    return callback(null, true);\n  }\n\n  if (cursor.isNotified()) {\n    return callback(null, false);\n  }\n\n  nextObject(cursor, (err, doc) => {\n    if (err) return callback(err, null);\n    if (cursor.s.state === CursorState.CLOSED || cursor.isDead()) {\n      return callback(null, false);\n    }\n\n    if (!doc) return callback(null, false);\n    cursor.s.currentDoc = doc;\n    callback(null, true);\n  });\n}\n\n// Trampoline emptying the number of retrieved items\n// without incurring a nextTick operation\nfunction loop(cursor, callback) {\n  // No more items we are done\n  if (cursor.bufferedCount() === 0) return;\n  // Get the next document\n  cursor._next(callback);\n  // Loop\n  return loop;\n}\n\n/**\n * Get the next available document from the cursor. Returns null if no more documents are available.\n *\n * @method\n * @param {Cursor} cursor The Cursor instance from which to get the next document.\n * @param {Cursor~resultCallback} [callback] The result callback.\n */\nfunction next(cursor, callback) {\n  // Return the currentDoc if someone called hasNext first\n  if (cursor.s.currentDoc) {\n    const doc = cursor.s.currentDoc;\n    cursor.s.currentDoc = null;\n    return callback(null, doc);\n  }\n\n  // Return the next object\n  nextObject(cursor, callback);\n}\n\n// Get the next available document from the cursor, returns null if no more documents are available.\nfunction nextObject(cursor, callback) {\n  if (cursor.s.state === CursorState.CLOSED || (cursor.isDead && cursor.isDead()))\n    return handleCallback(\n      callback,\n      MongoError.create({ message: 'Cursor is closed', driver: true })\n    );\n  if (cursor.s.state === CursorState.INIT && cursor.cmd.sort) {\n    try {\n      cursor.cmd.sort = formattedOrderClause(cursor.cmd.sort);\n    } catch (err) {\n      return handleCallback(callback, err);\n    }\n  }\n\n  // Get the next object\n  cursor._next((err, doc) => {\n    cursor.s.state = CursorState.OPEN;\n    if (err) return handleCallback(callback, err);\n    handleCallback(callback, null, doc);\n  });\n}\n\n/**\n * Returns an array of documents. See Cursor.prototype.toArray for more information.\n *\n * @method\n * @param {Cursor} cursor The Cursor instance from which to get the next document.\n * @param {Cursor~toArrayResultCallback} [callback] The result callback.\n */\nfunction toArray(cursor, callback) {\n  const items = [];\n\n  // Reset cursor\n  cursor.rewind();\n  cursor.s.state = CursorState.INIT;\n\n  // Fetch all the documents\n  const fetchDocs = () => {\n    cursor._next((err, doc) => {\n      if (err) {\n        return cursor._endSession\n          ? cursor._endSession(() => handleCallback(callback, err))\n          : handleCallback(callback, err);\n      }\n      if (doc == null) {\n        return cursor.close({ skipKillCursors: true }, () => handleCallback(callback, null, items));\n      }\n\n      // Add doc to items\n      items.push(doc);\n\n      // Get all buffered objects\n      if (cursor.bufferedCount() > 0) {\n        let docs = cursor.readBufferedDocuments(cursor.bufferedCount());\n\n        // Transform the doc if transform method added\n        if (cursor.s.transforms && typeof cursor.s.transforms.doc === 'function') {\n          docs = docs.map(cursor.s.transforms.doc);\n        }\n\n        push.apply(items, docs);\n      }\n\n      // Attempt a fetch\n      fetchDocs();\n    });\n  };\n\n  fetchDocs();\n}\n\nmodule.exports = { count, each, hasNext, next, toArray };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///107\n");

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst applyWriteConcern = __webpack_require__(86).applyWriteConcern;\nconst Code = __webpack_require__(3).BSON.Code;\nconst createIndexDb = __webpack_require__(109).createIndex;\nconst decorateWithCollation = __webpack_require__(86).decorateWithCollation;\nconst decorateWithReadConcern = __webpack_require__(86).decorateWithReadConcern;\nconst ensureIndexDb = __webpack_require__(109).ensureIndex;\nconst evaluate = __webpack_require__(109).evaluate;\nconst executeCommand = __webpack_require__(109).executeCommand;\nconst resolveReadPreference = __webpack_require__(86).resolveReadPreference;\nconst handleCallback = __webpack_require__(86).handleCallback;\nconst indexInformationDb = __webpack_require__(109).indexInformation;\nconst Long = __webpack_require__(3).BSON.Long;\nconst MongoError = __webpack_require__(3).MongoError;\nconst ReadPreference = __webpack_require__(3).ReadPreference;\nconst toError = __webpack_require__(86).toError;\nconst insertDocuments = __webpack_require__(118).insertDocuments;\nconst updateDocuments = __webpack_require__(118).updateDocuments;\n\n/**\n * Group function helper\n * @ignore\n */\n// var groupFunction = function () {\n//   var c = db[ns].find(condition);\n//   var map = new Map();\n//   var reduce_function = reduce;\n//\n//   while (c.hasNext()) {\n//     var obj = c.next();\n//     var key = {};\n//\n//     for (var i = 0, len = keys.length; i < len; ++i) {\n//       var k = keys[i];\n//       key[k] = obj[k];\n//     }\n//\n//     var aggObj = map.get(key);\n//\n//     if (aggObj == null) {\n//       var newObj = Object.extend({}, key);\n//       aggObj = Object.extend(newObj, initial);\n//       map.put(key, aggObj);\n//     }\n//\n//     reduce_function(obj, aggObj);\n//   }\n//\n//   return { \"result\": map.values() };\n// }.toString();\nconst groupFunction =\n  'function () {\\nvar c = db[ns].find(condition);\\nvar map = new Map();\\nvar reduce_function = reduce;\\n\\nwhile (c.hasNext()) {\\nvar obj = c.next();\\nvar key = {};\\n\\nfor (var i = 0, len = keys.length; i < len; ++i) {\\nvar k = keys[i];\\nkey[k] = obj[k];\\n}\\n\\nvar aggObj = map.get(key);\\n\\nif (aggObj == null) {\\nvar newObj = Object.extend({}, key);\\naggObj = Object.extend(newObj, initial);\\nmap.put(key, aggObj);\\n}\\n\\nreduce_function(obj, aggObj);\\n}\\n\\nreturn { \"result\": map.values() };\\n}';\n\n// Check the update operation to ensure it has atomic operators.\nfunction checkForAtomicOperators(update) {\n  if (Array.isArray(update)) {\n    return update.reduce((err, u) => err || checkForAtomicOperators(u), null);\n  }\n\n  const keys = Object.keys(update);\n\n  // same errors as the server would give for update doc lacking atomic operators\n  if (keys.length === 0) {\n    return toError('The update operation document must contain at least one atomic operator.');\n  }\n\n  if (keys[0][0] !== '$') {\n    return toError('the update operation document must contain atomic operators.');\n  }\n}\n\n/**\n * Create an index on the db and collection.\n *\n * @method\n * @param {Collection} a Collection instance.\n * @param {(string|object)} fieldOrSpec Defines the index.\n * @param {object} [options] Optional settings. See Collection.prototype.createIndex for a list of options.\n * @param {Collection~resultCallback} [callback] The command result callback\n */\nfunction createIndex(coll, fieldOrSpec, options, callback) {\n  createIndexDb(coll.s.db, coll.collectionName, fieldOrSpec, options, callback);\n}\n\n/**\n * Create multiple indexes in the collection. This method is only supported for\n * MongoDB 2.6 or higher. Earlier version of MongoDB will throw a command not supported\n * error. Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\n *\n * @method\n * @param {Collection} a Collection instance.\n * @param {array} indexSpecs An array of index specifications to be created\n * @param {Object} [options] Optional settings. See Collection.prototype.createIndexes for a list of options.\n * @param {Collection~resultCallback} [callback] The command result callback\n */\nfunction createIndexes(coll, indexSpecs, options, callback) {\n  const capabilities = coll.s.topology.capabilities();\n\n  // Ensure we generate the correct name if the parameter is not set\n  for (let i = 0; i < indexSpecs.length; i++) {\n    if (indexSpecs[i].name == null) {\n      const keys = [];\n\n      // Did the user pass in a collation, check if our write server supports it\n      if (indexSpecs[i].collation && capabilities && !capabilities.commandsTakeCollation) {\n        return callback(new MongoError('server/primary/mongos does not support collation'));\n      }\n\n      for (let name in indexSpecs[i].key) {\n        keys.push(`${name}_${indexSpecs[i].key[name]}`);\n      }\n\n      // Set the name\n      indexSpecs[i].name = keys.join('_');\n    }\n  }\n\n  options = Object.assign({}, options, { readPreference: ReadPreference.PRIMARY });\n\n  // Execute the index\n  executeCommand(\n    coll.s.db,\n    {\n      createIndexes: coll.collectionName,\n      indexes: indexSpecs\n    },\n    options,\n    callback\n  );\n}\n\n/**\n * Ensure that an index exists. If the index does not exist, this function creates it.\n *\n * @method\n * @param {Collection} a Collection instance.\n * @param {(string|object)} fieldOrSpec Defines the index.\n * @param {object} [options] Optional settings. See Collection.prototype.ensureIndex for a list of options.\n * @param {Collection~resultCallback} [callback] The command result callback\n */\nfunction ensureIndex(coll, fieldOrSpec, options, callback) {\n  ensureIndexDb(coll.s.db, coll.collectionName, fieldOrSpec, options, callback);\n}\n\n/**\n * Run a group command across a collection.\n *\n * @method\n * @param {Collection} a Collection instance.\n * @param {(object|array|function|code)} keys An object, array or function expressing the keys to group by.\n * @param {object} condition An optional condition that must be true for a row to be considered.\n * @param {object} initial Initial value of the aggregation counter object.\n * @param {(function|Code)} reduce The reduce function aggregates (reduces) the objects iterated\n * @param {(function|Code)} finalize An optional function to be run on each item in the result set just before the item is returned.\n * @param {boolean} command Specify if you wish to run using the internal group command or using eval, default is true.\n * @param {object} [options] Optional settings. See Collection.prototype.group for a list of options.\n * @param {Collection~resultCallback} [callback] The command result callback\n * @deprecated MongoDB 3.6 or higher will no longer support the group command. We recommend rewriting using the aggregation framework.\n */\nfunction group(coll, keys, condition, initial, reduce, finalize, command, options, callback) {\n  // Execute using the command\n  if (command) {\n    const reduceFunction = reduce && reduce._bsontype === 'Code' ? reduce : new Code(reduce);\n\n    const selector = {\n      group: {\n        ns: coll.collectionName,\n        $reduce: reduceFunction,\n        cond: condition,\n        initial: initial,\n        out: 'inline'\n      }\n    };\n\n    // if finalize is defined\n    if (finalize != null) selector.group['finalize'] = finalize;\n    // Set up group selector\n    if ('function' === typeof keys || (keys && keys._bsontype === 'Code')) {\n      selector.group.$keyf = keys && keys._bsontype === 'Code' ? keys : new Code(keys);\n    } else {\n      const hash = {};\n      keys.forEach(key => {\n        hash[key] = 1;\n      });\n      selector.group.key = hash;\n    }\n\n    options = Object.assign({}, options);\n    // Ensure we have the right read preference inheritance\n    options.readPreference = resolveReadPreference(coll, options);\n\n    // Do we have a readConcern specified\n    decorateWithReadConcern(selector, coll, options);\n\n    // Have we specified collation\n    try {\n      decorateWithCollation(selector, coll, options);\n    } catch (err) {\n      return callback(err, null);\n    }\n\n    // Execute command\n    executeCommand(coll.s.db, selector, options, (err, result) => {\n      if (err) return handleCallback(callback, err, null);\n      handleCallback(callback, null, result.retval);\n    });\n  } else {\n    // Create execution scope\n    const scope = reduce != null && reduce._bsontype === 'Code' ? reduce.scope : {};\n\n    scope.ns = coll.collectionName;\n    scope.keys = keys;\n    scope.condition = condition;\n    scope.initial = initial;\n\n    // Pass in the function text to execute within mongodb.\n    const groupfn = groupFunction.replace(/ reduce;/, reduce.toString() + ';');\n\n    evaluate(coll.s.db, new Code(groupfn, scope), null, options, (err, results) => {\n      if (err) return handleCallback(callback, err, null);\n      handleCallback(callback, null, results.result || results);\n    });\n  }\n}\n\n/**\n * Retrieve all the indexes on the collection.\n *\n * @method\n * @param {Collection} a Collection instance.\n * @param {Object} [options] Optional settings. See Collection.prototype.indexes for a list of options.\n * @param {Collection~resultCallback} [callback] The command result callback\n */\nfunction indexes(coll, options, callback) {\n  options = Object.assign({}, { full: true }, options);\n  indexInformationDb(coll.s.db, coll.collectionName, options, callback);\n}\n\n/**\n * Check if one or more indexes exist on the collection. This fails on the first index that doesn't exist.\n *\n * @method\n * @param {Collection} a Collection instance.\n * @param {(string|array)} indexes One or more index names to check.\n * @param {Object} [options] Optional settings. See Collection.prototype.indexExists for a list of options.\n * @param {Collection~resultCallback} [callback] The command result callback\n */\nfunction indexExists(coll, indexes, options, callback) {\n  indexInformation(coll, options, (err, indexInformation) => {\n    // If we have an error return\n    if (err != null) return handleCallback(callback, err, null);\n    // Let's check for the index names\n    if (!Array.isArray(indexes))\n      return handleCallback(callback, null, indexInformation[indexes] != null);\n    // Check in list of indexes\n    for (let i = 0; i < indexes.length; i++) {\n      if (indexInformation[indexes[i]] == null) {\n        return handleCallback(callback, null, false);\n      }\n    }\n\n    // All keys found return true\n    return handleCallback(callback, null, true);\n  });\n}\n\n/**\n * Retrieve this collection's index info.\n *\n * @method\n * @param {Collection} a Collection instance.\n * @param {object} [options] Optional settings. See Collection.prototype.indexInformation for a list of options.\n * @param {Collection~resultCallback} [callback] The command result callback\n */\nfunction indexInformation(coll, options, callback) {\n  indexInformationDb(coll.s.db, coll.collectionName, options, callback);\n}\n\n/**\n * Return N parallel cursors for a collection to allow parallel reading of the entire collection. There are\n * no ordering guarantees for returned results.\n *\n * @method\n * @param {Collection} a Collection instance.\n * @param {object} [options] Optional settings. See Collection.prototype.parallelCollectionScan for a list of options.\n * @param {Collection~parallelCollectionScanCallback} [callback] The command result callback\n */\nfunction parallelCollectionScan(coll, options, callback) {\n  // Create command object\n  const commandObject = {\n    parallelCollectionScan: coll.collectionName,\n    numCursors: options.numCursors\n  };\n\n  // Do we have a readConcern specified\n  decorateWithReadConcern(commandObject, coll, options);\n\n  // Store the raw value\n  const raw = options.raw;\n  delete options['raw'];\n\n  // Execute the command\n  executeCommand(coll.s.db, commandObject, options, (err, result) => {\n    if (err) return handleCallback(callback, err, null);\n    if (result == null)\n      return handleCallback(\n        callback,\n        new Error('no result returned for parallelCollectionScan'),\n        null\n      );\n\n    options = Object.assign({ explicitlyIgnoreSession: true }, options);\n\n    const cursors = [];\n    // Add the raw back to the option\n    if (raw) options.raw = raw;\n    // Create command cursors for each item\n    for (let i = 0; i < result.cursors.length; i++) {\n      const rawId = result.cursors[i].cursor.id;\n      // Convert cursorId to Long if needed\n      const cursorId = typeof rawId === 'number' ? Long.fromNumber(rawId) : rawId;\n      // Add a command cursor\n      cursors.push(coll.s.topology.cursor(coll.namespace, cursorId, options));\n    }\n\n    handleCallback(callback, null, cursors);\n  });\n}\n\n/**\n * Save a document.\n *\n * @method\n * @param {Collection} a Collection instance.\n * @param {object} doc Document to save\n * @param {object} [options] Optional settings. See Collection.prototype.save for a list of options.\n * @param {Collection~writeOpCallback} [callback] The command result callback\n * @deprecated use insertOne, insertMany, updateOne or updateMany\n */\nfunction save(coll, doc, options, callback) {\n  // Get the write concern options\n  const finalOptions = applyWriteConcern(\n    Object.assign({}, options),\n    { db: coll.s.db, collection: coll },\n    options\n  );\n  // Establish if we need to perform an insert or update\n  if (doc._id != null) {\n    finalOptions.upsert = true;\n    return updateDocuments(coll, { _id: doc._id }, doc, finalOptions, callback);\n  }\n\n  // Insert the document\n  insertDocuments(coll, [doc], finalOptions, (err, result) => {\n    if (callback == null) return;\n    if (doc == null) return handleCallback(callback, null, null);\n    if (err) return handleCallback(callback, err, null);\n    handleCallback(callback, null, result);\n  });\n}\n\nmodule.exports = {\n  checkForAtomicOperators,\n  createIndex,\n  createIndexes,\n  ensureIndex,\n  group,\n  indexes,\n  indexExists,\n  indexInformation,\n  parallelCollectionScan,\n  save\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///108\n");

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst applyWriteConcern = __webpack_require__(86).applyWriteConcern;\nconst Code = __webpack_require__(3).BSON.Code;\nconst resolveReadPreference = __webpack_require__(86).resolveReadPreference;\nconst crypto = __webpack_require__(36);\nconst debugOptions = __webpack_require__(86).debugOptions;\nconst handleCallback = __webpack_require__(86).handleCallback;\nconst MongoError = __webpack_require__(3).MongoError;\nconst parseIndexOptions = __webpack_require__(86).parseIndexOptions;\nconst ReadPreference = __webpack_require__(3).ReadPreference;\nconst toError = __webpack_require__(86).toError;\nconst CONSTANTS = __webpack_require__(110);\nconst MongoDBNamespace = __webpack_require__(86).MongoDBNamespace;\n\nconst count = __webpack_require__(108).count;\nconst findOne = __webpack_require__(108).findOne;\nconst remove = __webpack_require__(108).remove;\nconst updateOne = __webpack_require__(108).updateOne;\n\nlet collection;\nfunction loadCollection() {\n  if (!collection) {\n    collection = __webpack_require__(111);\n  }\n  return collection;\n}\nlet db;\nfunction loadDb() {\n  if (!db) {\n    db = __webpack_require__(150);\n  }\n  return db;\n}\n\nconst debugFields = [\n  'authSource',\n  'w',\n  'wtimeout',\n  'j',\n  'native_parser',\n  'forceServerObjectId',\n  'serializeFunctions',\n  'raw',\n  'promoteLongs',\n  'promoteValues',\n  'promoteBuffers',\n  'bufferMaxEntries',\n  'numberOfRetries',\n  'retryMiliSeconds',\n  'readPreference',\n  'pkFactory',\n  'parentDb',\n  'promiseLibrary',\n  'noListener'\n];\n\n/**\n * Add a user to the database.\n * @method\n * @param {Db} db The Db instance on which to add a user.\n * @param {string} username The username.\n * @param {string} password The password.\n * @param {object} [options] Optional settings. See Db.prototype.addUser for a list of options.\n * @param {Db~resultCallback} [callback] The command result callback\n */\nfunction addUser(db, username, password, options, callback) {\n  let Db = loadDb();\n\n  // Did the user destroy the topology\n  if (db.serverConfig && db.serverConfig.isDestroyed())\n    return callback(new MongoError('topology was destroyed'));\n  // Attempt to execute auth command\n  executeAuthCreateUserCommand(db, username, password, options, (err, r) => {\n    // We need to perform the backward compatible insert operation\n    if (err && err.code === -5000) {\n      const finalOptions = applyWriteConcern(Object.assign({}, options), { db }, options);\n\n      // Use node md5 generator\n      const md5 = crypto.createHash('md5');\n      // Generate keys used for authentication\n      md5.update(username + ':mongo:' + password);\n      const userPassword = md5.digest('hex');\n\n      // If we have another db set\n      const dbToUse = options.dbName ? new Db(options.dbName, db.s.topology, db.s.options) : db;\n\n      // Fetch a user collection\n      const collection = dbToUse.collection(CONSTANTS.SYSTEM_USER_COLLECTION);\n\n      // Check if we are inserting the first user\n      count(collection, {}, finalOptions, (err, count) => {\n        // We got an error (f.ex not authorized)\n        if (err != null) return handleCallback(callback, err, null);\n        // Check if the user exists and update i\n        const findOptions = Object.assign({ projection: { dbName: 1 } }, finalOptions);\n        collection.find({ user: username }, findOptions).toArray(err => {\n          // We got an error (f.ex not authorized)\n          if (err != null) return handleCallback(callback, err, null);\n          // Add command keys\n          finalOptions.upsert = true;\n\n          // We have a user, let's update the password or upsert if not\n          updateOne(\n            collection,\n            { user: username },\n            { $set: { user: username, pwd: userPassword } },\n            finalOptions,\n            err => {\n              if (count === 0 && err)\n                return handleCallback(callback, null, [{ user: username, pwd: userPassword }]);\n              if (err) return handleCallback(callback, err, null);\n              handleCallback(callback, null, [{ user: username, pwd: userPassword }]);\n            }\n          );\n        });\n      });\n\n      return;\n    }\n\n    if (err) return handleCallback(callback, err);\n    handleCallback(callback, err, r);\n  });\n}\n\n/**\n * Fetch all collections for the current db.\n *\n * @method\n * @param {Db} db The Db instance on which to fetch collections.\n * @param {object} [options] Optional settings. See Db.prototype.collections for a list of options.\n * @param {Db~collectionsResultCallback} [callback] The results callback\n */\nfunction collections(db, options, callback) {\n  let Collection = loadCollection();\n\n  options = Object.assign({}, options, { nameOnly: true });\n  // Let's get the collection names\n  db.listCollections({}, options).toArray((err, documents) => {\n    if (err != null) return handleCallback(callback, err, null);\n    // Filter collections removing any illegal ones\n    documents = documents.filter(doc => {\n      return doc.name.indexOf('$') === -1;\n    });\n\n    // Return the collection objects\n    handleCallback(\n      callback,\n      null,\n      documents.map(d => {\n        return new Collection(\n          db,\n          db.s.topology,\n          db.databaseName,\n          d.name,\n          db.s.pkFactory,\n          db.s.options\n        );\n      })\n    );\n  });\n}\n\n/**\n * Creates an index on the db and collection.\n * @method\n * @param {Db} db The Db instance on which to create an index.\n * @param {string} name Name of the collection to create the index on.\n * @param {(string|object)} fieldOrSpec Defines the index.\n * @param {object} [options] Optional settings. See Db.prototype.createIndex for a list of options.\n * @param {Db~resultCallback} [callback] The command result callback\n */\nfunction createIndex(db, name, fieldOrSpec, options, callback) {\n  // Get the write concern options\n  let finalOptions = Object.assign({}, { readPreference: ReadPreference.PRIMARY }, options);\n  finalOptions = applyWriteConcern(finalOptions, { db }, options);\n\n  // Ensure we have a callback\n  if (finalOptions.writeConcern && typeof callback !== 'function') {\n    throw MongoError.create({\n      message: 'Cannot use a writeConcern without a provided callback',\n      driver: true\n    });\n  }\n\n  // Did the user destroy the topology\n  if (db.serverConfig && db.serverConfig.isDestroyed())\n    return callback(new MongoError('topology was destroyed'));\n\n  // Attempt to run using createIndexes command\n  createIndexUsingCreateIndexes(db, name, fieldOrSpec, finalOptions, (err, result) => {\n    if (err == null) return handleCallback(callback, err, result);\n\n    /**\n     * The following errors mean that the server recognized `createIndex` as a command so we don't need to fallback to an insert:\n     * 67 = 'CannotCreateIndex' (malformed index options)\n     * 85 = 'IndexOptionsConflict' (index already exists with different options)\n     * 86 = 'IndexKeySpecsConflict' (index already exists with the same name)\n     * 11000 = 'DuplicateKey' (couldn't build unique index because of dupes)\n     * 11600 = 'InterruptedAtShutdown' (interrupted at shutdown)\n     * 197 = 'InvalidIndexSpecificationOption' (`_id` with `background: true`)\n     */\n    if (\n      err.code === 67 ||\n      err.code === 11000 ||\n      err.code === 85 ||\n      err.code === 86 ||\n      err.code === 11600 ||\n      err.code === 197\n    ) {\n      return handleCallback(callback, err, result);\n    }\n\n    // Create command\n    const doc = createCreateIndexCommand(db, name, fieldOrSpec, options);\n    // Set no key checking\n    finalOptions.checkKeys = false;\n    // Insert document\n    db.s.topology.insert(\n      db.s.namespace.withCollection(CONSTANTS.SYSTEM_INDEX_COLLECTION),\n      doc,\n      finalOptions,\n      (err, result) => {\n        if (callback == null) return;\n        if (err) return handleCallback(callback, err);\n        if (result == null) return handleCallback(callback, null, null);\n        if (result.result.writeErrors)\n          return handleCallback(callback, MongoError.create(result.result.writeErrors[0]), null);\n        handleCallback(callback, null, doc.name);\n      }\n    );\n  });\n}\n\n// Add listeners to topology\nfunction createListener(db, e, object) {\n  function listener(err) {\n    if (object.listeners(e).length > 0) {\n      object.emit(e, err, db);\n\n      // Emit on all associated db's if available\n      for (let i = 0; i < db.s.children.length; i++) {\n        db.s.children[i].emit(e, err, db.s.children[i]);\n      }\n    }\n  }\n  return listener;\n}\n\n/**\n * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n *\n * @method\n * @param {Db} db The Db instance on which to drop the collection.\n * @param {string} name Name of collection to drop\n * @param {Object} [options] Optional settings. See Db.prototype.dropCollection for a list of options.\n * @param {Db~resultCallback} [callback] The results callback\n */\nfunction dropCollection(db, name, options, callback) {\n  executeCommand(db, name, options, (err, result) => {\n    // Did the user destroy the topology\n    if (db.serverConfig && db.serverConfig.isDestroyed()) {\n      return callback(new MongoError('topology was destroyed'));\n    }\n\n    if (err) return handleCallback(callback, err);\n    if (result.ok) return handleCallback(callback, null, true);\n    handleCallback(callback, null, false);\n  });\n}\n\n/**\n * Drop a database, removing it permanently from the server.\n *\n * @method\n * @param {Db} db The Db instance to drop.\n * @param {Object} cmd The command document.\n * @param {Object} [options] Optional settings. See Db.prototype.dropDatabase for a list of options.\n * @param {Db~resultCallback} [callback] The results callback\n */\nfunction dropDatabase(db, cmd, options, callback) {\n  executeCommand(db, cmd, options, (err, result) => {\n    // Did the user destroy the topology\n    if (db.serverConfig && db.serverConfig.isDestroyed()) {\n      return callback(new MongoError('topology was destroyed'));\n    }\n\n    if (callback == null) return;\n    if (err) return handleCallback(callback, err, null);\n    handleCallback(callback, null, result.ok ? true : false);\n  });\n}\n\n/**\n * Ensures that an index exists. If it does not, creates it.\n *\n * @method\n * @param {Db} db The Db instance on which to ensure the index.\n * @param {string} name The index name\n * @param {(string|object)} fieldOrSpec Defines the index.\n * @param {object} [options] Optional settings. See Db.prototype.ensureIndex for a list of options.\n * @param {Db~resultCallback} [callback] The command result callback\n */\nfunction ensureIndex(db, name, fieldOrSpec, options, callback) {\n  // Get the write concern options\n  const finalOptions = applyWriteConcern({}, { db }, options);\n  // Create command\n  const selector = createCreateIndexCommand(db, name, fieldOrSpec, options);\n  const index_name = selector.name;\n\n  // Did the user destroy the topology\n  if (db.serverConfig && db.serverConfig.isDestroyed())\n    return callback(new MongoError('topology was destroyed'));\n\n  // Merge primary readPreference\n  finalOptions.readPreference = ReadPreference.PRIMARY;\n\n  // Check if the index already exists\n  indexInformation(db, name, finalOptions, (err, indexInformation) => {\n    if (err != null && err.code !== 26) return handleCallback(callback, err, null);\n    // If the index does not exist, create it\n    if (indexInformation == null || !indexInformation[index_name]) {\n      createIndex(db, name, fieldOrSpec, options, callback);\n    } else {\n      if (typeof callback === 'function') return handleCallback(callback, null, index_name);\n    }\n  });\n}\n\n/**\n * Evaluate JavaScript on the server\n *\n * @method\n * @param {Db} db The Db instance.\n * @param {Code} code JavaScript to execute on server.\n * @param {(object|array)} parameters The parameters for the call.\n * @param {object} [options] Optional settings. See Db.prototype.eval for a list of options.\n * @param {Db~resultCallback} [callback] The results callback\n * @deprecated Eval is deprecated on MongoDB 3.2 and forward\n */\nfunction evaluate(db, code, parameters, options, callback) {\n  let finalCode = code;\n  let finalParameters = [];\n\n  // Did the user destroy the topology\n  if (db.serverConfig && db.serverConfig.isDestroyed())\n    return callback(new MongoError('topology was destroyed'));\n\n  // If not a code object translate to one\n  if (!(finalCode && finalCode._bsontype === 'Code')) finalCode = new Code(finalCode);\n  // Ensure the parameters are correct\n  if (parameters != null && !Array.isArray(parameters) && typeof parameters !== 'function') {\n    finalParameters = [parameters];\n  } else if (parameters != null && Array.isArray(parameters) && typeof parameters !== 'function') {\n    finalParameters = parameters;\n  }\n\n  // Create execution selector\n  let cmd = { $eval: finalCode, args: finalParameters };\n  // Check if the nolock parameter is passed in\n  if (options['nolock']) {\n    cmd['nolock'] = options['nolock'];\n  }\n\n  // Set primary read preference\n  options.readPreference = new ReadPreference(ReadPreference.PRIMARY);\n\n  // Execute the command\n  executeCommand(db, cmd, options, (err, result) => {\n    if (err) return handleCallback(callback, err, null);\n    if (result && result.ok === 1) return handleCallback(callback, null, result.retval);\n    if (result)\n      return handleCallback(\n        callback,\n        MongoError.create({ message: `eval failed: ${result.errmsg}`, driver: true }),\n        null\n      );\n    handleCallback(callback, err, result);\n  });\n}\n\n/**\n * Execute a command\n *\n * @method\n * @param {Db} db The Db instance on which to execute the command.\n * @param {object} command The command hash\n * @param {object} [options] Optional settings. See Db.prototype.command for a list of options.\n * @param {Db~resultCallback} [callback] The command result callback\n */\nfunction executeCommand(db, command, options, callback) {\n  // Did the user destroy the topology\n  if (db.serverConfig && db.serverConfig.isDestroyed())\n    return callback(new MongoError('topology was destroyed'));\n  // Get the db name we are executing against\n  const dbName = options.dbName || options.authdb || db.databaseName;\n\n  // Convert the readPreference if its not a write\n  options.readPreference = resolveReadPreference(db, options);\n\n  // Debug information\n  if (db.s.logger.isDebug())\n    db.s.logger.debug(\n      `executing command ${JSON.stringify(\n        command\n      )} against ${dbName}.$cmd with options [${JSON.stringify(\n        debugOptions(debugFields, options)\n      )}]`\n    );\n\n  // Execute command\n  db.s.topology.command(db.s.namespace.withCollection('$cmd'), command, options, (err, result) => {\n    if (err) return handleCallback(callback, err);\n    if (options.full) return handleCallback(callback, null, result);\n    handleCallback(callback, null, result.result);\n  });\n}\n\n/**\n * Runs a command on the database as admin.\n *\n * @method\n * @param {Db} db The Db instance on which to execute the command.\n * @param {object} command The command hash\n * @param {object} [options] Optional settings. See Db.prototype.executeDbAdminCommand for a list of options.\n * @param {Db~resultCallback} [callback] The command result callback\n */\nfunction executeDbAdminCommand(db, command, options, callback) {\n  const namespace = new MongoDBNamespace('admin', '$cmd');\n\n  db.s.topology.command(namespace, command, options, (err, result) => {\n    // Did the user destroy the topology\n    if (db.serverConfig && db.serverConfig.isDestroyed()) {\n      return callback(new MongoError('topology was destroyed'));\n    }\n\n    if (err) return handleCallback(callback, err);\n    handleCallback(callback, null, result.result);\n  });\n}\n\n/**\n * Retrieves this collections index info.\n *\n * @method\n * @param {Db} db The Db instance on which to retrieve the index info.\n * @param {string} name The name of the collection.\n * @param {object} [options] Optional settings. See Db.prototype.indexInformation for a list of options.\n * @param {Db~resultCallback} [callback] The command result callback\n */\nfunction indexInformation(db, name, options, callback) {\n  // If we specified full information\n  const full = options['full'] == null ? false : options['full'];\n\n  // Did the user destroy the topology\n  if (db.serverConfig && db.serverConfig.isDestroyed())\n    return callback(new MongoError('topology was destroyed'));\n  // Process all the results from the index command and collection\n  function processResults(indexes) {\n    // Contains all the information\n    let info = {};\n    // Process all the indexes\n    for (let i = 0; i < indexes.length; i++) {\n      const index = indexes[i];\n      // Let's unpack the object\n      info[index.name] = [];\n      for (let name in index.key) {\n        info[index.name].push([name, index.key[name]]);\n      }\n    }\n\n    return info;\n  }\n\n  // Get the list of indexes of the specified collection\n  db\n    .collection(name)\n    .listIndexes(options)\n    .toArray((err, indexes) => {\n      if (err) return callback(toError(err));\n      if (!Array.isArray(indexes)) return handleCallback(callback, null, []);\n      if (full) return handleCallback(callback, null, indexes);\n      handleCallback(callback, null, processResults(indexes));\n    });\n}\n\n/**\n * Retrieve the current profiling information for MongoDB\n *\n * @method\n * @param {Db} db The Db instance on which to retrieve the profiling info.\n * @param {Object} [options] Optional settings. See Db.protoype.profilingInfo for a list of options.\n * @param {Db~resultCallback} [callback] The command result callback.\n * @deprecated Query the system.profile collection directly.\n */\nfunction profilingInfo(db, options, callback) {\n  try {\n    db\n      .collection('system.profile')\n      .find({}, options)\n      .toArray(callback);\n  } catch (err) {\n    return callback(err, null);\n  }\n}\n\n/**\n * Remove a user from a database\n *\n * @method\n * @param {Db} db The Db instance on which to remove the user.\n * @param {string} username The username.\n * @param {object} [options] Optional settings. See Db.prototype.removeUser for a list of options.\n * @param {Db~resultCallback} [callback] The command result callback\n */\nfunction removeUser(db, username, options, callback) {\n  let Db = loadDb();\n\n  // Attempt to execute command\n  executeAuthRemoveUserCommand(db, username, options, (err, result) => {\n    if (err && err.code === -5000) {\n      const finalOptions = applyWriteConcern(Object.assign({}, options), { db }, options);\n      // If we have another db set\n      const db = options.dbName ? new Db(options.dbName, db.s.topology, db.s.options) : db;\n\n      // Fetch a user collection\n      const collection = db.collection(CONSTANTS.SYSTEM_USER_COLLECTION);\n\n      // Locate the user\n      findOne(collection, { user: username }, finalOptions, (err, user) => {\n        if (user == null) return handleCallback(callback, err, false);\n        remove(collection, { user: username }, finalOptions, err => {\n          handleCallback(callback, err, true);\n        });\n      });\n\n      return;\n    }\n\n    if (err) return handleCallback(callback, err);\n    handleCallback(callback, err, result);\n  });\n}\n\n// Validate the database name\nfunction validateDatabaseName(databaseName) {\n  if (typeof databaseName !== 'string')\n    throw MongoError.create({ message: 'database name must be a string', driver: true });\n  if (databaseName.length === 0)\n    throw MongoError.create({ message: 'database name cannot be the empty string', driver: true });\n  if (databaseName === '$external') return;\n\n  const invalidChars = [' ', '.', '$', '/', '\\\\'];\n  for (let i = 0; i < invalidChars.length; i++) {\n    if (databaseName.indexOf(invalidChars[i]) !== -1)\n      throw MongoError.create({\n        message: \"database names cannot contain the character '\" + invalidChars[i] + \"'\",\n        driver: true\n      });\n  }\n}\n\n/**\n * Create the command object for Db.prototype.createIndex.\n *\n * @param {Db} db The Db instance on which to create the command.\n * @param {string} name Name of the collection to create the index on.\n * @param {(string|object)} fieldOrSpec Defines the index.\n * @param {Object} [options] Optional settings. See Db.prototype.createIndex for a list of options.\n * @return {Object} The insert command object.\n */\nfunction createCreateIndexCommand(db, name, fieldOrSpec, options) {\n  const indexParameters = parseIndexOptions(fieldOrSpec);\n  const fieldHash = indexParameters.fieldHash;\n\n  // Generate the index name\n  const indexName = typeof options.name === 'string' ? options.name : indexParameters.name;\n  const selector = {\n    ns: db.s.namespace.withCollection(name).toString(),\n    key: fieldHash,\n    name: indexName\n  };\n\n  // Ensure we have a correct finalUnique\n  const finalUnique = options == null || 'object' === typeof options ? false : options;\n  // Set up options\n  options = options == null || typeof options === 'boolean' ? {} : options;\n\n  // Add all the options\n  const keysToOmit = Object.keys(selector);\n  for (let optionName in options) {\n    if (keysToOmit.indexOf(optionName) === -1) {\n      selector[optionName] = options[optionName];\n    }\n  }\n\n  if (selector['unique'] == null) selector['unique'] = finalUnique;\n\n  // Remove any write concern operations\n  const removeKeys = ['w', 'wtimeout', 'j', 'fsync', 'readPreference', 'session'];\n  for (let i = 0; i < removeKeys.length; i++) {\n    delete selector[removeKeys[i]];\n  }\n\n  // Return the command creation selector\n  return selector;\n}\n\n/**\n * Create index using the createIndexes command.\n *\n * @param {Db} db The Db instance on which to execute the command.\n * @param {string} name Name of the collection to create the index on.\n * @param {(string|object)} fieldOrSpec Defines the index.\n * @param {Object} [options] Optional settings. See Db.prototype.createIndex for a list of options.\n * @param {Db~resultCallback} [callback] The command result callback.\n */\nfunction createIndexUsingCreateIndexes(db, name, fieldOrSpec, options, callback) {\n  // Build the index\n  const indexParameters = parseIndexOptions(fieldOrSpec);\n  // Generate the index name\n  const indexName = typeof options.name === 'string' ? options.name : indexParameters.name;\n  // Set up the index\n  const indexes = [{ name: indexName, key: indexParameters.fieldHash }];\n  // merge all the options\n  const keysToOmit = Object.keys(indexes[0]).concat([\n    'writeConcern',\n    'w',\n    'wtimeout',\n    'j',\n    'fsync',\n    'readPreference',\n    'session'\n  ]);\n\n  for (let optionName in options) {\n    if (keysToOmit.indexOf(optionName) === -1) {\n      indexes[0][optionName] = options[optionName];\n    }\n  }\n\n  // Get capabilities\n  const capabilities = db.s.topology.capabilities();\n\n  // Did the user pass in a collation, check if our write server supports it\n  if (indexes[0].collation && capabilities && !capabilities.commandsTakeCollation) {\n    // Create a new error\n    const error = new MongoError('server/primary/mongos does not support collation');\n    error.code = 67;\n    // Return the error\n    return callback(error);\n  }\n\n  // Create command, apply write concern to command\n  const cmd = applyWriteConcern({ createIndexes: name, indexes }, { db }, options);\n\n  // ReadPreference primary\n  options.readPreference = ReadPreference.PRIMARY;\n\n  // Build the command\n  executeCommand(db, cmd, options, (err, result) => {\n    if (err) return handleCallback(callback, err, null);\n    if (result.ok === 0) return handleCallback(callback, toError(result), null);\n    // Return the indexName for backward compatibility\n    handleCallback(callback, null, indexName);\n  });\n}\n\n/**\n * Run the createUser command.\n *\n * @param {Db} db The Db instance on which to execute the command.\n * @param {string} username The username of the user to add.\n * @param {string} password The password of the user to add.\n * @param {object} [options] Optional settings. See Db.prototype.addUser for a list of options.\n * @param {Db~resultCallback} [callback] The command result callback\n */\nfunction executeAuthCreateUserCommand(db, username, password, options, callback) {\n  // Special case where there is no password ($external users)\n  if (typeof username === 'string' && password != null && typeof password === 'object') {\n    options = password;\n    password = null;\n  }\n\n  // Unpack all options\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  // Error out if we digestPassword set\n  if (options.digestPassword != null) {\n    return callback(\n      toError(\n        \"The digestPassword option is not supported via add_user. Please use db.command('createUser', ...) instead for this option.\"\n      )\n    );\n  }\n\n  // Get additional values\n  const customData = options.customData != null ? options.customData : {};\n  let roles = Array.isArray(options.roles) ? options.roles : [];\n  const maxTimeMS = typeof options.maxTimeMS === 'number' ? options.maxTimeMS : null;\n\n  // If not roles defined print deprecated message\n  if (roles.length === 0) {\n    console.log('Creating a user without roles is deprecated in MongoDB >= 2.6');\n  }\n\n  // Get the error options\n  const commandOptions = { writeCommand: true };\n  if (options['dbName']) commandOptions.dbName = options['dbName'];\n\n  // Add maxTimeMS to options if set\n  if (maxTimeMS != null) commandOptions.maxTimeMS = maxTimeMS;\n\n  // Check the db name and add roles if needed\n  if (\n    (db.databaseName.toLowerCase() === 'admin' || options.dbName === 'admin') &&\n    !Array.isArray(options.roles)\n  ) {\n    roles = ['root'];\n  } else if (!Array.isArray(options.roles)) {\n    roles = ['dbOwner'];\n  }\n\n  const digestPassword = db.s.topology.lastIsMaster().maxWireVersion >= 7;\n\n  // Build the command to execute\n  let command = {\n    createUser: username,\n    customData: customData,\n    roles: roles,\n    digestPassword\n  };\n\n  // Apply write concern to command\n  command = applyWriteConcern(command, { db }, options);\n\n  let userPassword = password;\n\n  if (!digestPassword) {\n    // Use node md5 generator\n    const md5 = crypto.createHash('md5');\n    // Generate keys used for authentication\n    md5.update(username + ':mongo:' + password);\n    userPassword = md5.digest('hex');\n  }\n\n  // No password\n  if (typeof password === 'string') {\n    command.pwd = userPassword;\n  }\n\n  // Force write using primary\n  commandOptions.readPreference = ReadPreference.primary;\n\n  // Execute the command\n  executeCommand(db, command, commandOptions, (err, result) => {\n    if (err && err.ok === 0 && err.code === undefined)\n      return handleCallback(callback, { code: -5000 }, null);\n    if (err) return handleCallback(callback, err, null);\n    handleCallback(\n      callback,\n      !result.ok ? toError(result) : null,\n      result.ok ? [{ user: username, pwd: '' }] : null\n    );\n  });\n}\n\n/**\n * Run the dropUser command.\n *\n * @param {Db} db The Db instance on which to execute the command.\n * @param {string} username The username of the user to remove.\n * @param {object} [options] Optional settings. See Db.prototype.removeUser for a list of options.\n * @param {Db~resultCallback} [callback] The command result callback\n */\nfunction executeAuthRemoveUserCommand(db, username, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // Did the user destroy the topology\n  if (db.serverConfig && db.serverConfig.isDestroyed())\n    return callback(new MongoError('topology was destroyed'));\n  // Get the error options\n  const commandOptions = { writeCommand: true };\n  if (options['dbName']) commandOptions.dbName = options['dbName'];\n\n  // Get additional values\n  const maxTimeMS = typeof options.maxTimeMS === 'number' ? options.maxTimeMS : null;\n\n  // Add maxTimeMS to options if set\n  if (maxTimeMS != null) commandOptions.maxTimeMS = maxTimeMS;\n\n  // Build the command to execute\n  let command = {\n    dropUser: username\n  };\n\n  // Apply write concern to command\n  command = applyWriteConcern(command, { db }, options);\n\n  // Force write using primary\n  commandOptions.readPreference = ReadPreference.primary;\n\n  // Execute the command\n  executeCommand(db, command, commandOptions, (err, result) => {\n    if (err && !err.ok && err.code === undefined) return handleCallback(callback, { code: -5000 });\n    if (err) return handleCallback(callback, err, null);\n    handleCallback(callback, null, result.ok ? true : false);\n  });\n}\n\nmodule.exports = {\n  addUser,\n  collections,\n  createListener,\n  createIndex,\n  dropCollection,\n  dropDatabase,\n  ensureIndex,\n  evaluate,\n  executeCommand,\n  executeDbAdminCommand,\n  indexInformation,\n  profilingInfo,\n  removeUser,\n  validateDatabaseName\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///109\n");

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n  SYSTEM_NAMESPACE_COLLECTION: 'system.namespaces',\n  SYSTEM_INDEX_COLLECTION: 'system.indexes',\n  SYSTEM_PROFILE_COLLECTION: 'system.profile',\n  SYSTEM_USER_COLLECTION: 'system.users',\n  SYSTEM_COMMAND_COLLECTION: '$cmd',\n  SYSTEM_JS_COLLECTION: 'system.js'\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NvbnN0YW50cy5qcz8wZjJmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgU1lTVEVNX05BTUVTUEFDRV9DT0xMRUNUSU9OOiAnc3lzdGVtLm5hbWVzcGFjZXMnLFxuICBTWVNURU1fSU5ERVhfQ09MTEVDVElPTjogJ3N5c3RlbS5pbmRleGVzJyxcbiAgU1lTVEVNX1BST0ZJTEVfQ09MTEVDVElPTjogJ3N5c3RlbS5wcm9maWxlJyxcbiAgU1lTVEVNX1VTRVJfQ09MTEVDVElPTjogJ3N5c3RlbS51c2VycycsXG4gIFNZU1RFTV9DT01NQU5EX0NPTExFQ1RJT046ICckY21kJyxcbiAgU1lTVEVNX0pTX0NPTExFQ1RJT046ICdzeXN0ZW0uanMnXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///110\n");

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst deprecate = __webpack_require__(12).deprecate;\nconst deprecateOptions = __webpack_require__(86).deprecateOptions;\nconst checkCollectionName = __webpack_require__(86).checkCollectionName;\nconst ObjectID = __webpack_require__(3).BSON.ObjectID;\nconst MongoError = __webpack_require__(3).MongoError;\nconst toError = __webpack_require__(86).toError;\nconst normalizeHintField = __webpack_require__(86).normalizeHintField;\nconst decorateCommand = __webpack_require__(86).decorateCommand;\nconst decorateWithCollation = __webpack_require__(86).decorateWithCollation;\nconst decorateWithReadConcern = __webpack_require__(86).decorateWithReadConcern;\nconst formattedOrderClause = __webpack_require__(86).formattedOrderClause;\nconst ReadPreference = __webpack_require__(3).ReadPreference;\nconst unordered = __webpack_require__(112);\nconst ordered = __webpack_require__(114);\nconst ChangeStream = __webpack_require__(104);\nconst executeLegacyOperation = __webpack_require__(86).executeLegacyOperation;\nconst resolveReadPreference = __webpack_require__(86).resolveReadPreference;\nconst WriteConcern = __webpack_require__(87);\nconst ReadConcern = __webpack_require__(115);\nconst MongoDBNamespace = __webpack_require__(86).MongoDBNamespace;\nconst AggregationCursor = __webpack_require__(116);\nconst CommandCursor = __webpack_require__(117);\n\n// Operations\nconst checkForAtomicOperators = __webpack_require__(108).checkForAtomicOperators;\nconst ensureIndex = __webpack_require__(108).ensureIndex;\nconst group = __webpack_require__(108).group;\nconst parallelCollectionScan = __webpack_require__(108).parallelCollectionScan;\nconst removeDocuments = __webpack_require__(118).removeDocuments;\nconst save = __webpack_require__(108).save;\nconst updateDocuments = __webpack_require__(118).updateDocuments;\n\nconst AggregateOperation = __webpack_require__(119);\nconst BulkWriteOperation = __webpack_require__(121);\nconst CountDocumentsOperation = __webpack_require__(122);\nconst CreateIndexOperation = __webpack_require__(123);\nconst CreateIndexesOperation = __webpack_require__(125);\nconst DeleteManyOperation = __webpack_require__(126);\nconst DeleteOneOperation = __webpack_require__(127);\nconst DistinctOperation = __webpack_require__(128);\nconst DropCollectionOperation = __webpack_require__(129).DropCollectionOperation;\nconst DropIndexOperation = __webpack_require__(130);\nconst DropIndexesOperation = __webpack_require__(131);\nconst EstimatedDocumentCountOperation = __webpack_require__(132);\nconst FindOperation = __webpack_require__(133);\nconst FindOneOperation = __webpack_require__(134);\nconst FindAndModifyOperation = __webpack_require__(135);\nconst FindOneAndDeleteOperation = __webpack_require__(136);\nconst FindOneAndReplaceOperation = __webpack_require__(137);\nconst FindOneAndUpdateOperation = __webpack_require__(138);\nconst GeoHaystackSearchOperation = __webpack_require__(139);\nconst IndexesOperation = __webpack_require__(140);\nconst IndexExistsOperation = __webpack_require__(141);\nconst IndexInformationOperation = __webpack_require__(142);\nconst InsertManyOperation = __webpack_require__(143);\nconst InsertOneOperation = __webpack_require__(144);\nconst IsCappedOperation = __webpack_require__(145);\nconst ListIndexesOperation = __webpack_require__(147);\nconst MapReduceOperation = __webpack_require__(148);\nconst OptionsOperation = __webpack_require__(146);\nconst RenameOperation = __webpack_require__(158);\nconst ReIndexOperation = __webpack_require__(163);\nconst ReplaceOneOperation = __webpack_require__(164);\nconst StatsOperation = __webpack_require__(165);\nconst UpdateManyOperation = __webpack_require__(166);\nconst UpdateOneOperation = __webpack_require__(167);\n\nconst executeOperation = __webpack_require__(83);\n\n/**\n * @fileOverview The **Collection** class is an internal class that embodies a MongoDB collection\n * allowing for insert/update/remove/find and other command operation on that MongoDB collection.\n *\n * **COLLECTION Cannot directly be instantiated**\n * @example\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Create a collection we want to drop later\n *   const col = client.db(dbName).collection('createIndexExample1');\n *   // Show that duplicate records got dropped\n *   col.find({}).toArray(function(err, items) {\n *     test.equal(null, err);\n *     test.equal(4, items.length);\n *     client.close();\n *   });\n * });\n */\n\nconst mergeKeys = ['ignoreUndefined'];\n\n/**\n * Create a new Collection instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @property {string} collectionName Get the collection name.\n * @property {string} namespace Get the full collection namespace.\n * @property {object} writeConcern The current write concern values.\n * @property {object} readConcern The current read concern values.\n * @property {object} hint Get current index hint for collection.\n * @return {Collection} a Collection instance.\n */\nfunction Collection(db, topology, dbName, name, pkFactory, options) {\n  checkCollectionName(name);\n\n  // Unpack variables\n  const internalHint = null;\n  const slaveOk = options == null || options.slaveOk == null ? db.slaveOk : options.slaveOk;\n  const serializeFunctions =\n    options == null || options.serializeFunctions == null\n      ? db.s.options.serializeFunctions\n      : options.serializeFunctions;\n  const raw = options == null || options.raw == null ? db.s.options.raw : options.raw;\n  const promoteLongs =\n    options == null || options.promoteLongs == null\n      ? db.s.options.promoteLongs\n      : options.promoteLongs;\n  const promoteValues =\n    options == null || options.promoteValues == null\n      ? db.s.options.promoteValues\n      : options.promoteValues;\n  const promoteBuffers =\n    options == null || options.promoteBuffers == null\n      ? db.s.options.promoteBuffers\n      : options.promoteBuffers;\n  const collectionHint = null;\n\n  const namespace = new MongoDBNamespace(dbName, name);\n\n  // Get the promiseLibrary\n  const promiseLibrary = options.promiseLibrary || Promise;\n\n  // Set custom primary key factory if provided\n  pkFactory = pkFactory == null ? ObjectID : pkFactory;\n\n  // Internal state\n  this.s = {\n    // Set custom primary key factory if provided\n    pkFactory: pkFactory,\n    // Db\n    db: db,\n    // Topology\n    topology: topology,\n    // Options\n    options: options,\n    // Namespace\n    namespace: namespace,\n    // Read preference\n    readPreference: ReadPreference.fromOptions(options),\n    // SlaveOK\n    slaveOk: slaveOk,\n    // Serialize functions\n    serializeFunctions: serializeFunctions,\n    // Raw\n    raw: raw,\n    // promoteLongs\n    promoteLongs: promoteLongs,\n    // promoteValues\n    promoteValues: promoteValues,\n    // promoteBuffers\n    promoteBuffers: promoteBuffers,\n    // internalHint\n    internalHint: internalHint,\n    // collectionHint\n    collectionHint: collectionHint,\n    // Promise library\n    promiseLibrary: promiseLibrary,\n    // Read Concern\n    readConcern: ReadConcern.fromOptions(options),\n    // Write Concern\n    writeConcern: WriteConcern.fromOptions(options)\n  };\n}\n\nObject.defineProperty(Collection.prototype, 'dbName', {\n  enumerable: true,\n  get: function() {\n    return this.s.namespace.db;\n  }\n});\n\nObject.defineProperty(Collection.prototype, 'collectionName', {\n  enumerable: true,\n  get: function() {\n    return this.s.namespace.collection;\n  }\n});\n\nObject.defineProperty(Collection.prototype, 'namespace', {\n  enumerable: true,\n  get: function() {\n    return this.s.namespace.toString();\n  }\n});\n\nObject.defineProperty(Collection.prototype, 'readConcern', {\n  enumerable: true,\n  get: function() {\n    if (this.s.readConcern == null) {\n      return this.s.db.readConcern;\n    }\n    return this.s.readConcern;\n  }\n});\n\nObject.defineProperty(Collection.prototype, 'readPreference', {\n  enumerable: true,\n  get: function() {\n    if (this.s.readPreference == null) {\n      return this.s.db.readPreference;\n    }\n\n    return this.s.readPreference;\n  }\n});\n\nObject.defineProperty(Collection.prototype, 'writeConcern', {\n  enumerable: true,\n  get: function() {\n    if (this.s.writeConcern == null) {\n      return this.s.db.writeConcern;\n    }\n    return this.s.writeConcern;\n  }\n});\n\n/**\n * @ignore\n */\nObject.defineProperty(Collection.prototype, 'hint', {\n  enumerable: true,\n  get: function() {\n    return this.s.collectionHint;\n  },\n  set: function(v) {\n    this.s.collectionHint = normalizeHintField(v);\n  }\n});\n\nconst DEPRECATED_FIND_OPTIONS = ['maxScan', 'fields', 'snapshot'];\n\n/**\n * Creates a cursor for a query that can be used to iterate over results from MongoDB\n * @method\n * @param {object} [query={}] The cursor query object.\n * @param {object} [options] Optional settings.\n * @param {number} [options.limit=0] Sets the limit of documents returned in the query.\n * @param {(array|object)} [options.sort] Set to sort the documents coming back from the query. Array of indexes, [['a', 1]] etc.\n * @param {object} [options.projection] The fields to return in the query. Object of fields to include or exclude (not both), {'a':1}\n * @param {object} [options.fields] **Deprecated** Use `options.projection` instead\n * @param {number} [options.skip=0] Set to skip N documents ahead in your query (useful for pagination).\n * @param {Object} [options.hint] Tell the query to use specific indexes in the query. Object of indexes to use, {'_id':1}\n * @param {boolean} [options.explain=false] Explain the query instead of returning the data.\n * @param {boolean} [options.snapshot=false] DEPRECATED: Snapshot query.\n * @param {boolean} [options.timeout=false] Specify if the cursor can timeout.\n * @param {boolean} [options.tailable=false] Specify if the cursor is tailable.\n * @param {number} [options.batchSize=1000] Set the batchSize for the getMoreCommand when iterating over the query results.\n * @param {boolean} [options.returnKey=false] Only return the index key.\n * @param {number} [options.maxScan] DEPRECATED: Limit the number of items to scan.\n * @param {number} [options.min] Set index bounds.\n * @param {number} [options.max] Set index bounds.\n * @param {boolean} [options.showDiskLoc=false] Show disk location of results.\n * @param {string} [options.comment] You can put a $comment field on a query to make looking in the profiler logs simpler.\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\n * @param {boolean} [options.promoteLongs=true] Promotes Long values to number if they fit inside the 53 bits resolution.\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {boolean} [options.partial=false] Specify if the cursor should return partial results when querying against a sharded system\n * @param {number} [options.maxTimeMS] Number of milliseconds to wait before aborting the query.\n * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @throws {MongoError}\n * @return {Cursor}\n */\nCollection.prototype.find = deprecateOptions(\n  {\n    name: 'collection.find',\n    deprecatedOptions: DEPRECATED_FIND_OPTIONS,\n    optionsIndex: 1\n  },\n  function(query, options, callback) {\n    if (typeof callback === 'object') {\n      // TODO(MAJOR): throw in the future\n      console.warn('Third parameter to `find()` must be a callback or undefined');\n    }\n\n    let selector = query;\n    // figuring out arguments\n    if (typeof callback !== 'function') {\n      if (typeof options === 'function') {\n        callback = options;\n        options = undefined;\n      } else if (options == null) {\n        callback = typeof selector === 'function' ? selector : undefined;\n        selector = typeof selector === 'object' ? selector : undefined;\n      }\n    }\n\n    // Ensure selector is not null\n    selector = selector == null ? {} : selector;\n    // Validate correctness off the selector\n    const object = selector;\n    if (Buffer.isBuffer(object)) {\n      const object_size = object[0] | (object[1] << 8) | (object[2] << 16) | (object[3] << 24);\n      if (object_size !== object.length) {\n        const error = new Error(\n          'query selector raw message size does not match message header size [' +\n            object.length +\n            '] != [' +\n            object_size +\n            ']'\n        );\n        error.name = 'MongoError';\n        throw error;\n      }\n    }\n\n    // Check special case where we are using an objectId\n    if (selector != null && selector._bsontype === 'ObjectID') {\n      selector = { _id: selector };\n    }\n\n    if (!options) options = {};\n\n    let projection = options.projection || options.fields;\n\n    if (projection && !Buffer.isBuffer(projection) && Array.isArray(projection)) {\n      projection = projection.length\n        ? projection.reduce((result, field) => {\n            result[field] = 1;\n            return result;\n          }, {})\n        : { _id: 1 };\n    }\n\n    // Make a shallow copy of options\n    let newOptions = Object.assign({}, options);\n\n    // Make a shallow copy of the collection options\n    for (let key in this.s.options) {\n      if (mergeKeys.indexOf(key) !== -1) {\n        newOptions[key] = this.s.options[key];\n      }\n    }\n\n    // Unpack options\n    newOptions.skip = options.skip ? options.skip : 0;\n    newOptions.limit = options.limit ? options.limit : 0;\n    newOptions.raw = typeof options.raw === 'boolean' ? options.raw : this.s.raw;\n    newOptions.hint =\n      options.hint != null ? normalizeHintField(options.hint) : this.s.collectionHint;\n    newOptions.timeout = typeof options.timeout === 'undefined' ? undefined : options.timeout;\n    // // If we have overridden slaveOk otherwise use the default db setting\n    newOptions.slaveOk = options.slaveOk != null ? options.slaveOk : this.s.db.slaveOk;\n\n    // Add read preference if needed\n    newOptions.readPreference = resolveReadPreference(this, newOptions);\n\n    // Set slave ok to true if read preference different from primary\n    if (\n      newOptions.readPreference != null &&\n      (newOptions.readPreference !== 'primary' || newOptions.readPreference.mode !== 'primary')\n    ) {\n      newOptions.slaveOk = true;\n    }\n\n    // Ensure the query is an object\n    if (selector != null && typeof selector !== 'object') {\n      throw MongoError.create({ message: 'query selector must be an object', driver: true });\n    }\n\n    // Build the find command\n    const findCommand = {\n      find: this.s.namespace.toString(),\n      limit: newOptions.limit,\n      skip: newOptions.skip,\n      query: selector\n    };\n\n    // Ensure we use the right await data option\n    if (typeof newOptions.awaitdata === 'boolean') {\n      newOptions.awaitData = newOptions.awaitdata;\n    }\n\n    // Translate to new command option noCursorTimeout\n    if (typeof newOptions.timeout === 'boolean') newOptions.noCursorTimeout = newOptions.timeout;\n\n    decorateCommand(findCommand, newOptions, ['session', 'collation']);\n\n    if (projection) findCommand.fields = projection;\n\n    // Add db object to the new options\n    newOptions.db = this.s.db;\n\n    // Add the promise library\n    newOptions.promiseLibrary = this.s.promiseLibrary;\n\n    // Set raw if available at collection level\n    if (newOptions.raw == null && typeof this.s.raw === 'boolean') newOptions.raw = this.s.raw;\n    // Set promoteLongs if available at collection level\n    if (newOptions.promoteLongs == null && typeof this.s.promoteLongs === 'boolean')\n      newOptions.promoteLongs = this.s.promoteLongs;\n    if (newOptions.promoteValues == null && typeof this.s.promoteValues === 'boolean')\n      newOptions.promoteValues = this.s.promoteValues;\n    if (newOptions.promoteBuffers == null && typeof this.s.promoteBuffers === 'boolean')\n      newOptions.promoteBuffers = this.s.promoteBuffers;\n\n    // Sort options\n    if (findCommand.sort) {\n      findCommand.sort = formattedOrderClause(findCommand.sort);\n    }\n\n    // Set the readConcern\n    decorateWithReadConcern(findCommand, this, options);\n\n    // Decorate find command with collation options\n    try {\n      decorateWithCollation(findCommand, this, options);\n    } catch (err) {\n      if (typeof callback === 'function') return callback(err, null);\n      throw err;\n    }\n\n    const cursor = this.s.topology.cursor(\n      new FindOperation(this, this.s.namespace, findCommand, newOptions),\n      newOptions\n    );\n\n    // TODO: remove this when NODE-2074 is resolved\n    if (typeof callback === 'function') {\n      callback(null, cursor);\n      return;\n    }\n\n    return cursor;\n  }\n);\n\n/**\n * Inserts a single document into MongoDB. If documents passed in do not contain the **_id** field,\n * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n * can be overridden by setting the **forceServerObjectId** flag.\n *\n * @method\n * @param {object} doc Document to insert.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.\n * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~insertOneWriteOpCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.insertOne = function(doc, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // Add ignoreUndefined\n  if (this.s.options.ignoreUndefined) {\n    options = Object.assign({}, options);\n    options.ignoreUndefined = this.s.options.ignoreUndefined;\n  }\n\n  const insertOneOperation = new InsertOneOperation(this, doc, options);\n\n  return executeOperation(this.s.topology, insertOneOperation, callback);\n};\n\n/**\n * Inserts an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n * can be overridden by setting the **forceServerObjectId** flag.\n *\n * @method\n * @param {object[]} docs Documents to insert.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.\n * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n * @param {boolean} [options.ordered=true] If true, when an insert fails, don't execute the remaining writes. If false, continue with remaining inserts when one fails.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~insertWriteOpCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.insertMany = function(docs, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options ? Object.assign({}, options) : { ordered: true };\n\n  const insertManyOperation = new InsertManyOperation(this, docs, options);\n\n  return executeOperation(this.s.topology, insertManyOperation, callback);\n};\n\n/**\n * @typedef {Object} Collection~BulkWriteOpResult\n * @property {number} insertedCount Number of documents inserted.\n * @property {number} matchedCount Number of documents matched for update.\n * @property {number} modifiedCount Number of documents modified.\n * @property {number} deletedCount Number of documents deleted.\n * @property {number} upsertedCount Number of documents upserted.\n * @property {object} insertedIds Inserted document generated Id's, hash key is the index of the originating operation\n * @property {object} upsertedIds Upserted document generated Id's, hash key is the index of the originating operation\n * @property {object} result The command result object.\n */\n\n/**\n * The callback format for inserts\n * @callback Collection~bulkWriteOpCallback\n * @param {BulkWriteError} error An error instance representing the error during the execution.\n * @param {Collection~BulkWriteOpResult} result The result object if the command was executed successfully.\n */\n\n/**\n * Perform a bulkWrite operation without a fluent API\n *\n * Legal operation types are\n *\n *  { insertOne: { document: { a: 1 } } }\n *\n *  { updateOne: { filter: {a:2}, update: {$set: {a:2}}, upsert:true } }\n *\n *  { updateMany: { filter: {a:2}, update: {$set: {a:2}}, upsert:true } }\n *\n *  { updateMany: { filter: {}, update: {$set: {\"a.$[i].x\": 5}}, arrayFilters: [{ \"i.x\": 5 }]} }\n *\n *  { deleteOne: { filter: {c:1} } }\n *\n *  { deleteMany: { filter: {c:1} } }\n *\n *  { replaceOne: { filter: {c:3}, replacement: {c:4}, upsert:true}}\n *\n * If documents passed in do not contain the **_id** field,\n * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n * can be overridden by setting the **forceServerObjectId** flag.\n *\n * @method\n * @param {object[]} operations Bulk operations to perform.\n * @param {object} [options] Optional settings.\n * @param {object[]} [options.arrayFilters] Determines which array elements to modify for update operation in MongoDB 3.6 or higher.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n * @param {boolean} [options.ordered=true] Execute write operation in ordered or unordered fashion.\n * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~bulkWriteOpCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.bulkWrite = function(operations, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || { ordered: true };\n\n  if (!Array.isArray(operations)) {\n    throw MongoError.create({ message: 'operations must be an array of documents', driver: true });\n  }\n\n  const bulkWriteOperation = new BulkWriteOperation(this, operations, options);\n\n  return executeOperation(this.s.topology, bulkWriteOperation, callback);\n};\n\n/**\n * @typedef {Object} Collection~WriteOpResult\n * @property {object[]} ops All the documents inserted using insertOne/insertMany/replaceOne. Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany\n * @property {object} connection The connection object used for the operation.\n * @property {object} result The command result object.\n */\n\n/**\n * The callback format for inserts\n * @callback Collection~writeOpCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Collection~WriteOpResult} result The result object if the command was executed successfully.\n */\n\n/**\n * @typedef {Object} Collection~insertWriteOpResult\n * @property {Number} insertedCount The total amount of documents inserted.\n * @property {object[]} ops All the documents inserted using insertOne/insertMany/replaceOne. Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany\n * @property {Object.<Number, ObjectId>} insertedIds Map of the index of the inserted document to the id of the inserted document.\n * @property {object} connection The connection object used for the operation.\n * @property {object} result The raw command result object returned from MongoDB (content might vary by server version).\n * @property {Number} result.ok Is 1 if the command executed correctly.\n * @property {Number} result.n The total count of documents inserted.\n */\n\n/**\n * @typedef {Object} Collection~insertOneWriteOpResult\n * @property {Number} insertedCount The total amount of documents inserted.\n * @property {object[]} ops All the documents inserted using insertOne/insertMany/replaceOne. Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany\n * @property {ObjectId} insertedId The driver generated ObjectId for the insert operation.\n * @property {object} connection The connection object used for the operation.\n * @property {object} result The raw command result object returned from MongoDB (content might vary by server version).\n * @property {Number} result.ok Is 1 if the command executed correctly.\n * @property {Number} result.n The total count of documents inserted.\n */\n\n/**\n * The callback format for inserts\n * @callback Collection~insertWriteOpCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Collection~insertWriteOpResult} result The result object if the command was executed successfully.\n */\n\n/**\n * The callback format for inserts\n * @callback Collection~insertOneWriteOpCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Collection~insertOneWriteOpResult} result The result object if the command was executed successfully.\n */\n\n/**\n * Inserts a single document or a an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n * can be overridden by setting the **forceServerObjectId** flag.\n *\n * @method\n * @param {(object|object[])} docs Documents to insert.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.\n * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~insertWriteOpCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use insertOne, insertMany or bulkWrite\n */\nCollection.prototype.insert = deprecate(function(docs, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || { ordered: false };\n  docs = !Array.isArray(docs) ? [docs] : docs;\n\n  if (options.keepGoing === true) {\n    options.ordered = false;\n  }\n\n  return this.insertMany(docs, options, callback);\n}, 'collection.insert is deprecated. Use insertOne, insertMany or bulkWrite instead.');\n\n/**\n * @typedef {Object} Collection~updateWriteOpResult\n * @property {Object} result The raw result returned from MongoDB. Will vary depending on server version.\n * @property {Number} result.ok Is 1 if the command executed correctly.\n * @property {Number} result.n The total count of documents scanned.\n * @property {Number} result.nModified The total count of documents modified.\n * @property {Object} connection The connection object used for the operation.\n * @property {Number} matchedCount The number of documents that matched the filter.\n * @property {Number} modifiedCount The number of documents that were modified.\n * @property {Number} upsertedCount The number of documents upserted.\n * @property {Object} upsertedId The upserted id.\n * @property {ObjectId} upsertedId._id The upserted _id returned from the server.\n * @property {Object} message\n * @property {object[]} [ops] In a response to {@link Collection#replaceOne replaceOne}, contains the new value of the document on the server. This is the same document that was originally passed in, and is only here for legacy purposes.\n */\n\n/**\n * The callback format for inserts\n * @callback Collection~updateWriteOpCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Collection~updateWriteOpResult} result The result object if the command was executed successfully.\n */\n\n/**\n * Update a single document in a collection\n * @method\n * @param {object} filter The Filter used to select the document to update\n * @param {object} update The update operations to be applied to the document\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.upsert=false] Update operation is an upsert.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n * @param {Array} [options.arrayFilters] optional list of array filters referenced in filtered positional operators\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~updateWriteOpCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.updateOne = function(filter, update, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const err = checkForAtomicOperators(update);\n  if (err) {\n    if (typeof callback === 'function') return callback(err);\n    return this.s.promiseLibrary.reject(err);\n  }\n\n  options = Object.assign({}, options);\n\n  // Add ignoreUndefined\n  if (this.s.options.ignoreUndefined) {\n    options = Object.assign({}, options);\n    options.ignoreUndefined = this.s.options.ignoreUndefined;\n  }\n\n  const updateOneOperation = new UpdateOneOperation(this, filter, update, options);\n\n  return executeOperation(this.s.topology, updateOneOperation, callback);\n};\n\n/**\n * Replace a document in a collection with another document\n * @method\n * @param {object} filter The Filter used to select the document to replace\n * @param {object} doc The Document that replaces the matching document\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.upsert=false] Update operation is an upsert.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~updateWriteOpCallback} [callback] The command result callback\n * @return {Promise<Collection~updateWriteOpResult>} returns Promise if no callback passed\n */\nCollection.prototype.replaceOne = function(filter, doc, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = Object.assign({}, options);\n\n  // Add ignoreUndefined\n  if (this.s.options.ignoreUndefined) {\n    options = Object.assign({}, options);\n    options.ignoreUndefined = this.s.options.ignoreUndefined;\n  }\n\n  const replaceOneOperation = new ReplaceOneOperation(this, filter, doc, options);\n\n  return executeOperation(this.s.topology, replaceOneOperation, callback);\n};\n\n/**\n * Update multiple documents in a collection\n * @method\n * @param {object} filter The Filter used to select the documents to update\n * @param {object} update The update operations to be applied to the documents\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.upsert=false] Update operation is an upsert.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {Array} [options.arrayFilters] optional list of array filters referenced in filtered positional operators\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~updateWriteOpCallback} [callback] The command result callback\n * @return {Promise<Collection~updateWriteOpResult>} returns Promise if no callback passed\n */\nCollection.prototype.updateMany = function(filter, update, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const err = checkForAtomicOperators(update);\n  if (err) {\n    if (typeof callback === 'function') return callback(err);\n    return this.s.promiseLibrary.reject(err);\n  }\n\n  options = Object.assign({}, options);\n\n  // Add ignoreUndefined\n  if (this.s.options.ignoreUndefined) {\n    options = Object.assign({}, options);\n    options.ignoreUndefined = this.s.options.ignoreUndefined;\n  }\n\n  const updateManyOperation = new UpdateManyOperation(this, filter, update, options);\n\n  return executeOperation(this.s.topology, updateManyOperation, callback);\n};\n\n/**\n * Updates documents.\n * @method\n * @param {object} selector The selector for the update operation.\n * @param {object} update The update operations to be applied to the documents\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.upsert=false] Update operation is an upsert.\n * @param {boolean} [options.multi=false] Update one/all documents with operation.\n * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n * @param {Array} [options.arrayFilters] optional list of array filters referenced in filtered positional operators\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~writeOpCallback} [callback] The command result callback\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n * @deprecated use updateOne, updateMany or bulkWrite\n */\nCollection.prototype.update = deprecate(function(selector, update, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // Add ignoreUndefined\n  if (this.s.options.ignoreUndefined) {\n    options = Object.assign({}, options);\n    options.ignoreUndefined = this.s.options.ignoreUndefined;\n  }\n\n  return executeLegacyOperation(this.s.topology, updateDocuments, [\n    this,\n    selector,\n    update,\n    options,\n    callback\n  ]);\n}, 'collection.update is deprecated. Use updateOne, updateMany, or bulkWrite instead.');\n\n/**\n * @typedef {Object} Collection~deleteWriteOpResult\n * @property {Object} result The raw result returned from MongoDB. Will vary depending on server version.\n * @property {Number} result.ok Is 1 if the command executed correctly.\n * @property {Number} result.n The total count of documents deleted.\n * @property {Object} connection The connection object used for the operation.\n * @property {Number} deletedCount The number of documents deleted.\n */\n\n/**\n * The callback format for inserts\n * @callback Collection~deleteWriteOpCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Collection~deleteWriteOpResult} result The result object if the command was executed successfully.\n */\n\n/**\n * Delete a document from a collection\n * @method\n * @param {object} filter The Filter used to select the document to remove\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~deleteWriteOpCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.deleteOne = function(filter, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = Object.assign({}, options);\n\n  // Add ignoreUndefined\n  if (this.s.options.ignoreUndefined) {\n    options = Object.assign({}, options);\n    options.ignoreUndefined = this.s.options.ignoreUndefined;\n  }\n\n  const deleteOneOperation = new DeleteOneOperation(this, filter, options);\n\n  return executeOperation(this.s.topology, deleteOneOperation, callback);\n};\n\nCollection.prototype.removeOne = Collection.prototype.deleteOne;\n\n/**\n * Delete multiple documents from a collection\n * @method\n * @param {object} filter The Filter used to select the documents to remove\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~deleteWriteOpCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.deleteMany = function(filter, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = Object.assign({}, options);\n\n  // Add ignoreUndefined\n  if (this.s.options.ignoreUndefined) {\n    options = Object.assign({}, options);\n    options.ignoreUndefined = this.s.options.ignoreUndefined;\n  }\n\n  const deleteManyOperation = new DeleteManyOperation(this, filter, options);\n\n  return executeOperation(this.s.topology, deleteManyOperation, callback);\n};\n\nCollection.prototype.removeMany = Collection.prototype.deleteMany;\n\n/**\n * Remove documents.\n * @method\n * @param {object} selector The selector for the update operation.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.single=false] Removes the first document found.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~writeOpCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n * @deprecated use deleteOne, deleteMany or bulkWrite\n */\nCollection.prototype.remove = deprecate(function(selector, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // Add ignoreUndefined\n  if (this.s.options.ignoreUndefined) {\n    options = Object.assign({}, options);\n    options.ignoreUndefined = this.s.options.ignoreUndefined;\n  }\n\n  return executeLegacyOperation(this.s.topology, removeDocuments, [\n    this,\n    selector,\n    options,\n    callback\n  ]);\n}, 'collection.remove is deprecated. Use deleteOne, deleteMany, or bulkWrite instead.');\n\n/**\n * Save a document. Simple full document replacement function. Not recommended for efficiency, use atomic\n * operators and update instead for more efficient operations.\n * @method\n * @param {object} doc Document to save\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~writeOpCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n * @deprecated use insertOne, insertMany, updateOne or updateMany\n */\nCollection.prototype.save = deprecate(function(doc, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // Add ignoreUndefined\n  if (this.s.options.ignoreUndefined) {\n    options = Object.assign({}, options);\n    options.ignoreUndefined = this.s.options.ignoreUndefined;\n  }\n\n  return executeLegacyOperation(this.s.topology, save, [this, doc, options, callback]);\n}, 'collection.save is deprecated. Use insertOne, insertMany, updateOne, or updateMany instead.');\n\n/**\n * The callback format for results\n * @callback Collection~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {object} result The result object if the command was executed successfully.\n */\n\n/**\n * The callback format for an aggregation call\n * @callback Collection~aggregationCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {AggregationCursor} cursor The cursor if the aggregation command was executed successfully.\n */\n\n/**\n * Fetches the first document that matches the query\n * @method\n * @param {object} query Query for find Operation\n * @param {object} [options] Optional settings.\n * @param {number} [options.limit=0] Sets the limit of documents returned in the query.\n * @param {(array|object)} [options.sort] Set to sort the documents coming back from the query. Array of indexes, [['a', 1]] etc.\n * @param {object} [options.projection] The fields to return in the query. Object of fields to include or exclude (not both), {'a':1}\n * @param {object} [options.fields] **Deprecated** Use `options.projection` instead\n * @param {number} [options.skip=0] Set to skip N documents ahead in your query (useful for pagination).\n * @param {Object} [options.hint] Tell the query to use specific indexes in the query. Object of indexes to use, {'_id':1}\n * @param {boolean} [options.explain=false] Explain the query instead of returning the data.\n * @param {boolean} [options.snapshot=false] DEPRECATED: Snapshot query.\n * @param {boolean} [options.timeout=false] Specify if the cursor can timeout.\n * @param {boolean} [options.tailable=false] Specify if the cursor is tailable.\n * @param {number} [options.batchSize=1] Set the batchSize for the getMoreCommand when iterating over the query results.\n * @param {boolean} [options.returnKey=false] Only return the index key.\n * @param {number} [options.maxScan] DEPRECATED: Limit the number of items to scan.\n * @param {number} [options.min] Set index bounds.\n * @param {number} [options.max] Set index bounds.\n * @param {boolean} [options.showDiskLoc=false] Show disk location of results.\n * @param {string} [options.comment] You can put a $comment field on a query to make looking in the profiler logs simpler.\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\n * @param {boolean} [options.promoteLongs=true] Promotes Long values to number if they fit inside the 53 bits resolution.\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {boolean} [options.partial=false] Specify if the cursor should return partial results when querying against a sharded system\n * @param {number} [options.maxTimeMS] Number of milliseconds to wait before aborting the query.\n * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.findOne = deprecateOptions(\n  {\n    name: 'collection.find',\n    deprecatedOptions: DEPRECATED_FIND_OPTIONS,\n    optionsIndex: 1\n  },\n  function(query, options, callback) {\n    if (typeof callback === 'object') {\n      // TODO(MAJOR): throw in the future\n      console.warn('Third parameter to `findOne()` must be a callback or undefined');\n    }\n\n    if (typeof query === 'function') (callback = query), (query = {}), (options = {});\n    if (typeof options === 'function') (callback = options), (options = {});\n    query = query || {};\n    options = options || {};\n\n    const findOneOperation = new FindOneOperation(this, query, options);\n\n    return executeOperation(this.s.topology, findOneOperation, callback);\n  }\n);\n\n/**\n * The callback format for the collection method, must be used if strict is specified\n * @callback Collection~collectionResultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Collection} collection The collection instance.\n */\n\n/**\n * Rename the collection.\n *\n * @method\n * @param {string} newName New name of of the collection.\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.dropTarget=false] Drop the target name collection if it previously exists.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~collectionResultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.rename = function(newName, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = Object.assign({}, options, { readPreference: ReadPreference.PRIMARY });\n\n  const renameOperation = new RenameOperation(this, newName, options);\n\n  return executeOperation(this.s.topology, renameOperation, callback);\n};\n\n/**\n * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n *\n * @method\n * @param {object} [options] Optional settings.\n * @param {WriteConcern} [options.writeConcern] A full WriteConcern object\n * @param {(number|string)} [options.w] The write concern\n * @param {number} [options.wtimeout] The write concern timeout\n * @param {boolean} [options.j] The journal write concern\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.drop = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const dropCollectionOperation = new DropCollectionOperation(\n    this.s.db,\n    this.collectionName,\n    options\n  );\n\n  return executeOperation(this.s.topology, dropCollectionOperation, callback);\n};\n\n/**\n * Returns the options of the collection.\n *\n * @method\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.options = function(opts, callback) {\n  if (typeof opts === 'function') (callback = opts), (opts = {});\n  opts = opts || {};\n\n  const optionsOperation = new OptionsOperation(this, opts);\n\n  return executeOperation(this.s.topology, optionsOperation, callback);\n};\n\n/**\n * Returns if the collection is a capped collection\n *\n * @method\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.isCapped = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const isCappedOperation = new IsCappedOperation(this, options);\n\n  return executeOperation(this.s.topology, isCappedOperation, callback);\n};\n\n/**\n * Creates an index on the db and collection collection.\n * @method\n * @param {(string|array|object)} fieldOrSpec Defines the index.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.unique=false] Creates an unique index.\n * @param {boolean} [options.sparse=false] Creates a sparse index.\n * @param {boolean} [options.background=false] Creates the index in the background, yielding whenever possible.\n * @param {boolean} [options.dropDups=false] A unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value\n * @param {number} [options.min] For geospatial indexes set the lower bound for the co-ordinates.\n * @param {number} [options.max] For geospatial indexes set the high bound for the co-ordinates.\n * @param {number} [options.v] Specify the format version of the indexes.\n * @param {number} [options.expireAfterSeconds] Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)\n * @param {string} [options.name] Override the autogenerated index name (useful if the resulting name is larger than 128 bytes)\n * @param {object} [options.partialFilterExpression] Creates a partial index based on the given filter object (MongoDB 3.2 or higher)\n * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n * @example\n * const collection = client.db('foo').collection('bar');\n *\n * await collection.createIndex({ a: 1, b: -1 });\n *\n * // Alternate syntax for { c: 1, d: -1 } that ensures order of indexes\n * await collection.createIndex([ [c, 1], [d, -1] ]);\n *\n * // Equivalent to { e: 1 }\n * await collection.createIndex('e');\n *\n * // Equivalent to { f: 1, g: 1 }\n * await collection.createIndex(['f', 'g'])\n *\n * // Equivalent to { h: 1, i: -1 }\n * await collection.createIndex([ { h: 1 }, { i: -1 } ]);\n *\n * // Equivalent to { j: 1, k: -1, l: 2d }\n * await collection.createIndex(['j', ['k', -1], { l: '2d' }])\n */\nCollection.prototype.createIndex = function(fieldOrSpec, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const createIndexOperation = new CreateIndexOperation(\n    this.s.db,\n    this.collectionName,\n    fieldOrSpec,\n    options\n  );\n\n  return executeOperation(this.s.topology, createIndexOperation, callback);\n};\n\n/**\n * @typedef {object} Collection~IndexDefinition\n * @description A definition for an index. Used by the createIndex command.\n * @see https://docs.mongodb.com/manual/reference/command/createIndexes/\n */\n\n/**\n * Creates multiple indexes in the collection, this method is only supported for\n * MongoDB 2.6 or higher. Earlier version of MongoDB will throw a command not supported\n * error.\n *\n * **Note**: Unlike {@link Collection#createIndex createIndex}, this function takes in raw index specifications.\n * Index specifications are defined {@link http://docs.mongodb.org/manual/reference/command/createIndexes/ here}.\n *\n * @method\n * @param {Collection~IndexDefinition[]} indexSpecs An array of index specifications to be created\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n * @example\n * const collection = client.db('foo').collection('bar');\n * await collection.createIndexes([\n *   // Simple index on field fizz\n *   {\n *     key: { fizz: 1 },\n *   }\n *   // wildcard index\n *   {\n *     key: { '$**': 1 }\n *   },\n *   // named index on darmok and jalad\n *   {\n *     key: { darmok: 1, jalad: -1 }\n *     name: 'tanagra'\n *   }\n * ]);\n */\nCollection.prototype.createIndexes = function(indexSpecs, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n\n  options = options ? Object.assign({}, options) : {};\n  if (typeof options.maxTimeMS !== 'number') delete options.maxTimeMS;\n\n  const createIndexesOperation = new CreateIndexesOperation(this, indexSpecs, options);\n\n  return executeOperation(this.s.topology, createIndexesOperation, callback);\n};\n\n/**\n * Drops an index from this collection.\n * @method\n * @param {string} indexName Name of the index to drop.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {number} [options.maxTimeMS] Number of milliseconds to wait before aborting the query.\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.dropIndex = function(indexName, options, callback) {\n  const args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n\n  options = args.length ? args.shift() || {} : {};\n  // Run only against primary\n  options.readPreference = ReadPreference.PRIMARY;\n\n  const dropIndexOperation = new DropIndexOperation(this, indexName, options);\n\n  return executeOperation(this.s.topology, dropIndexOperation, callback);\n};\n\n/**\n * Drops all indexes from this collection.\n * @method\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {number} [options.maxTimeMS] Number of milliseconds to wait before aborting the query.\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.dropIndexes = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options ? Object.assign({}, options) : {};\n\n  if (typeof options.maxTimeMS !== 'number') delete options.maxTimeMS;\n\n  const dropIndexesOperation = new DropIndexesOperation(this, options);\n\n  return executeOperation(this.s.topology, dropIndexesOperation, callback);\n};\n\n/**\n * Drops all indexes from this collection.\n * @method\n * @deprecated use dropIndexes\n * @param {Collection~resultCallback} callback The command result callback\n * @return {Promise} returns Promise if no [callback] passed\n */\nCollection.prototype.dropAllIndexes = deprecate(\n  Collection.prototype.dropIndexes,\n  'collection.dropAllIndexes is deprecated. Use dropIndexes instead.'\n);\n\n/**\n * Reindex all indexes on the collection\n * Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n * @method\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.reIndex = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const reIndexOperation = new ReIndexOperation(this, options);\n\n  return executeOperation(this.s.topology, reIndexOperation, callback);\n};\n\n/**\n * Get the list of all indexes information for the collection.\n *\n * @method\n * @param {object} [options] Optional settings.\n * @param {number} [options.batchSize=1000] The batchSize for the returned command cursor or if pre 2.8 the systems batch collection\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @return {CommandCursor}\n */\nCollection.prototype.listIndexes = function(options) {\n  const cursor = new CommandCursor(\n    this.s.topology,\n    new ListIndexesOperation(this, options),\n    options\n  );\n\n  return cursor;\n};\n\n/**\n * Ensures that an index exists, if it does not it creates it\n * @method\n * @deprecated use createIndexes instead\n * @param {(string|object)} fieldOrSpec Defines the index.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.unique=false] Creates an unique index.\n * @param {boolean} [options.sparse=false] Creates a sparse index.\n * @param {boolean} [options.background=false] Creates the index in the background, yielding whenever possible.\n * @param {boolean} [options.dropDups=false] A unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value\n * @param {number} [options.min] For geospatial indexes set the lower bound for the co-ordinates.\n * @param {number} [options.max] For geospatial indexes set the high bound for the co-ordinates.\n * @param {number} [options.v] Specify the format version of the indexes.\n * @param {number} [options.expireAfterSeconds] Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)\n * @param {number} [options.name] Override the autogenerated index name (useful if the resulting name is larger than 128 bytes)\n * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.ensureIndex = deprecate(function(fieldOrSpec, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeLegacyOperation(this.s.topology, ensureIndex, [\n    this,\n    fieldOrSpec,\n    options,\n    callback\n  ]);\n}, 'collection.ensureIndex is deprecated. Use createIndexes instead.');\n\n/**\n * Checks if one or more indexes exist on the collection, fails on first non-existing index\n * @method\n * @param {(string|array)} indexes One or more index names to check.\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.indexExists = function(indexes, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const indexExistsOperation = new IndexExistsOperation(this, indexes, options);\n\n  return executeOperation(this.s.topology, indexExistsOperation, callback);\n};\n\n/**\n * Retrieves this collections index info.\n * @method\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.full=false] Returns the full raw index information.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.indexInformation = function(options, callback) {\n  const args = Array.prototype.slice.call(arguments, 0);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  options = args.length ? args.shift() || {} : {};\n\n  const indexInformationOperation = new IndexInformationOperation(\n    this.s.db,\n    this.collectionName,\n    options\n  );\n\n  return executeOperation(this.s.topology, indexInformationOperation, callback);\n};\n\n/**\n * The callback format for results\n * @callback Collection~countCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {number} result The count of documents that matched the query.\n */\n\n/**\n * An estimated count of matching documents in the db to a query.\n *\n * **NOTE:** This method has been deprecated, since it does not provide an accurate count of the documents\n * in a collection. To obtain an accurate count of documents in the collection, use {@link Collection#countDocuments countDocuments}.\n * To obtain an estimated count of all documents in the collection, use {@link Collection#estimatedDocumentCount estimatedDocumentCount}.\n *\n * @method\n * @param {object} [query={}] The query for the count.\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.limit] The limit of documents to count.\n * @param {boolean} [options.skip] The number of documents to skip for the count.\n * @param {string} [options.hint] An index name hint for the query.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {number} [options.maxTimeMS] Number of milliseconds to wait before aborting the query.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~countCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n * @deprecated use {@link Collection#countDocuments countDocuments} or {@link Collection#estimatedDocumentCount estimatedDocumentCount} instead\n */\nCollection.prototype.count = deprecate(function(query, options, callback) {\n  const args = Array.prototype.slice.call(arguments, 0);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  query = args.length ? args.shift() || {} : {};\n  options = args.length ? args.shift() || {} : {};\n\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeOperation(\n    this.s.topology,\n    new EstimatedDocumentCountOperation(this, query, options),\n    callback\n  );\n}, 'collection.count is deprecated, and will be removed in a future version.' +\n  ' Use Collection.countDocuments or Collection.estimatedDocumentCount instead');\n\n/**\n * Gets an estimate of the count of documents in a collection using collection metadata.\n *\n * @method\n * @param {object} [options] Optional settings.\n * @param {number} [options.maxTimeMS] The maximum amount of time to allow the operation to run.\n * @param {Collection~countCallback} [callback] The command result callback.\n * @return {Promise} returns Promise if no callback passed.\n */\nCollection.prototype.estimatedDocumentCount = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const estimatedDocumentCountOperation = new EstimatedDocumentCountOperation(this, options);\n\n  return executeOperation(this.s.topology, estimatedDocumentCountOperation, callback);\n};\n\n/**\n * Gets the number of documents matching the filter.\n * For a fast count of the total documents in a collection see {@link Collection#estimatedDocumentCount estimatedDocumentCount}.\n * **Note**: When migrating from {@link Collection#count count} to {@link Collection#countDocuments countDocuments}\n * the following query operators must be replaced:\n *\n * | Operator | Replacement |\n * | -------- | ----------- |\n * | `$where`   | [`$expr`][1] |\n * | `$near`    | [`$geoWithin`][2] with [`$center`][3] |\n * | `$nearSphere` | [`$geoWithin`][2] with [`$centerSphere`][4] |\n *\n * [1]: https://docs.mongodb.com/manual/reference/operator/query/expr/\n * [2]: https://docs.mongodb.com/manual/reference/operator/query/geoWithin/\n * [3]: https://docs.mongodb.com/manual/reference/operator/query/center/#op._S_center\n * [4]: https://docs.mongodb.com/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n *\n * @param {object} [query] the query for the count\n * @param {object} [options] Optional settings.\n * @param {object} [options.collation] Specifies a collation.\n * @param {string|object} [options.hint] The index to use.\n * @param {number} [options.limit] The maximum number of document to count.\n * @param {number} [options.maxTimeMS] The maximum amount of time to allow the operation to run.\n * @param {number} [options.skip] The number of documents to skip before counting.\n * @param {Collection~countCallback} [callback] The command result callback.\n * @return {Promise} returns Promise if no callback passed.\n * @see https://docs.mongodb.com/manual/reference/operator/query/expr/\n * @see https://docs.mongodb.com/manual/reference/operator/query/geoWithin/\n * @see https://docs.mongodb.com/manual/reference/operator/query/center/#op._S_center\n * @see https://docs.mongodb.com/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n */\n\nCollection.prototype.countDocuments = function(query, options, callback) {\n  const args = Array.prototype.slice.call(arguments, 0);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  query = args.length ? args.shift() || {} : {};\n  options = args.length ? args.shift() || {} : {};\n\n  const countDocumentsOperation = new CountDocumentsOperation(this, query, options);\n\n  return executeOperation(this.s.topology, countDocumentsOperation, callback);\n};\n\n/**\n * The distinct command returns a list of distinct values for the given key across a collection.\n * @method\n * @param {string} key Field of the document to find distinct values for.\n * @param {object} query The query for filtering the set of documents to which we apply the distinct filter.\n * @param {object} [options] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {number} [options.maxTimeMS] Number of milliseconds to wait before aborting the query.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.distinct = function(key, query, options, callback) {\n  const args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  const queryOption = args.length ? args.shift() || {} : {};\n  const optionsOption = args.length ? args.shift() || {} : {};\n\n  const distinctOperation = new DistinctOperation(this, key, queryOption, optionsOption);\n\n  return executeOperation(this.s.topology, distinctOperation, callback);\n};\n\n/**\n * Retrieve all the indexes on the collection.\n * @method\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.indexes = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const indexesOperation = new IndexesOperation(this, options);\n\n  return executeOperation(this.s.topology, indexesOperation, callback);\n};\n\n/**\n * Get all the collection statistics.\n *\n * @method\n * @param {object} [options] Optional settings.\n * @param {number} [options.scale] Divide the returned sizes by scale value.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The collection result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.stats = function(options, callback) {\n  const args = Array.prototype.slice.call(arguments, 0);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  options = args.length ? args.shift() || {} : {};\n\n  const statsOperation = new StatsOperation(this, options);\n\n  return executeOperation(this.s.topology, statsOperation, callback);\n};\n\n/**\n * @typedef {Object} Collection~findAndModifyWriteOpResult\n * @property {object} value Document returned from the `findAndModify` command. If no documents were found, `value` will be `null` by default (`returnOriginal: true`), even if a document was upserted; if `returnOriginal` was false, the upserted document will be returned in that case.\n * @property {object} lastErrorObject The raw lastErrorObject returned from the command. See {@link https://docs.mongodb.com/manual/reference/command/findAndModify/index.html#lasterrorobject|findAndModify command documentation}.\n * @property {Number} ok Is 1 if the command executed correctly.\n */\n\n/**\n * The callback format for inserts\n * @callback Collection~findAndModifyCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Collection~findAndModifyWriteOpResult} result The result object if the command was executed successfully.\n */\n\n/**\n * Find a document and delete it in one atomic operation. Requires a write lock for the duration of the operation.\n *\n * @method\n * @param {object} filter The Filter used to select the document to remove\n * @param {object} [options] Optional settings.\n * @param {object} [options.projection] Limits the fields to return for all matching documents.\n * @param {object} [options.sort] Determines which document the operation modifies if the query selects multiple documents.\n * @param {number} [options.maxTimeMS] The maximum amount of time to allow the query to run.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~findAndModifyCallback} [callback] The collection result callback\n * @return {Promise<Collection~findAndModifyWriteOpResultObject>} returns Promise if no callback passed\n */\nCollection.prototype.findOneAndDelete = function(filter, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // Basic validation\n  if (filter == null || typeof filter !== 'object')\n    throw toError('filter parameter must be an object');\n\n  const findOneAndDeleteOperation = new FindOneAndDeleteOperation(this, filter, options);\n\n  return executeOperation(this.s.topology, findOneAndDeleteOperation, callback);\n};\n\n/**\n * Find a document and replace it in one atomic operation. Requires a write lock for the duration of the operation.\n *\n * @method\n * @param {object} filter The Filter used to select the document to replace\n * @param {object} replacement The Document that replaces the matching document\n * @param {object} [options] Optional settings.\n * @param {object} [options.projection] Limits the fields to return for all matching documents.\n * @param {object} [options.sort] Determines which document the operation modifies if the query selects multiple documents.\n * @param {number} [options.maxTimeMS] The maximum amount of time to allow the query to run.\n * @param {boolean} [options.upsert=false] Upsert the document if it does not exist.\n * @param {boolean} [options.returnOriginal=true] When false, returns the updated document rather than the original. The default is true.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~findAndModifyCallback} [callback] The collection result callback\n * @return {Promise<Collection~findAndModifyWriteOpResultObject>} returns Promise if no callback passed\n */\nCollection.prototype.findOneAndReplace = function(filter, replacement, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // Basic validation\n  if (filter == null || typeof filter !== 'object')\n    throw toError('filter parameter must be an object');\n  if (replacement == null || typeof replacement !== 'object')\n    throw toError('replacement parameter must be an object');\n\n  // Check that there are no atomic operators\n  const keys = Object.keys(replacement);\n\n  if (keys[0] && keys[0][0] === '$') {\n    throw toError('The replacement document must not contain atomic operators.');\n  }\n\n  const findOneAndReplaceOperation = new FindOneAndReplaceOperation(\n    this,\n    filter,\n    replacement,\n    options\n  );\n\n  return executeOperation(this.s.topology, findOneAndReplaceOperation, callback);\n};\n\n/**\n * Find a document and update it in one atomic operation. Requires a write lock for the duration of the operation.\n *\n * @method\n * @param {object} filter The Filter used to select the document to update\n * @param {object} update Update operations to be performed on the document\n * @param {object} [options] Optional settings.\n * @param {object} [options.projection] Limits the fields to return for all matching documents.\n * @param {object} [options.sort] Determines which document the operation modifies if the query selects multiple documents.\n * @param {number} [options.maxTimeMS] The maximum amount of time to allow the query to run.\n * @param {boolean} [options.upsert=false] Upsert the document if it does not exist.\n * @param {boolean} [options.returnOriginal=true] When false, returns the updated document rather than the original. The default is true.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Array} [options.arrayFilters] optional list of array filters referenced in filtered positional operators\n * @param {Collection~findAndModifyCallback} [callback] The collection result callback\n * @return {Promise<Collection~findAndModifyWriteOpResultObject>} returns Promise if no callback passed\n */\nCollection.prototype.findOneAndUpdate = function(filter, update, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // Basic validation\n  if (filter == null || typeof filter !== 'object')\n    throw toError('filter parameter must be an object');\n  if (update == null || typeof update !== 'object')\n    throw toError('update parameter must be an object');\n\n  const err = checkForAtomicOperators(update);\n  if (err) {\n    if (typeof callback === 'function') return callback(err);\n    return this.s.promiseLibrary.reject(err);\n  }\n\n  const findOneAndUpdateOperation = new FindOneAndUpdateOperation(this, filter, update, options);\n\n  return executeOperation(this.s.topology, findOneAndUpdateOperation, callback);\n};\n\n/**\n * Find and update a document.\n * @method\n * @param {object} query Query object to locate the object to modify.\n * @param {array} sort If multiple docs match, choose the first one in the specified sort order as the object to manipulate.\n * @param {object} doc The fields/vals to be updated.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.remove=false] Set to true to remove the object before returning.\n * @param {boolean} [options.upsert=false] Perform an upsert operation.\n * @param {boolean} [options.new=false] Set to true if you want to return the modified object rather than the original. Ignored for remove.\n * @param {object} [options.projection] Object containing the field projection for the result returned from the operation.\n * @param {object} [options.fields] **Deprecated** Use `options.projection` instead\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Array} [options.arrayFilters] optional list of array filters referenced in filtered positional operators\n * @param {Collection~findAndModifyCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n * @deprecated use findOneAndUpdate, findOneAndReplace or findOneAndDelete instead\n */\nCollection.prototype.findAndModify = deprecate(\n  _findAndModify,\n  'collection.findAndModify is deprecated. Use findOneAndUpdate, findOneAndReplace or findOneAndDelete instead.'\n);\n\n/**\n * @ignore\n */\n\nCollection.prototype._findAndModify = _findAndModify;\n\nfunction _findAndModify(query, sort, doc, options, callback) {\n  const args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  sort = args.length ? args.shift() || [] : [];\n  doc = args.length ? args.shift() : null;\n  options = args.length ? args.shift() || {} : {};\n\n  // Clone options\n  options = Object.assign({}, options);\n  // Force read preference primary\n  options.readPreference = ReadPreference.PRIMARY;\n\n  return executeOperation(\n    this.s.topology,\n    new FindAndModifyOperation(this, query, sort, doc, options),\n    callback\n  );\n}\n\n/**\n * Find and remove a document.\n * @method\n * @param {object} query Query object to locate the object to modify.\n * @param {array} sort If multiple docs match, choose the first one in the specified sort order as the object to manipulate.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n * @deprecated use findOneAndDelete instead\n */\nCollection.prototype.findAndRemove = deprecate(function(query, sort, options, callback) {\n  const args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  sort = args.length ? args.shift() || [] : [];\n  options = args.length ? args.shift() || {} : {};\n\n  // Add the remove option\n  options.remove = true;\n\n  return executeOperation(\n    this.s.topology,\n    new FindAndModifyOperation(this, query, sort, null, options),\n    callback\n  );\n}, 'collection.findAndRemove is deprecated. Use findOneAndDelete instead.');\n\n/**\n * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.2\n * @method\n * @param {object} [pipeline=[]] Array containing all the aggregation framework commands for the execution.\n * @param {object} [options] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {object} [options.cursor] Return the query as cursor, on 2.6 > it returns as a real cursor on pre 2.6 it returns as an emulated cursor.\n * @param {number} [options.cursor.batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @param {boolean} [options.explain=false] Explain returns the aggregation execution plan (requires mongodb 2.6 >).\n * @param {boolean} [options.allowDiskUse=false] allowDiskUse lets the server know if it can use disk to store temporary results for the aggregation (requires mongodb 2.6 >).\n * @param {number} [options.maxTimeMS] maxTimeMS specifies a cumulative time limit in milliseconds for processing operations on the cursor. MongoDB interrupts the operation at the earliest following interrupt point.\n * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\n * @param {boolean} [options.promoteLongs=true] Promotes Long values to number if they fit inside the 53 bits resolution.\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n * @param {string} [options.comment] Add a comment to an aggregation command\n * @param {string|object} [options.hint] Add an index selection hint to an aggregation command\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~aggregationCallback} callback The command result callback\n * @return {(null|AggregationCursor)}\n */\nCollection.prototype.aggregate = function(pipeline, options, callback) {\n  if (Array.isArray(pipeline)) {\n    // Set up callback if one is provided\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    // If we have no options or callback we are doing\n    // a cursor based aggregation\n    if (options == null && callback == null) {\n      options = {};\n    }\n  } else {\n    // Aggregation pipeline passed as arguments on the method\n    const args = Array.prototype.slice.call(arguments, 0);\n    // Get the callback\n    callback = args.pop();\n    // Get the possible options object\n    const opts = args[args.length - 1];\n    // If it contains any of the admissible options pop it of the args\n    options =\n      opts &&\n      (opts.readPreference ||\n        opts.explain ||\n        opts.cursor ||\n        opts.out ||\n        opts.maxTimeMS ||\n        opts.hint ||\n        opts.allowDiskUse)\n        ? args.pop()\n        : {};\n    // Left over arguments is the pipeline\n    pipeline = args;\n  }\n\n  const cursor = new AggregationCursor(\n    this.s.topology,\n    new AggregateOperation(this, pipeline, options),\n    options\n  );\n\n  // TODO: remove this when NODE-2074 is resolved\n  if (typeof callback === 'function') {\n    callback(null, cursor);\n    return;\n  }\n\n  return cursor;\n};\n\n/**\n * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\n * @method\n * @since 3.0.0\n * @param {Array} [pipeline] An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n * @param {object} [options] Optional settings\n * @param {string} [options.fullDocument='default'] Allowed values: ‘default’, ‘updateLookup’. When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred.\n * @param {object} [options.resumeAfter] Specifies the logical starting point for the new change stream. This should be the _id field from a previously returned change stream document.\n * @param {number} [options.maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a change stream query\n * @param {number} [options.batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @param {object} [options.collation] Specify collation settings for operation. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @param {ReadPreference} [options.readPreference] The read preference. Defaults to the read preference of the database or collection. See {@link https://docs.mongodb.com/manual/reference/read-preference|read preference documentation}.\n * @param {Timestamp} [options.startAtOperationTime] receive change events that occur after the specified timestamp\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @return {ChangeStream} a ChangeStream instance.\n */\nCollection.prototype.watch = function(pipeline, options) {\n  pipeline = pipeline || [];\n  options = options || {};\n\n  // Allow optionally not specifying a pipeline\n  if (!Array.isArray(pipeline)) {\n    options = pipeline;\n    pipeline = [];\n  }\n\n  return new ChangeStream(this, pipeline, options);\n};\n\n/**\n * The callback format for results\n * @callback Collection~parallelCollectionScanCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Cursor[]} cursors A list of cursors returned allowing for parallel reading of collection.\n */\n\n/**\n * Return N number of parallel cursors for a collection allowing parallel reading of entire collection. There are\n * no ordering guarantees for returned results.\n * @method\n * @param {object} [options] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {number} [options.batchSize=1000] Set the batchSize for the getMoreCommand when iterating over the query results.\n * @param {number} [options.numCursors=1] The maximum number of parallel command cursors to return (the number of returned cursors will be in the range 1:numCursors)\n * @param {boolean} [options.raw=false] Return all BSON documents as Raw Buffer documents.\n * @param {Collection~parallelCollectionScanCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.parallelCollectionScan = deprecate(function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = { numCursors: 1 });\n  // Set number of cursors to 1\n  options.numCursors = options.numCursors || 1;\n  options.batchSize = options.batchSize || 1000;\n\n  options = Object.assign({}, options);\n  // Ensure we have the right read preference inheritance\n  options.readPreference = resolveReadPreference(this, options);\n\n  // Add a promiseLibrary\n  options.promiseLibrary = this.s.promiseLibrary;\n\n  if (options.session) {\n    options.session = undefined;\n  }\n\n  return executeLegacyOperation(\n    this.s.topology,\n    parallelCollectionScan,\n    [this, options, callback],\n    { skipSessions: true }\n  );\n}, 'parallelCollectionScan is deprecated in MongoDB v4.1');\n\n/**\n * Execute a geo search using a geo haystack index on a collection.\n *\n * @method\n * @param {number} x Point to search on the x axis, ensure the indexes are ordered in the same order.\n * @param {number} y Point to search on the y axis, ensure the indexes are ordered in the same order.\n * @param {object} [options] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {number} [options.maxDistance] Include results up to maxDistance from the point.\n * @param {object} [options.search] Filter the results by a query.\n * @param {number} [options.limit=false] Max number of results to return.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.geoHaystackSearch = function(x, y, options, callback) {\n  const args = Array.prototype.slice.call(arguments, 2);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  options = args.length ? args.shift() || {} : {};\n\n  const geoHaystackSearchOperation = new GeoHaystackSearchOperation(this, x, y, options);\n\n  return executeOperation(this.s.topology, geoHaystackSearchOperation, callback);\n};\n\n/**\n * Run a group command across a collection\n *\n * @method\n * @param {(object|array|function|code)} keys An object, array or function expressing the keys to group by.\n * @param {object} condition An optional condition that must be true for a row to be considered.\n * @param {object} initial Initial value of the aggregation counter object.\n * @param {(function|Code)} reduce The reduce function aggregates (reduces) the objects iterated\n * @param {(function|Code)} finalize An optional function to be run on each item in the result set just before the item is returned.\n * @param {boolean} command Specify if you wish to run using the internal group command or using eval, default is true.\n * @param {object} [options] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n * @deprecated MongoDB 3.6 or higher no longer supports the group command. We recommend rewriting using the aggregation framework.\n */\nCollection.prototype.group = deprecate(function(\n  keys,\n  condition,\n  initial,\n  reduce,\n  finalize,\n  command,\n  options,\n  callback\n) {\n  const args = Array.prototype.slice.call(arguments, 3);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  reduce = args.length ? args.shift() : null;\n  finalize = args.length ? args.shift() : null;\n  command = args.length ? args.shift() : null;\n  options = args.length ? args.shift() || {} : {};\n\n  // Make sure we are backward compatible\n  if (!(typeof finalize === 'function')) {\n    command = finalize;\n    finalize = null;\n  }\n\n  if (\n    !Array.isArray(keys) &&\n    keys instanceof Object &&\n    typeof keys !== 'function' &&\n    !(keys._bsontype === 'Code')\n  ) {\n    keys = Object.keys(keys);\n  }\n\n  if (typeof reduce === 'function') {\n    reduce = reduce.toString();\n  }\n\n  if (typeof finalize === 'function') {\n    finalize = finalize.toString();\n  }\n\n  // Set up the command as default\n  command = command == null ? true : command;\n\n  return executeLegacyOperation(this.s.topology, group, [\n    this,\n    keys,\n    condition,\n    initial,\n    reduce,\n    finalize,\n    command,\n    options,\n    callback\n  ]);\n},\n'MongoDB 3.6 or higher no longer supports the group command. We recommend rewriting using the aggregation framework.');\n\n/**\n * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n *\n * @method\n * @param {(function|string)} map The mapping function.\n * @param {(function|string)} reduce The reduce function.\n * @param {object} [options] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {object} [options.out] Sets the output target for the map reduce job. *{inline:1} | {replace:'collectionName'} | {merge:'collectionName'} | {reduce:'collectionName'}*\n * @param {object} [options.query] Query filter object.\n * @param {object} [options.sort] Sorts the input objects using this key. Useful for optimization, like sorting by the emit key for fewer reduces.\n * @param {number} [options.limit] Number of objects to return from collection.\n * @param {boolean} [options.keeptemp=false] Keep temporary data.\n * @param {(function|string)} [options.finalize] Finalize function.\n * @param {object} [options.scope] Can pass in variables that can be access from map/reduce/finalize.\n * @param {boolean} [options.jsMode=false] It is possible to make the execution stay in JS. Provided in MongoDB > 2.0.X.\n * @param {boolean} [options.verbose=false] Provide statistics on job execution time.\n * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.mapReduce = function(map, reduce, options, callback) {\n  if ('function' === typeof options) (callback = options), (options = {});\n  // Out must allways be defined (make sure we don't break weirdly on pre 1.8+ servers)\n  if (null == options.out) {\n    throw new Error(\n      'the out option parameter must be defined, see mongodb docs for possible values'\n    );\n  }\n\n  if ('function' === typeof map) {\n    map = map.toString();\n  }\n\n  if ('function' === typeof reduce) {\n    reduce = reduce.toString();\n  }\n\n  if ('function' === typeof options.finalize) {\n    options.finalize = options.finalize.toString();\n  }\n  const mapReduceOperation = new MapReduceOperation(this, map, reduce, options);\n\n  return executeOperation(this.s.topology, mapReduceOperation, callback);\n};\n\n/**\n * Initiate an Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n *\n * @method\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @return {UnorderedBulkOperation}\n */\nCollection.prototype.initializeUnorderedBulkOp = function(options) {\n  options = options || {};\n  // Give function's options precedence over session options.\n  if (options.ignoreUndefined == null) {\n    options.ignoreUndefined = this.s.options.ignoreUndefined;\n  }\n\n  options.promiseLibrary = this.s.promiseLibrary;\n  return unordered(this.s.topology, this, options);\n};\n\n/**\n * Initiate an In order bulk write operation. Operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n *\n * @method\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {OrderedBulkOperation} callback The command result callback\n * @return {null}\n */\nCollection.prototype.initializeOrderedBulkOp = function(options) {\n  options = options || {};\n  // Give function's options precedence over session's options.\n  if (options.ignoreUndefined == null) {\n    options.ignoreUndefined = this.s.options.ignoreUndefined;\n  }\n  options.promiseLibrary = this.s.promiseLibrary;\n  return ordered(this.s.topology, this, options);\n};\n\n/**\n * Return the db logger\n * @method\n * @return {Logger} return the db logger\n * @ignore\n */\nCollection.prototype.getLogger = function() {\n  return this.s.db.s.logger;\n};\n\nmodule.exports = Collection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///111\n");

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst common = __webpack_require__(113);\nconst BulkOperationBase = common.BulkOperationBase;\nconst Batch = common.Batch;\nconst bson = common.bson;\nconst utils = __webpack_require__(86);\nconst toError = utils.toError;\n\n/**\n * Add to internal list of Operations\n *\n * @ignore\n * @param {UnorderedBulkOperation} bulkOperation\n * @param {number} docType number indicating the document type\n * @param {object} document\n * @return {UnorderedBulkOperation}\n */\nfunction addToOperationsList(bulkOperation, docType, document) {\n  // Get the bsonSize\n  const bsonSize = bson.calculateObjectSize(document, {\n    checkKeys: false,\n\n    // Since we don't know what the user selected for BSON options here,\n    // err on the safe side, and check the size with ignoreUndefined: false.\n    ignoreUndefined: false\n  });\n  // Throw error if the doc is bigger than the max BSON size\n  if (bsonSize >= bulkOperation.s.maxBatchSizeBytes)\n    throw toError('document is larger than the maximum size ' + bulkOperation.s.maxBatchSizeBytes);\n  // Holds the current batch\n  bulkOperation.s.currentBatch = null;\n  // Get the right type of batch\n  if (docType === common.INSERT) {\n    bulkOperation.s.currentBatch = bulkOperation.s.currentInsertBatch;\n  } else if (docType === common.UPDATE) {\n    bulkOperation.s.currentBatch = bulkOperation.s.currentUpdateBatch;\n  } else if (docType === common.REMOVE) {\n    bulkOperation.s.currentBatch = bulkOperation.s.currentRemoveBatch;\n  }\n\n  const maxKeySize = bulkOperation.s.maxKeySize;\n\n  // Create a new batch object if we don't have a current one\n  if (bulkOperation.s.currentBatch == null)\n    bulkOperation.s.currentBatch = new Batch(docType, bulkOperation.s.currentIndex);\n\n  // Check if we need to create a new batch\n  if (\n    bulkOperation.s.currentBatch.size + 1 >= bulkOperation.s.maxWriteBatchSize ||\n    bulkOperation.s.currentBatch.sizeBytes + maxKeySize + bsonSize >=\n      bulkOperation.s.maxBatchSizeBytes ||\n    bulkOperation.s.currentBatch.batchType !== docType\n  ) {\n    // Save the batch to the execution stack\n    bulkOperation.s.batches.push(bulkOperation.s.currentBatch);\n\n    // Create a new batch\n    bulkOperation.s.currentBatch = new Batch(docType, bulkOperation.s.currentIndex);\n  }\n\n  // We have an array of documents\n  if (Array.isArray(document)) {\n    throw toError('operation passed in cannot be an Array');\n  }\n\n  bulkOperation.s.currentBatch.operations.push(document);\n  bulkOperation.s.currentBatch.originalIndexes.push(bulkOperation.s.currentIndex);\n  bulkOperation.s.currentIndex = bulkOperation.s.currentIndex + 1;\n\n  // Save back the current Batch to the right type\n  if (docType === common.INSERT) {\n    bulkOperation.s.currentInsertBatch = bulkOperation.s.currentBatch;\n    bulkOperation.s.bulkResult.insertedIds.push({\n      index: bulkOperation.s.bulkResult.insertedIds.length,\n      _id: document._id\n    });\n  } else if (docType === common.UPDATE) {\n    bulkOperation.s.currentUpdateBatch = bulkOperation.s.currentBatch;\n  } else if (docType === common.REMOVE) {\n    bulkOperation.s.currentRemoveBatch = bulkOperation.s.currentBatch;\n  }\n\n  // Update current batch size\n  bulkOperation.s.currentBatch.size += 1;\n  bulkOperation.s.currentBatch.sizeBytes += maxKeySize + bsonSize;\n\n  // Return bulkOperation\n  return bulkOperation;\n}\n\n/**\n * Create a new UnorderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @extends BulkOperationBase\n * @property {number} length Get the number of operations in the bulk.\n * @return {UnorderedBulkOperation} a UnorderedBulkOperation instance.\n */\nclass UnorderedBulkOperation extends BulkOperationBase {\n  constructor(topology, collection, options) {\n    options = options || {};\n    options = Object.assign(options, { addToOperationsList });\n\n    super(topology, collection, options, false);\n  }\n}\n\n/**\n * Returns an unordered batch object\n * @ignore\n */\nfunction initializeUnorderedBulkOp(topology, collection, options) {\n  return new UnorderedBulkOperation(topology, collection, options);\n}\n\ninitializeUnorderedBulkOp.UnorderedBulkOperation = UnorderedBulkOperation;\nmodule.exports = initializeUnorderedBulkOp;\nmodule.exports.Bulk = UnorderedBulkOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2J1bGsvdW5vcmRlcmVkLmpzP2Y1MDkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZUFBZSxtQkFBTyxDQUFDLEdBQVU7QUFDakM7QUFDQTtBQUNBO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLEVBQVU7QUFDaEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQyxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLFlBQVksdUJBQXVCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLHNCQUFzQjs7QUFFNUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsImZpbGUiOiIxMTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG5jb25zdCBCdWxrT3BlcmF0aW9uQmFzZSA9IGNvbW1vbi5CdWxrT3BlcmF0aW9uQmFzZTtcbmNvbnN0IEJhdGNoID0gY29tbW9uLkJhdGNoO1xuY29uc3QgYnNvbiA9IGNvbW1vbi5ic29uO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuY29uc3QgdG9FcnJvciA9IHV0aWxzLnRvRXJyb3I7XG5cbi8qKlxuICogQWRkIHRvIGludGVybmFsIGxpc3Qgb2YgT3BlcmF0aW9uc1xuICpcbiAqIEBpZ25vcmVcbiAqIEBwYXJhbSB7VW5vcmRlcmVkQnVsa09wZXJhdGlvbn0gYnVsa09wZXJhdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IGRvY1R5cGUgbnVtYmVyIGluZGljYXRpbmcgdGhlIGRvY3VtZW50IHR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBkb2N1bWVudFxuICogQHJldHVybiB7VW5vcmRlcmVkQnVsa09wZXJhdGlvbn1cbiAqL1xuZnVuY3Rpb24gYWRkVG9PcGVyYXRpb25zTGlzdChidWxrT3BlcmF0aW9uLCBkb2NUeXBlLCBkb2N1bWVudCkge1xuICAvLyBHZXQgdGhlIGJzb25TaXplXG4gIGNvbnN0IGJzb25TaXplID0gYnNvbi5jYWxjdWxhdGVPYmplY3RTaXplKGRvY3VtZW50LCB7XG4gICAgY2hlY2tLZXlzOiBmYWxzZSxcblxuICAgIC8vIFNpbmNlIHdlIGRvbid0IGtub3cgd2hhdCB0aGUgdXNlciBzZWxlY3RlZCBmb3IgQlNPTiBvcHRpb25zIGhlcmUsXG4gICAgLy8gZXJyIG9uIHRoZSBzYWZlIHNpZGUsIGFuZCBjaGVjayB0aGUgc2l6ZSB3aXRoIGlnbm9yZVVuZGVmaW5lZDogZmFsc2UuXG4gICAgaWdub3JlVW5kZWZpbmVkOiBmYWxzZVxuICB9KTtcbiAgLy8gVGhyb3cgZXJyb3IgaWYgdGhlIGRvYyBpcyBiaWdnZXIgdGhhbiB0aGUgbWF4IEJTT04gc2l6ZVxuICBpZiAoYnNvblNpemUgPj0gYnVsa09wZXJhdGlvbi5zLm1heEJhdGNoU2l6ZUJ5dGVzKVxuICAgIHRocm93IHRvRXJyb3IoJ2RvY3VtZW50IGlzIGxhcmdlciB0aGFuIHRoZSBtYXhpbXVtIHNpemUgJyArIGJ1bGtPcGVyYXRpb24ucy5tYXhCYXRjaFNpemVCeXRlcyk7XG4gIC8vIEhvbGRzIHRoZSBjdXJyZW50IGJhdGNoXG4gIGJ1bGtPcGVyYXRpb24ucy5jdXJyZW50QmF0Y2ggPSBudWxsO1xuICAvLyBHZXQgdGhlIHJpZ2h0IHR5cGUgb2YgYmF0Y2hcbiAgaWYgKGRvY1R5cGUgPT09IGNvbW1vbi5JTlNFUlQpIHtcbiAgICBidWxrT3BlcmF0aW9uLnMuY3VycmVudEJhdGNoID0gYnVsa09wZXJhdGlvbi5zLmN1cnJlbnRJbnNlcnRCYXRjaDtcbiAgfSBlbHNlIGlmIChkb2NUeXBlID09PSBjb21tb24uVVBEQVRFKSB7XG4gICAgYnVsa09wZXJhdGlvbi5zLmN1cnJlbnRCYXRjaCA9IGJ1bGtPcGVyYXRpb24ucy5jdXJyZW50VXBkYXRlQmF0Y2g7XG4gIH0gZWxzZSBpZiAoZG9jVHlwZSA9PT0gY29tbW9uLlJFTU9WRSkge1xuICAgIGJ1bGtPcGVyYXRpb24ucy5jdXJyZW50QmF0Y2ggPSBidWxrT3BlcmF0aW9uLnMuY3VycmVudFJlbW92ZUJhdGNoO1xuICB9XG5cbiAgY29uc3QgbWF4S2V5U2l6ZSA9IGJ1bGtPcGVyYXRpb24ucy5tYXhLZXlTaXplO1xuXG4gIC8vIENyZWF0ZSBhIG5ldyBiYXRjaCBvYmplY3QgaWYgd2UgZG9uJ3QgaGF2ZSBhIGN1cnJlbnQgb25lXG4gIGlmIChidWxrT3BlcmF0aW9uLnMuY3VycmVudEJhdGNoID09IG51bGwpXG4gICAgYnVsa09wZXJhdGlvbi5zLmN1cnJlbnRCYXRjaCA9IG5ldyBCYXRjaChkb2NUeXBlLCBidWxrT3BlcmF0aW9uLnMuY3VycmVudEluZGV4KTtcblxuICAvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIGNyZWF0ZSBhIG5ldyBiYXRjaFxuICBpZiAoXG4gICAgYnVsa09wZXJhdGlvbi5zLmN1cnJlbnRCYXRjaC5zaXplICsgMSA+PSBidWxrT3BlcmF0aW9uLnMubWF4V3JpdGVCYXRjaFNpemUgfHxcbiAgICBidWxrT3BlcmF0aW9uLnMuY3VycmVudEJhdGNoLnNpemVCeXRlcyArIG1heEtleVNpemUgKyBic29uU2l6ZSA+PVxuICAgICAgYnVsa09wZXJhdGlvbi5zLm1heEJhdGNoU2l6ZUJ5dGVzIHx8XG4gICAgYnVsa09wZXJhdGlvbi5zLmN1cnJlbnRCYXRjaC5iYXRjaFR5cGUgIT09IGRvY1R5cGVcbiAgKSB7XG4gICAgLy8gU2F2ZSB0aGUgYmF0Y2ggdG8gdGhlIGV4ZWN1dGlvbiBzdGFja1xuICAgIGJ1bGtPcGVyYXRpb24ucy5iYXRjaGVzLnB1c2goYnVsa09wZXJhdGlvbi5zLmN1cnJlbnRCYXRjaCk7XG5cbiAgICAvLyBDcmVhdGUgYSBuZXcgYmF0Y2hcbiAgICBidWxrT3BlcmF0aW9uLnMuY3VycmVudEJhdGNoID0gbmV3IEJhdGNoKGRvY1R5cGUsIGJ1bGtPcGVyYXRpb24ucy5jdXJyZW50SW5kZXgpO1xuICB9XG5cbiAgLy8gV2UgaGF2ZSBhbiBhcnJheSBvZiBkb2N1bWVudHNcbiAgaWYgKEFycmF5LmlzQXJyYXkoZG9jdW1lbnQpKSB7XG4gICAgdGhyb3cgdG9FcnJvcignb3BlcmF0aW9uIHBhc3NlZCBpbiBjYW5ub3QgYmUgYW4gQXJyYXknKTtcbiAgfVxuXG4gIGJ1bGtPcGVyYXRpb24ucy5jdXJyZW50QmF0Y2gub3BlcmF0aW9ucy5wdXNoKGRvY3VtZW50KTtcbiAgYnVsa09wZXJhdGlvbi5zLmN1cnJlbnRCYXRjaC5vcmlnaW5hbEluZGV4ZXMucHVzaChidWxrT3BlcmF0aW9uLnMuY3VycmVudEluZGV4KTtcbiAgYnVsa09wZXJhdGlvbi5zLmN1cnJlbnRJbmRleCA9IGJ1bGtPcGVyYXRpb24ucy5jdXJyZW50SW5kZXggKyAxO1xuXG4gIC8vIFNhdmUgYmFjayB0aGUgY3VycmVudCBCYXRjaCB0byB0aGUgcmlnaHQgdHlwZVxuICBpZiAoZG9jVHlwZSA9PT0gY29tbW9uLklOU0VSVCkge1xuICAgIGJ1bGtPcGVyYXRpb24ucy5jdXJyZW50SW5zZXJ0QmF0Y2ggPSBidWxrT3BlcmF0aW9uLnMuY3VycmVudEJhdGNoO1xuICAgIGJ1bGtPcGVyYXRpb24ucy5idWxrUmVzdWx0Lmluc2VydGVkSWRzLnB1c2goe1xuICAgICAgaW5kZXg6IGJ1bGtPcGVyYXRpb24ucy5idWxrUmVzdWx0Lmluc2VydGVkSWRzLmxlbmd0aCxcbiAgICAgIF9pZDogZG9jdW1lbnQuX2lkXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoZG9jVHlwZSA9PT0gY29tbW9uLlVQREFURSkge1xuICAgIGJ1bGtPcGVyYXRpb24ucy5jdXJyZW50VXBkYXRlQmF0Y2ggPSBidWxrT3BlcmF0aW9uLnMuY3VycmVudEJhdGNoO1xuICB9IGVsc2UgaWYgKGRvY1R5cGUgPT09IGNvbW1vbi5SRU1PVkUpIHtcbiAgICBidWxrT3BlcmF0aW9uLnMuY3VycmVudFJlbW92ZUJhdGNoID0gYnVsa09wZXJhdGlvbi5zLmN1cnJlbnRCYXRjaDtcbiAgfVxuXG4gIC8vIFVwZGF0ZSBjdXJyZW50IGJhdGNoIHNpemVcbiAgYnVsa09wZXJhdGlvbi5zLmN1cnJlbnRCYXRjaC5zaXplICs9IDE7XG4gIGJ1bGtPcGVyYXRpb24ucy5jdXJyZW50QmF0Y2guc2l6ZUJ5dGVzICs9IG1heEtleVNpemUgKyBic29uU2l6ZTtcblxuICAvLyBSZXR1cm4gYnVsa09wZXJhdGlvblxuICByZXR1cm4gYnVsa09wZXJhdGlvbjtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgVW5vcmRlcmVkQnVsa09wZXJhdGlvbiBpbnN0YW5jZSAoSU5URVJOQUwgVFlQRSwgZG8gbm90IGluc3RhbnRpYXRlIGRpcmVjdGx5KVxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBCdWxrT3BlcmF0aW9uQmFzZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGxlbmd0aCBHZXQgdGhlIG51bWJlciBvZiBvcGVyYXRpb25zIGluIHRoZSBidWxrLlxuICogQHJldHVybiB7VW5vcmRlcmVkQnVsa09wZXJhdGlvbn0gYSBVbm9yZGVyZWRCdWxrT3BlcmF0aW9uIGluc3RhbmNlLlxuICovXG5jbGFzcyBVbm9yZGVyZWRCdWxrT3BlcmF0aW9uIGV4dGVuZHMgQnVsa09wZXJhdGlvbkJhc2Uge1xuICBjb25zdHJ1Y3Rvcih0b3BvbG9neSwgY29sbGVjdGlvbiwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKG9wdGlvbnMsIHsgYWRkVG9PcGVyYXRpb25zTGlzdCB9KTtcblxuICAgIHN1cGVyKHRvcG9sb2d5LCBjb2xsZWN0aW9uLCBvcHRpb25zLCBmYWxzZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIHVub3JkZXJlZCBiYXRjaCBvYmplY3RcbiAqIEBpZ25vcmVcbiAqL1xuZnVuY3Rpb24gaW5pdGlhbGl6ZVVub3JkZXJlZEJ1bGtPcCh0b3BvbG9neSwgY29sbGVjdGlvbiwgb3B0aW9ucykge1xuICByZXR1cm4gbmV3IFVub3JkZXJlZEJ1bGtPcGVyYXRpb24odG9wb2xvZ3ksIGNvbGxlY3Rpb24sIG9wdGlvbnMpO1xufVxuXG5pbml0aWFsaXplVW5vcmRlcmVkQnVsa09wLlVub3JkZXJlZEJ1bGtPcGVyYXRpb24gPSBVbm9yZGVyZWRCdWxrT3BlcmF0aW9uO1xubW9kdWxlLmV4cG9ydHMgPSBpbml0aWFsaXplVW5vcmRlcmVkQnVsa09wO1xubW9kdWxlLmV4cG9ydHMuQnVsayA9IFVub3JkZXJlZEJ1bGtPcGVyYXRpb247XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///112\n");

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Long = __webpack_require__(3).BSON.Long;\nconst MongoError = __webpack_require__(3).MongoError;\nconst ObjectID = __webpack_require__(3).BSON.ObjectID;\nconst BSON = __webpack_require__(3).BSON;\nconst MongoWriteConcernError = __webpack_require__(3).MongoWriteConcernError;\nconst toError = __webpack_require__(86).toError;\nconst handleCallback = __webpack_require__(86).handleCallback;\nconst applyRetryableWrites = __webpack_require__(86).applyRetryableWrites;\nconst applyWriteConcern = __webpack_require__(86).applyWriteConcern;\nconst executeLegacyOperation = __webpack_require__(86).executeLegacyOperation;\nconst isPromiseLike = __webpack_require__(86).isPromiseLike;\n\n// Error codes\nconst WRITE_CONCERN_ERROR = 64;\n\n// Insert types\nconst INSERT = 1;\nconst UPDATE = 2;\nconst REMOVE = 3;\n\nconst bson = new BSON([\n  BSON.Binary,\n  BSON.Code,\n  BSON.DBRef,\n  BSON.Decimal128,\n  BSON.Double,\n  BSON.Int32,\n  BSON.Long,\n  BSON.Map,\n  BSON.MaxKey,\n  BSON.MinKey,\n  BSON.ObjectId,\n  BSON.BSONRegExp,\n  BSON.Symbol,\n  BSON.Timestamp\n]);\n\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n * @ignore\n */\nclass Batch {\n  constructor(batchType, originalZeroIndex) {\n    this.originalZeroIndex = originalZeroIndex;\n    this.currentIndex = 0;\n    this.originalIndexes = [];\n    this.batchType = batchType;\n    this.operations = [];\n    this.size = 0;\n    this.sizeBytes = 0;\n  }\n}\n\n/**\n * @classdesc\n * The result of a bulk write.\n */\nclass BulkWriteResult {\n  /**\n   * Create a new BulkWriteResult instance\n   *\n   * **NOTE:** Internal Type, do not instantiate directly\n   */\n  constructor(bulkResult) {\n    this.result = bulkResult;\n  }\n\n  /**\n   * Evaluates to true if the bulk operation correctly executes\n   * @type {boolean}\n   */\n  get ok() {\n    return this.result.ok;\n  }\n\n  /**\n   * The number of inserted documents\n   * @type {number}\n   */\n  get nInserted() {\n    return this.result.nInserted;\n  }\n\n  /**\n   * Number of upserted documents\n   * @type {number}\n   */\n  get nUpserted() {\n    return this.result.nUpserted;\n  }\n\n  /**\n   * Number of matched documents\n   * @type {number}\n   */\n  get nMatched() {\n    return this.result.nMatched;\n  }\n\n  /**\n   * Number of documents updated physically on disk\n   * @type {number}\n   */\n  get nModified() {\n    return this.result.nModified;\n  }\n\n  /**\n   * Number of removed documents\n   * @type {number}\n   */\n  get nRemoved() {\n    return this.result.nRemoved;\n  }\n\n  /**\n   * Returns an array of all inserted ids\n   *\n   * @return {object[]}\n   */\n  getInsertedIds() {\n    return this.result.insertedIds;\n  }\n\n  /**\n   * Returns an array of all upserted ids\n   *\n   * @return {object[]}\n   */\n  getUpsertedIds() {\n    return this.result.upserted;\n  }\n\n  /**\n   * Returns the upserted id at the given index\n   *\n   * @param {number} index the number of the upserted id to return, returns undefined if no result for passed in index\n   * @return {object}\n   */\n  getUpsertedIdAt(index) {\n    return this.result.upserted[index];\n  }\n\n  /**\n   * Returns raw internal result\n   *\n   * @return {object}\n   */\n  getRawResponse() {\n    return this.result;\n  }\n\n  /**\n   * Returns true if the bulk operation contains a write error\n   *\n   * @return {boolean}\n   */\n  hasWriteErrors() {\n    return this.result.writeErrors.length > 0;\n  }\n\n  /**\n   * Returns the number of write errors off the bulk operation\n   *\n   * @return {number}\n   */\n  getWriteErrorCount() {\n    return this.result.writeErrors.length;\n  }\n\n  /**\n   * Returns a specific write error object\n   *\n   * @param {number} index of the write error to return, returns null if there is no result for passed in index\n   * @return {WriteError}\n   */\n  getWriteErrorAt(index) {\n    if (index < this.result.writeErrors.length) {\n      return this.result.writeErrors[index];\n    }\n    return null;\n  }\n\n  /**\n   * Retrieve all write errors\n   *\n   * @return {WriteError[]}\n   */\n  getWriteErrors() {\n    return this.result.writeErrors;\n  }\n\n  /**\n   * Retrieve lastOp if available\n   *\n   * @return {object}\n   */\n  getLastOp() {\n    return this.result.lastOp;\n  }\n\n  /**\n   * Retrieve the write concern error if any\n   *\n   * @return {WriteConcernError}\n   */\n  getWriteConcernError() {\n    if (this.result.writeConcernErrors.length === 0) {\n      return null;\n    } else if (this.result.writeConcernErrors.length === 1) {\n      // Return the error\n      return this.result.writeConcernErrors[0];\n    } else {\n      // Combine the errors\n      let errmsg = '';\n      for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n        const err = this.result.writeConcernErrors[i];\n        errmsg = errmsg + err.errmsg;\n\n        // TODO: Something better\n        if (i === 0) errmsg = errmsg + ' and ';\n      }\n\n      return new WriteConcernError({ errmsg: errmsg, code: WRITE_CONCERN_ERROR });\n    }\n  }\n\n  /**\n   * @return {object}\n   */\n  toJSON() {\n    return this.result;\n  }\n\n  /**\n   * @return {string}\n   */\n  toString() {\n    return `BulkWriteResult(${this.toJSON(this.result)})`;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isOk() {\n    return this.result.ok === 1;\n  }\n}\n\n/**\n * @classdesc An error representing a failure by the server to apply the requested write concern to the bulk operation.\n */\nclass WriteConcernError {\n  /**\n   * Create a new WriteConcernError instance\n   *\n   * **NOTE:** Internal Type, do not instantiate directly\n   */\n  constructor(err) {\n    this.err = err;\n  }\n\n  /**\n   * Write concern error code.\n   * @type {number}\n   */\n  get code() {\n    return this.err.code;\n  }\n\n  /**\n   * Write concern error message.\n   * @type {string}\n   */\n  get errmsg() {\n    return this.err.errmsg;\n  }\n\n  /**\n   * @return {object}\n   */\n  toJSON() {\n    return { code: this.err.code, errmsg: this.err.errmsg };\n  }\n\n  /**\n   * @return {string}\n   */\n  toString() {\n    return `WriteConcernError(${this.err.errmsg})`;\n  }\n}\n\n/**\n * @classdesc An error that occurred during a BulkWrite on the server.\n */\nclass WriteError {\n  /**\n   * Create a new WriteError instance\n   *\n   * **NOTE:** Internal Type, do not instantiate directly\n   */\n  constructor(err) {\n    this.err = err;\n  }\n\n  /**\n   * WriteError code.\n   * @type {number}\n   */\n  get code() {\n    return this.err.code;\n  }\n\n  /**\n   * WriteError original bulk operation index.\n   * @type {number}\n   */\n  get index() {\n    return this.err.index;\n  }\n\n  /**\n   * WriteError message.\n   * @type {string}\n   */\n  get errmsg() {\n    return this.err.errmsg;\n  }\n\n  /**\n   * Returns the underlying operation that caused the error\n   * @return {object}\n   */\n  getOperation() {\n    return this.err.op;\n  }\n\n  /**\n   * @return {object}\n   */\n  toJSON() {\n    return { code: this.err.code, index: this.err.index, errmsg: this.err.errmsg, op: this.err.op };\n  }\n\n  /**\n   * @return {string}\n   */\n  toString() {\n    return `WriteError(${JSON.stringify(this.toJSON())})`;\n  }\n}\n\n/**\n * Merges results into shared data structure\n * @ignore\n */\nfunction mergeBatchResults(batch, bulkResult, err, result) {\n  // If we have an error set the result to be the err object\n  if (err) {\n    result = err;\n  } else if (result && result.result) {\n    result = result.result;\n  } else if (result == null) {\n    return;\n  }\n\n  // Do we have a top level error stop processing and return\n  if (result.ok === 0 && bulkResult.ok === 1) {\n    bulkResult.ok = 0;\n\n    const writeError = {\n      index: 0,\n      code: result.code || 0,\n      errmsg: result.message,\n      op: batch.operations[0]\n    };\n\n    bulkResult.writeErrors.push(new WriteError(writeError));\n    return;\n  } else if (result.ok === 0 && bulkResult.ok === 0) {\n    return;\n  }\n\n  // Deal with opTime if available\n  if (result.opTime || result.lastOp) {\n    const opTime = result.lastOp || result.opTime;\n    let lastOpTS = null;\n    let lastOpT = null;\n\n    // We have a time stamp\n    if (opTime && opTime._bsontype === 'Timestamp') {\n      if (bulkResult.lastOp == null) {\n        bulkResult.lastOp = opTime;\n      } else if (opTime.greaterThan(bulkResult.lastOp)) {\n        bulkResult.lastOp = opTime;\n      }\n    } else {\n      // Existing TS\n      if (bulkResult.lastOp) {\n        lastOpTS =\n          typeof bulkResult.lastOp.ts === 'number'\n            ? Long.fromNumber(bulkResult.lastOp.ts)\n            : bulkResult.lastOp.ts;\n        lastOpT =\n          typeof bulkResult.lastOp.t === 'number'\n            ? Long.fromNumber(bulkResult.lastOp.t)\n            : bulkResult.lastOp.t;\n      }\n\n      // Current OpTime TS\n      const opTimeTS = typeof opTime.ts === 'number' ? Long.fromNumber(opTime.ts) : opTime.ts;\n      const opTimeT = typeof opTime.t === 'number' ? Long.fromNumber(opTime.t) : opTime.t;\n\n      // Compare the opTime's\n      if (bulkResult.lastOp == null) {\n        bulkResult.lastOp = opTime;\n      } else if (opTimeTS.greaterThan(lastOpTS)) {\n        bulkResult.lastOp = opTime;\n      } else if (opTimeTS.equals(lastOpTS)) {\n        if (opTimeT.greaterThan(lastOpT)) {\n          bulkResult.lastOp = opTime;\n        }\n      }\n    }\n  }\n\n  // If we have an insert Batch type\n  if (batch.batchType === INSERT && result.n) {\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\n  }\n\n  // If we have an insert Batch type\n  if (batch.batchType === REMOVE && result.n) {\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n  }\n\n  let nUpserted = 0;\n\n  // We have an array of upserted values, we need to rewrite the indexes\n  if (Array.isArray(result.upserted)) {\n    nUpserted = result.upserted.length;\n\n    for (let i = 0; i < result.upserted.length; i++) {\n      bulkResult.upserted.push({\n        index: result.upserted[i].index + batch.originalZeroIndex,\n        _id: result.upserted[i]._id\n      });\n    }\n  } else if (result.upserted) {\n    nUpserted = 1;\n\n    bulkResult.upserted.push({\n      index: batch.originalZeroIndex,\n      _id: result.upserted\n    });\n  }\n\n  // If we have an update Batch type\n  if (batch.batchType === UPDATE && result.n) {\n    const nModified = result.nModified;\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n\n    if (typeof nModified === 'number') {\n      bulkResult.nModified = bulkResult.nModified + nModified;\n    } else {\n      bulkResult.nModified = null;\n    }\n  }\n\n  if (Array.isArray(result.writeErrors)) {\n    for (let i = 0; i < result.writeErrors.length; i++) {\n      const writeError = {\n        index: batch.originalZeroIndex + result.writeErrors[i].index,\n        code: result.writeErrors[i].code,\n        errmsg: result.writeErrors[i].errmsg,\n        op: batch.operations[result.writeErrors[i].index]\n      };\n\n      bulkResult.writeErrors.push(new WriteError(writeError));\n    }\n  }\n\n  if (result.writeConcernError) {\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n  }\n}\n\nfunction executeCommands(bulkOperation, options, callback) {\n  if (bulkOperation.s.batches.length === 0) {\n    return handleCallback(callback, null, new BulkWriteResult(bulkOperation.s.bulkResult));\n  }\n\n  const batch = bulkOperation.s.batches.shift();\n\n  function resultHandler(err, result) {\n    // Error is a driver related error not a bulk op error, terminate\n    if (((err && err.driver) || (err && err.message)) && !(err instanceof MongoWriteConcernError)) {\n      return handleCallback(callback, err);\n    }\n\n    // If we have and error\n    if (err) err.ok = 0;\n    if (err instanceof MongoWriteConcernError) {\n      return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, err, callback);\n    }\n\n    // Merge the results together\n    const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult);\n    const mergeResult = mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n    if (mergeResult != null) {\n      return handleCallback(callback, null, writeResult);\n    }\n\n    if (bulkOperation.handleWriteError(callback, writeResult)) return;\n\n    // Execute the next command in line\n    executeCommands(bulkOperation, options, callback);\n  }\n\n  bulkOperation.finalOptionsHandler({ options, batch, resultHandler }, callback);\n}\n\n/**\n * handles write concern error\n *\n * @ignore\n * @param {object} batch\n * @param {object} bulkResult\n * @param {boolean} ordered\n * @param {WriteConcernError} err\n * @param {function} callback\n */\nfunction handleMongoWriteConcernError(batch, bulkResult, err, callback) {\n  mergeBatchResults(batch, bulkResult, null, err.result);\n\n  const wrappedWriteConcernError = new WriteConcernError({\n    errmsg: err.result.writeConcernError.errmsg,\n    code: err.result.writeConcernError.result\n  });\n  return handleCallback(\n    callback,\n    new BulkWriteError(toError(wrappedWriteConcernError), new BulkWriteResult(bulkResult)),\n    null\n  );\n}\n\n/**\n * @classdesc An error indicating an unsuccessful Bulk Write\n */\nclass BulkWriteError extends MongoError {\n  /**\n   * Creates a new BulkWriteError\n   *\n   * @param {Error|string|object} message The error message\n   * @param {BulkWriteResult} result The result of the bulk write operation\n   * @extends {MongoError}\n   */\n  constructor(error, result) {\n    const message = error.err || error.errmsg || error.errMessage || error;\n    super(message);\n\n    Object.assign(this, error);\n\n    this.name = 'BulkWriteError';\n    this.result = result;\n  }\n}\n\n/**\n * @classdesc A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n */\nclass FindOperators {\n  /**\n   * Creates a new FindOperators object.\n   *\n   * **NOTE:** Internal Type, do not instantiate directly\n   * @param {OrderedBulkOperation|UnorderedBulkOperation} bulkOperation\n   */\n  constructor(bulkOperation) {\n    this.s = bulkOperation.s;\n  }\n\n  /**\n   * Add a multiple update operation to the bulk operation\n   *\n   * @method\n   * @param {object} updateDocument An update field for an update operation. See {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-u u documentation}\n   * @throws {MongoError} If operation cannot be added to bulk write\n   * @return {OrderedBulkOperation|UnorderedBulkOperation} A reference to the parent BulkOperation\n   */\n  update(updateDocument) {\n    // Perform upsert\n    const upsert = typeof this.s.currentOp.upsert === 'boolean' ? this.s.currentOp.upsert : false;\n\n    // Establish the update command\n    const document = {\n      q: this.s.currentOp.selector,\n      u: updateDocument,\n      multi: true,\n      upsert: upsert\n    };\n\n    // Clear out current Op\n    this.s.currentOp = null;\n    return this.s.options.addToOperationsList(this, UPDATE, document);\n  }\n\n  /**\n   * Add a single update operation to the bulk operation\n   *\n   * @method\n   * @param {object} updateDocument An update field for an update operation. See {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-u u documentation}\n   * @throws {MongoError} If operation cannot be added to bulk write\n   * @return {OrderedBulkOperation|UnorderedBulkOperation} A reference to the parent BulkOperation\n   */\n  updateOne(updateDocument) {\n    // Perform upsert\n    const upsert = typeof this.s.currentOp.upsert === 'boolean' ? this.s.currentOp.upsert : false;\n\n    // Establish the update command\n    const document = {\n      q: this.s.currentOp.selector,\n      u: updateDocument,\n      multi: false,\n      upsert: upsert\n    };\n\n    // Clear out current Op\n    this.s.currentOp = null;\n    return this.s.options.addToOperationsList(this, UPDATE, document);\n  }\n\n  /**\n   * Add a replace one operation to the bulk operation\n   *\n   * @method\n   * @param {object} updateDocument the new document to replace the existing one with\n   * @throws {MongoError} If operation cannot be added to bulk write\n   * @return {OrderedBulkOperation|UnorderedBulkOperation} A reference to the parent BulkOperation\n   */\n  replaceOne(updateDocument) {\n    this.updateOne(updateDocument);\n  }\n\n  /**\n   * Upsert modifier for update bulk operation, noting that this operation is an upsert.\n   *\n   * @method\n   * @throws {MongoError} If operation cannot be added to bulk write\n   * @return {FindOperators} reference to self\n   */\n  upsert() {\n    this.s.currentOp.upsert = true;\n    return this;\n  }\n\n  /**\n   * Add a delete one operation to the bulk operation\n   *\n   * @method\n   * @throws {MongoError} If operation cannot be added to bulk write\n   * @return {OrderedBulkOperation|UnorderedBulkOperation} A reference to the parent BulkOperation\n   */\n  deleteOne() {\n    // Establish the update command\n    const document = {\n      q: this.s.currentOp.selector,\n      limit: 1\n    };\n\n    // Clear out current Op\n    this.s.currentOp = null;\n    return this.s.options.addToOperationsList(this, REMOVE, document);\n  }\n\n  /**\n   * Add a delete many operation to the bulk operation\n   *\n   * @method\n   * @throws {MongoError} If operation cannot be added to bulk write\n   * @return {OrderedBulkOperation|UnorderedBulkOperation} A reference to the parent BulkOperation\n   */\n  delete() {\n    // Establish the update command\n    const document = {\n      q: this.s.currentOp.selector,\n      limit: 0\n    };\n\n    // Clear out current Op\n    this.s.currentOp = null;\n    return this.s.options.addToOperationsList(this, REMOVE, document);\n  }\n\n  /**\n   * backwards compatability for deleteOne\n   */\n  removeOne() {\n    return this.deleteOne();\n  }\n\n  /**\n   * backwards compatability for delete\n   */\n  remove() {\n    return this.delete();\n  }\n}\n\n/**\n * @classdesc Parent class to OrderedBulkOperation and UnorderedBulkOperation\n *\n * **NOTE:** Internal Type, do not instantiate directly\n */\nclass BulkOperationBase {\n  /**\n   * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n   * @property {number} length Get the number of operations in the bulk.\n   */\n  constructor(topology, collection, options, isOrdered) {\n    // determine whether bulkOperation is ordered or unordered\n    this.isOrdered = isOrdered;\n\n    options = options == null ? {} : options;\n    // TODO Bring from driver information in isMaster\n    // Get the namespace for the write operations\n    const namespace = collection.s.namespace;\n    // Used to mark operation as executed\n    const executed = false;\n\n    // Current item\n    const currentOp = null;\n\n    // Handle to the bson serializer, used to calculate running sizes\n    const bson = topology.bson;\n\n    // Set max byte size\n    const isMaster = topology.lastIsMaster();\n    const maxBatchSizeBytes =\n      isMaster && isMaster.maxBsonObjectSize ? isMaster.maxBsonObjectSize : 1024 * 1024 * 16;\n    const maxWriteBatchSize =\n      isMaster && isMaster.maxWriteBatchSize ? isMaster.maxWriteBatchSize : 1000;\n\n    // Calculates the largest possible size of an Array key, represented as a BSON string\n    // element. This calculation:\n    //     1 byte for BSON type\n    //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n    //   + 1 bytes for null terminator\n    const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n\n    // Final options for retryable writes and write concern\n    let finalOptions = Object.assign({}, options);\n    finalOptions = applyRetryableWrites(finalOptions, collection.s.db);\n    finalOptions = applyWriteConcern(finalOptions, { collection: collection }, options);\n    const writeConcern = finalOptions.writeConcern;\n\n    // Get the promiseLibrary\n    const promiseLibrary = options.promiseLibrary || Promise;\n\n    // Final results\n    const bulkResult = {\n      ok: 1,\n      writeErrors: [],\n      writeConcernErrors: [],\n      insertedIds: [],\n      nInserted: 0,\n      nUpserted: 0,\n      nMatched: 0,\n      nModified: 0,\n      nRemoved: 0,\n      upserted: []\n    };\n\n    // Internal state\n    this.s = {\n      // Final result\n      bulkResult: bulkResult,\n      // Current batch state\n      currentBatch: null,\n      currentIndex: 0,\n      // ordered specific\n      currentBatchSize: 0,\n      currentBatchSizeBytes: 0,\n      // unordered specific\n      currentInsertBatch: null,\n      currentUpdateBatch: null,\n      currentRemoveBatch: null,\n      batches: [],\n      // Write concern\n      writeConcern: writeConcern,\n      // Max batch size options\n      maxBatchSizeBytes: maxBatchSizeBytes,\n      maxWriteBatchSize: maxWriteBatchSize,\n      maxKeySize,\n      // Namespace\n      namespace: namespace,\n      // BSON\n      bson: bson,\n      // Topology\n      topology: topology,\n      // Options\n      options: finalOptions,\n      // Current operation\n      currentOp: currentOp,\n      // Executed\n      executed: executed,\n      // Collection\n      collection: collection,\n      // Promise Library\n      promiseLibrary: promiseLibrary,\n      // Fundamental error\n      err: null,\n      // check keys\n      checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : true\n    };\n\n    // bypass Validation\n    if (options.bypassDocumentValidation === true) {\n      this.s.bypassDocumentValidation = true;\n    }\n  }\n\n  /**\n   * Add a single insert document to the bulk operation\n   *\n   * @param {object} document the document to insert\n   * @throws {MongoError}\n   * @return {BulkOperationBase} A reference to self\n   *\n   * @example\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   * // Adds three inserts to the bulkOp.\n   * bulkOp\n   *   .insert({ a: 1 })\n   *   .insert({ b: 2 })\n   *   .insert({ c: 3 });\n   * await bulkOp.execute();\n   */\n  insert(document) {\n    if (this.s.collection.s.db.options.forceServerObjectId !== true && document._id == null)\n      document._id = new ObjectID();\n    return this.s.options.addToOperationsList(this, INSERT, document);\n  }\n\n  /**\n   * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n   * Returns a builder object used to complete the definition of the operation.\n   *\n   * @method\n   * @param {object} selector The selector for the bulk operation. See {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-q q documentation}\n   * @throws {MongoError} if a selector is not specified\n   * @return {FindOperators} A helper object with which the write operation can be defined.\n   *\n   * @example\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Add an updateOne to the bulkOp\n   * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n   *\n   * // Add an updateMany to the bulkOp\n   * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n   *\n   * // Add an upsert\n   * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n   *\n   * // Add a deletion\n   * bulkOp.find({ g: 7 }).deleteOne();\n   *\n   * // Add a multi deletion\n   * bulkOp.find({ h: 8 }).delete();\n   *\n   * // Add a replaceOne\n   * bulkOp.find({ i: 9 }).replaceOne({ j: 10 });\n   *\n   * // Update using a pipeline (requires Mongodb 4.2 or higher)\n   * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n   *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n   * ]);\n   *\n   * // All of the ops will now be executed\n   * await bulkOp.execute();\n   */\n  find(selector) {\n    if (!selector) {\n      throw toError('Bulk find operation must specify a selector');\n    }\n\n    // Save a current selector\n    this.s.currentOp = {\n      selector: selector\n    };\n\n    return new FindOperators(this);\n  }\n\n  /**\n   * Specifies a raw operation to perform in the bulk write.\n   *\n   * @method\n   * @param {object} op The raw operation to perform.\n   * @return {BulkOperationBase} A reference to self\n   */\n  raw(op) {\n    const key = Object.keys(op)[0];\n\n    // Set up the force server object id\n    const forceServerObjectId =\n      typeof this.s.options.forceServerObjectId === 'boolean'\n        ? this.s.options.forceServerObjectId\n        : this.s.collection.s.db.options.forceServerObjectId;\n\n    // Update operations\n    if (\n      (op.updateOne && op.updateOne.q) ||\n      (op.updateMany && op.updateMany.q) ||\n      (op.replaceOne && op.replaceOne.q)\n    ) {\n      op[key].multi = op.updateOne || op.replaceOne ? false : true;\n      return this.s.options.addToOperationsList(this, UPDATE, op[key]);\n    }\n\n    // Crud spec update format\n    if (op.updateOne || op.updateMany || op.replaceOne) {\n      const multi = op.updateOne || op.replaceOne ? false : true;\n      const operation = {\n        q: op[key].filter,\n        u: op[key].update || op[key].replacement,\n        multi: multi\n      };\n      if (this.isOrdered) {\n        operation.upsert = op[key].upsert ? true : false;\n        if (op.collation) operation.collation = op.collation;\n      } else {\n        if (op[key].upsert) operation.upsert = true;\n      }\n      if (op[key].arrayFilters) operation.arrayFilters = op[key].arrayFilters;\n      return this.s.options.addToOperationsList(this, UPDATE, operation);\n    }\n\n    // Remove operations\n    if (\n      op.removeOne ||\n      op.removeMany ||\n      (op.deleteOne && op.deleteOne.q) ||\n      (op.deleteMany && op.deleteMany.q)\n    ) {\n      op[key].limit = op.removeOne ? 1 : 0;\n      return this.s.options.addToOperationsList(this, REMOVE, op[key]);\n    }\n\n    // Crud spec delete operations, less efficient\n    if (op.deleteOne || op.deleteMany) {\n      const limit = op.deleteOne ? 1 : 0;\n      const operation = { q: op[key].filter, limit: limit };\n      if (this.isOrdered) {\n        if (op.collation) operation.collation = op.collation;\n      }\n      return this.s.options.addToOperationsList(this, REMOVE, operation);\n    }\n\n    // Insert operations\n    if (op.insertOne && op.insertOne.document == null) {\n      if (forceServerObjectId !== true && op.insertOne._id == null)\n        op.insertOne._id = new ObjectID();\n      return this.s.options.addToOperationsList(this, INSERT, op.insertOne);\n    } else if (op.insertOne && op.insertOne.document) {\n      if (forceServerObjectId !== true && op.insertOne.document._id == null)\n        op.insertOne.document._id = new ObjectID();\n      return this.s.options.addToOperationsList(this, INSERT, op.insertOne.document);\n    }\n\n    if (op.insertMany) {\n      for (let i = 0; i < op.insertMany.length; i++) {\n        if (forceServerObjectId !== true && op.insertMany[i]._id == null)\n          op.insertMany[i]._id = new ObjectID();\n        this.s.options.addToOperationsList(this, INSERT, op.insertMany[i]);\n      }\n\n      return;\n    }\n\n    // No valid type of operation\n    throw toError(\n      'bulkWrite only supports insertOne, insertMany, updateOne, updateMany, removeOne, removeMany, deleteOne, deleteMany'\n    );\n  }\n\n  /**\n   * helper function to assist with promiseOrCallback behavior\n   * @ignore\n   * @param {*} err\n   * @param {*} callback\n   */\n  _handleEarlyError(err, callback) {\n    if (typeof callback === 'function') {\n      callback(err, null);\n      return;\n    }\n\n    return this.s.promiseLibrary.reject(err);\n  }\n\n  /**\n   * An internal helper method. Do not invoke directly. Will be going away in the future\n   *\n   * @ignore\n   * @method\n   * @param {class} bulk either OrderedBulkOperation or UnorderdBulkOperation\n   * @param {object} writeConcern\n   * @param {object} options\n   * @param {function} callback\n   */\n  bulkExecute(_writeConcern, options, callback) {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options || {};\n\n    if (typeof _writeConcern === 'function') {\n      callback = _writeConcern;\n    } else if (_writeConcern && typeof _writeConcern === 'object') {\n      this.s.writeConcern = _writeConcern;\n    }\n\n    if (this.s.executed) {\n      const executedError = toError('batch cannot be re-executed');\n      return this._handleEarlyError(executedError, callback);\n    }\n\n    // If we have current batch\n    if (this.isOrdered) {\n      if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n    }\n    // If we have no operations in the bulk raise an error\n    if (this.s.batches.length === 0) {\n      const emptyBatchError = toError('Invalid Operation, no operations specified');\n      return this._handleEarlyError(emptyBatchError, callback);\n    }\n    return { options, callback };\n  }\n\n  /**\n   * The callback format for results\n   * @callback BulkOperationBase~resultCallback\n   * @param {MongoError} error An error instance representing the error during the execution.\n   * @param {BulkWriteResult} result The bulk write result.\n   */\n\n  /**\n   * Execute the bulk operation\n   *\n   * @method\n   * @param {WriteConcern} [_writeConcern] Optional write concern. Can also be specified through options.\n   * @param {object} [options] Optional settings.\n   * @param {(number|string)} [options.w] The write concern.\n   * @param {number} [options.wtimeout] The write concern timeout.\n   * @param {boolean} [options.j=false] Specify a journal write concern.\n   * @param {boolean} [options.fsync=false] Specify a file sync write concern.\n   * @param {BulkOperationBase~resultCallback} [callback] A callback that will be invoked when bulkWrite finishes/errors\n   * @throws {MongoError} Throws error if the bulk object has already been executed\n   * @throws {MongoError} Throws error if the bulk object does not have any operations\n   * @return {Promise|void} returns Promise if no callback passed\n   */\n  execute(_writeConcern, options, callback) {\n    const ret = this.bulkExecute(_writeConcern, options, callback);\n    if (!ret || isPromiseLike(ret)) {\n      return ret;\n    }\n\n    options = ret.options;\n    callback = ret.callback;\n\n    return executeLegacyOperation(this.s.topology, executeCommands, [this, options, callback]);\n  }\n\n  /**\n   * Handles final options before executing command\n   *\n   * An internal method. Do not invoke. Will not be accessible in the future\n   *\n   * @ignore\n   * @param {object} config\n   * @param {object} config.options\n   * @param {number} config.batch\n   * @param {function} config.resultHandler\n   * @param {function} callback\n   */\n  finalOptionsHandler(config, callback) {\n    const finalOptions = Object.assign({ ordered: this.isOrdered }, config.options);\n    if (this.s.writeConcern != null) {\n      finalOptions.writeConcern = this.s.writeConcern;\n    }\n\n    if (finalOptions.bypassDocumentValidation !== true) {\n      delete finalOptions.bypassDocumentValidation;\n    }\n\n    // Set an operationIf if provided\n    if (this.operationId) {\n      config.resultHandler.operationId = this.operationId;\n    }\n\n    // Serialize functions\n    if (this.s.options.serializeFunctions) {\n      finalOptions.serializeFunctions = true;\n    }\n\n    // Ignore undefined\n    if (this.s.options.ignoreUndefined) {\n      finalOptions.ignoreUndefined = true;\n    }\n\n    // Is the bypassDocumentValidation options specific\n    if (this.s.bypassDocumentValidation === true) {\n      finalOptions.bypassDocumentValidation = true;\n    }\n\n    // Is the checkKeys option disabled\n    if (this.s.checkKeys === false) {\n      finalOptions.checkKeys = false;\n    }\n\n    if (finalOptions.retryWrites) {\n      if (config.batch.batchType === UPDATE) {\n        finalOptions.retryWrites =\n          finalOptions.retryWrites && !config.batch.operations.some(op => op.multi);\n      }\n\n      if (config.batch.batchType === REMOVE) {\n        finalOptions.retryWrites =\n          finalOptions.retryWrites && !config.batch.operations.some(op => op.limit === 0);\n      }\n    }\n\n    try {\n      if (config.batch.batchType === INSERT) {\n        this.s.topology.insert(\n          this.s.namespace,\n          config.batch.operations,\n          finalOptions,\n          config.resultHandler\n        );\n      } else if (config.batch.batchType === UPDATE) {\n        this.s.topology.update(\n          this.s.namespace,\n          config.batch.operations,\n          finalOptions,\n          config.resultHandler\n        );\n      } else if (config.batch.batchType === REMOVE) {\n        this.s.topology.remove(\n          this.s.namespace,\n          config.batch.operations,\n          finalOptions,\n          config.resultHandler\n        );\n      }\n    } catch (err) {\n      // Force top level error\n      err.ok = 0;\n      // Merge top level error and return\n      handleCallback(callback, null, mergeBatchResults(config.batch, this.s.bulkResult, err, null));\n    }\n  }\n\n  /**\n   * Handles the write error before executing commands\n   *\n   * An internal helper method. Do not invoke directly. Will be going away in the future\n   *\n   * @ignore\n   * @param {function} callback\n   * @param {BulkWriteResult} writeResult\n   * @param {class} self either OrderedBulkOperation or UnorderdBulkOperation\n   */\n  handleWriteError(callback, writeResult) {\n    if (this.s.bulkResult.writeErrors.length > 0) {\n      if (this.s.bulkResult.writeErrors.length === 1) {\n        handleCallback(\n          callback,\n          new BulkWriteError(toError(this.s.bulkResult.writeErrors[0]), writeResult),\n          null\n        );\n        return true;\n      }\n\n      const msg = this.s.bulkResult.writeErrors[0].errmsg\n        ? this.s.bulkResult.writeErrors[0].errmsg\n        : 'write operation failed';\n\n      handleCallback(\n        callback,\n        new BulkWriteError(\n          toError({\n            message: msg,\n            code: this.s.bulkResult.writeErrors[0].code,\n            writeErrors: this.s.bulkResult.writeErrors\n          }),\n          writeResult\n        ),\n        null\n      );\n      return true;\n    } else if (writeResult.getWriteConcernError()) {\n      handleCallback(\n        callback,\n        new BulkWriteError(toError(writeResult.getWriteConcernError()), writeResult),\n        null\n      );\n      return true;\n    }\n  }\n}\n\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\n  enumerable: true,\n  get: function() {\n    return this.s.currentIndex;\n  }\n});\n\n// Exports symbols\nmodule.exports = {\n  Batch,\n  BulkOperationBase,\n  bson,\n  INSERT: INSERT,\n  UPDATE: UPDATE,\n  REMOVE: REMOVE,\n  BulkWriteError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2J1bGsvY29tbW9uLmpzP2RkOTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsYUFBYSxtQkFBTyxDQUFDLENBQVM7QUFDOUIsbUJBQW1CLG1CQUFPLENBQUMsQ0FBUztBQUNwQyxpQkFBaUIsbUJBQU8sQ0FBQyxDQUFTO0FBQ2xDLGFBQWEsbUJBQU8sQ0FBQyxDQUFTO0FBQzlCLCtCQUErQixtQkFBTyxDQUFDLENBQVM7QUFDaEQsZ0JBQWdCLG1CQUFPLENBQUMsRUFBVTtBQUNsQyx1QkFBdUIsbUJBQU8sQ0FBQyxFQUFVO0FBQ3pDLDZCQUE2QixtQkFBTyxDQUFDLEVBQVU7QUFDL0MsMEJBQTBCLG1CQUFPLENBQUMsRUFBVTtBQUM1QywrQkFBK0IsbUJBQU8sQ0FBQyxFQUFVO0FBQ2pELHNCQUFzQixtQkFBTyxDQUFDLEVBQVU7O0FBRXhDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EscUJBQXFCLDJDQUEyQztBQUNoRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxvQ0FBb0MsNENBQTRDO0FBQ2hGO0FBQ0E7O0FBRUE7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLDhCQUE4Qix5QkFBeUI7QUFDdkQ7O0FBRUE7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLGdDQUFnQyxnQkFBZ0I7QUFDaEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsWUFBWTtBQUNaOztBQUVBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSx5QkFBeUIsOEJBQThCO0FBQ3ZEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIsNEJBQTRCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQiwrQkFBK0I7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxxQ0FBcUMsZ0NBQWdDO0FBQ3JFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxrQkFBa0I7QUFDN0IsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxvQkFBb0I7QUFDakMsYUFBYSxnQkFBZ0I7QUFDN0IsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0RBQXNELDZCQUE2QjtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsNENBQTRDO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPLDhEQUE4RDtBQUNsRixjQUFjLFdBQVc7QUFDekIsY0FBYyw0Q0FBNEM7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU8sOERBQThEO0FBQ2xGLGNBQWMsV0FBVztBQUN6QixjQUFjLDRDQUE0QztBQUMxRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixjQUFjLFdBQVc7QUFDekIsY0FBYyw0Q0FBNEM7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFdBQVc7QUFDekIsY0FBYyxjQUFjO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFdBQVc7QUFDekIsY0FBYyw0Q0FBNEM7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFdBQVc7QUFDekIsY0FBYyw0Q0FBNEM7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBLG9EQUFvRCx5QkFBeUI7QUFDN0U7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsY0FBYztBQUNkLGNBQWMsa0JBQWtCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPLG9EQUFvRDtBQUN4RSxjQUFjLFdBQVc7QUFDekIsY0FBYyxjQUFjO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsT0FBTyxhQUFhLFFBQVEsT0FBTyxFQUFFO0FBQ3ZEO0FBQ0E7QUFDQSxrQkFBa0IsT0FBTyxVQUFVLFFBQVEsT0FBTyxFQUFFO0FBQ3BEO0FBQ0E7QUFDQSxrQkFBa0IsT0FBTyxzQkFBc0IsUUFBUSxPQUFPLEVBQUU7QUFDaEU7QUFDQTtBQUNBLGtCQUFrQixPQUFPO0FBQ3pCO0FBQ0E7QUFDQSxrQkFBa0IsT0FBTztBQUN6QjtBQUNBO0FBQ0Esa0JBQWtCLE9BQU8sY0FBYyxRQUFRO0FBQy9DO0FBQ0E7QUFDQSxnQkFBZ0IsWUFBWSxnQkFBZ0IsTUFBTSxnQkFBZ0IsRUFBRTtBQUNwRSxRQUFRLFFBQVEsU0FBUyx1QkFBdUIsRUFBRTtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixjQUFjLGtCQUFrQjtBQUNoQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQkFBcUIsMEJBQTBCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLEVBQUU7QUFDZixhQUFhLEVBQUU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxNQUFNO0FBQ25CLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQSwwRUFBMEU7QUFDMUU7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxXQUFXO0FBQ3hCLGFBQWEsZ0JBQWdCO0FBQzdCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxhQUFhO0FBQzFCLGFBQWEsT0FBTztBQUNwQixhQUFhLGdCQUFnQjtBQUM3QixhQUFhLE9BQU87QUFDcEIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLGlDQUFpQztBQUM5QyxjQUFjLFdBQVc7QUFDekIsY0FBYyxXQUFXO0FBQ3pCLGNBQWMsYUFBYTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsU0FBUztBQUN0QixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBLHdDQUF3QywwQkFBMEI7QUFDbEU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsU0FBUztBQUN0QixhQUFhLGdCQUFnQjtBQUM3QixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBMb25nID0gcmVxdWlyZSgnLi4vY29yZScpLkJTT04uTG9uZztcbmNvbnN0IE1vbmdvRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlJykuTW9uZ29FcnJvcjtcbmNvbnN0IE9iamVjdElEID0gcmVxdWlyZSgnLi4vY29yZScpLkJTT04uT2JqZWN0SUQ7XG5jb25zdCBCU09OID0gcmVxdWlyZSgnLi4vY29yZScpLkJTT047XG5jb25zdCBNb25nb1dyaXRlQ29uY2VybkVycm9yID0gcmVxdWlyZSgnLi4vY29yZScpLk1vbmdvV3JpdGVDb25jZXJuRXJyb3I7XG5jb25zdCB0b0Vycm9yID0gcmVxdWlyZSgnLi4vdXRpbHMnKS50b0Vycm9yO1xuY29uc3QgaGFuZGxlQ2FsbGJhY2sgPSByZXF1aXJlKCcuLi91dGlscycpLmhhbmRsZUNhbGxiYWNrO1xuY29uc3QgYXBwbHlSZXRyeWFibGVXcml0ZXMgPSByZXF1aXJlKCcuLi91dGlscycpLmFwcGx5UmV0cnlhYmxlV3JpdGVzO1xuY29uc3QgYXBwbHlXcml0ZUNvbmNlcm4gPSByZXF1aXJlKCcuLi91dGlscycpLmFwcGx5V3JpdGVDb25jZXJuO1xuY29uc3QgZXhlY3V0ZUxlZ2FjeU9wZXJhdGlvbiA9IHJlcXVpcmUoJy4uL3V0aWxzJykuZXhlY3V0ZUxlZ2FjeU9wZXJhdGlvbjtcbmNvbnN0IGlzUHJvbWlzZUxpa2UgPSByZXF1aXJlKCcuLi91dGlscycpLmlzUHJvbWlzZUxpa2U7XG5cbi8vIEVycm9yIGNvZGVzXG5jb25zdCBXUklURV9DT05DRVJOX0VSUk9SID0gNjQ7XG5cbi8vIEluc2VydCB0eXBlc1xuY29uc3QgSU5TRVJUID0gMTtcbmNvbnN0IFVQREFURSA9IDI7XG5jb25zdCBSRU1PVkUgPSAzO1xuXG5jb25zdCBic29uID0gbmV3IEJTT04oW1xuICBCU09OLkJpbmFyeSxcbiAgQlNPTi5Db2RlLFxuICBCU09OLkRCUmVmLFxuICBCU09OLkRlY2ltYWwxMjgsXG4gIEJTT04uRG91YmxlLFxuICBCU09OLkludDMyLFxuICBCU09OLkxvbmcsXG4gIEJTT04uTWFwLFxuICBCU09OLk1heEtleSxcbiAgQlNPTi5NaW5LZXksXG4gIEJTT04uT2JqZWN0SWQsXG4gIEJTT04uQlNPTlJlZ0V4cCxcbiAgQlNPTi5TeW1ib2wsXG4gIEJTT04uVGltZXN0YW1wXG5dKTtcblxuLyoqXG4gKiBLZWVwcyB0aGUgc3RhdGUgb2YgYSB1bm9yZGVyZWQgYmF0Y2ggc28gd2UgY2FuIHJld3JpdGUgdGhlIHJlc3VsdHNcbiAqIGNvcnJlY3RseSBhZnRlciBjb21tYW5kIGV4ZWN1dGlvblxuICogQGlnbm9yZVxuICovXG5jbGFzcyBCYXRjaCB7XG4gIGNvbnN0cnVjdG9yKGJhdGNoVHlwZSwgb3JpZ2luYWxaZXJvSW5kZXgpIHtcbiAgICB0aGlzLm9yaWdpbmFsWmVyb0luZGV4ID0gb3JpZ2luYWxaZXJvSW5kZXg7XG4gICAgdGhpcy5jdXJyZW50SW5kZXggPSAwO1xuICAgIHRoaXMub3JpZ2luYWxJbmRleGVzID0gW107XG4gICAgdGhpcy5iYXRjaFR5cGUgPSBiYXRjaFR5cGU7XG4gICAgdGhpcy5vcGVyYXRpb25zID0gW107XG4gICAgdGhpcy5zaXplID0gMDtcbiAgICB0aGlzLnNpemVCeXRlcyA9IDA7XG4gIH1cbn1cblxuLyoqXG4gKiBAY2xhc3NkZXNjXG4gKiBUaGUgcmVzdWx0IG9mIGEgYnVsayB3cml0ZS5cbiAqL1xuY2xhc3MgQnVsa1dyaXRlUmVzdWx0IHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBCdWxrV3JpdGVSZXN1bHQgaW5zdGFuY2VcbiAgICpcbiAgICogKipOT1RFOioqIEludGVybmFsIFR5cGUsIGRvIG5vdCBpbnN0YW50aWF0ZSBkaXJlY3RseVxuICAgKi9cbiAgY29uc3RydWN0b3IoYnVsa1Jlc3VsdCkge1xuICAgIHRoaXMucmVzdWx0ID0gYnVsa1Jlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBFdmFsdWF0ZXMgdG8gdHJ1ZSBpZiB0aGUgYnVsayBvcGVyYXRpb24gY29ycmVjdGx5IGV4ZWN1dGVzXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IG9rKCkge1xuICAgIHJldHVybiB0aGlzLnJlc3VsdC5vaztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIGluc2VydGVkIGRvY3VtZW50c1xuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IG5JbnNlcnRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN1bHQubkluc2VydGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiB1cHNlcnRlZCBkb2N1bWVudHNcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBuVXBzZXJ0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdWx0Lm5VcHNlcnRlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgbWF0Y2hlZCBkb2N1bWVudHNcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBuTWF0Y2hlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN1bHQubk1hdGNoZWQ7XG4gIH1cblxuICAvKipcbiAgICogTnVtYmVyIG9mIGRvY3VtZW50cyB1cGRhdGVkIHBoeXNpY2FsbHkgb24gZGlza1xuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IG5Nb2RpZmllZCgpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN1bHQubk1vZGlmaWVkO1xuICB9XG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByZW1vdmVkIGRvY3VtZW50c1xuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IG5SZW1vdmVkKCkge1xuICAgIHJldHVybiB0aGlzLnJlc3VsdC5uUmVtb3ZlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGFsbCBpbnNlcnRlZCBpZHNcbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0W119XG4gICAqL1xuICBnZXRJbnNlcnRlZElkcygpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN1bHQuaW5zZXJ0ZWRJZHM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBhcnJheSBvZiBhbGwgdXBzZXJ0ZWQgaWRzXG4gICAqXG4gICAqIEByZXR1cm4ge29iamVjdFtdfVxuICAgKi9cbiAgZ2V0VXBzZXJ0ZWRJZHMoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdWx0LnVwc2VydGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHVwc2VydGVkIGlkIGF0IHRoZSBnaXZlbiBpbmRleFxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggdGhlIG51bWJlciBvZiB0aGUgdXBzZXJ0ZWQgaWQgdG8gcmV0dXJuLCByZXR1cm5zIHVuZGVmaW5lZCBpZiBubyByZXN1bHQgZm9yIHBhc3NlZCBpbiBpbmRleFxuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqL1xuICBnZXRVcHNlcnRlZElkQXQoaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN1bHQudXBzZXJ0ZWRbaW5kZXhdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgcmF3IGludGVybmFsIHJlc3VsdFxuICAgKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqL1xuICBnZXRSYXdSZXNwb25zZSgpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBidWxrIG9wZXJhdGlvbiBjb250YWlucyBhIHdyaXRlIGVycm9yXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBoYXNXcml0ZUVycm9ycygpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN1bHQud3JpdGVFcnJvcnMubGVuZ3RoID4gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2Ygd3JpdGUgZXJyb3JzIG9mZiB0aGUgYnVsayBvcGVyYXRpb25cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0V3JpdGVFcnJvckNvdW50KCkge1xuICAgIHJldHVybiB0aGlzLnJlc3VsdC53cml0ZUVycm9ycy5sZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHNwZWNpZmljIHdyaXRlIGVycm9yIG9iamVjdFxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggb2YgdGhlIHdyaXRlIGVycm9yIHRvIHJldHVybiwgcmV0dXJucyBudWxsIGlmIHRoZXJlIGlzIG5vIHJlc3VsdCBmb3IgcGFzc2VkIGluIGluZGV4XG4gICAqIEByZXR1cm4ge1dyaXRlRXJyb3J9XG4gICAqL1xuICBnZXRXcml0ZUVycm9yQXQoaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPCB0aGlzLnJlc3VsdC53cml0ZUVycm9ycy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlc3VsdC53cml0ZUVycm9yc1tpbmRleF07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIGFsbCB3cml0ZSBlcnJvcnNcbiAgICpcbiAgICogQHJldHVybiB7V3JpdGVFcnJvcltdfVxuICAgKi9cbiAgZ2V0V3JpdGVFcnJvcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdWx0LndyaXRlRXJyb3JzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIGxhc3RPcCBpZiBhdmFpbGFibGVcbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKi9cbiAgZ2V0TGFzdE9wKCkge1xuICAgIHJldHVybiB0aGlzLnJlc3VsdC5sYXN0T3A7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgdGhlIHdyaXRlIGNvbmNlcm4gZXJyb3IgaWYgYW55XG4gICAqXG4gICAqIEByZXR1cm4ge1dyaXRlQ29uY2VybkVycm9yfVxuICAgKi9cbiAgZ2V0V3JpdGVDb25jZXJuRXJyb3IoKSB7XG4gICAgaWYgKHRoaXMucmVzdWx0LndyaXRlQ29uY2VybkVycm9ycy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSBpZiAodGhpcy5yZXN1bHQud3JpdGVDb25jZXJuRXJyb3JzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgLy8gUmV0dXJuIHRoZSBlcnJvclxuICAgICAgcmV0dXJuIHRoaXMucmVzdWx0LndyaXRlQ29uY2VybkVycm9yc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ29tYmluZSB0aGUgZXJyb3JzXG4gICAgICBsZXQgZXJybXNnID0gJyc7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucmVzdWx0LndyaXRlQ29uY2VybkVycm9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBlcnIgPSB0aGlzLnJlc3VsdC53cml0ZUNvbmNlcm5FcnJvcnNbaV07XG4gICAgICAgIGVycm1zZyA9IGVycm1zZyArIGVyci5lcnJtc2c7XG5cbiAgICAgICAgLy8gVE9ETzogU29tZXRoaW5nIGJldHRlclxuICAgICAgICBpZiAoaSA9PT0gMCkgZXJybXNnID0gZXJybXNnICsgJyBhbmQgJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBXcml0ZUNvbmNlcm5FcnJvcih7IGVycm1zZzogZXJybXNnLCBjb2RlOiBXUklURV9DT05DRVJOX0VSUk9SIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqL1xuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBgQnVsa1dyaXRlUmVzdWx0KCR7dGhpcy50b0pTT04odGhpcy5yZXN1bHQpfSlgO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpc09rKCkge1xuICAgIHJldHVybiB0aGlzLnJlc3VsdC5vayA9PT0gMTtcbiAgfVxufVxuXG4vKipcbiAqIEBjbGFzc2Rlc2MgQW4gZXJyb3IgcmVwcmVzZW50aW5nIGEgZmFpbHVyZSBieSB0aGUgc2VydmVyIHRvIGFwcGx5IHRoZSByZXF1ZXN0ZWQgd3JpdGUgY29uY2VybiB0byB0aGUgYnVsayBvcGVyYXRpb24uXG4gKi9cbmNsYXNzIFdyaXRlQ29uY2VybkVycm9yIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBXcml0ZUNvbmNlcm5FcnJvciBpbnN0YW5jZVxuICAgKlxuICAgKiAqKk5PVEU6KiogSW50ZXJuYWwgVHlwZSwgZG8gbm90IGluc3RhbnRpYXRlIGRpcmVjdGx5XG4gICAqL1xuICBjb25zdHJ1Y3RvcihlcnIpIHtcbiAgICB0aGlzLmVyciA9IGVycjtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcml0ZSBjb25jZXJuIGVycm9yIGNvZGUuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgY29kZSgpIHtcbiAgICByZXR1cm4gdGhpcy5lcnIuY29kZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcml0ZSBjb25jZXJuIGVycm9yIG1lc3NhZ2UuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgZXJybXNnKCkge1xuICAgIHJldHVybiB0aGlzLmVyci5lcnJtc2c7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKi9cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB7IGNvZGU6IHRoaXMuZXJyLmNvZGUsIGVycm1zZzogdGhpcy5lcnIuZXJybXNnIH07XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGBXcml0ZUNvbmNlcm5FcnJvcigke3RoaXMuZXJyLmVycm1zZ30pYDtcbiAgfVxufVxuXG4vKipcbiAqIEBjbGFzc2Rlc2MgQW4gZXJyb3IgdGhhdCBvY2N1cnJlZCBkdXJpbmcgYSBCdWxrV3JpdGUgb24gdGhlIHNlcnZlci5cbiAqL1xuY2xhc3MgV3JpdGVFcnJvciB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgV3JpdGVFcnJvciBpbnN0YW5jZVxuICAgKlxuICAgKiAqKk5PVEU6KiogSW50ZXJuYWwgVHlwZSwgZG8gbm90IGluc3RhbnRpYXRlIGRpcmVjdGx5XG4gICAqL1xuICBjb25zdHJ1Y3RvcihlcnIpIHtcbiAgICB0aGlzLmVyciA9IGVycjtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcml0ZUVycm9yIGNvZGUuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgY29kZSgpIHtcbiAgICByZXR1cm4gdGhpcy5lcnIuY29kZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcml0ZUVycm9yIG9yaWdpbmFsIGJ1bGsgb3BlcmF0aW9uIGluZGV4LlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IGluZGV4KCkge1xuICAgIHJldHVybiB0aGlzLmVyci5pbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcml0ZUVycm9yIG1lc3NhZ2UuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgZXJybXNnKCkge1xuICAgIHJldHVybiB0aGlzLmVyci5lcnJtc2c7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdW5kZXJseWluZyBvcGVyYXRpb24gdGhhdCBjYXVzZWQgdGhlIGVycm9yXG4gICAqIEByZXR1cm4ge29iamVjdH1cbiAgICovXG4gIGdldE9wZXJhdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5lcnIub3A7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKi9cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB7IGNvZGU6IHRoaXMuZXJyLmNvZGUsIGluZGV4OiB0aGlzLmVyci5pbmRleCwgZXJybXNnOiB0aGlzLmVyci5lcnJtc2csIG9wOiB0aGlzLmVyci5vcCB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBgV3JpdGVFcnJvcigke0pTT04uc3RyaW5naWZ5KHRoaXMudG9KU09OKCkpfSlgO1xuICB9XG59XG5cbi8qKlxuICogTWVyZ2VzIHJlc3VsdHMgaW50byBzaGFyZWQgZGF0YSBzdHJ1Y3R1cmVcbiAqIEBpZ25vcmVcbiAqL1xuZnVuY3Rpb24gbWVyZ2VCYXRjaFJlc3VsdHMoYmF0Y2gsIGJ1bGtSZXN1bHQsIGVyciwgcmVzdWx0KSB7XG4gIC8vIElmIHdlIGhhdmUgYW4gZXJyb3Igc2V0IHRoZSByZXN1bHQgdG8gYmUgdGhlIGVyciBvYmplY3RcbiAgaWYgKGVycikge1xuICAgIHJlc3VsdCA9IGVycjtcbiAgfSBlbHNlIGlmIChyZXN1bHQgJiYgcmVzdWx0LnJlc3VsdCkge1xuICAgIHJlc3VsdCA9IHJlc3VsdC5yZXN1bHQ7XG4gIH0gZWxzZSBpZiAocmVzdWx0ID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBEbyB3ZSBoYXZlIGEgdG9wIGxldmVsIGVycm9yIHN0b3AgcHJvY2Vzc2luZyBhbmQgcmV0dXJuXG4gIGlmIChyZXN1bHQub2sgPT09IDAgJiYgYnVsa1Jlc3VsdC5vayA9PT0gMSkge1xuICAgIGJ1bGtSZXN1bHQub2sgPSAwO1xuXG4gICAgY29uc3Qgd3JpdGVFcnJvciA9IHtcbiAgICAgIGluZGV4OiAwLFxuICAgICAgY29kZTogcmVzdWx0LmNvZGUgfHwgMCxcbiAgICAgIGVycm1zZzogcmVzdWx0Lm1lc3NhZ2UsXG4gICAgICBvcDogYmF0Y2gub3BlcmF0aW9uc1swXVxuICAgIH07XG5cbiAgICBidWxrUmVzdWx0LndyaXRlRXJyb3JzLnB1c2gobmV3IFdyaXRlRXJyb3Iod3JpdGVFcnJvcikpO1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmIChyZXN1bHQub2sgPT09IDAgJiYgYnVsa1Jlc3VsdC5vayA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIERlYWwgd2l0aCBvcFRpbWUgaWYgYXZhaWxhYmxlXG4gIGlmIChyZXN1bHQub3BUaW1lIHx8IHJlc3VsdC5sYXN0T3ApIHtcbiAgICBjb25zdCBvcFRpbWUgPSByZXN1bHQubGFzdE9wIHx8IHJlc3VsdC5vcFRpbWU7XG4gICAgbGV0IGxhc3RPcFRTID0gbnVsbDtcbiAgICBsZXQgbGFzdE9wVCA9IG51bGw7XG5cbiAgICAvLyBXZSBoYXZlIGEgdGltZSBzdGFtcFxuICAgIGlmIChvcFRpbWUgJiYgb3BUaW1lLl9ic29udHlwZSA9PT0gJ1RpbWVzdGFtcCcpIHtcbiAgICAgIGlmIChidWxrUmVzdWx0Lmxhc3RPcCA9PSBudWxsKSB7XG4gICAgICAgIGJ1bGtSZXN1bHQubGFzdE9wID0gb3BUaW1lO1xuICAgICAgfSBlbHNlIGlmIChvcFRpbWUuZ3JlYXRlclRoYW4oYnVsa1Jlc3VsdC5sYXN0T3ApKSB7XG4gICAgICAgIGJ1bGtSZXN1bHQubGFzdE9wID0gb3BUaW1lO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBFeGlzdGluZyBUU1xuICAgICAgaWYgKGJ1bGtSZXN1bHQubGFzdE9wKSB7XG4gICAgICAgIGxhc3RPcFRTID1cbiAgICAgICAgICB0eXBlb2YgYnVsa1Jlc3VsdC5sYXN0T3AudHMgPT09ICdudW1iZXInXG4gICAgICAgICAgICA/IExvbmcuZnJvbU51bWJlcihidWxrUmVzdWx0Lmxhc3RPcC50cylcbiAgICAgICAgICAgIDogYnVsa1Jlc3VsdC5sYXN0T3AudHM7XG4gICAgICAgIGxhc3RPcFQgPVxuICAgICAgICAgIHR5cGVvZiBidWxrUmVzdWx0Lmxhc3RPcC50ID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyBMb25nLmZyb21OdW1iZXIoYnVsa1Jlc3VsdC5sYXN0T3AudClcbiAgICAgICAgICAgIDogYnVsa1Jlc3VsdC5sYXN0T3AudDtcbiAgICAgIH1cblxuICAgICAgLy8gQ3VycmVudCBPcFRpbWUgVFNcbiAgICAgIGNvbnN0IG9wVGltZVRTID0gdHlwZW9mIG9wVGltZS50cyA9PT0gJ251bWJlcicgPyBMb25nLmZyb21OdW1iZXIob3BUaW1lLnRzKSA6IG9wVGltZS50cztcbiAgICAgIGNvbnN0IG9wVGltZVQgPSB0eXBlb2Ygb3BUaW1lLnQgPT09ICdudW1iZXInID8gTG9uZy5mcm9tTnVtYmVyKG9wVGltZS50KSA6IG9wVGltZS50O1xuXG4gICAgICAvLyBDb21wYXJlIHRoZSBvcFRpbWUnc1xuICAgICAgaWYgKGJ1bGtSZXN1bHQubGFzdE9wID09IG51bGwpIHtcbiAgICAgICAgYnVsa1Jlc3VsdC5sYXN0T3AgPSBvcFRpbWU7XG4gICAgICB9IGVsc2UgaWYgKG9wVGltZVRTLmdyZWF0ZXJUaGFuKGxhc3RPcFRTKSkge1xuICAgICAgICBidWxrUmVzdWx0Lmxhc3RPcCA9IG9wVGltZTtcbiAgICAgIH0gZWxzZSBpZiAob3BUaW1lVFMuZXF1YWxzKGxhc3RPcFRTKSkge1xuICAgICAgICBpZiAob3BUaW1lVC5ncmVhdGVyVGhhbihsYXN0T3BUKSkge1xuICAgICAgICAgIGJ1bGtSZXN1bHQubGFzdE9wID0gb3BUaW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgd2UgaGF2ZSBhbiBpbnNlcnQgQmF0Y2ggdHlwZVxuICBpZiAoYmF0Y2guYmF0Y2hUeXBlID09PSBJTlNFUlQgJiYgcmVzdWx0Lm4pIHtcbiAgICBidWxrUmVzdWx0Lm5JbnNlcnRlZCA9IGJ1bGtSZXN1bHQubkluc2VydGVkICsgcmVzdWx0Lm47XG4gIH1cblxuICAvLyBJZiB3ZSBoYXZlIGFuIGluc2VydCBCYXRjaCB0eXBlXG4gIGlmIChiYXRjaC5iYXRjaFR5cGUgPT09IFJFTU9WRSAmJiByZXN1bHQubikge1xuICAgIGJ1bGtSZXN1bHQublJlbW92ZWQgPSBidWxrUmVzdWx0Lm5SZW1vdmVkICsgcmVzdWx0Lm47XG4gIH1cblxuICBsZXQgblVwc2VydGVkID0gMDtcblxuICAvLyBXZSBoYXZlIGFuIGFycmF5IG9mIHVwc2VydGVkIHZhbHVlcywgd2UgbmVlZCB0byByZXdyaXRlIHRoZSBpbmRleGVzXG4gIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdC51cHNlcnRlZCkpIHtcbiAgICBuVXBzZXJ0ZWQgPSByZXN1bHQudXBzZXJ0ZWQubGVuZ3RoO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHQudXBzZXJ0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGJ1bGtSZXN1bHQudXBzZXJ0ZWQucHVzaCh7XG4gICAgICAgIGluZGV4OiByZXN1bHQudXBzZXJ0ZWRbaV0uaW5kZXggKyBiYXRjaC5vcmlnaW5hbFplcm9JbmRleCxcbiAgICAgICAgX2lkOiByZXN1bHQudXBzZXJ0ZWRbaV0uX2lkXG4gICAgICB9KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocmVzdWx0LnVwc2VydGVkKSB7XG4gICAgblVwc2VydGVkID0gMTtcblxuICAgIGJ1bGtSZXN1bHQudXBzZXJ0ZWQucHVzaCh7XG4gICAgICBpbmRleDogYmF0Y2gub3JpZ2luYWxaZXJvSW5kZXgsXG4gICAgICBfaWQ6IHJlc3VsdC51cHNlcnRlZFxuICAgIH0pO1xuICB9XG5cbiAgLy8gSWYgd2UgaGF2ZSBhbiB1cGRhdGUgQmF0Y2ggdHlwZVxuICBpZiAoYmF0Y2guYmF0Y2hUeXBlID09PSBVUERBVEUgJiYgcmVzdWx0Lm4pIHtcbiAgICBjb25zdCBuTW9kaWZpZWQgPSByZXN1bHQubk1vZGlmaWVkO1xuICAgIGJ1bGtSZXN1bHQublVwc2VydGVkID0gYnVsa1Jlc3VsdC5uVXBzZXJ0ZWQgKyBuVXBzZXJ0ZWQ7XG4gICAgYnVsa1Jlc3VsdC5uTWF0Y2hlZCA9IGJ1bGtSZXN1bHQubk1hdGNoZWQgKyAocmVzdWx0Lm4gLSBuVXBzZXJ0ZWQpO1xuXG4gICAgaWYgKHR5cGVvZiBuTW9kaWZpZWQgPT09ICdudW1iZXInKSB7XG4gICAgICBidWxrUmVzdWx0Lm5Nb2RpZmllZCA9IGJ1bGtSZXN1bHQubk1vZGlmaWVkICsgbk1vZGlmaWVkO1xuICAgIH0gZWxzZSB7XG4gICAgICBidWxrUmVzdWx0Lm5Nb2RpZmllZCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0LndyaXRlRXJyb3JzKSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0LndyaXRlRXJyb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB3cml0ZUVycm9yID0ge1xuICAgICAgICBpbmRleDogYmF0Y2gub3JpZ2luYWxaZXJvSW5kZXggKyByZXN1bHQud3JpdGVFcnJvcnNbaV0uaW5kZXgsXG4gICAgICAgIGNvZGU6IHJlc3VsdC53cml0ZUVycm9yc1tpXS5jb2RlLFxuICAgICAgICBlcnJtc2c6IHJlc3VsdC53cml0ZUVycm9yc1tpXS5lcnJtc2csXG4gICAgICAgIG9wOiBiYXRjaC5vcGVyYXRpb25zW3Jlc3VsdC53cml0ZUVycm9yc1tpXS5pbmRleF1cbiAgICAgIH07XG5cbiAgICAgIGJ1bGtSZXN1bHQud3JpdGVFcnJvcnMucHVzaChuZXcgV3JpdGVFcnJvcih3cml0ZUVycm9yKSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHJlc3VsdC53cml0ZUNvbmNlcm5FcnJvcikge1xuICAgIGJ1bGtSZXN1bHQud3JpdGVDb25jZXJuRXJyb3JzLnB1c2gobmV3IFdyaXRlQ29uY2VybkVycm9yKHJlc3VsdC53cml0ZUNvbmNlcm5FcnJvcikpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV4ZWN1dGVDb21tYW5kcyhidWxrT3BlcmF0aW9uLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZiAoYnVsa09wZXJhdGlvbi5zLmJhdGNoZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKGNhbGxiYWNrLCBudWxsLCBuZXcgQnVsa1dyaXRlUmVzdWx0KGJ1bGtPcGVyYXRpb24ucy5idWxrUmVzdWx0KSk7XG4gIH1cblxuICBjb25zdCBiYXRjaCA9IGJ1bGtPcGVyYXRpb24ucy5iYXRjaGVzLnNoaWZ0KCk7XG5cbiAgZnVuY3Rpb24gcmVzdWx0SGFuZGxlcihlcnIsIHJlc3VsdCkge1xuICAgIC8vIEVycm9yIGlzIGEgZHJpdmVyIHJlbGF0ZWQgZXJyb3Igbm90IGEgYnVsayBvcCBlcnJvciwgdGVybWluYXRlXG4gICAgaWYgKCgoZXJyICYmIGVyci5kcml2ZXIpIHx8IChlcnIgJiYgZXJyLm1lc3NhZ2UpKSAmJiAhKGVyciBpbnN0YW5jZW9mIE1vbmdvV3JpdGVDb25jZXJuRXJyb3IpKSB7XG4gICAgICByZXR1cm4gaGFuZGxlQ2FsbGJhY2soY2FsbGJhY2ssIGVycik7XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgaGF2ZSBhbmQgZXJyb3JcbiAgICBpZiAoZXJyKSBlcnIub2sgPSAwO1xuICAgIGlmIChlcnIgaW5zdGFuY2VvZiBNb25nb1dyaXRlQ29uY2VybkVycm9yKSB7XG4gICAgICByZXR1cm4gaGFuZGxlTW9uZ29Xcml0ZUNvbmNlcm5FcnJvcihiYXRjaCwgYnVsa09wZXJhdGlvbi5zLmJ1bGtSZXN1bHQsIGVyciwgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIC8vIE1lcmdlIHRoZSByZXN1bHRzIHRvZ2V0aGVyXG4gICAgY29uc3Qgd3JpdGVSZXN1bHQgPSBuZXcgQnVsa1dyaXRlUmVzdWx0KGJ1bGtPcGVyYXRpb24ucy5idWxrUmVzdWx0KTtcbiAgICBjb25zdCBtZXJnZVJlc3VsdCA9IG1lcmdlQmF0Y2hSZXN1bHRzKGJhdGNoLCBidWxrT3BlcmF0aW9uLnMuYnVsa1Jlc3VsdCwgZXJyLCByZXN1bHQpO1xuICAgIGlmIChtZXJnZVJlc3VsdCAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gaGFuZGxlQ2FsbGJhY2soY2FsbGJhY2ssIG51bGwsIHdyaXRlUmVzdWx0KTtcbiAgICB9XG5cbiAgICBpZiAoYnVsa09wZXJhdGlvbi5oYW5kbGVXcml0ZUVycm9yKGNhbGxiYWNrLCB3cml0ZVJlc3VsdCkpIHJldHVybjtcblxuICAgIC8vIEV4ZWN1dGUgdGhlIG5leHQgY29tbWFuZCBpbiBsaW5lXG4gICAgZXhlY3V0ZUNvbW1hbmRzKGJ1bGtPcGVyYXRpb24sIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGJ1bGtPcGVyYXRpb24uZmluYWxPcHRpb25zSGFuZGxlcih7IG9wdGlvbnMsIGJhdGNoLCByZXN1bHRIYW5kbGVyIH0sIGNhbGxiYWNrKTtcbn1cblxuLyoqXG4gKiBoYW5kbGVzIHdyaXRlIGNvbmNlcm4gZXJyb3JcbiAqXG4gKiBAaWdub3JlXG4gKiBAcGFyYW0ge29iamVjdH0gYmF0Y2hcbiAqIEBwYXJhbSB7b2JqZWN0fSBidWxrUmVzdWx0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9yZGVyZWRcbiAqIEBwYXJhbSB7V3JpdGVDb25jZXJuRXJyb3J9IGVyclxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqL1xuZnVuY3Rpb24gaGFuZGxlTW9uZ29Xcml0ZUNvbmNlcm5FcnJvcihiYXRjaCwgYnVsa1Jlc3VsdCwgZXJyLCBjYWxsYmFjaykge1xuICBtZXJnZUJhdGNoUmVzdWx0cyhiYXRjaCwgYnVsa1Jlc3VsdCwgbnVsbCwgZXJyLnJlc3VsdCk7XG5cbiAgY29uc3Qgd3JhcHBlZFdyaXRlQ29uY2VybkVycm9yID0gbmV3IFdyaXRlQ29uY2VybkVycm9yKHtcbiAgICBlcnJtc2c6IGVyci5yZXN1bHQud3JpdGVDb25jZXJuRXJyb3IuZXJybXNnLFxuICAgIGNvZGU6IGVyci5yZXN1bHQud3JpdGVDb25jZXJuRXJyb3IucmVzdWx0XG4gIH0pO1xuICByZXR1cm4gaGFuZGxlQ2FsbGJhY2soXG4gICAgY2FsbGJhY2ssXG4gICAgbmV3IEJ1bGtXcml0ZUVycm9yKHRvRXJyb3Iod3JhcHBlZFdyaXRlQ29uY2VybkVycm9yKSwgbmV3IEJ1bGtXcml0ZVJlc3VsdChidWxrUmVzdWx0KSksXG4gICAgbnVsbFxuICApO1xufVxuXG4vKipcbiAqIEBjbGFzc2Rlc2MgQW4gZXJyb3IgaW5kaWNhdGluZyBhbiB1bnN1Y2Nlc3NmdWwgQnVsayBXcml0ZVxuICovXG5jbGFzcyBCdWxrV3JpdGVFcnJvciBleHRlbmRzIE1vbmdvRXJyb3Ige1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBCdWxrV3JpdGVFcnJvclxuICAgKlxuICAgKiBAcGFyYW0ge0Vycm9yfHN0cmluZ3xvYmplY3R9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2VcbiAgICogQHBhcmFtIHtCdWxrV3JpdGVSZXN1bHR9IHJlc3VsdCBUaGUgcmVzdWx0IG9mIHRoZSBidWxrIHdyaXRlIG9wZXJhdGlvblxuICAgKiBAZXh0ZW5kcyB7TW9uZ29FcnJvcn1cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVycm9yLCByZXN1bHQpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gZXJyb3IuZXJyIHx8IGVycm9yLmVycm1zZyB8fCBlcnJvci5lcnJNZXNzYWdlIHx8IGVycm9yO1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBlcnJvcik7XG5cbiAgICB0aGlzLm5hbWUgPSAnQnVsa1dyaXRlRXJyb3InO1xuICAgIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xuICB9XG59XG5cbi8qKlxuICogQGNsYXNzZGVzYyBBIGJ1aWxkZXIgb2JqZWN0IHRoYXQgaXMgcmV0dXJuZWQgZnJvbSB7QGxpbmsgQnVsa09wZXJhdGlvbkJhc2UjZmluZH0uXG4gKiBJcyB1c2VkIHRvIGJ1aWxkIGEgd3JpdGUgb3BlcmF0aW9uIHRoYXQgaW52b2x2ZXMgYSBxdWVyeSBmaWx0ZXIuXG4gKi9cbmNsYXNzIEZpbmRPcGVyYXRvcnMge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBGaW5kT3BlcmF0b3JzIG9iamVjdC5cbiAgICpcbiAgICogKipOT1RFOioqIEludGVybmFsIFR5cGUsIGRvIG5vdCBpbnN0YW50aWF0ZSBkaXJlY3RseVxuICAgKiBAcGFyYW0ge09yZGVyZWRCdWxrT3BlcmF0aW9ufFVub3JkZXJlZEJ1bGtPcGVyYXRpb259IGJ1bGtPcGVyYXRpb25cbiAgICovXG4gIGNvbnN0cnVjdG9yKGJ1bGtPcGVyYXRpb24pIHtcbiAgICB0aGlzLnMgPSBidWxrT3BlcmF0aW9uLnM7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgbXVsdGlwbGUgdXBkYXRlIG9wZXJhdGlvbiB0byB0aGUgYnVsayBvcGVyYXRpb25cbiAgICpcbiAgICogQG1ldGhvZFxuICAgKiBAcGFyYW0ge29iamVjdH0gdXBkYXRlRG9jdW1lbnQgQW4gdXBkYXRlIGZpZWxkIGZvciBhbiB1cGRhdGUgb3BlcmF0aW9uLiBTZWUge0BsaW5rIGh0dHBzOi8vZG9jcy5tb25nb2RiLmNvbS9tYW51YWwvcmVmZXJlbmNlL2NvbW1hbmQvdXBkYXRlLyN1cGRhdGUtY29tbWFuZC11IHUgZG9jdW1lbnRhdGlvbn1cbiAgICogQHRocm93cyB7TW9uZ29FcnJvcn0gSWYgb3BlcmF0aW9uIGNhbm5vdCBiZSBhZGRlZCB0byBidWxrIHdyaXRlXG4gICAqIEByZXR1cm4ge09yZGVyZWRCdWxrT3BlcmF0aW9ufFVub3JkZXJlZEJ1bGtPcGVyYXRpb259IEEgcmVmZXJlbmNlIHRvIHRoZSBwYXJlbnQgQnVsa09wZXJhdGlvblxuICAgKi9cbiAgdXBkYXRlKHVwZGF0ZURvY3VtZW50KSB7XG4gICAgLy8gUGVyZm9ybSB1cHNlcnRcbiAgICBjb25zdCB1cHNlcnQgPSB0eXBlb2YgdGhpcy5zLmN1cnJlbnRPcC51cHNlcnQgPT09ICdib29sZWFuJyA/IHRoaXMucy5jdXJyZW50T3AudXBzZXJ0IDogZmFsc2U7XG5cbiAgICAvLyBFc3RhYmxpc2ggdGhlIHVwZGF0ZSBjb21tYW5kXG4gICAgY29uc3QgZG9jdW1lbnQgPSB7XG4gICAgICBxOiB0aGlzLnMuY3VycmVudE9wLnNlbGVjdG9yLFxuICAgICAgdTogdXBkYXRlRG9jdW1lbnQsXG4gICAgICBtdWx0aTogdHJ1ZSxcbiAgICAgIHVwc2VydDogdXBzZXJ0XG4gICAgfTtcblxuICAgIC8vIENsZWFyIG91dCBjdXJyZW50IE9wXG4gICAgdGhpcy5zLmN1cnJlbnRPcCA9IG51bGw7XG4gICAgcmV0dXJuIHRoaXMucy5vcHRpb25zLmFkZFRvT3BlcmF0aW9uc0xpc3QodGhpcywgVVBEQVRFLCBkb2N1bWVudCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgc2luZ2xlIHVwZGF0ZSBvcGVyYXRpb24gdG8gdGhlIGJ1bGsgb3BlcmF0aW9uXG4gICAqXG4gICAqIEBtZXRob2RcbiAgICogQHBhcmFtIHtvYmplY3R9IHVwZGF0ZURvY3VtZW50IEFuIHVwZGF0ZSBmaWVsZCBmb3IgYW4gdXBkYXRlIG9wZXJhdGlvbi4gU2VlIHtAbGluayBodHRwczovL2RvY3MubW9uZ29kYi5jb20vbWFudWFsL3JlZmVyZW5jZS9jb21tYW5kL3VwZGF0ZS8jdXBkYXRlLWNvbW1hbmQtdSB1IGRvY3VtZW50YXRpb259XG4gICAqIEB0aHJvd3Mge01vbmdvRXJyb3J9IElmIG9wZXJhdGlvbiBjYW5ub3QgYmUgYWRkZWQgdG8gYnVsayB3cml0ZVxuICAgKiBAcmV0dXJuIHtPcmRlcmVkQnVsa09wZXJhdGlvbnxVbm9yZGVyZWRCdWxrT3BlcmF0aW9ufSBBIHJlZmVyZW5jZSB0byB0aGUgcGFyZW50IEJ1bGtPcGVyYXRpb25cbiAgICovXG4gIHVwZGF0ZU9uZSh1cGRhdGVEb2N1bWVudCkge1xuICAgIC8vIFBlcmZvcm0gdXBzZXJ0XG4gICAgY29uc3QgdXBzZXJ0ID0gdHlwZW9mIHRoaXMucy5jdXJyZW50T3AudXBzZXJ0ID09PSAnYm9vbGVhbicgPyB0aGlzLnMuY3VycmVudE9wLnVwc2VydCA6IGZhbHNlO1xuXG4gICAgLy8gRXN0YWJsaXNoIHRoZSB1cGRhdGUgY29tbWFuZFxuICAgIGNvbnN0IGRvY3VtZW50ID0ge1xuICAgICAgcTogdGhpcy5zLmN1cnJlbnRPcC5zZWxlY3RvcixcbiAgICAgIHU6IHVwZGF0ZURvY3VtZW50LFxuICAgICAgbXVsdGk6IGZhbHNlLFxuICAgICAgdXBzZXJ0OiB1cHNlcnRcbiAgICB9O1xuXG4gICAgLy8gQ2xlYXIgb3V0IGN1cnJlbnQgT3BcbiAgICB0aGlzLnMuY3VycmVudE9wID0gbnVsbDtcbiAgICByZXR1cm4gdGhpcy5zLm9wdGlvbnMuYWRkVG9PcGVyYXRpb25zTGlzdCh0aGlzLCBVUERBVEUsIGRvY3VtZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSByZXBsYWNlIG9uZSBvcGVyYXRpb24gdG8gdGhlIGJ1bGsgb3BlcmF0aW9uXG4gICAqXG4gICAqIEBtZXRob2RcbiAgICogQHBhcmFtIHtvYmplY3R9IHVwZGF0ZURvY3VtZW50IHRoZSBuZXcgZG9jdW1lbnQgdG8gcmVwbGFjZSB0aGUgZXhpc3Rpbmcgb25lIHdpdGhcbiAgICogQHRocm93cyB7TW9uZ29FcnJvcn0gSWYgb3BlcmF0aW9uIGNhbm5vdCBiZSBhZGRlZCB0byBidWxrIHdyaXRlXG4gICAqIEByZXR1cm4ge09yZGVyZWRCdWxrT3BlcmF0aW9ufFVub3JkZXJlZEJ1bGtPcGVyYXRpb259IEEgcmVmZXJlbmNlIHRvIHRoZSBwYXJlbnQgQnVsa09wZXJhdGlvblxuICAgKi9cbiAgcmVwbGFjZU9uZSh1cGRhdGVEb2N1bWVudCkge1xuICAgIHRoaXMudXBkYXRlT25lKHVwZGF0ZURvY3VtZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcHNlcnQgbW9kaWZpZXIgZm9yIHVwZGF0ZSBidWxrIG9wZXJhdGlvbiwgbm90aW5nIHRoYXQgdGhpcyBvcGVyYXRpb24gaXMgYW4gdXBzZXJ0LlxuICAgKlxuICAgKiBAbWV0aG9kXG4gICAqIEB0aHJvd3Mge01vbmdvRXJyb3J9IElmIG9wZXJhdGlvbiBjYW5ub3QgYmUgYWRkZWQgdG8gYnVsayB3cml0ZVxuICAgKiBAcmV0dXJuIHtGaW5kT3BlcmF0b3JzfSByZWZlcmVuY2UgdG8gc2VsZlxuICAgKi9cbiAgdXBzZXJ0KCkge1xuICAgIHRoaXMucy5jdXJyZW50T3AudXBzZXJ0ID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBkZWxldGUgb25lIG9wZXJhdGlvbiB0byB0aGUgYnVsayBvcGVyYXRpb25cbiAgICpcbiAgICogQG1ldGhvZFxuICAgKiBAdGhyb3dzIHtNb25nb0Vycm9yfSBJZiBvcGVyYXRpb24gY2Fubm90IGJlIGFkZGVkIHRvIGJ1bGsgd3JpdGVcbiAgICogQHJldHVybiB7T3JkZXJlZEJ1bGtPcGVyYXRpb258VW5vcmRlcmVkQnVsa09wZXJhdGlvbn0gQSByZWZlcmVuY2UgdG8gdGhlIHBhcmVudCBCdWxrT3BlcmF0aW9uXG4gICAqL1xuICBkZWxldGVPbmUoKSB7XG4gICAgLy8gRXN0YWJsaXNoIHRoZSB1cGRhdGUgY29tbWFuZFxuICAgIGNvbnN0IGRvY3VtZW50ID0ge1xuICAgICAgcTogdGhpcy5zLmN1cnJlbnRPcC5zZWxlY3RvcixcbiAgICAgIGxpbWl0OiAxXG4gICAgfTtcblxuICAgIC8vIENsZWFyIG91dCBjdXJyZW50IE9wXG4gICAgdGhpcy5zLmN1cnJlbnRPcCA9IG51bGw7XG4gICAgcmV0dXJuIHRoaXMucy5vcHRpb25zLmFkZFRvT3BlcmF0aW9uc0xpc3QodGhpcywgUkVNT1ZFLCBkb2N1bWVudCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgZGVsZXRlIG1hbnkgb3BlcmF0aW9uIHRvIHRoZSBidWxrIG9wZXJhdGlvblxuICAgKlxuICAgKiBAbWV0aG9kXG4gICAqIEB0aHJvd3Mge01vbmdvRXJyb3J9IElmIG9wZXJhdGlvbiBjYW5ub3QgYmUgYWRkZWQgdG8gYnVsayB3cml0ZVxuICAgKiBAcmV0dXJuIHtPcmRlcmVkQnVsa09wZXJhdGlvbnxVbm9yZGVyZWRCdWxrT3BlcmF0aW9ufSBBIHJlZmVyZW5jZSB0byB0aGUgcGFyZW50IEJ1bGtPcGVyYXRpb25cbiAgICovXG4gIGRlbGV0ZSgpIHtcbiAgICAvLyBFc3RhYmxpc2ggdGhlIHVwZGF0ZSBjb21tYW5kXG4gICAgY29uc3QgZG9jdW1lbnQgPSB7XG4gICAgICBxOiB0aGlzLnMuY3VycmVudE9wLnNlbGVjdG9yLFxuICAgICAgbGltaXQ6IDBcbiAgICB9O1xuXG4gICAgLy8gQ2xlYXIgb3V0IGN1cnJlbnQgT3BcbiAgICB0aGlzLnMuY3VycmVudE9wID0gbnVsbDtcbiAgICByZXR1cm4gdGhpcy5zLm9wdGlvbnMuYWRkVG9PcGVyYXRpb25zTGlzdCh0aGlzLCBSRU1PVkUsIGRvY3VtZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBiYWNrd2FyZHMgY29tcGF0YWJpbGl0eSBmb3IgZGVsZXRlT25lXG4gICAqL1xuICByZW1vdmVPbmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVsZXRlT25lKCk7XG4gIH1cblxuICAvKipcbiAgICogYmFja3dhcmRzIGNvbXBhdGFiaWxpdHkgZm9yIGRlbGV0ZVxuICAgKi9cbiAgcmVtb3ZlKCkge1xuICAgIHJldHVybiB0aGlzLmRlbGV0ZSgpO1xuICB9XG59XG5cbi8qKlxuICogQGNsYXNzZGVzYyBQYXJlbnQgY2xhc3MgdG8gT3JkZXJlZEJ1bGtPcGVyYXRpb24gYW5kIFVub3JkZXJlZEJ1bGtPcGVyYXRpb25cbiAqXG4gKiAqKk5PVEU6KiogSW50ZXJuYWwgVHlwZSwgZG8gbm90IGluc3RhbnRpYXRlIGRpcmVjdGx5XG4gKi9cbmNsYXNzIEJ1bGtPcGVyYXRpb25CYXNlIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBPcmRlcmVkQnVsa09wZXJhdGlvbiBvciBVbm9yZGVyZWRCdWxrT3BlcmF0aW9uIGluc3RhbmNlXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBsZW5ndGggR2V0IHRoZSBudW1iZXIgb2Ygb3BlcmF0aW9ucyBpbiB0aGUgYnVsay5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHRvcG9sb2d5LCBjb2xsZWN0aW9uLCBvcHRpb25zLCBpc09yZGVyZWQpIHtcbiAgICAvLyBkZXRlcm1pbmUgd2hldGhlciBidWxrT3BlcmF0aW9uIGlzIG9yZGVyZWQgb3IgdW5vcmRlcmVkXG4gICAgdGhpcy5pc09yZGVyZWQgPSBpc09yZGVyZWQ7XG5cbiAgICBvcHRpb25zID0gb3B0aW9ucyA9PSBudWxsID8ge30gOiBvcHRpb25zO1xuICAgIC8vIFRPRE8gQnJpbmcgZnJvbSBkcml2ZXIgaW5mb3JtYXRpb24gaW4gaXNNYXN0ZXJcbiAgICAvLyBHZXQgdGhlIG5hbWVzcGFjZSBmb3IgdGhlIHdyaXRlIG9wZXJhdGlvbnNcbiAgICBjb25zdCBuYW1lc3BhY2UgPSBjb2xsZWN0aW9uLnMubmFtZXNwYWNlO1xuICAgIC8vIFVzZWQgdG8gbWFyayBvcGVyYXRpb24gYXMgZXhlY3V0ZWRcbiAgICBjb25zdCBleGVjdXRlZCA9IGZhbHNlO1xuXG4gICAgLy8gQ3VycmVudCBpdGVtXG4gICAgY29uc3QgY3VycmVudE9wID0gbnVsbDtcblxuICAgIC8vIEhhbmRsZSB0byB0aGUgYnNvbiBzZXJpYWxpemVyLCB1c2VkIHRvIGNhbGN1bGF0ZSBydW5uaW5nIHNpemVzXG4gICAgY29uc3QgYnNvbiA9IHRvcG9sb2d5LmJzb247XG5cbiAgICAvLyBTZXQgbWF4IGJ5dGUgc2l6ZVxuICAgIGNvbnN0IGlzTWFzdGVyID0gdG9wb2xvZ3kubGFzdElzTWFzdGVyKCk7XG4gICAgY29uc3QgbWF4QmF0Y2hTaXplQnl0ZXMgPVxuICAgICAgaXNNYXN0ZXIgJiYgaXNNYXN0ZXIubWF4QnNvbk9iamVjdFNpemUgPyBpc01hc3Rlci5tYXhCc29uT2JqZWN0U2l6ZSA6IDEwMjQgKiAxMDI0ICogMTY7XG4gICAgY29uc3QgbWF4V3JpdGVCYXRjaFNpemUgPVxuICAgICAgaXNNYXN0ZXIgJiYgaXNNYXN0ZXIubWF4V3JpdGVCYXRjaFNpemUgPyBpc01hc3Rlci5tYXhXcml0ZUJhdGNoU2l6ZSA6IDEwMDA7XG5cbiAgICAvLyBDYWxjdWxhdGVzIHRoZSBsYXJnZXN0IHBvc3NpYmxlIHNpemUgb2YgYW4gQXJyYXkga2V5LCByZXByZXNlbnRlZCBhcyBhIEJTT04gc3RyaW5nXG4gICAgLy8gZWxlbWVudC4gVGhpcyBjYWxjdWxhdGlvbjpcbiAgICAvLyAgICAgMSBieXRlIGZvciBCU09OIHR5cGVcbiAgICAvLyAgICAgIyBvZiBieXRlcyA9IGxlbmd0aCBvZiAoc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIChtYXhXcml0ZUJhdGNoU2l6ZSAtIDEpKVxuICAgIC8vICAgKyAxIGJ5dGVzIGZvciBudWxsIHRlcm1pbmF0b3JcbiAgICBjb25zdCBtYXhLZXlTaXplID0gKG1heFdyaXRlQmF0Y2hTaXplIC0gMSkudG9TdHJpbmcoMTApLmxlbmd0aCArIDI7XG5cbiAgICAvLyBGaW5hbCBvcHRpb25zIGZvciByZXRyeWFibGUgd3JpdGVzIGFuZCB3cml0ZSBjb25jZXJuXG4gICAgbGV0IGZpbmFsT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpO1xuICAgIGZpbmFsT3B0aW9ucyA9IGFwcGx5UmV0cnlhYmxlV3JpdGVzKGZpbmFsT3B0aW9ucywgY29sbGVjdGlvbi5zLmRiKTtcbiAgICBmaW5hbE9wdGlvbnMgPSBhcHBseVdyaXRlQ29uY2VybihmaW5hbE9wdGlvbnMsIHsgY29sbGVjdGlvbjogY29sbGVjdGlvbiB9LCBvcHRpb25zKTtcbiAgICBjb25zdCB3cml0ZUNvbmNlcm4gPSBmaW5hbE9wdGlvbnMud3JpdGVDb25jZXJuO1xuXG4gICAgLy8gR2V0IHRoZSBwcm9taXNlTGlicmFyeVxuICAgIGNvbnN0IHByb21pc2VMaWJyYXJ5ID0gb3B0aW9ucy5wcm9taXNlTGlicmFyeSB8fCBQcm9taXNlO1xuXG4gICAgLy8gRmluYWwgcmVzdWx0c1xuICAgIGNvbnN0IGJ1bGtSZXN1bHQgPSB7XG4gICAgICBvazogMSxcbiAgICAgIHdyaXRlRXJyb3JzOiBbXSxcbiAgICAgIHdyaXRlQ29uY2VybkVycm9yczogW10sXG4gICAgICBpbnNlcnRlZElkczogW10sXG4gICAgICBuSW5zZXJ0ZWQ6IDAsXG4gICAgICBuVXBzZXJ0ZWQ6IDAsXG4gICAgICBuTWF0Y2hlZDogMCxcbiAgICAgIG5Nb2RpZmllZDogMCxcbiAgICAgIG5SZW1vdmVkOiAwLFxuICAgICAgdXBzZXJ0ZWQ6IFtdXG4gICAgfTtcblxuICAgIC8vIEludGVybmFsIHN0YXRlXG4gICAgdGhpcy5zID0ge1xuICAgICAgLy8gRmluYWwgcmVzdWx0XG4gICAgICBidWxrUmVzdWx0OiBidWxrUmVzdWx0LFxuICAgICAgLy8gQ3VycmVudCBiYXRjaCBzdGF0ZVxuICAgICAgY3VycmVudEJhdGNoOiBudWxsLFxuICAgICAgY3VycmVudEluZGV4OiAwLFxuICAgICAgLy8gb3JkZXJlZCBzcGVjaWZpY1xuICAgICAgY3VycmVudEJhdGNoU2l6ZTogMCxcbiAgICAgIGN1cnJlbnRCYXRjaFNpemVCeXRlczogMCxcbiAgICAgIC8vIHVub3JkZXJlZCBzcGVjaWZpY1xuICAgICAgY3VycmVudEluc2VydEJhdGNoOiBudWxsLFxuICAgICAgY3VycmVudFVwZGF0ZUJhdGNoOiBudWxsLFxuICAgICAgY3VycmVudFJlbW92ZUJhdGNoOiBudWxsLFxuICAgICAgYmF0Y2hlczogW10sXG4gICAgICAvLyBXcml0ZSBjb25jZXJuXG4gICAgICB3cml0ZUNvbmNlcm46IHdyaXRlQ29uY2VybixcbiAgICAgIC8vIE1heCBiYXRjaCBzaXplIG9wdGlvbnNcbiAgICAgIG1heEJhdGNoU2l6ZUJ5dGVzOiBtYXhCYXRjaFNpemVCeXRlcyxcbiAgICAgIG1heFdyaXRlQmF0Y2hTaXplOiBtYXhXcml0ZUJhdGNoU2l6ZSxcbiAgICAgIG1heEtleVNpemUsXG4gICAgICAvLyBOYW1lc3BhY2VcbiAgICAgIG5hbWVzcGFjZTogbmFtZXNwYWNlLFxuICAgICAgLy8gQlNPTlxuICAgICAgYnNvbjogYnNvbixcbiAgICAgIC8vIFRvcG9sb2d5XG4gICAgICB0b3BvbG9neTogdG9wb2xvZ3ksXG4gICAgICAvLyBPcHRpb25zXG4gICAgICBvcHRpb25zOiBmaW5hbE9wdGlvbnMsXG4gICAgICAvLyBDdXJyZW50IG9wZXJhdGlvblxuICAgICAgY3VycmVudE9wOiBjdXJyZW50T3AsXG4gICAgICAvLyBFeGVjdXRlZFxuICAgICAgZXhlY3V0ZWQ6IGV4ZWN1dGVkLFxuICAgICAgLy8gQ29sbGVjdGlvblxuICAgICAgY29sbGVjdGlvbjogY29sbGVjdGlvbixcbiAgICAgIC8vIFByb21pc2UgTGlicmFyeVxuICAgICAgcHJvbWlzZUxpYnJhcnk6IHByb21pc2VMaWJyYXJ5LFxuICAgICAgLy8gRnVuZGFtZW50YWwgZXJyb3JcbiAgICAgIGVycjogbnVsbCxcbiAgICAgIC8vIGNoZWNrIGtleXNcbiAgICAgIGNoZWNrS2V5czogdHlwZW9mIG9wdGlvbnMuY2hlY2tLZXlzID09PSAnYm9vbGVhbicgPyBvcHRpb25zLmNoZWNrS2V5cyA6IHRydWVcbiAgICB9O1xuXG4gICAgLy8gYnlwYXNzIFZhbGlkYXRpb25cbiAgICBpZiAob3B0aW9ucy5ieXBhc3NEb2N1bWVudFZhbGlkYXRpb24gPT09IHRydWUpIHtcbiAgICAgIHRoaXMucy5ieXBhc3NEb2N1bWVudFZhbGlkYXRpb24gPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBzaW5nbGUgaW5zZXJ0IGRvY3VtZW50IHRvIHRoZSBidWxrIG9wZXJhdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZG9jdW1lbnQgdGhlIGRvY3VtZW50IHRvIGluc2VydFxuICAgKiBAdGhyb3dzIHtNb25nb0Vycm9yfVxuICAgKiBAcmV0dXJuIHtCdWxrT3BlcmF0aW9uQmFzZX0gQSByZWZlcmVuY2UgdG8gc2VsZlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBidWxrT3AgPSBjb2xsZWN0aW9uLmluaXRpYWxpemVPcmRlcmVkQnVsa09wKCk7XG4gICAqIC8vIEFkZHMgdGhyZWUgaW5zZXJ0cyB0byB0aGUgYnVsa09wLlxuICAgKiBidWxrT3BcbiAgICogICAuaW5zZXJ0KHsgYTogMSB9KVxuICAgKiAgIC5pbnNlcnQoeyBiOiAyIH0pXG4gICAqICAgLmluc2VydCh7IGM6IDMgfSk7XG4gICAqIGF3YWl0IGJ1bGtPcC5leGVjdXRlKCk7XG4gICAqL1xuICBpbnNlcnQoZG9jdW1lbnQpIHtcbiAgICBpZiAodGhpcy5zLmNvbGxlY3Rpb24ucy5kYi5vcHRpb25zLmZvcmNlU2VydmVyT2JqZWN0SWQgIT09IHRydWUgJiYgZG9jdW1lbnQuX2lkID09IG51bGwpXG4gICAgICBkb2N1bWVudC5faWQgPSBuZXcgT2JqZWN0SUQoKTtcbiAgICByZXR1cm4gdGhpcy5zLm9wdGlvbnMuYWRkVG9PcGVyYXRpb25zTGlzdCh0aGlzLCBJTlNFUlQsIGRvY3VtZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdWlsZHMgYSBmaW5kIG9wZXJhdGlvbiBmb3IgYW4gdXBkYXRlL3VwZGF0ZU9uZS9kZWxldGUvZGVsZXRlT25lL3JlcGxhY2VPbmUuXG4gICAqIFJldHVybnMgYSBidWlsZGVyIG9iamVjdCB1c2VkIHRvIGNvbXBsZXRlIHRoZSBkZWZpbml0aW9uIG9mIHRoZSBvcGVyYXRpb24uXG4gICAqXG4gICAqIEBtZXRob2RcbiAgICogQHBhcmFtIHtvYmplY3R9IHNlbGVjdG9yIFRoZSBzZWxlY3RvciBmb3IgdGhlIGJ1bGsgb3BlcmF0aW9uLiBTZWUge0BsaW5rIGh0dHBzOi8vZG9jcy5tb25nb2RiLmNvbS9tYW51YWwvcmVmZXJlbmNlL2NvbW1hbmQvdXBkYXRlLyN1cGRhdGUtY29tbWFuZC1xIHEgZG9jdW1lbnRhdGlvbn1cbiAgICogQHRocm93cyB7TW9uZ29FcnJvcn0gaWYgYSBzZWxlY3RvciBpcyBub3Qgc3BlY2lmaWVkXG4gICAqIEByZXR1cm4ge0ZpbmRPcGVyYXRvcnN9IEEgaGVscGVyIG9iamVjdCB3aXRoIHdoaWNoIHRoZSB3cml0ZSBvcGVyYXRpb24gY2FuIGJlIGRlZmluZWQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IGJ1bGtPcCA9IGNvbGxlY3Rpb24uaW5pdGlhbGl6ZU9yZGVyZWRCdWxrT3AoKTtcbiAgICpcbiAgICogLy8gQWRkIGFuIHVwZGF0ZU9uZSB0byB0aGUgYnVsa09wXG4gICAqIGJ1bGtPcC5maW5kKHsgYTogMSB9KS51cGRhdGVPbmUoeyAkc2V0OiB7IGI6IDIgfSB9KTtcbiAgICpcbiAgICogLy8gQWRkIGFuIHVwZGF0ZU1hbnkgdG8gdGhlIGJ1bGtPcFxuICAgKiBidWxrT3AuZmluZCh7IGM6IDMgfSkudXBkYXRlKHsgJHNldDogeyBkOiA0IH0gfSk7XG4gICAqXG4gICAqIC8vIEFkZCBhbiB1cHNlcnRcbiAgICogYnVsa09wLmZpbmQoeyBlOiA1IH0pLnVwc2VydCgpLnVwZGF0ZU9uZSh7ICRzZXQ6IHsgZjogNiB9IH0pO1xuICAgKlxuICAgKiAvLyBBZGQgYSBkZWxldGlvblxuICAgKiBidWxrT3AuZmluZCh7IGc6IDcgfSkuZGVsZXRlT25lKCk7XG4gICAqXG4gICAqIC8vIEFkZCBhIG11bHRpIGRlbGV0aW9uXG4gICAqIGJ1bGtPcC5maW5kKHsgaDogOCB9KS5kZWxldGUoKTtcbiAgICpcbiAgICogLy8gQWRkIGEgcmVwbGFjZU9uZVxuICAgKiBidWxrT3AuZmluZCh7IGk6IDkgfSkucmVwbGFjZU9uZSh7IGo6IDEwIH0pO1xuICAgKlxuICAgKiAvLyBVcGRhdGUgdXNpbmcgYSBwaXBlbGluZSAocmVxdWlyZXMgTW9uZ29kYiA0LjIgb3IgaGlnaGVyKVxuICAgKiBidWxrLmZpbmQoeyBrOiAxMSwgeTogeyAkZXhpc3RzOiB0cnVlIH0sIHo6IHsgJGV4aXN0czogdHJ1ZSB9IH0pLnVwZGF0ZU9uZShbXG4gICAqICAgeyAkc2V0OiB7IHRvdGFsOiB7ICRzdW06IFsgJyR5JywgJyR6JyBdIH0gfSB9XG4gICAqIF0pO1xuICAgKlxuICAgKiAvLyBBbGwgb2YgdGhlIG9wcyB3aWxsIG5vdyBiZSBleGVjdXRlZFxuICAgKiBhd2FpdCBidWxrT3AuZXhlY3V0ZSgpO1xuICAgKi9cbiAgZmluZChzZWxlY3Rvcikge1xuICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgIHRocm93IHRvRXJyb3IoJ0J1bGsgZmluZCBvcGVyYXRpb24gbXVzdCBzcGVjaWZ5IGEgc2VsZWN0b3InKTtcbiAgICB9XG5cbiAgICAvLyBTYXZlIGEgY3VycmVudCBzZWxlY3RvclxuICAgIHRoaXMucy5jdXJyZW50T3AgPSB7XG4gICAgICBzZWxlY3Rvcjogc2VsZWN0b3JcbiAgICB9O1xuXG4gICAgcmV0dXJuIG5ldyBGaW5kT3BlcmF0b3JzKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyBhIHJhdyBvcGVyYXRpb24gdG8gcGVyZm9ybSBpbiB0aGUgYnVsayB3cml0ZS5cbiAgICpcbiAgICogQG1ldGhvZFxuICAgKiBAcGFyYW0ge29iamVjdH0gb3AgVGhlIHJhdyBvcGVyYXRpb24gdG8gcGVyZm9ybS5cbiAgICogQHJldHVybiB7QnVsa09wZXJhdGlvbkJhc2V9IEEgcmVmZXJlbmNlIHRvIHNlbGZcbiAgICovXG4gIHJhdyhvcCkge1xuICAgIGNvbnN0IGtleSA9IE9iamVjdC5rZXlzKG9wKVswXTtcblxuICAgIC8vIFNldCB1cCB0aGUgZm9yY2Ugc2VydmVyIG9iamVjdCBpZFxuICAgIGNvbnN0IGZvcmNlU2VydmVyT2JqZWN0SWQgPVxuICAgICAgdHlwZW9mIHRoaXMucy5vcHRpb25zLmZvcmNlU2VydmVyT2JqZWN0SWQgPT09ICdib29sZWFuJ1xuICAgICAgICA/IHRoaXMucy5vcHRpb25zLmZvcmNlU2VydmVyT2JqZWN0SWRcbiAgICAgICAgOiB0aGlzLnMuY29sbGVjdGlvbi5zLmRiLm9wdGlvbnMuZm9yY2VTZXJ2ZXJPYmplY3RJZDtcblxuICAgIC8vIFVwZGF0ZSBvcGVyYXRpb25zXG4gICAgaWYgKFxuICAgICAgKG9wLnVwZGF0ZU9uZSAmJiBvcC51cGRhdGVPbmUucSkgfHxcbiAgICAgIChvcC51cGRhdGVNYW55ICYmIG9wLnVwZGF0ZU1hbnkucSkgfHxcbiAgICAgIChvcC5yZXBsYWNlT25lICYmIG9wLnJlcGxhY2VPbmUucSlcbiAgICApIHtcbiAgICAgIG9wW2tleV0ubXVsdGkgPSBvcC51cGRhdGVPbmUgfHwgb3AucmVwbGFjZU9uZSA/IGZhbHNlIDogdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzLnMub3B0aW9ucy5hZGRUb09wZXJhdGlvbnNMaXN0KHRoaXMsIFVQREFURSwgb3Bba2V5XSk7XG4gICAgfVxuXG4gICAgLy8gQ3J1ZCBzcGVjIHVwZGF0ZSBmb3JtYXRcbiAgICBpZiAob3AudXBkYXRlT25lIHx8IG9wLnVwZGF0ZU1hbnkgfHwgb3AucmVwbGFjZU9uZSkge1xuICAgICAgY29uc3QgbXVsdGkgPSBvcC51cGRhdGVPbmUgfHwgb3AucmVwbGFjZU9uZSA/IGZhbHNlIDogdHJ1ZTtcbiAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IHtcbiAgICAgICAgcTogb3Bba2V5XS5maWx0ZXIsXG4gICAgICAgIHU6IG9wW2tleV0udXBkYXRlIHx8IG9wW2tleV0ucmVwbGFjZW1lbnQsXG4gICAgICAgIG11bHRpOiBtdWx0aVxuICAgICAgfTtcbiAgICAgIGlmICh0aGlzLmlzT3JkZXJlZCkge1xuICAgICAgICBvcGVyYXRpb24udXBzZXJ0ID0gb3Bba2V5XS51cHNlcnQgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIGlmIChvcC5jb2xsYXRpb24pIG9wZXJhdGlvbi5jb2xsYXRpb24gPSBvcC5jb2xsYXRpb247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAob3Bba2V5XS51cHNlcnQpIG9wZXJhdGlvbi51cHNlcnQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKG9wW2tleV0uYXJyYXlGaWx0ZXJzKSBvcGVyYXRpb24uYXJyYXlGaWx0ZXJzID0gb3Bba2V5XS5hcnJheUZpbHRlcnM7XG4gICAgICByZXR1cm4gdGhpcy5zLm9wdGlvbnMuYWRkVG9PcGVyYXRpb25zTGlzdCh0aGlzLCBVUERBVEUsIG9wZXJhdGlvbik7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIG9wZXJhdGlvbnNcbiAgICBpZiAoXG4gICAgICBvcC5yZW1vdmVPbmUgfHxcbiAgICAgIG9wLnJlbW92ZU1hbnkgfHxcbiAgICAgIChvcC5kZWxldGVPbmUgJiYgb3AuZGVsZXRlT25lLnEpIHx8XG4gICAgICAob3AuZGVsZXRlTWFueSAmJiBvcC5kZWxldGVNYW55LnEpXG4gICAgKSB7XG4gICAgICBvcFtrZXldLmxpbWl0ID0gb3AucmVtb3ZlT25lID8gMSA6IDA7XG4gICAgICByZXR1cm4gdGhpcy5zLm9wdGlvbnMuYWRkVG9PcGVyYXRpb25zTGlzdCh0aGlzLCBSRU1PVkUsIG9wW2tleV0pO1xuICAgIH1cblxuICAgIC8vIENydWQgc3BlYyBkZWxldGUgb3BlcmF0aW9ucywgbGVzcyBlZmZpY2llbnRcbiAgICBpZiAob3AuZGVsZXRlT25lIHx8IG9wLmRlbGV0ZU1hbnkpIHtcbiAgICAgIGNvbnN0IGxpbWl0ID0gb3AuZGVsZXRlT25lID8gMSA6IDA7XG4gICAgICBjb25zdCBvcGVyYXRpb24gPSB7IHE6IG9wW2tleV0uZmlsdGVyLCBsaW1pdDogbGltaXQgfTtcbiAgICAgIGlmICh0aGlzLmlzT3JkZXJlZCkge1xuICAgICAgICBpZiAob3AuY29sbGF0aW9uKSBvcGVyYXRpb24uY29sbGF0aW9uID0gb3AuY29sbGF0aW9uO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMucy5vcHRpb25zLmFkZFRvT3BlcmF0aW9uc0xpc3QodGhpcywgUkVNT1ZFLCBvcGVyYXRpb24pO1xuICAgIH1cblxuICAgIC8vIEluc2VydCBvcGVyYXRpb25zXG4gICAgaWYgKG9wLmluc2VydE9uZSAmJiBvcC5pbnNlcnRPbmUuZG9jdW1lbnQgPT0gbnVsbCkge1xuICAgICAgaWYgKGZvcmNlU2VydmVyT2JqZWN0SWQgIT09IHRydWUgJiYgb3AuaW5zZXJ0T25lLl9pZCA9PSBudWxsKVxuICAgICAgICBvcC5pbnNlcnRPbmUuX2lkID0gbmV3IE9iamVjdElEKCk7XG4gICAgICByZXR1cm4gdGhpcy5zLm9wdGlvbnMuYWRkVG9PcGVyYXRpb25zTGlzdCh0aGlzLCBJTlNFUlQsIG9wLmluc2VydE9uZSk7XG4gICAgfSBlbHNlIGlmIChvcC5pbnNlcnRPbmUgJiYgb3AuaW5zZXJ0T25lLmRvY3VtZW50KSB7XG4gICAgICBpZiAoZm9yY2VTZXJ2ZXJPYmplY3RJZCAhPT0gdHJ1ZSAmJiBvcC5pbnNlcnRPbmUuZG9jdW1lbnQuX2lkID09IG51bGwpXG4gICAgICAgIG9wLmluc2VydE9uZS5kb2N1bWVudC5faWQgPSBuZXcgT2JqZWN0SUQoKTtcbiAgICAgIHJldHVybiB0aGlzLnMub3B0aW9ucy5hZGRUb09wZXJhdGlvbnNMaXN0KHRoaXMsIElOU0VSVCwgb3AuaW5zZXJ0T25lLmRvY3VtZW50KTtcbiAgICB9XG5cbiAgICBpZiAob3AuaW5zZXJ0TWFueSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcC5pbnNlcnRNYW55Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChmb3JjZVNlcnZlck9iamVjdElkICE9PSB0cnVlICYmIG9wLmluc2VydE1hbnlbaV0uX2lkID09IG51bGwpXG4gICAgICAgICAgb3AuaW5zZXJ0TWFueVtpXS5faWQgPSBuZXcgT2JqZWN0SUQoKTtcbiAgICAgICAgdGhpcy5zLm9wdGlvbnMuYWRkVG9PcGVyYXRpb25zTGlzdCh0aGlzLCBJTlNFUlQsIG9wLmluc2VydE1hbnlbaV0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gTm8gdmFsaWQgdHlwZSBvZiBvcGVyYXRpb25cbiAgICB0aHJvdyB0b0Vycm9yKFxuICAgICAgJ2J1bGtXcml0ZSBvbmx5IHN1cHBvcnRzIGluc2VydE9uZSwgaW5zZXJ0TWFueSwgdXBkYXRlT25lLCB1cGRhdGVNYW55LCByZW1vdmVPbmUsIHJlbW92ZU1hbnksIGRlbGV0ZU9uZSwgZGVsZXRlTWFueSdcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIGhlbHBlciBmdW5jdGlvbiB0byBhc3Npc3Qgd2l0aCBwcm9taXNlT3JDYWxsYmFjayBiZWhhdmlvclxuICAgKiBAaWdub3JlXG4gICAqIEBwYXJhbSB7Kn0gZXJyXG4gICAqIEBwYXJhbSB7Kn0gY2FsbGJhY2tcbiAgICovXG4gIF9oYW5kbGVFYXJseUVycm9yKGVyciwgY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYWxsYmFjayhlcnIsIG51bGwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnMucHJvbWlzZUxpYnJhcnkucmVqZWN0KGVycik7XG4gIH1cblxuICAvKipcbiAgICogQW4gaW50ZXJuYWwgaGVscGVyIG1ldGhvZC4gRG8gbm90IGludm9rZSBkaXJlY3RseS4gV2lsbCBiZSBnb2luZyBhd2F5IGluIHRoZSBmdXR1cmVcbiAgICpcbiAgICogQGlnbm9yZVxuICAgKiBAbWV0aG9kXG4gICAqIEBwYXJhbSB7Y2xhc3N9IGJ1bGsgZWl0aGVyIE9yZGVyZWRCdWxrT3BlcmF0aW9uIG9yIFVub3JkZXJkQnVsa09wZXJhdGlvblxuICAgKiBAcGFyYW0ge29iamVjdH0gd3JpdGVDb25jZXJuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBidWxrRXhlY3V0ZShfd3JpdGVDb25jZXJuLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykgKGNhbGxiYWNrID0gb3B0aW9ucyksIChvcHRpb25zID0ge30pO1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgaWYgKHR5cGVvZiBfd3JpdGVDb25jZXJuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYWxsYmFjayA9IF93cml0ZUNvbmNlcm47XG4gICAgfSBlbHNlIGlmIChfd3JpdGVDb25jZXJuICYmIHR5cGVvZiBfd3JpdGVDb25jZXJuID09PSAnb2JqZWN0Jykge1xuICAgICAgdGhpcy5zLndyaXRlQ29uY2VybiA9IF93cml0ZUNvbmNlcm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucy5leGVjdXRlZCkge1xuICAgICAgY29uc3QgZXhlY3V0ZWRFcnJvciA9IHRvRXJyb3IoJ2JhdGNoIGNhbm5vdCBiZSByZS1leGVjdXRlZCcpO1xuICAgICAgcmV0dXJuIHRoaXMuX2hhbmRsZUVhcmx5RXJyb3IoZXhlY3V0ZWRFcnJvciwgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIC8vIElmIHdlIGhhdmUgY3VycmVudCBiYXRjaFxuICAgIGlmICh0aGlzLmlzT3JkZXJlZCkge1xuICAgICAgaWYgKHRoaXMucy5jdXJyZW50QmF0Y2gpIHRoaXMucy5iYXRjaGVzLnB1c2godGhpcy5zLmN1cnJlbnRCYXRjaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLnMuY3VycmVudEluc2VydEJhdGNoKSB0aGlzLnMuYmF0Y2hlcy5wdXNoKHRoaXMucy5jdXJyZW50SW5zZXJ0QmF0Y2gpO1xuICAgICAgaWYgKHRoaXMucy5jdXJyZW50VXBkYXRlQmF0Y2gpIHRoaXMucy5iYXRjaGVzLnB1c2godGhpcy5zLmN1cnJlbnRVcGRhdGVCYXRjaCk7XG4gICAgICBpZiAodGhpcy5zLmN1cnJlbnRSZW1vdmVCYXRjaCkgdGhpcy5zLmJhdGNoZXMucHVzaCh0aGlzLnMuY3VycmVudFJlbW92ZUJhdGNoKTtcbiAgICB9XG4gICAgLy8gSWYgd2UgaGF2ZSBubyBvcGVyYXRpb25zIGluIHRoZSBidWxrIHJhaXNlIGFuIGVycm9yXG4gICAgaWYgKHRoaXMucy5iYXRjaGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc3QgZW1wdHlCYXRjaEVycm9yID0gdG9FcnJvcignSW52YWxpZCBPcGVyYXRpb24sIG5vIG9wZXJhdGlvbnMgc3BlY2lmaWVkJyk7XG4gICAgICByZXR1cm4gdGhpcy5faGFuZGxlRWFybHlFcnJvcihlbXB0eUJhdGNoRXJyb3IsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgb3B0aW9ucywgY2FsbGJhY2sgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgY2FsbGJhY2sgZm9ybWF0IGZvciByZXN1bHRzXG4gICAqIEBjYWxsYmFjayBCdWxrT3BlcmF0aW9uQmFzZX5yZXN1bHRDYWxsYmFja1xuICAgKiBAcGFyYW0ge01vbmdvRXJyb3J9IGVycm9yIEFuIGVycm9yIGluc3RhbmNlIHJlcHJlc2VudGluZyB0aGUgZXJyb3IgZHVyaW5nIHRoZSBleGVjdXRpb24uXG4gICAqIEBwYXJhbSB7QnVsa1dyaXRlUmVzdWx0fSByZXN1bHQgVGhlIGJ1bGsgd3JpdGUgcmVzdWx0LlxuICAgKi9cblxuICAvKipcbiAgICogRXhlY3V0ZSB0aGUgYnVsayBvcGVyYXRpb25cbiAgICpcbiAgICogQG1ldGhvZFxuICAgKiBAcGFyYW0ge1dyaXRlQ29uY2Vybn0gW193cml0ZUNvbmNlcm5dIE9wdGlvbmFsIHdyaXRlIGNvbmNlcm4uIENhbiBhbHNvIGJlIHNwZWNpZmllZCB0aHJvdWdoIG9wdGlvbnMuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gT3B0aW9uYWwgc2V0dGluZ3MuXG4gICAqIEBwYXJhbSB7KG51bWJlcnxzdHJpbmcpfSBbb3B0aW9ucy53XSBUaGUgd3JpdGUgY29uY2Vybi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnd0aW1lb3V0XSBUaGUgd3JpdGUgY29uY2VybiB0aW1lb3V0LlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmo9ZmFsc2VdIFNwZWNpZnkgYSBqb3VybmFsIHdyaXRlIGNvbmNlcm4uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZnN5bmM9ZmFsc2VdIFNwZWNpZnkgYSBmaWxlIHN5bmMgd3JpdGUgY29uY2Vybi5cbiAgICogQHBhcmFtIHtCdWxrT3BlcmF0aW9uQmFzZX5yZXN1bHRDYWxsYmFja30gW2NhbGxiYWNrXSBBIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBpbnZva2VkIHdoZW4gYnVsa1dyaXRlIGZpbmlzaGVzL2Vycm9yc1xuICAgKiBAdGhyb3dzIHtNb25nb0Vycm9yfSBUaHJvd3MgZXJyb3IgaWYgdGhlIGJ1bGsgb2JqZWN0IGhhcyBhbHJlYWR5IGJlZW4gZXhlY3V0ZWRcbiAgICogQHRocm93cyB7TW9uZ29FcnJvcn0gVGhyb3dzIGVycm9yIGlmIHRoZSBidWxrIG9iamVjdCBkb2VzIG5vdCBoYXZlIGFueSBvcGVyYXRpb25zXG4gICAqIEByZXR1cm4ge1Byb21pc2V8dm9pZH0gcmV0dXJucyBQcm9taXNlIGlmIG5vIGNhbGxiYWNrIHBhc3NlZFxuICAgKi9cbiAgZXhlY3V0ZShfd3JpdGVDb25jZXJuLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHJldCA9IHRoaXMuYnVsa0V4ZWN1dGUoX3dyaXRlQ29uY2Vybiwgb3B0aW9ucywgY2FsbGJhY2spO1xuICAgIGlmICghcmV0IHx8IGlzUHJvbWlzZUxpa2UocmV0KSkge1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICBvcHRpb25zID0gcmV0Lm9wdGlvbnM7XG4gICAgY2FsbGJhY2sgPSByZXQuY2FsbGJhY2s7XG5cbiAgICByZXR1cm4gZXhlY3V0ZUxlZ2FjeU9wZXJhdGlvbih0aGlzLnMudG9wb2xvZ3ksIGV4ZWN1dGVDb21tYW5kcywgW3RoaXMsIG9wdGlvbnMsIGNhbGxiYWNrXSk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBmaW5hbCBvcHRpb25zIGJlZm9yZSBleGVjdXRpbmcgY29tbWFuZFxuICAgKlxuICAgKiBBbiBpbnRlcm5hbCBtZXRob2QuIERvIG5vdCBpbnZva2UuIFdpbGwgbm90IGJlIGFjY2Vzc2libGUgaW4gdGhlIGZ1dHVyZVxuICAgKlxuICAgKiBAaWdub3JlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWdcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZy5vcHRpb25zXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb25maWcuYmF0Y2hcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY29uZmlnLnJlc3VsdEhhbmRsZXJcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIGZpbmFsT3B0aW9uc0hhbmRsZXIoY29uZmlnLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IGZpbmFsT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oeyBvcmRlcmVkOiB0aGlzLmlzT3JkZXJlZCB9LCBjb25maWcub3B0aW9ucyk7XG4gICAgaWYgKHRoaXMucy53cml0ZUNvbmNlcm4gIT0gbnVsbCkge1xuICAgICAgZmluYWxPcHRpb25zLndyaXRlQ29uY2VybiA9IHRoaXMucy53cml0ZUNvbmNlcm47XG4gICAgfVxuXG4gICAgaWYgKGZpbmFsT3B0aW9ucy5ieXBhc3NEb2N1bWVudFZhbGlkYXRpb24gIT09IHRydWUpIHtcbiAgICAgIGRlbGV0ZSBmaW5hbE9wdGlvbnMuYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uO1xuICAgIH1cblxuICAgIC8vIFNldCBhbiBvcGVyYXRpb25JZiBpZiBwcm92aWRlZFxuICAgIGlmICh0aGlzLm9wZXJhdGlvbklkKSB7XG4gICAgICBjb25maWcucmVzdWx0SGFuZGxlci5vcGVyYXRpb25JZCA9IHRoaXMub3BlcmF0aW9uSWQ7XG4gICAgfVxuXG4gICAgLy8gU2VyaWFsaXplIGZ1bmN0aW9uc1xuICAgIGlmICh0aGlzLnMub3B0aW9ucy5zZXJpYWxpemVGdW5jdGlvbnMpIHtcbiAgICAgIGZpbmFsT3B0aW9ucy5zZXJpYWxpemVGdW5jdGlvbnMgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIElnbm9yZSB1bmRlZmluZWRcbiAgICBpZiAodGhpcy5zLm9wdGlvbnMuaWdub3JlVW5kZWZpbmVkKSB7XG4gICAgICBmaW5hbE9wdGlvbnMuaWdub3JlVW5kZWZpbmVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGUgYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uIG9wdGlvbnMgc3BlY2lmaWNcbiAgICBpZiAodGhpcy5zLmJ5cGFzc0RvY3VtZW50VmFsaWRhdGlvbiA9PT0gdHJ1ZSkge1xuICAgICAgZmluYWxPcHRpb25zLmJ5cGFzc0RvY3VtZW50VmFsaWRhdGlvbiA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gSXMgdGhlIGNoZWNrS2V5cyBvcHRpb24gZGlzYWJsZWRcbiAgICBpZiAodGhpcy5zLmNoZWNrS2V5cyA9PT0gZmFsc2UpIHtcbiAgICAgIGZpbmFsT3B0aW9ucy5jaGVja0tleXMgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoZmluYWxPcHRpb25zLnJldHJ5V3JpdGVzKSB7XG4gICAgICBpZiAoY29uZmlnLmJhdGNoLmJhdGNoVHlwZSA9PT0gVVBEQVRFKSB7XG4gICAgICAgIGZpbmFsT3B0aW9ucy5yZXRyeVdyaXRlcyA9XG4gICAgICAgICAgZmluYWxPcHRpb25zLnJldHJ5V3JpdGVzICYmICFjb25maWcuYmF0Y2gub3BlcmF0aW9ucy5zb21lKG9wID0+IG9wLm11bHRpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbmZpZy5iYXRjaC5iYXRjaFR5cGUgPT09IFJFTU9WRSkge1xuICAgICAgICBmaW5hbE9wdGlvbnMucmV0cnlXcml0ZXMgPVxuICAgICAgICAgIGZpbmFsT3B0aW9ucy5yZXRyeVdyaXRlcyAmJiAhY29uZmlnLmJhdGNoLm9wZXJhdGlvbnMuc29tZShvcCA9PiBvcC5saW1pdCA9PT0gMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlmIChjb25maWcuYmF0Y2guYmF0Y2hUeXBlID09PSBJTlNFUlQpIHtcbiAgICAgICAgdGhpcy5zLnRvcG9sb2d5Lmluc2VydChcbiAgICAgICAgICB0aGlzLnMubmFtZXNwYWNlLFxuICAgICAgICAgIGNvbmZpZy5iYXRjaC5vcGVyYXRpb25zLFxuICAgICAgICAgIGZpbmFsT3B0aW9ucyxcbiAgICAgICAgICBjb25maWcucmVzdWx0SGFuZGxlclxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChjb25maWcuYmF0Y2guYmF0Y2hUeXBlID09PSBVUERBVEUpIHtcbiAgICAgICAgdGhpcy5zLnRvcG9sb2d5LnVwZGF0ZShcbiAgICAgICAgICB0aGlzLnMubmFtZXNwYWNlLFxuICAgICAgICAgIGNvbmZpZy5iYXRjaC5vcGVyYXRpb25zLFxuICAgICAgICAgIGZpbmFsT3B0aW9ucyxcbiAgICAgICAgICBjb25maWcucmVzdWx0SGFuZGxlclxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChjb25maWcuYmF0Y2guYmF0Y2hUeXBlID09PSBSRU1PVkUpIHtcbiAgICAgICAgdGhpcy5zLnRvcG9sb2d5LnJlbW92ZShcbiAgICAgICAgICB0aGlzLnMubmFtZXNwYWNlLFxuICAgICAgICAgIGNvbmZpZy5iYXRjaC5vcGVyYXRpb25zLFxuICAgICAgICAgIGZpbmFsT3B0aW9ucyxcbiAgICAgICAgICBjb25maWcucmVzdWx0SGFuZGxlclxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gRm9yY2UgdG9wIGxldmVsIGVycm9yXG4gICAgICBlcnIub2sgPSAwO1xuICAgICAgLy8gTWVyZ2UgdG9wIGxldmVsIGVycm9yIGFuZCByZXR1cm5cbiAgICAgIGhhbmRsZUNhbGxiYWNrKGNhbGxiYWNrLCBudWxsLCBtZXJnZUJhdGNoUmVzdWx0cyhjb25maWcuYmF0Y2gsIHRoaXMucy5idWxrUmVzdWx0LCBlcnIsIG51bGwpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyB0aGUgd3JpdGUgZXJyb3IgYmVmb3JlIGV4ZWN1dGluZyBjb21tYW5kc1xuICAgKlxuICAgKiBBbiBpbnRlcm5hbCBoZWxwZXIgbWV0aG9kLiBEbyBub3QgaW52b2tlIGRpcmVjdGx5LiBXaWxsIGJlIGdvaW5nIGF3YXkgaW4gdGhlIGZ1dHVyZVxuICAgKlxuICAgKiBAaWdub3JlXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAqIEBwYXJhbSB7QnVsa1dyaXRlUmVzdWx0fSB3cml0ZVJlc3VsdFxuICAgKiBAcGFyYW0ge2NsYXNzfSBzZWxmIGVpdGhlciBPcmRlcmVkQnVsa09wZXJhdGlvbiBvciBVbm9yZGVyZEJ1bGtPcGVyYXRpb25cbiAgICovXG4gIGhhbmRsZVdyaXRlRXJyb3IoY2FsbGJhY2ssIHdyaXRlUmVzdWx0KSB7XG4gICAgaWYgKHRoaXMucy5idWxrUmVzdWx0LndyaXRlRXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmICh0aGlzLnMuYnVsa1Jlc3VsdC53cml0ZUVycm9ycy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgaGFuZGxlQ2FsbGJhY2soXG4gICAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgICAgbmV3IEJ1bGtXcml0ZUVycm9yKHRvRXJyb3IodGhpcy5zLmJ1bGtSZXN1bHQud3JpdGVFcnJvcnNbMF0pLCB3cml0ZVJlc3VsdCksXG4gICAgICAgICAgbnVsbFxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbXNnID0gdGhpcy5zLmJ1bGtSZXN1bHQud3JpdGVFcnJvcnNbMF0uZXJybXNnXG4gICAgICAgID8gdGhpcy5zLmJ1bGtSZXN1bHQud3JpdGVFcnJvcnNbMF0uZXJybXNnXG4gICAgICAgIDogJ3dyaXRlIG9wZXJhdGlvbiBmYWlsZWQnO1xuXG4gICAgICBoYW5kbGVDYWxsYmFjayhcbiAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgIG5ldyBCdWxrV3JpdGVFcnJvcihcbiAgICAgICAgICB0b0Vycm9yKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1zZyxcbiAgICAgICAgICAgIGNvZGU6IHRoaXMucy5idWxrUmVzdWx0LndyaXRlRXJyb3JzWzBdLmNvZGUsXG4gICAgICAgICAgICB3cml0ZUVycm9yczogdGhpcy5zLmJ1bGtSZXN1bHQud3JpdGVFcnJvcnNcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB3cml0ZVJlc3VsdFxuICAgICAgICApLFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmICh3cml0ZVJlc3VsdC5nZXRXcml0ZUNvbmNlcm5FcnJvcigpKSB7XG4gICAgICBoYW5kbGVDYWxsYmFjayhcbiAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgIG5ldyBCdWxrV3JpdGVFcnJvcih0b0Vycm9yKHdyaXRlUmVzdWx0LmdldFdyaXRlQ29uY2VybkVycm9yKCkpLCB3cml0ZVJlc3VsdCksXG4gICAgICAgIG51bGxcbiAgICAgICk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1bGtPcGVyYXRpb25CYXNlLnByb3RvdHlwZSwgJ2xlbmd0aCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zLmN1cnJlbnRJbmRleDtcbiAgfVxufSk7XG5cbi8vIEV4cG9ydHMgc3ltYm9sc1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEJhdGNoLFxuICBCdWxrT3BlcmF0aW9uQmFzZSxcbiAgYnNvbixcbiAgSU5TRVJUOiBJTlNFUlQsXG4gIFVQREFURTogVVBEQVRFLFxuICBSRU1PVkU6IFJFTU9WRSxcbiAgQnVsa1dyaXRlRXJyb3Jcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///113\n");

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst common = __webpack_require__(113);\nconst BulkOperationBase = common.BulkOperationBase;\nconst Batch = common.Batch;\nconst bson = common.bson;\nconst utils = __webpack_require__(86);\nconst toError = utils.toError;\n\n/**\n * Add to internal list of Operations\n *\n * @ignore\n * @param {OrderedBulkOperation} bulkOperation\n * @param {number} docType number indicating the document type\n * @param {object} document\n * @return {OrderedBulkOperation}\n */\nfunction addToOperationsList(bulkOperation, docType, document) {\n  // Get the bsonSize\n  const bsonSize = bson.calculateObjectSize(document, {\n    checkKeys: false,\n\n    // Since we don't know what the user selected for BSON options here,\n    // err on the safe side, and check the size with ignoreUndefined: false.\n    ignoreUndefined: false\n  });\n\n  // Throw error if the doc is bigger than the max BSON size\n  if (bsonSize >= bulkOperation.s.maxBatchSizeBytes)\n    throw toError('document is larger than the maximum size ' + bulkOperation.s.maxBatchSizeBytes);\n\n  // Create a new batch object if we don't have a current one\n  if (bulkOperation.s.currentBatch == null)\n    bulkOperation.s.currentBatch = new Batch(docType, bulkOperation.s.currentIndex);\n\n  const maxKeySize = bulkOperation.s.maxKeySize;\n\n  // Check if we need to create a new batch\n  if (\n    bulkOperation.s.currentBatchSize + 1 >= bulkOperation.s.maxWriteBatchSize ||\n    bulkOperation.s.currentBatchSizeBytes + maxKeySize + bsonSize >=\n      bulkOperation.s.maxBatchSizeBytes ||\n    bulkOperation.s.currentBatch.batchType !== docType\n  ) {\n    // Save the batch to the execution stack\n    bulkOperation.s.batches.push(bulkOperation.s.currentBatch);\n\n    // Create a new batch\n    bulkOperation.s.currentBatch = new Batch(docType, bulkOperation.s.currentIndex);\n\n    // Reset the current size trackers\n    bulkOperation.s.currentBatchSize = 0;\n    bulkOperation.s.currentBatchSizeBytes = 0;\n  }\n\n  if (docType === common.INSERT) {\n    bulkOperation.s.bulkResult.insertedIds.push({\n      index: bulkOperation.s.currentIndex,\n      _id: document._id\n    });\n  }\n\n  // We have an array of documents\n  if (Array.isArray(document)) {\n    throw toError('operation passed in cannot be an Array');\n  }\n\n  bulkOperation.s.currentBatch.originalIndexes.push(bulkOperation.s.currentIndex);\n  bulkOperation.s.currentBatch.operations.push(document);\n  bulkOperation.s.currentBatchSize += 1;\n  bulkOperation.s.currentBatchSizeBytes += maxKeySize + bsonSize;\n  bulkOperation.s.currentIndex += 1;\n\n  // Return bulkOperation\n  return bulkOperation;\n}\n\n/**\n * Create a new OrderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @extends BulkOperationBase\n * @property {number} length Get the number of operations in the bulk.\n * @return {OrderedBulkOperation} a OrderedBulkOperation instance.\n */\nclass OrderedBulkOperation extends BulkOperationBase {\n  constructor(topology, collection, options) {\n    options = options || {};\n    options = Object.assign(options, { addToOperationsList });\n\n    super(topology, collection, options, true);\n  }\n}\n\n/**\n * Returns an unordered batch object\n * @ignore\n */\nfunction initializeOrderedBulkOp(topology, collection, options) {\n  return new OrderedBulkOperation(topology, collection, options);\n}\n\ninitializeOrderedBulkOp.OrderedBulkOperation = OrderedBulkOperation;\nmodule.exports = initializeOrderedBulkOp;\nmodule.exports.Bulk = OrderedBulkOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2J1bGsvb3JkZXJlZC5qcz8wMzRhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGVBQWUsbUJBQU8sQ0FBQyxHQUFVO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxFQUFVO0FBQ2hDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxxQkFBcUI7QUFDaEMsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckIsWUFBWSxxQkFBcUI7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0Msc0JBQXNCOztBQUU1RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwiZmlsZSI6IjExNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcbmNvbnN0IEJ1bGtPcGVyYXRpb25CYXNlID0gY29tbW9uLkJ1bGtPcGVyYXRpb25CYXNlO1xuY29uc3QgQmF0Y2ggPSBjb21tb24uQmF0Y2g7XG5jb25zdCBic29uID0gY29tbW9uLmJzb247XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5jb25zdCB0b0Vycm9yID0gdXRpbHMudG9FcnJvcjtcblxuLyoqXG4gKiBBZGQgdG8gaW50ZXJuYWwgbGlzdCBvZiBPcGVyYXRpb25zXG4gKlxuICogQGlnbm9yZVxuICogQHBhcmFtIHtPcmRlcmVkQnVsa09wZXJhdGlvbn0gYnVsa09wZXJhdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IGRvY1R5cGUgbnVtYmVyIGluZGljYXRpbmcgdGhlIGRvY3VtZW50IHR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBkb2N1bWVudFxuICogQHJldHVybiB7T3JkZXJlZEJ1bGtPcGVyYXRpb259XG4gKi9cbmZ1bmN0aW9uIGFkZFRvT3BlcmF0aW9uc0xpc3QoYnVsa09wZXJhdGlvbiwgZG9jVHlwZSwgZG9jdW1lbnQpIHtcbiAgLy8gR2V0IHRoZSBic29uU2l6ZVxuICBjb25zdCBic29uU2l6ZSA9IGJzb24uY2FsY3VsYXRlT2JqZWN0U2l6ZShkb2N1bWVudCwge1xuICAgIGNoZWNrS2V5czogZmFsc2UsXG5cbiAgICAvLyBTaW5jZSB3ZSBkb24ndCBrbm93IHdoYXQgdGhlIHVzZXIgc2VsZWN0ZWQgZm9yIEJTT04gb3B0aW9ucyBoZXJlLFxuICAgIC8vIGVyciBvbiB0aGUgc2FmZSBzaWRlLCBhbmQgY2hlY2sgdGhlIHNpemUgd2l0aCBpZ25vcmVVbmRlZmluZWQ6IGZhbHNlLlxuICAgIGlnbm9yZVVuZGVmaW5lZDogZmFsc2VcbiAgfSk7XG5cbiAgLy8gVGhyb3cgZXJyb3IgaWYgdGhlIGRvYyBpcyBiaWdnZXIgdGhhbiB0aGUgbWF4IEJTT04gc2l6ZVxuICBpZiAoYnNvblNpemUgPj0gYnVsa09wZXJhdGlvbi5zLm1heEJhdGNoU2l6ZUJ5dGVzKVxuICAgIHRocm93IHRvRXJyb3IoJ2RvY3VtZW50IGlzIGxhcmdlciB0aGFuIHRoZSBtYXhpbXVtIHNpemUgJyArIGJ1bGtPcGVyYXRpb24ucy5tYXhCYXRjaFNpemVCeXRlcyk7XG5cbiAgLy8gQ3JlYXRlIGEgbmV3IGJhdGNoIG9iamVjdCBpZiB3ZSBkb24ndCBoYXZlIGEgY3VycmVudCBvbmVcbiAgaWYgKGJ1bGtPcGVyYXRpb24ucy5jdXJyZW50QmF0Y2ggPT0gbnVsbClcbiAgICBidWxrT3BlcmF0aW9uLnMuY3VycmVudEJhdGNoID0gbmV3IEJhdGNoKGRvY1R5cGUsIGJ1bGtPcGVyYXRpb24ucy5jdXJyZW50SW5kZXgpO1xuXG4gIGNvbnN0IG1heEtleVNpemUgPSBidWxrT3BlcmF0aW9uLnMubWF4S2V5U2l6ZTtcblxuICAvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIGNyZWF0ZSBhIG5ldyBiYXRjaFxuICBpZiAoXG4gICAgYnVsa09wZXJhdGlvbi5zLmN1cnJlbnRCYXRjaFNpemUgKyAxID49IGJ1bGtPcGVyYXRpb24ucy5tYXhXcml0ZUJhdGNoU2l6ZSB8fFxuICAgIGJ1bGtPcGVyYXRpb24ucy5jdXJyZW50QmF0Y2hTaXplQnl0ZXMgKyBtYXhLZXlTaXplICsgYnNvblNpemUgPj1cbiAgICAgIGJ1bGtPcGVyYXRpb24ucy5tYXhCYXRjaFNpemVCeXRlcyB8fFxuICAgIGJ1bGtPcGVyYXRpb24ucy5jdXJyZW50QmF0Y2guYmF0Y2hUeXBlICE9PSBkb2NUeXBlXG4gICkge1xuICAgIC8vIFNhdmUgdGhlIGJhdGNoIHRvIHRoZSBleGVjdXRpb24gc3RhY2tcbiAgICBidWxrT3BlcmF0aW9uLnMuYmF0Y2hlcy5wdXNoKGJ1bGtPcGVyYXRpb24ucy5jdXJyZW50QmF0Y2gpO1xuXG4gICAgLy8gQ3JlYXRlIGEgbmV3IGJhdGNoXG4gICAgYnVsa09wZXJhdGlvbi5zLmN1cnJlbnRCYXRjaCA9IG5ldyBCYXRjaChkb2NUeXBlLCBidWxrT3BlcmF0aW9uLnMuY3VycmVudEluZGV4KTtcblxuICAgIC8vIFJlc2V0IHRoZSBjdXJyZW50IHNpemUgdHJhY2tlcnNcbiAgICBidWxrT3BlcmF0aW9uLnMuY3VycmVudEJhdGNoU2l6ZSA9IDA7XG4gICAgYnVsa09wZXJhdGlvbi5zLmN1cnJlbnRCYXRjaFNpemVCeXRlcyA9IDA7XG4gIH1cblxuICBpZiAoZG9jVHlwZSA9PT0gY29tbW9uLklOU0VSVCkge1xuICAgIGJ1bGtPcGVyYXRpb24ucy5idWxrUmVzdWx0Lmluc2VydGVkSWRzLnB1c2goe1xuICAgICAgaW5kZXg6IGJ1bGtPcGVyYXRpb24ucy5jdXJyZW50SW5kZXgsXG4gICAgICBfaWQ6IGRvY3VtZW50Ll9pZFxuICAgIH0pO1xuICB9XG5cbiAgLy8gV2UgaGF2ZSBhbiBhcnJheSBvZiBkb2N1bWVudHNcbiAgaWYgKEFycmF5LmlzQXJyYXkoZG9jdW1lbnQpKSB7XG4gICAgdGhyb3cgdG9FcnJvcignb3BlcmF0aW9uIHBhc3NlZCBpbiBjYW5ub3QgYmUgYW4gQXJyYXknKTtcbiAgfVxuXG4gIGJ1bGtPcGVyYXRpb24ucy5jdXJyZW50QmF0Y2gub3JpZ2luYWxJbmRleGVzLnB1c2goYnVsa09wZXJhdGlvbi5zLmN1cnJlbnRJbmRleCk7XG4gIGJ1bGtPcGVyYXRpb24ucy5jdXJyZW50QmF0Y2gub3BlcmF0aW9ucy5wdXNoKGRvY3VtZW50KTtcbiAgYnVsa09wZXJhdGlvbi5zLmN1cnJlbnRCYXRjaFNpemUgKz0gMTtcbiAgYnVsa09wZXJhdGlvbi5zLmN1cnJlbnRCYXRjaFNpemVCeXRlcyArPSBtYXhLZXlTaXplICsgYnNvblNpemU7XG4gIGJ1bGtPcGVyYXRpb24ucy5jdXJyZW50SW5kZXggKz0gMTtcblxuICAvLyBSZXR1cm4gYnVsa09wZXJhdGlvblxuICByZXR1cm4gYnVsa09wZXJhdGlvbjtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgT3JkZXJlZEJ1bGtPcGVyYXRpb24gaW5zdGFuY2UgKElOVEVSTkFMIFRZUEUsIGRvIG5vdCBpbnN0YW50aWF0ZSBkaXJlY3RseSlcbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgQnVsa09wZXJhdGlvbkJhc2VcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBsZW5ndGggR2V0IHRoZSBudW1iZXIgb2Ygb3BlcmF0aW9ucyBpbiB0aGUgYnVsay5cbiAqIEByZXR1cm4ge09yZGVyZWRCdWxrT3BlcmF0aW9ufSBhIE9yZGVyZWRCdWxrT3BlcmF0aW9uIGluc3RhbmNlLlxuICovXG5jbGFzcyBPcmRlcmVkQnVsa09wZXJhdGlvbiBleHRlbmRzIEJ1bGtPcGVyYXRpb25CYXNlIHtcbiAgY29uc3RydWN0b3IodG9wb2xvZ3ksIGNvbGxlY3Rpb24sIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbihvcHRpb25zLCB7IGFkZFRvT3BlcmF0aW9uc0xpc3QgfSk7XG5cbiAgICBzdXBlcih0b3BvbG9neSwgY29sbGVjdGlvbiwgb3B0aW9ucywgdHJ1ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIHVub3JkZXJlZCBiYXRjaCBvYmplY3RcbiAqIEBpZ25vcmVcbiAqL1xuZnVuY3Rpb24gaW5pdGlhbGl6ZU9yZGVyZWRCdWxrT3AodG9wb2xvZ3ksIGNvbGxlY3Rpb24sIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBPcmRlcmVkQnVsa09wZXJhdGlvbih0b3BvbG9neSwgY29sbGVjdGlvbiwgb3B0aW9ucyk7XG59XG5cbmluaXRpYWxpemVPcmRlcmVkQnVsa09wLk9yZGVyZWRCdWxrT3BlcmF0aW9uID0gT3JkZXJlZEJ1bGtPcGVyYXRpb247XG5tb2R1bGUuZXhwb3J0cyA9IGluaXRpYWxpemVPcmRlcmVkQnVsa09wO1xubW9kdWxlLmV4cG9ydHMuQnVsayA9IE9yZGVyZWRCdWxrT3BlcmF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///114\n");

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * The **ReadConcern** class is a class that represents a MongoDB ReadConcern.\n * @class\n * @property {string} level The read concern level\n * @see https://docs.mongodb.com/manual/reference/read-concern/index.html\n */\nclass ReadConcern {\n  /**\n   * Constructs a ReadConcern from the read concern properties.\n   * @param {string} [level] The read concern level ({'local'|'available'|'majority'|'linearizable'|'snapshot'})\n   */\n  constructor(level) {\n    if (level != null) {\n      this.level = level;\n    }\n  }\n\n  /**\n   * Construct a ReadConcern given an options object.\n   *\n   * @param {object} options The options object from which to extract the write concern.\n   * @return {ReadConcern}\n   */\n  static fromOptions(options) {\n    if (options == null) {\n      return;\n    }\n\n    if (options.readConcern) {\n      if (options.readConcern instanceof ReadConcern) {\n        return options.readConcern;\n      }\n\n      return new ReadConcern(options.readConcern.level);\n    }\n\n    if (options.level) {\n      return new ReadConcern(options.level);\n    }\n  }\n\n  static get MAJORITY() {\n    return 'majority';\n  }\n\n  static get AVAILABLE() {\n    return 'available';\n  }\n\n  static get LINEARIZABLE() {\n    return 'linearizable';\n  }\n\n  static get SNAPSHOT() {\n    return 'snapshot';\n  }\n}\n\nmodule.exports = ReadConcern;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3JlYWRfY29uY2Vybi5qcz81OGRjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPLGtDQUFrQyx5REFBeUQ7QUFDL0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjExNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBUaGUgKipSZWFkQ29uY2VybioqIGNsYXNzIGlzIGEgY2xhc3MgdGhhdCByZXByZXNlbnRzIGEgTW9uZ29EQiBSZWFkQ29uY2Vybi5cbiAqIEBjbGFzc1xuICogQHByb3BlcnR5IHtzdHJpbmd9IGxldmVsIFRoZSByZWFkIGNvbmNlcm4gbGV2ZWxcbiAqIEBzZWUgaHR0cHM6Ly9kb2NzLm1vbmdvZGIuY29tL21hbnVhbC9yZWZlcmVuY2UvcmVhZC1jb25jZXJuL2luZGV4Lmh0bWxcbiAqL1xuY2xhc3MgUmVhZENvbmNlcm4ge1xuICAvKipcbiAgICogQ29uc3RydWN0cyBhIFJlYWRDb25jZXJuIGZyb20gdGhlIHJlYWQgY29uY2VybiBwcm9wZXJ0aWVzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2xldmVsXSBUaGUgcmVhZCBjb25jZXJuIGxldmVsICh7J2xvY2FsJ3wnYXZhaWxhYmxlJ3wnbWFqb3JpdHknfCdsaW5lYXJpemFibGUnfCdzbmFwc2hvdCd9KVxuICAgKi9cbiAgY29uc3RydWN0b3IobGV2ZWwpIHtcbiAgICBpZiAobGV2ZWwgIT0gbnVsbCkge1xuICAgICAgdGhpcy5sZXZlbCA9IGxldmVsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBSZWFkQ29uY2VybiBnaXZlbiBhbiBvcHRpb25zIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgVGhlIG9wdGlvbnMgb2JqZWN0IGZyb20gd2hpY2ggdG8gZXh0cmFjdCB0aGUgd3JpdGUgY29uY2Vybi5cbiAgICogQHJldHVybiB7UmVhZENvbmNlcm59XG4gICAqL1xuICBzdGF0aWMgZnJvbU9wdGlvbnMob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5yZWFkQ29uY2Vybikge1xuICAgICAgaWYgKG9wdGlvbnMucmVhZENvbmNlcm4gaW5zdGFuY2VvZiBSZWFkQ29uY2Vybikge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5yZWFkQ29uY2VybjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBSZWFkQ29uY2VybihvcHRpb25zLnJlYWRDb25jZXJuLmxldmVsKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5sZXZlbCkge1xuICAgICAgcmV0dXJuIG5ldyBSZWFkQ29uY2VybihvcHRpb25zLmxldmVsKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0IE1BSk9SSVRZKCkge1xuICAgIHJldHVybiAnbWFqb3JpdHknO1xuICB9XG5cbiAgc3RhdGljIGdldCBBVkFJTEFCTEUoKSB7XG4gICAgcmV0dXJuICdhdmFpbGFibGUnO1xuICB9XG5cbiAgc3RhdGljIGdldCBMSU5FQVJJWkFCTEUoKSB7XG4gICAgcmV0dXJuICdsaW5lYXJpemFibGUnO1xuICB9XG5cbiAgc3RhdGljIGdldCBTTkFQU0hPVCgpIHtcbiAgICByZXR1cm4gJ3NuYXBzaG90JztcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRDb25jZXJuO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///115\n");

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst MongoError = __webpack_require__(3).MongoError;\nconst Cursor = __webpack_require__(106);\nconst CursorState = __webpack_require__(82).CursorState;\nconst deprecate = __webpack_require__(12).deprecate;\n\n/**\n * @fileOverview The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n *\n * **AGGREGATIONCURSOR Cannot directly be instantiated**\n * @example\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Create a collection we want to drop later\n *   const col = client.db(dbName).collection('createIndexExample1');\n *   // Insert a bunch of documents\n *   col.insert([{a:1, b:1}\n *     , {a:2, b:2}, {a:3, b:3}\n *     , {a:4, b:4}], {w:1}, function(err, result) {\n *     test.equal(null, err);\n *     // Show that duplicate records got dropped\n *     col.aggregation({}, {cursor: {}}).toArray(function(err, items) {\n *       test.equal(null, err);\n *       test.equal(4, items.length);\n *       client.close();\n *     });\n *   });\n * });\n */\n\n/**\n * Namespace provided by the browser.\n * @external Readable\n */\n\n/**\n * Creates a new Aggregation Cursor instance (INTERNAL TYPE, do not instantiate directly)\n * @class AggregationCursor\n * @extends external:Readable\n * @fires AggregationCursor#data\n * @fires AggregationCursor#end\n * @fires AggregationCursor#close\n * @fires AggregationCursor#readable\n * @return {AggregationCursor} an AggregationCursor instance.\n */\nclass AggregationCursor extends Cursor {\n  constructor(topology, operation, options) {\n    super(topology, operation, options);\n  }\n\n  /**\n   * Set the batch size for the cursor.\n   * @method\n   * @param {number} value The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n   * @throws {MongoError}\n   * @return {AggregationCursor}\n   */\n  batchSize(value) {\n    if (this.s.state === CursorState.CLOSED || this.isDead()) {\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\n    }\n\n    if (typeof value !== 'number') {\n      throw MongoError.create({ message: 'batchSize requires an integer', driver: true });\n    }\n\n    this.operation.options.batchSize = value;\n    this.setCursorBatchSize(value);\n    return this;\n  }\n\n  /**\n   * Add a geoNear stage to the aggregation pipeline\n   * @method\n   * @param {object} document The geoNear stage document.\n   * @return {AggregationCursor}\n   */\n  geoNear(document) {\n    this.operation.addToPipeline({ $geoNear: document });\n    return this;\n  }\n\n  /**\n   * Add a group stage to the aggregation pipeline\n   * @method\n   * @param {object} document The group stage document.\n   * @return {AggregationCursor}\n   */\n  group(document) {\n    this.operation.addToPipeline({ $group: document });\n    return this;\n  }\n\n  /**\n   * Add a limit stage to the aggregation pipeline\n   * @method\n   * @param {number} value The state limit value.\n   * @return {AggregationCursor}\n   */\n  limit(value) {\n    this.operation.addToPipeline({ $limit: value });\n    return this;\n  }\n\n  /**\n   * Add a match stage to the aggregation pipeline\n   * @method\n   * @param {object} document The match stage document.\n   * @return {AggregationCursor}\n   */\n  match(document) {\n    this.operation.addToPipeline({ $match: document });\n    return this;\n  }\n\n  /**\n   * Add a maxTimeMS stage to the aggregation pipeline\n   * @method\n   * @param {number} value The state maxTimeMS value.\n   * @return {AggregationCursor}\n   */\n  maxTimeMS(value) {\n    this.operation.options.maxTimeMS = value;\n    return this;\n  }\n\n  /**\n   * Add a out stage to the aggregation pipeline\n   * @method\n   * @param {number} destination The destination name.\n   * @return {AggregationCursor}\n   */\n  out(destination) {\n    this.operation.addToPipeline({ $out: destination });\n    return this;\n  }\n\n  /**\n   * Add a project stage to the aggregation pipeline\n   * @method\n   * @param {object} document The project stage document.\n   * @return {AggregationCursor}\n   */\n  project(document) {\n    this.operation.addToPipeline({ $project: document });\n    return this;\n  }\n\n  /**\n   * Add a lookup stage to the aggregation pipeline\n   * @method\n   * @param {object} document The lookup stage document.\n   * @return {AggregationCursor}\n   */\n  lookup(document) {\n    this.operation.addToPipeline({ $lookup: document });\n    return this;\n  }\n\n  /**\n   * Add a redact stage to the aggregation pipeline\n   * @method\n   * @param {object} document The redact stage document.\n   * @return {AggregationCursor}\n   */\n  redact(document) {\n    this.operation.addToPipeline({ $redact: document });\n    return this;\n  }\n\n  /**\n   * Add a skip stage to the aggregation pipeline\n   * @method\n   * @param {number} value The state skip value.\n   * @return {AggregationCursor}\n   */\n  skip(value) {\n    this.operation.addToPipeline({ $skip: value });\n    return this;\n  }\n\n  /**\n   * Add a sort stage to the aggregation pipeline\n   * @method\n   * @param {object} document The sort stage document.\n   * @return {AggregationCursor}\n   */\n  sort(document) {\n    this.operation.addToPipeline({ $sort: document });\n    return this;\n  }\n\n  /**\n   * Add a unwind stage to the aggregation pipeline\n   * @method\n   * @param {number} field The unwind field name.\n   * @return {AggregationCursor}\n   */\n  unwind(field) {\n    this.operation.addToPipeline({ $unwind: field });\n    return this;\n  }\n\n  /**\n   * Return the cursor logger\n   * @method\n   * @return {Logger} return the cursor logger\n   * @ignore\n   */\n  getLogger() {\n    return this.logger;\n  }\n}\n\n// aliases\nAggregationCursor.prototype.get = AggregationCursor.prototype.toArray;\n\n// deprecated methods\ndeprecate(\n  AggregationCursor.prototype.geoNear,\n  'The `$geoNear` stage is deprecated in MongoDB 4.0, and removed in version 4.2.'\n);\n\n/**\n * AggregationCursor stream data event, fired for each document in the cursor.\n *\n * @event AggregationCursor#data\n * @type {object}\n */\n\n/**\n * AggregationCursor stream end event\n *\n * @event AggregationCursor#end\n * @type {null}\n */\n\n/**\n * AggregationCursor stream close event\n *\n * @event AggregationCursor#close\n * @type {null}\n */\n\n/**\n * AggregationCursor stream readable event\n *\n * @event AggregationCursor#readable\n * @type {null}\n */\n\n/**\n * Get the next available document from the cursor, returns null if no more documents are available.\n * @function AggregationCursor.prototype.next\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Check if there is any document still available in the cursor\n * @function AggregationCursor.prototype.hasNext\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback AggregationCursor~toArrayResultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {object[]} documents All the documents the satisfy the cursor.\n */\n\n/**\n * Returns an array of documents. The caller is responsible for making sure that there\n * is enough memory to store the results. Note that the array only contain partial\n * results when this cursor had been previously accessed. In that case,\n * cursor.rewind() can be used to reset the cursor.\n * @method AggregationCursor.prototype.toArray\n * @param {AggregationCursor~toArrayResultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback AggregationCursor~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {(object|null)} result The result object if the command was executed successfully.\n */\n\n/**\n * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,\n * not all of the elements will be iterated if this cursor had been previously accessed.\n * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike\n * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements\n * at any given time if batch size is specified. Otherwise, the caller is responsible\n * for making sure that the entire result can fit the memory.\n * @method AggregationCursor.prototype.each\n * @deprecated\n * @param {AggregationCursor~resultCallback} callback The result callback.\n * @throws {MongoError}\n * @return {null}\n */\n\n/**\n * Close the cursor, sending a AggregationCursor command and emitting close.\n * @method AggregationCursor.prototype.close\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Is the cursor closed\n * @method AggregationCursor.prototype.isClosed\n * @return {boolean}\n */\n\n/**\n * Execute the explain for the cursor\n * @method AggregationCursor.prototype.explain\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Clone the cursor\n * @function AggregationCursor.prototype.clone\n * @return {AggregationCursor}\n */\n\n/**\n * Resets the cursor\n * @function AggregationCursor.prototype.rewind\n * @return {AggregationCursor}\n */\n\n/**\n * The callback format for the forEach iterator method\n * @callback AggregationCursor~iteratorCallback\n * @param {Object} doc An emitted document for the iterator\n */\n\n/**\n * The callback error format for the forEach iterator method\n * @callback AggregationCursor~endCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n */\n\n/**\n * Iterates over all the documents for this cursor using the iterator, callback pattern.\n * @method AggregationCursor.prototype.forEach\n * @param {AggregationCursor~iteratorCallback} iterator The iteration callback.\n * @param {AggregationCursor~endCallback} callback The end callback.\n * @throws {MongoError}\n * @return {null}\n */\n\nmodule.exports = AggregationCursor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///116\n");

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst ReadPreference = __webpack_require__(3).ReadPreference;\nconst MongoError = __webpack_require__(3).MongoError;\nconst Cursor = __webpack_require__(106);\nconst CursorState = __webpack_require__(82).CursorState;\n\n/**\n * @fileOverview The **CommandCursor** class is an internal class that embodies a\n * generalized cursor based on a MongoDB command allowing for iteration over the\n * results returned. It supports one by one document iteration, conversion to an\n * array or can be iterated as a Node 0.10.X or higher stream\n *\n * **CommandCursor Cannot directly be instantiated**\n * @example\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Create a collection we want to drop later\n *   const col = client.db(dbName).collection('listCollectionsExample1');\n *   // Insert a bunch of documents\n *   col.insert([{a:1, b:1}\n *     , {a:2, b:2}, {a:3, b:3}\n *     , {a:4, b:4}], {w:1}, function(err, result) {\n *     test.equal(null, err);\n *     // List the database collections available\n *     db.listCollections().toArray(function(err, items) {\n *       test.equal(null, err);\n *       client.close();\n *     });\n *   });\n * });\n */\n\n/**\n * Namespace provided by the browser.\n * @external Readable\n */\n\n/**\n * Creates a new Command Cursor instance (INTERNAL TYPE, do not instantiate directly)\n * @class CommandCursor\n * @extends external:Readable\n * @fires CommandCursor#data\n * @fires CommandCursor#end\n * @fires CommandCursor#close\n * @fires CommandCursor#readable\n * @return {CommandCursor} an CommandCursor instance.\n */\nclass CommandCursor extends Cursor {\n  constructor(topology, ns, cmd, options) {\n    super(topology, ns, cmd, options);\n  }\n\n  /**\n   * Set the ReadPreference for the cursor.\n   * @method\n   * @param {(string|ReadPreference)} readPreference The new read preference for the cursor.\n   * @throws {MongoError}\n   * @return {Cursor}\n   */\n  setReadPreference(readPreference) {\n    if (this.s.state === CursorState.CLOSED || this.isDead()) {\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\n    }\n\n    if (this.s.state !== CursorState.INIT) {\n      throw MongoError.create({\n        message: 'cannot change cursor readPreference after cursor has been accessed',\n        driver: true\n      });\n    }\n\n    if (readPreference instanceof ReadPreference) {\n      this.options.readPreference = readPreference;\n    } else if (typeof readPreference === 'string') {\n      this.options.readPreference = new ReadPreference(readPreference);\n    } else {\n      throw new TypeError('Invalid read preference: ' + readPreference);\n    }\n\n    return this;\n  }\n\n  /**\n   * Set the batch size for the cursor.\n   * @method\n   * @param {number} value The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/find/|find command documentation}.\n   * @throws {MongoError}\n   * @return {CommandCursor}\n   */\n  batchSize(value) {\n    if (this.s.state === CursorState.CLOSED || this.isDead()) {\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\n    }\n\n    if (typeof value !== 'number') {\n      throw MongoError.create({ message: 'batchSize requires an integer', driver: true });\n    }\n\n    if (this.cmd.cursor) {\n      this.cmd.cursor.batchSize = value;\n    }\n\n    this.setCursorBatchSize(value);\n    return this;\n  }\n\n  /**\n   * Add a maxTimeMS stage to the aggregation pipeline\n   * @method\n   * @param {number} value The state maxTimeMS value.\n   * @return {CommandCursor}\n   */\n  maxTimeMS(value) {\n    if (this.topology.lastIsMaster().minWireVersion > 2) {\n      this.cmd.maxTimeMS = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Return the cursor logger\n   * @method\n   * @return {Logger} return the cursor logger\n   * @ignore\n   */\n  getLogger() {\n    return this.logger;\n  }\n}\n\n// aliases\nCommandCursor.prototype.get = CommandCursor.prototype.toArray;\n\n/**\n * CommandCursor stream data event, fired for each document in the cursor.\n *\n * @event CommandCursor#data\n * @type {object}\n */\n\n/**\n * CommandCursor stream end event\n *\n * @event CommandCursor#end\n * @type {null}\n */\n\n/**\n * CommandCursor stream close event\n *\n * @event CommandCursor#close\n * @type {null}\n */\n\n/**\n * CommandCursor stream readable event\n *\n * @event CommandCursor#readable\n * @type {null}\n */\n\n/**\n * Get the next available document from the cursor, returns null if no more documents are available.\n * @function CommandCursor.prototype.next\n * @param {CommandCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Check if there is any document still available in the cursor\n * @function CommandCursor.prototype.hasNext\n * @param {CommandCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback CommandCursor~toArrayResultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {object[]} documents All the documents the satisfy the cursor.\n */\n\n/**\n * Returns an array of documents. The caller is responsible for making sure that there\n * is enough memory to store the results. Note that the array only contain partial\n * results when this cursor had been previously accessed.\n * @method CommandCursor.prototype.toArray\n * @param {CommandCursor~toArrayResultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback CommandCursor~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {(object|null)} result The result object if the command was executed successfully.\n */\n\n/**\n * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,\n * not all of the elements will be iterated if this cursor had been previously accessed.\n * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike\n * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements\n * at any given time if batch size is specified. Otherwise, the caller is responsible\n * for making sure that the entire result can fit the memory.\n * @method CommandCursor.prototype.each\n * @param {CommandCursor~resultCallback} callback The result callback.\n * @throws {MongoError}\n * @return {null}\n */\n\n/**\n * Close the cursor, sending a KillCursor command and emitting close.\n * @method CommandCursor.prototype.close\n * @param {CommandCursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Is the cursor closed\n * @method CommandCursor.prototype.isClosed\n * @return {boolean}\n */\n\n/**\n * Clone the cursor\n * @function CommandCursor.prototype.clone\n * @return {CommandCursor}\n */\n\n/**\n * Resets the cursor\n * @function CommandCursor.prototype.rewind\n * @return {CommandCursor}\n */\n\n/**\n * The callback format for the forEach iterator method\n * @callback CommandCursor~iteratorCallback\n * @param {Object} doc An emitted document for the iterator\n */\n\n/**\n * The callback error format for the forEach iterator method\n * @callback CommandCursor~endCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n */\n\n/*\n * Iterates over all the documents for this cursor using the iterator, callback pattern.\n * @method CommandCursor.prototype.forEach\n * @param {CommandCursor~iteratorCallback} iterator The iteration callback.\n * @param {CommandCursor~endCallback} callback The end callback.\n * @throws {MongoError}\n * @return {null}\n */\n\nmodule.exports = CommandCursor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///117\n");

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst applyRetryableWrites = __webpack_require__(86).applyRetryableWrites;\nconst applyWriteConcern = __webpack_require__(86).applyWriteConcern;\nconst decorateWithCollation = __webpack_require__(86).decorateWithCollation;\nconst decorateWithReadConcern = __webpack_require__(86).decorateWithReadConcern;\nconst executeCommand = __webpack_require__(109).executeCommand;\nconst formattedOrderClause = __webpack_require__(86).formattedOrderClause;\nconst handleCallback = __webpack_require__(86).handleCallback;\nconst MongoError = __webpack_require__(3).MongoError;\nconst ReadPreference = __webpack_require__(3).ReadPreference;\nconst toError = __webpack_require__(86).toError;\nconst CursorState = __webpack_require__(82).CursorState;\n\n/**\n * Build the count command.\n *\n * @method\n * @param {collectionOrCursor} an instance of a collection or cursor\n * @param {object} query The query for the count.\n * @param {object} [options] Optional settings. See Collection.prototype.count and Cursor.prototype.count for a list of options.\n */\nfunction buildCountCommand(collectionOrCursor, query, options) {\n  const skip = options.skip;\n  const limit = options.limit;\n  let hint = options.hint;\n  const maxTimeMS = options.maxTimeMS;\n  query = query || {};\n\n  // Final query\n  const cmd = {\n    count: options.collectionName,\n    query: query\n  };\n\n  if (collectionOrCursor.s.numberOfRetries) {\n    // collectionOrCursor is a cursor\n    if (collectionOrCursor.options.hint) {\n      hint = collectionOrCursor.options.hint;\n    } else if (collectionOrCursor.cmd.hint) {\n      hint = collectionOrCursor.cmd.hint;\n    }\n    decorateWithCollation(cmd, collectionOrCursor, collectionOrCursor.cmd);\n  } else {\n    decorateWithCollation(cmd, collectionOrCursor, options);\n  }\n\n  // Add limit, skip and maxTimeMS if defined\n  if (typeof skip === 'number') cmd.skip = skip;\n  if (typeof limit === 'number') cmd.limit = limit;\n  if (typeof maxTimeMS === 'number') cmd.maxTimeMS = maxTimeMS;\n  if (hint) cmd.hint = hint;\n\n  // Do we have a readConcern specified\n  decorateWithReadConcern(cmd, collectionOrCursor);\n\n  return cmd;\n}\n\nfunction deleteCallback(err, r, callback) {\n  if (callback == null) return;\n  if (err && callback) return callback(err);\n  if (r == null) return callback(null, { result: { ok: 1 } });\n  r.deletedCount = r.result.n;\n  if (callback) callback(null, r);\n}\n\n/**\n * Find and update a document.\n *\n * @method\n * @param {Collection} a Collection instance.\n * @param {object} query Query object to locate the object to modify.\n * @param {array} sort If multiple docs match, choose the first one in the specified sort order as the object to manipulate.\n * @param {object} doc The fields/vals to be updated.\n * @param {object} [options] Optional settings. See Collection.prototype.findAndModify for a list of options.\n * @param {Collection~findAndModifyCallback} [callback] The command result callback\n * @deprecated use findOneAndUpdate, findOneAndReplace or findOneAndDelete instead\n */\nfunction findAndModify(coll, query, sort, doc, options, callback) {\n  // Create findAndModify command object\n  const queryObject = {\n    findAndModify: coll.collectionName,\n    query: query\n  };\n\n  sort = formattedOrderClause(sort);\n  if (sort) {\n    queryObject.sort = sort;\n  }\n\n  queryObject.new = options.new ? true : false;\n  queryObject.remove = options.remove ? true : false;\n  queryObject.upsert = options.upsert ? true : false;\n\n  const projection = options.projection || options.fields;\n\n  if (projection) {\n    queryObject.fields = projection;\n  }\n\n  if (options.arrayFilters) {\n    queryObject.arrayFilters = options.arrayFilters;\n    delete options.arrayFilters;\n  }\n\n  if (doc && !options.remove) {\n    queryObject.update = doc;\n  }\n\n  if (options.maxTimeMS) queryObject.maxTimeMS = options.maxTimeMS;\n\n  // Either use override on the function, or go back to default on either the collection\n  // level or db\n  options.serializeFunctions = options.serializeFunctions || coll.s.serializeFunctions;\n\n  // No check on the documents\n  options.checkKeys = false;\n\n  // Final options for retryable writes and write concern\n  let finalOptions = Object.assign({}, options);\n  finalOptions = applyRetryableWrites(finalOptions, coll.s.db);\n  finalOptions = applyWriteConcern(finalOptions, { db: coll.s.db, collection: coll }, options);\n\n  // Decorate the findAndModify command with the write Concern\n  if (finalOptions.writeConcern) {\n    queryObject.writeConcern = finalOptions.writeConcern;\n  }\n\n  // Have we specified bypassDocumentValidation\n  if (finalOptions.bypassDocumentValidation === true) {\n    queryObject.bypassDocumentValidation = finalOptions.bypassDocumentValidation;\n  }\n\n  finalOptions.readPreference = ReadPreference.primary;\n\n  // Have we specified collation\n  try {\n    decorateWithCollation(queryObject, coll, finalOptions);\n  } catch (err) {\n    return callback(err, null);\n  }\n\n  // Execute the command\n  executeCommand(coll.s.db, queryObject, finalOptions, (err, result) => {\n    if (err) return handleCallback(callback, err, null);\n\n    return handleCallback(callback, null, result);\n  });\n}\n\n/**\n * Retrieves this collections index info.\n *\n * @method\n * @param {Db} db The Db instance on which to retrieve the index info.\n * @param {string} name The name of the collection.\n * @param {object} [options] Optional settings. See Db.prototype.indexInformation for a list of options.\n * @param {Db~resultCallback} [callback] The command result callback\n */\nfunction indexInformation(db, name, options, callback) {\n  // If we specified full information\n  const full = options['full'] == null ? false : options['full'];\n\n  // Did the user destroy the topology\n  if (db.serverConfig && db.serverConfig.isDestroyed())\n    return callback(new MongoError('topology was destroyed'));\n  // Process all the results from the index command and collection\n  function processResults(indexes) {\n    // Contains all the information\n    let info = {};\n    // Process all the indexes\n    for (let i = 0; i < indexes.length; i++) {\n      const index = indexes[i];\n      // Let's unpack the object\n      info[index.name] = [];\n      for (let name in index.key) {\n        info[index.name].push([name, index.key[name]]);\n      }\n    }\n\n    return info;\n  }\n\n  // Get the list of indexes of the specified collection\n  db\n    .collection(name)\n    .listIndexes(options)\n    .toArray((err, indexes) => {\n      if (err) return callback(toError(err));\n      if (!Array.isArray(indexes)) return handleCallback(callback, null, []);\n      if (full) return handleCallback(callback, null, indexes);\n      handleCallback(callback, null, processResults(indexes));\n    });\n}\n\nfunction prepareDocs(coll, docs, options) {\n  const forceServerObjectId =\n    typeof options.forceServerObjectId === 'boolean'\n      ? options.forceServerObjectId\n      : coll.s.db.options.forceServerObjectId;\n\n  // no need to modify the docs if server sets the ObjectId\n  if (forceServerObjectId === true) {\n    return docs;\n  }\n\n  return docs.map(doc => {\n    if (forceServerObjectId !== true && doc._id == null) {\n      doc._id = coll.s.pkFactory.createPk();\n    }\n\n    return doc;\n  });\n}\n\n// Get the next available document from the cursor, returns null if no more documents are available.\nfunction nextObject(cursor, callback) {\n  if (cursor.s.state === CursorState.CLOSED || (cursor.isDead && cursor.isDead())) {\n    return handleCallback(\n      callback,\n      MongoError.create({ message: 'Cursor is closed', driver: true })\n    );\n  }\n\n  if (cursor.s.state === CursorState.INIT && cursor.cmd && cursor.cmd.sort) {\n    try {\n      cursor.cmd.sort = formattedOrderClause(cursor.cmd.sort);\n    } catch (err) {\n      return handleCallback(callback, err);\n    }\n  }\n\n  // Get the next object\n  cursor._next((err, doc) => {\n    cursor.s.state = CursorState.OPEN;\n    if (err) return handleCallback(callback, err);\n    handleCallback(callback, null, doc);\n  });\n}\n\nfunction insertDocuments(coll, docs, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n  // Ensure we are operating on an array op docs\n  docs = Array.isArray(docs) ? docs : [docs];\n\n  // Final options for retryable writes and write concern\n  let finalOptions = Object.assign({}, options);\n  finalOptions = applyRetryableWrites(finalOptions, coll.s.db);\n  finalOptions = applyWriteConcern(finalOptions, { db: coll.s.db, collection: coll }, options);\n\n  // If keep going set unordered\n  if (finalOptions.keepGoing === true) finalOptions.ordered = false;\n  finalOptions.serializeFunctions = options.serializeFunctions || coll.s.serializeFunctions;\n\n  docs = prepareDocs(coll, docs, options);\n\n  // File inserts\n  coll.s.topology.insert(coll.s.namespace, docs, finalOptions, (err, result) => {\n    if (callback == null) return;\n    if (err) return handleCallback(callback, err);\n    if (result == null) return handleCallback(callback, null, null);\n    if (result.result.code) return handleCallback(callback, toError(result.result));\n    if (result.result.writeErrors)\n      return handleCallback(callback, toError(result.result.writeErrors[0]));\n    // Add docs to the list\n    result.ops = docs;\n    // Return the results\n    handleCallback(callback, null, result);\n  });\n}\n\nfunction removeDocuments(coll, selector, options, callback) {\n  if (typeof options === 'function') {\n    (callback = options), (options = {});\n  } else if (typeof selector === 'function') {\n    callback = selector;\n    options = {};\n    selector = {};\n  }\n\n  // Create an empty options object if the provided one is null\n  options = options || {};\n\n  // Final options for retryable writes and write concern\n  let finalOptions = Object.assign({}, options);\n  finalOptions = applyRetryableWrites(finalOptions, coll.s.db);\n  finalOptions = applyWriteConcern(finalOptions, { db: coll.s.db, collection: coll }, options);\n\n  // If selector is null set empty\n  if (selector == null) selector = {};\n\n  // Build the op\n  const op = { q: selector, limit: 0 };\n  if (options.single) {\n    op.limit = 1;\n  } else if (finalOptions.retryWrites) {\n    finalOptions.retryWrites = false;\n  }\n\n  // Have we specified collation\n  try {\n    decorateWithCollation(finalOptions, coll, options);\n  } catch (err) {\n    return callback(err, null);\n  }\n\n  // Execute the remove\n  coll.s.topology.remove(coll.s.namespace, [op], finalOptions, (err, result) => {\n    if (callback == null) return;\n    if (err) return handleCallback(callback, err, null);\n    if (result == null) return handleCallback(callback, null, null);\n    if (result.result.code) return handleCallback(callback, toError(result.result));\n    if (result.result.writeErrors) {\n      return handleCallback(callback, toError(result.result.writeErrors[0]));\n    }\n\n    // Return the results\n    handleCallback(callback, null, result);\n  });\n}\n\nfunction updateDocuments(coll, selector, document, options, callback) {\n  if ('function' === typeof options) (callback = options), (options = null);\n  if (options == null) options = {};\n  if (!('function' === typeof callback)) callback = null;\n\n  // If we are not providing a selector or document throw\n  if (selector == null || typeof selector !== 'object')\n    return callback(toError('selector must be a valid JavaScript object'));\n  if (document == null || typeof document !== 'object')\n    return callback(toError('document must be a valid JavaScript object'));\n\n  // Final options for retryable writes and write concern\n  let finalOptions = Object.assign({}, options);\n  finalOptions = applyRetryableWrites(finalOptions, coll.s.db);\n  finalOptions = applyWriteConcern(finalOptions, { db: coll.s.db, collection: coll }, options);\n\n  // Do we return the actual result document\n  // Either use override on the function, or go back to default on either the collection\n  // level or db\n  finalOptions.serializeFunctions = options.serializeFunctions || coll.s.serializeFunctions;\n\n  // Execute the operation\n  const op = { q: selector, u: document };\n  op.upsert = options.upsert !== void 0 ? !!options.upsert : false;\n  op.multi = options.multi !== void 0 ? !!options.multi : false;\n\n  if (finalOptions.arrayFilters) {\n    op.arrayFilters = finalOptions.arrayFilters;\n    delete finalOptions.arrayFilters;\n  }\n\n  if (finalOptions.retryWrites && op.multi) {\n    finalOptions.retryWrites = false;\n  }\n\n  // Have we specified collation\n  try {\n    decorateWithCollation(finalOptions, coll, options);\n  } catch (err) {\n    return callback(err, null);\n  }\n\n  // Update options\n  coll.s.topology.update(coll.s.namespace, [op], finalOptions, (err, result) => {\n    if (callback == null) return;\n    if (err) return handleCallback(callback, err, null);\n    if (result == null) return handleCallback(callback, null, null);\n    if (result.result.code) return handleCallback(callback, toError(result.result));\n    if (result.result.writeErrors)\n      return handleCallback(callback, toError(result.result.writeErrors[0]));\n    // Return the results\n    handleCallback(callback, null, result);\n  });\n}\n\nfunction updateCallback(err, r, callback) {\n  if (callback == null) return;\n  if (err) return callback(err);\n  if (r == null) return callback(null, { result: { ok: 1 } });\n  r.modifiedCount = r.result.nModified != null ? r.result.nModified : r.result.n;\n  r.upsertedId =\n    Array.isArray(r.result.upserted) && r.result.upserted.length > 0\n      ? r.result.upserted[0] // FIXME(major): should be `r.result.upserted[0]._id`\n      : null;\n  r.upsertedCount =\n    Array.isArray(r.result.upserted) && r.result.upserted.length ? r.result.upserted.length : 0;\n  r.matchedCount =\n    Array.isArray(r.result.upserted) && r.result.upserted.length > 0 ? 0 : r.result.n;\n  callback(null, r);\n}\n\nmodule.exports = {\n  buildCountCommand,\n  deleteCallback,\n  findAndModify,\n  indexInformation,\n  nextObject,\n  prepareDocs,\n  insertDocuments,\n  removeDocuments,\n  updateDocuments,\n  updateCallback\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///118\n");

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst CommandOperationV2 = __webpack_require__(120);\nconst MongoError = __webpack_require__(3).MongoError;\nconst maxWireVersion = __webpack_require__(35).maxWireVersion;\nconst ReadPreference = __webpack_require__(3).ReadPreference;\nconst Aspect = __webpack_require__(84).Aspect;\nconst defineAspects = __webpack_require__(84).defineAspects;\n\nconst DB_AGGREGATE_COLLECTION = 1;\nconst MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT = 8;\n\nclass AggregateOperation extends CommandOperationV2 {\n  constructor(parent, pipeline, options) {\n    super(parent, options, { fullResponse: true });\n\n    this.target =\n      parent.s.namespace && parent.s.namespace.collection\n        ? parent.s.namespace.collection\n        : DB_AGGREGATE_COLLECTION;\n\n    this.pipeline = pipeline;\n\n    // determine if we have a write stage, override read preference if so\n    this.hasWriteStage = false;\n    if (typeof options.out === 'string') {\n      this.pipeline = this.pipeline.concat({ $out: options.out });\n      this.hasWriteStage = true;\n    } else if (pipeline.length > 0) {\n      const finalStage = pipeline[pipeline.length - 1];\n      if (finalStage.$out || finalStage.$merge) {\n        this.hasWriteStage = true;\n      }\n    }\n\n    if (this.hasWriteStage) {\n      this.readPreference = ReadPreference.primary;\n    }\n\n    if (options.explain && (this.readConcern || this.writeConcern)) {\n      throw new MongoError(\n        '\"explain\" cannot be used on an aggregate call with readConcern/writeConcern'\n      );\n    }\n\n    if (options.cursor != null && typeof options.cursor !== 'object') {\n      throw new MongoError('cursor options must be an object');\n    }\n  }\n\n  get canRetryRead() {\n    return !this.hasWriteStage;\n  }\n\n  addToPipeline(stage) {\n    this.pipeline.push(stage);\n  }\n\n  execute(server, callback) {\n    const options = this.options;\n    const serverWireVersion = maxWireVersion(server);\n    const command = { aggregate: this.target, pipeline: this.pipeline };\n\n    if (this.hasWriteStage && serverWireVersion < MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT) {\n      this.readConcern = null;\n    }\n\n    if (serverWireVersion >= 5) {\n      if (this.hasWriteStage && this.writeConcern) {\n        Object.assign(command, { writeConcern: this.writeConcern });\n      }\n    }\n\n    if (options.bypassDocumentValidation === true) {\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n\n    if (typeof options.allowDiskUse === 'boolean') {\n      command.allowDiskUse = options.allowDiskUse;\n    }\n\n    if (options.hint) {\n      command.hint = options.hint;\n    }\n\n    if (options.explain) {\n      options.full = false;\n      command.explain = options.explain;\n    }\n\n    command.cursor = options.cursor || {};\n    if (options.batchSize && !this.hasWriteStage) {\n      command.cursor.batchSize = options.batchSize;\n    }\n\n    super.executeCommand(server, command, callback);\n  }\n}\n\ndefineAspects(AggregateOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.EXECUTE_WITH_SELECTION\n]);\n\nmodule.exports = AggregateOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvYWdncmVnYXRlLmpzP2MzMmUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsMkJBQTJCLG1CQUFPLENBQUMsR0FBYztBQUNqRCxtQkFBbUIsbUJBQU8sQ0FBQyxDQUFTO0FBQ3BDLHVCQUF1QixtQkFBTyxDQUFDLEVBQWU7QUFDOUMsdUJBQXVCLG1CQUFPLENBQUMsQ0FBUztBQUN4QyxlQUFlLG1CQUFPLENBQUMsRUFBYTtBQUNwQyxzQkFBc0IsbUJBQU8sQ0FBQyxFQUFhOztBQUUzQztBQUNBOztBQUVBO0FBQ0E7QUFDQSw0QkFBNEIscUJBQXFCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsb0JBQW9CO0FBQ2hFO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7O0FBRXJCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0NBQWdDLGtDQUFrQztBQUNsRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjExOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgQ29tbWFuZE9wZXJhdGlvblYyID0gcmVxdWlyZSgnLi9jb21tYW5kX3YyJyk7XG5jb25zdCBNb25nb0Vycm9yID0gcmVxdWlyZSgnLi4vY29yZScpLk1vbmdvRXJyb3I7XG5jb25zdCBtYXhXaXJlVmVyc2lvbiA9IHJlcXVpcmUoJy4uL2NvcmUvdXRpbHMnKS5tYXhXaXJlVmVyc2lvbjtcbmNvbnN0IFJlYWRQcmVmZXJlbmNlID0gcmVxdWlyZSgnLi4vY29yZScpLlJlYWRQcmVmZXJlbmNlO1xuY29uc3QgQXNwZWN0ID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5Bc3BlY3Q7XG5jb25zdCBkZWZpbmVBc3BlY3RzID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5kZWZpbmVBc3BlY3RzO1xuXG5jb25zdCBEQl9BR0dSRUdBVEVfQ09MTEVDVElPTiA9IDE7XG5jb25zdCBNSU5fV0lSRV9WRVJTSU9OXyRPVVRfUkVBRF9DT05DRVJOX1NVUFBPUlQgPSA4O1xuXG5jbGFzcyBBZ2dyZWdhdGVPcGVyYXRpb24gZXh0ZW5kcyBDb21tYW5kT3BlcmF0aW9uVjIge1xuICBjb25zdHJ1Y3RvcihwYXJlbnQsIHBpcGVsaW5lLCBvcHRpb25zKSB7XG4gICAgc3VwZXIocGFyZW50LCBvcHRpb25zLCB7IGZ1bGxSZXNwb25zZTogdHJ1ZSB9KTtcblxuICAgIHRoaXMudGFyZ2V0ID1cbiAgICAgIHBhcmVudC5zLm5hbWVzcGFjZSAmJiBwYXJlbnQucy5uYW1lc3BhY2UuY29sbGVjdGlvblxuICAgICAgICA/IHBhcmVudC5zLm5hbWVzcGFjZS5jb2xsZWN0aW9uXG4gICAgICAgIDogREJfQUdHUkVHQVRFX0NPTExFQ1RJT047XG5cbiAgICB0aGlzLnBpcGVsaW5lID0gcGlwZWxpbmU7XG5cbiAgICAvLyBkZXRlcm1pbmUgaWYgd2UgaGF2ZSBhIHdyaXRlIHN0YWdlLCBvdmVycmlkZSByZWFkIHByZWZlcmVuY2UgaWYgc29cbiAgICB0aGlzLmhhc1dyaXRlU3RhZ2UgPSBmYWxzZTtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMub3V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5waXBlbGluZSA9IHRoaXMucGlwZWxpbmUuY29uY2F0KHsgJG91dDogb3B0aW9ucy5vdXQgfSk7XG4gICAgICB0aGlzLmhhc1dyaXRlU3RhZ2UgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAocGlwZWxpbmUubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgZmluYWxTdGFnZSA9IHBpcGVsaW5lW3BpcGVsaW5lLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKGZpbmFsU3RhZ2UuJG91dCB8fCBmaW5hbFN0YWdlLiRtZXJnZSkge1xuICAgICAgICB0aGlzLmhhc1dyaXRlU3RhZ2UgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmhhc1dyaXRlU3RhZ2UpIHtcbiAgICAgIHRoaXMucmVhZFByZWZlcmVuY2UgPSBSZWFkUHJlZmVyZW5jZS5wcmltYXJ5O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmV4cGxhaW4gJiYgKHRoaXMucmVhZENvbmNlcm4gfHwgdGhpcy53cml0ZUNvbmNlcm4pKSB7XG4gICAgICB0aHJvdyBuZXcgTW9uZ29FcnJvcihcbiAgICAgICAgJ1wiZXhwbGFpblwiIGNhbm5vdCBiZSB1c2VkIG9uIGFuIGFnZ3JlZ2F0ZSBjYWxsIHdpdGggcmVhZENvbmNlcm4vd3JpdGVDb25jZXJuJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jdXJzb3IgIT0gbnVsbCAmJiB0eXBlb2Ygb3B0aW9ucy5jdXJzb3IgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgTW9uZ29FcnJvcignY3Vyc29yIG9wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgICB9XG4gIH1cblxuICBnZXQgY2FuUmV0cnlSZWFkKCkge1xuICAgIHJldHVybiAhdGhpcy5oYXNXcml0ZVN0YWdlO1xuICB9XG5cbiAgYWRkVG9QaXBlbGluZShzdGFnZSkge1xuICAgIHRoaXMucGlwZWxpbmUucHVzaChzdGFnZSk7XG4gIH1cblxuICBleGVjdXRlKHNlcnZlciwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHNlcnZlcldpcmVWZXJzaW9uID0gbWF4V2lyZVZlcnNpb24oc2VydmVyKTtcbiAgICBjb25zdCBjb21tYW5kID0geyBhZ2dyZWdhdGU6IHRoaXMudGFyZ2V0LCBwaXBlbGluZTogdGhpcy5waXBlbGluZSB9O1xuXG4gICAgaWYgKHRoaXMuaGFzV3JpdGVTdGFnZSAmJiBzZXJ2ZXJXaXJlVmVyc2lvbiA8IE1JTl9XSVJFX1ZFUlNJT05fJE9VVF9SRUFEX0NPTkNFUk5fU1VQUE9SVCkge1xuICAgICAgdGhpcy5yZWFkQ29uY2VybiA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHNlcnZlcldpcmVWZXJzaW9uID49IDUpIHtcbiAgICAgIGlmICh0aGlzLmhhc1dyaXRlU3RhZ2UgJiYgdGhpcy53cml0ZUNvbmNlcm4pIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihjb21tYW5kLCB7IHdyaXRlQ29uY2VybjogdGhpcy53cml0ZUNvbmNlcm4gfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uID09PSB0cnVlKSB7XG4gICAgICBjb21tYW5kLmJ5cGFzc0RvY3VtZW50VmFsaWRhdGlvbiA9IG9wdGlvbnMuYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5hbGxvd0Rpc2tVc2UgPT09ICdib29sZWFuJykge1xuICAgICAgY29tbWFuZC5hbGxvd0Rpc2tVc2UgPSBvcHRpb25zLmFsbG93RGlza1VzZTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5oaW50KSB7XG4gICAgICBjb21tYW5kLmhpbnQgPSBvcHRpb25zLmhpbnQ7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZXhwbGFpbikge1xuICAgICAgb3B0aW9ucy5mdWxsID0gZmFsc2U7XG4gICAgICBjb21tYW5kLmV4cGxhaW4gPSBvcHRpb25zLmV4cGxhaW47XG4gICAgfVxuXG4gICAgY29tbWFuZC5jdXJzb3IgPSBvcHRpb25zLmN1cnNvciB8fCB7fTtcbiAgICBpZiAob3B0aW9ucy5iYXRjaFNpemUgJiYgIXRoaXMuaGFzV3JpdGVTdGFnZSkge1xuICAgICAgY29tbWFuZC5jdXJzb3IuYmF0Y2hTaXplID0gb3B0aW9ucy5iYXRjaFNpemU7XG4gICAgfVxuXG4gICAgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBjb21tYW5kLCBjYWxsYmFjayk7XG4gIH1cbn1cblxuZGVmaW5lQXNwZWN0cyhBZ2dyZWdhdGVPcGVyYXRpb24sIFtcbiAgQXNwZWN0LlJFQURfT1BFUkFUSU9OLFxuICBBc3BlY3QuUkVUUllBQkxFLFxuICBBc3BlY3QuRVhFQ1VURV9XSVRIX1NFTEVDVElPTlxuXSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQWdncmVnYXRlT3BlcmF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///119\n");

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Aspect = __webpack_require__(84).Aspect;\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst resolveReadPreference = __webpack_require__(86).resolveReadPreference;\nconst ReadConcern = __webpack_require__(115);\nconst WriteConcern = __webpack_require__(87);\nconst maxWireVersion = __webpack_require__(35).maxWireVersion;\nconst commandSupportsReadConcern = __webpack_require__(74).commandSupportsReadConcern;\nconst MongoError = __webpack_require__(105).MongoError;\n\nconst SUPPORTS_WRITE_CONCERN_AND_COLLATION = 5;\n\nclass CommandOperationV2 extends OperationBase {\n  constructor(parent, options, operationOptions) {\n    super(options);\n\n    this.ns = parent.s.namespace.withCollection('$cmd');\n    this.readPreference = resolveReadPreference(parent, this.options);\n    this.readConcern = resolveReadConcern(parent, this.options);\n    this.writeConcern = resolveWriteConcern(parent, this.options);\n    this.explain = false;\n\n    if (operationOptions && typeof operationOptions.fullResponse === 'boolean') {\n      this.fullResponse = true;\n    }\n\n    // TODO: A lot of our code depends on having the read preference in the options. This should\n    //       go away, but also requires massive test rewrites.\n    this.options.readPreference = this.readPreference;\n\n    // TODO(NODE-2056): make logger another \"inheritable\" property\n    if (parent.s.logger) {\n      this.logger = parent.s.logger;\n    } else if (parent.s.db && parent.s.db.logger) {\n      this.logger = parent.s.db.logger;\n    }\n  }\n\n  executeCommand(server, cmd, callback) {\n    // TODO: consider making this a non-enumerable property\n    this.server = server;\n\n    const options = this.options;\n    const serverWireVersion = maxWireVersion(server);\n    const inTransaction = this.session && this.session.inTransaction();\n\n    if (this.readConcern && commandSupportsReadConcern(cmd) && !inTransaction) {\n      Object.assign(cmd, { readConcern: this.readConcern });\n    }\n\n    if (options.collation && serverWireVersion < SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n      callback(\n        new MongoError(\n          `Server ${\n            server.name\n          }, which reports wire version ${serverWireVersion}, does not support collation`\n        )\n      );\n      return;\n    }\n\n    if (serverWireVersion >= SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n      if (this.writeConcern && this.hasAspect(Aspect.WRITE_OPERATION)) {\n        Object.assign(cmd, { writeConcern: this.writeConcern });\n      }\n\n      if (options.collation && typeof options.collation === 'object') {\n        Object.assign(cmd, { collation: options.collation });\n      }\n    }\n\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n\n    if (typeof options.comment === 'string') {\n      cmd.comment = options.comment;\n    }\n\n    if (this.logger && this.logger.isDebug()) {\n      this.logger.debug(`executing command ${JSON.stringify(cmd)} against ${this.ns}`);\n    }\n\n    server.command(this.ns.toString(), cmd, this.options, (err, result) => {\n      if (err) {\n        callback(err, null);\n        return;\n      }\n\n      if (this.fullResponse) {\n        callback(null, result);\n        return;\n      }\n\n      callback(null, result.result);\n    });\n  }\n}\n\nfunction resolveWriteConcern(parent, options) {\n  return WriteConcern.fromOptions(options) || parent.writeConcern;\n}\n\nfunction resolveReadConcern(parent, options) {\n  return ReadConcern.fromOptions(options) || parent.readConcern;\n}\n\nmodule.exports = CommandOperationV2;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvY29tbWFuZF92Mi5qcz80ODlhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGVBQWUsbUJBQU8sQ0FBQyxFQUFhO0FBQ3BDLHNCQUFzQixtQkFBTyxDQUFDLEVBQWE7QUFDM0MsOEJBQThCLG1CQUFPLENBQUMsRUFBVTtBQUNoRCxvQkFBb0IsbUJBQU8sQ0FBQyxHQUFpQjtBQUM3QyxxQkFBcUIsbUJBQU8sQ0FBQyxFQUFrQjtBQUMvQyx1QkFBdUIsbUJBQU8sQ0FBQyxFQUFlO0FBQzlDLG1DQUFtQyxtQkFBTyxDQUFDLEVBQWtCO0FBQzdELG1CQUFtQixtQkFBTyxDQUFDLEdBQVU7O0FBRXJDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCLGdDQUFnQztBQUMxRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVywrQkFBK0Isa0JBQWtCO0FBQzVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0QkFBNEIsa0NBQWtDO0FBQzlEOztBQUVBO0FBQ0EsNEJBQTRCLCtCQUErQjtBQUMzRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw2Q0FBNkMsb0JBQW9CLFdBQVcsUUFBUTtBQUNwRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIxMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEFzcGVjdCA9IHJlcXVpcmUoJy4vb3BlcmF0aW9uJykuQXNwZWN0O1xuY29uc3QgT3BlcmF0aW9uQmFzZSA9IHJlcXVpcmUoJy4vb3BlcmF0aW9uJykuT3BlcmF0aW9uQmFzZTtcbmNvbnN0IHJlc29sdmVSZWFkUHJlZmVyZW5jZSA9IHJlcXVpcmUoJy4uL3V0aWxzJykucmVzb2x2ZVJlYWRQcmVmZXJlbmNlO1xuY29uc3QgUmVhZENvbmNlcm4gPSByZXF1aXJlKCcuLi9yZWFkX2NvbmNlcm4nKTtcbmNvbnN0IFdyaXRlQ29uY2VybiA9IHJlcXVpcmUoJy4uL3dyaXRlX2NvbmNlcm4nKTtcbmNvbnN0IG1heFdpcmVWZXJzaW9uID0gcmVxdWlyZSgnLi4vY29yZS91dGlscycpLm1heFdpcmVWZXJzaW9uO1xuY29uc3QgY29tbWFuZFN1cHBvcnRzUmVhZENvbmNlcm4gPSByZXF1aXJlKCcuLi9jb3JlL3Nlc3Npb25zJykuY29tbWFuZFN1cHBvcnRzUmVhZENvbmNlcm47XG5jb25zdCBNb25nb0Vycm9yID0gcmVxdWlyZSgnLi4vZXJyb3InKS5Nb25nb0Vycm9yO1xuXG5jb25zdCBTVVBQT1JUU19XUklURV9DT05DRVJOX0FORF9DT0xMQVRJT04gPSA1O1xuXG5jbGFzcyBDb21tYW5kT3BlcmF0aW9uVjIgZXh0ZW5kcyBPcGVyYXRpb25CYXNlIHtcbiAgY29uc3RydWN0b3IocGFyZW50LCBvcHRpb25zLCBvcGVyYXRpb25PcHRpb25zKSB7XG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICB0aGlzLm5zID0gcGFyZW50LnMubmFtZXNwYWNlLndpdGhDb2xsZWN0aW9uKCckY21kJyk7XG4gICAgdGhpcy5yZWFkUHJlZmVyZW5jZSA9IHJlc29sdmVSZWFkUHJlZmVyZW5jZShwYXJlbnQsIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy5yZWFkQ29uY2VybiA9IHJlc29sdmVSZWFkQ29uY2VybihwYXJlbnQsIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy53cml0ZUNvbmNlcm4gPSByZXNvbHZlV3JpdGVDb25jZXJuKHBhcmVudCwgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLmV4cGxhaW4gPSBmYWxzZTtcblxuICAgIGlmIChvcGVyYXRpb25PcHRpb25zICYmIHR5cGVvZiBvcGVyYXRpb25PcHRpb25zLmZ1bGxSZXNwb25zZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICB0aGlzLmZ1bGxSZXNwb25zZSA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogQSBsb3Qgb2Ygb3VyIGNvZGUgZGVwZW5kcyBvbiBoYXZpbmcgdGhlIHJlYWQgcHJlZmVyZW5jZSBpbiB0aGUgb3B0aW9ucy4gVGhpcyBzaG91bGRcbiAgICAvLyAgICAgICBnbyBhd2F5LCBidXQgYWxzbyByZXF1aXJlcyBtYXNzaXZlIHRlc3QgcmV3cml0ZXMuXG4gICAgdGhpcy5vcHRpb25zLnJlYWRQcmVmZXJlbmNlID0gdGhpcy5yZWFkUHJlZmVyZW5jZTtcblxuICAgIC8vIFRPRE8oTk9ERS0yMDU2KTogbWFrZSBsb2dnZXIgYW5vdGhlciBcImluaGVyaXRhYmxlXCIgcHJvcGVydHlcbiAgICBpZiAocGFyZW50LnMubG9nZ2VyKSB7XG4gICAgICB0aGlzLmxvZ2dlciA9IHBhcmVudC5zLmxvZ2dlcjtcbiAgICB9IGVsc2UgaWYgKHBhcmVudC5zLmRiICYmIHBhcmVudC5zLmRiLmxvZ2dlcikge1xuICAgICAgdGhpcy5sb2dnZXIgPSBwYXJlbnQucy5kYi5sb2dnZXI7XG4gICAgfVxuICB9XG5cbiAgZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBjbWQsIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogY29uc2lkZXIgbWFraW5nIHRoaXMgYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuICAgIHRoaXMuc2VydmVyID0gc2VydmVyO1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBzZXJ2ZXJXaXJlVmVyc2lvbiA9IG1heFdpcmVWZXJzaW9uKHNlcnZlcik7XG4gICAgY29uc3QgaW5UcmFuc2FjdGlvbiA9IHRoaXMuc2Vzc2lvbiAmJiB0aGlzLnNlc3Npb24uaW5UcmFuc2FjdGlvbigpO1xuXG4gICAgaWYgKHRoaXMucmVhZENvbmNlcm4gJiYgY29tbWFuZFN1cHBvcnRzUmVhZENvbmNlcm4oY21kKSAmJiAhaW5UcmFuc2FjdGlvbikge1xuICAgICAgT2JqZWN0LmFzc2lnbihjbWQsIHsgcmVhZENvbmNlcm46IHRoaXMucmVhZENvbmNlcm4gfSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY29sbGF0aW9uICYmIHNlcnZlcldpcmVWZXJzaW9uIDwgU1VQUE9SVFNfV1JJVEVfQ09OQ0VSTl9BTkRfQ09MTEFUSU9OKSB7XG4gICAgICBjYWxsYmFjayhcbiAgICAgICAgbmV3IE1vbmdvRXJyb3IoXG4gICAgICAgICAgYFNlcnZlciAke1xuICAgICAgICAgICAgc2VydmVyLm5hbWVcbiAgICAgICAgICB9LCB3aGljaCByZXBvcnRzIHdpcmUgdmVyc2lvbiAke3NlcnZlcldpcmVWZXJzaW9ufSwgZG9lcyBub3Qgc3VwcG9ydCBjb2xsYXRpb25gXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHNlcnZlcldpcmVWZXJzaW9uID49IFNVUFBPUlRTX1dSSVRFX0NPTkNFUk5fQU5EX0NPTExBVElPTikge1xuICAgICAgaWYgKHRoaXMud3JpdGVDb25jZXJuICYmIHRoaXMuaGFzQXNwZWN0KEFzcGVjdC5XUklURV9PUEVSQVRJT04pKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oY21kLCB7IHdyaXRlQ29uY2VybjogdGhpcy53cml0ZUNvbmNlcm4gfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmNvbGxhdGlvbiAmJiB0eXBlb2Ygb3B0aW9ucy5jb2xsYXRpb24gPT09ICdvYmplY3QnKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oY21kLCB7IGNvbGxhdGlvbjogb3B0aW9ucy5jb2xsYXRpb24gfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLm1heFRpbWVNUyA9PT0gJ251bWJlcicpIHtcbiAgICAgIGNtZC5tYXhUaW1lTVMgPSBvcHRpb25zLm1heFRpbWVNUztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuY29tbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNtZC5jb21tZW50ID0gb3B0aW9ucy5jb21tZW50O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxvZ2dlciAmJiB0aGlzLmxvZ2dlci5pc0RlYnVnKCkpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBleGVjdXRpbmcgY29tbWFuZCAke0pTT04uc3RyaW5naWZ5KGNtZCl9IGFnYWluc3QgJHt0aGlzLm5zfWApO1xuICAgIH1cblxuICAgIHNlcnZlci5jb21tYW5kKHRoaXMubnMudG9TdHJpbmcoKSwgY21kLCB0aGlzLm9wdGlvbnMsIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBjYWxsYmFjayhlcnIsIG51bGwpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmZ1bGxSZXNwb25zZSkge1xuICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdC5yZXN1bHQpO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVXcml0ZUNvbmNlcm4ocGFyZW50LCBvcHRpb25zKSB7XG4gIHJldHVybiBXcml0ZUNvbmNlcm4uZnJvbU9wdGlvbnMob3B0aW9ucykgfHwgcGFyZW50LndyaXRlQ29uY2Vybjtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVJlYWRDb25jZXJuKHBhcmVudCwgb3B0aW9ucykge1xuICByZXR1cm4gUmVhZENvbmNlcm4uZnJvbU9wdGlvbnMob3B0aW9ucykgfHwgcGFyZW50LnJlYWRDb25jZXJuO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbW1hbmRPcGVyYXRpb25WMjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///120\n");

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst applyRetryableWrites = __webpack_require__(86).applyRetryableWrites;\nconst applyWriteConcern = __webpack_require__(86).applyWriteConcern;\nconst MongoError = __webpack_require__(3).MongoError;\nconst OperationBase = __webpack_require__(84).OperationBase;\n\nclass BulkWriteOperation extends OperationBase {\n  constructor(collection, operations, options) {\n    super(options);\n\n    this.collection = collection;\n    this.operations = operations;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const operations = this.operations;\n    let options = this.options;\n\n    // Add ignoreUndfined\n    if (coll.s.options.ignoreUndefined) {\n      options = Object.assign({}, options);\n      options.ignoreUndefined = coll.s.options.ignoreUndefined;\n    }\n\n    // Create the bulk operation\n    const bulk =\n      options.ordered === true || options.ordered == null\n        ? coll.initializeOrderedBulkOp(options)\n        : coll.initializeUnorderedBulkOp(options);\n\n    // Do we have a collation\n    let collation = false;\n\n    // for each op go through and add to the bulk\n    try {\n      for (let i = 0; i < operations.length; i++) {\n        // Get the operation type\n        const key = Object.keys(operations[i])[0];\n        // Check if we have a collation\n        if (operations[i][key].collation) {\n          collation = true;\n        }\n\n        // Pass to the raw bulk\n        bulk.raw(operations[i]);\n      }\n    } catch (err) {\n      return callback(err, null);\n    }\n\n    // Final options for retryable writes and write concern\n    let finalOptions = Object.assign({}, options);\n    finalOptions = applyRetryableWrites(finalOptions, coll.s.db);\n    finalOptions = applyWriteConcern(finalOptions, { db: coll.s.db, collection: coll }, options);\n\n    const writeCon = finalOptions.writeConcern ? finalOptions.writeConcern : {};\n    const capabilities = coll.s.topology.capabilities();\n\n    // Did the user pass in a collation, check if our write server supports it\n    if (collation && capabilities && !capabilities.commandsTakeCollation) {\n      return callback(new MongoError('server/primary/mongos does not support collation'));\n    }\n\n    // Execute the bulk\n    bulk.execute(writeCon, finalOptions, (err, r) => {\n      // We have connection level error\n      if (!r && err) {\n        return callback(err, null);\n      }\n\n      r.insertedCount = r.nInserted;\n      r.matchedCount = r.nMatched;\n      r.modifiedCount = r.nModified || 0;\n      r.deletedCount = r.nRemoved;\n      r.upsertedCount = r.getUpsertedIds().length;\n      r.upsertedIds = {};\n      r.insertedIds = {};\n\n      // Update the n\n      r.n = r.insertedCount;\n\n      // Inserted documents\n      const inserted = r.getInsertedIds();\n      // Map inserted ids\n      for (let i = 0; i < inserted.length; i++) {\n        r.insertedIds[inserted[i].index] = inserted[i]._id;\n      }\n\n      // Upserted documents\n      const upserted = r.getUpsertedIds();\n      // Map upserted ids\n      for (let i = 0; i < upserted.length; i++) {\n        r.upsertedIds[upserted[i].index] = upserted[i]._id;\n      }\n\n      // Return the results\n      callback(null, r);\n    });\n  }\n}\n\nmodule.exports = BulkWriteOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvYnVsa193cml0ZS5qcz82YjJkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLDZCQUE2QixtQkFBTyxDQUFDLEVBQVU7QUFDL0MsMEJBQTBCLG1CQUFPLENBQUMsRUFBVTtBQUM1QyxtQkFBbUIsbUJBQU8sQ0FBQyxDQUFTO0FBQ3BDLHNCQUFzQixtQkFBTyxDQUFDLEVBQWE7O0FBRTNDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EscUJBQXFCLHVCQUF1QjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQSxvREFBb0Qsa0NBQWtDOztBQUV0RjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixxQkFBcUI7QUFDMUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIscUJBQXFCO0FBQzFDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBIiwiZmlsZSI6IjEyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgYXBwbHlSZXRyeWFibGVXcml0ZXMgPSByZXF1aXJlKCcuLi91dGlscycpLmFwcGx5UmV0cnlhYmxlV3JpdGVzO1xuY29uc3QgYXBwbHlXcml0ZUNvbmNlcm4gPSByZXF1aXJlKCcuLi91dGlscycpLmFwcGx5V3JpdGVDb25jZXJuO1xuY29uc3QgTW9uZ29FcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUnKS5Nb25nb0Vycm9yO1xuY29uc3QgT3BlcmF0aW9uQmFzZSA9IHJlcXVpcmUoJy4vb3BlcmF0aW9uJykuT3BlcmF0aW9uQmFzZTtcblxuY2xhc3MgQnVsa1dyaXRlT3BlcmF0aW9uIGV4dGVuZHMgT3BlcmF0aW9uQmFzZSB7XG4gIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIG9wZXJhdGlvbnMsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgdGhpcy5vcGVyYXRpb25zID0gb3BlcmF0aW9ucztcbiAgfVxuXG4gIGV4ZWN1dGUoY2FsbGJhY2spIHtcbiAgICBjb25zdCBjb2xsID0gdGhpcy5jb2xsZWN0aW9uO1xuICAgIGNvbnN0IG9wZXJhdGlvbnMgPSB0aGlzLm9wZXJhdGlvbnM7XG4gICAgbGV0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAvLyBBZGQgaWdub3JlVW5kZmluZWRcbiAgICBpZiAoY29sbC5zLm9wdGlvbnMuaWdub3JlVW5kZWZpbmVkKSB7XG4gICAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmlnbm9yZVVuZGVmaW5lZCA9IGNvbGwucy5vcHRpb25zLmlnbm9yZVVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgdGhlIGJ1bGsgb3BlcmF0aW9uXG4gICAgY29uc3QgYnVsayA9XG4gICAgICBvcHRpb25zLm9yZGVyZWQgPT09IHRydWUgfHwgb3B0aW9ucy5vcmRlcmVkID09IG51bGxcbiAgICAgICAgPyBjb2xsLmluaXRpYWxpemVPcmRlcmVkQnVsa09wKG9wdGlvbnMpXG4gICAgICAgIDogY29sbC5pbml0aWFsaXplVW5vcmRlcmVkQnVsa09wKG9wdGlvbnMpO1xuXG4gICAgLy8gRG8gd2UgaGF2ZSBhIGNvbGxhdGlvblxuICAgIGxldCBjb2xsYXRpb24gPSBmYWxzZTtcblxuICAgIC8vIGZvciBlYWNoIG9wIGdvIHRocm91Z2ggYW5kIGFkZCB0byB0aGUgYnVsa1xuICAgIHRyeSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wZXJhdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gR2V0IHRoZSBvcGVyYXRpb24gdHlwZVxuICAgICAgICBjb25zdCBrZXkgPSBPYmplY3Qua2V5cyhvcGVyYXRpb25zW2ldKVswXTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgd2UgaGF2ZSBhIGNvbGxhdGlvblxuICAgICAgICBpZiAob3BlcmF0aW9uc1tpXVtrZXldLmNvbGxhdGlvbikge1xuICAgICAgICAgIGNvbGxhdGlvbiA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQYXNzIHRvIHRoZSByYXcgYnVsa1xuICAgICAgICBidWxrLnJhdyhvcGVyYXRpb25zW2ldKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIG51bGwpO1xuICAgIH1cblxuICAgIC8vIEZpbmFsIG9wdGlvbnMgZm9yIHJldHJ5YWJsZSB3cml0ZXMgYW5kIHdyaXRlIGNvbmNlcm5cbiAgICBsZXQgZmluYWxPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyk7XG4gICAgZmluYWxPcHRpb25zID0gYXBwbHlSZXRyeWFibGVXcml0ZXMoZmluYWxPcHRpb25zLCBjb2xsLnMuZGIpO1xuICAgIGZpbmFsT3B0aW9ucyA9IGFwcGx5V3JpdGVDb25jZXJuKGZpbmFsT3B0aW9ucywgeyBkYjogY29sbC5zLmRiLCBjb2xsZWN0aW9uOiBjb2xsIH0sIG9wdGlvbnMpO1xuXG4gICAgY29uc3Qgd3JpdGVDb24gPSBmaW5hbE9wdGlvbnMud3JpdGVDb25jZXJuID8gZmluYWxPcHRpb25zLndyaXRlQ29uY2VybiA6IHt9O1xuICAgIGNvbnN0IGNhcGFiaWxpdGllcyA9IGNvbGwucy50b3BvbG9neS5jYXBhYmlsaXRpZXMoKTtcblxuICAgIC8vIERpZCB0aGUgdXNlciBwYXNzIGluIGEgY29sbGF0aW9uLCBjaGVjayBpZiBvdXIgd3JpdGUgc2VydmVyIHN1cHBvcnRzIGl0XG4gICAgaWYgKGNvbGxhdGlvbiAmJiBjYXBhYmlsaXRpZXMgJiYgIWNhcGFiaWxpdGllcy5jb21tYW5kc1Rha2VDb2xsYXRpb24pIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgTW9uZ29FcnJvcignc2VydmVyL3ByaW1hcnkvbW9uZ29zIGRvZXMgbm90IHN1cHBvcnQgY29sbGF0aW9uJykpO1xuICAgIH1cblxuICAgIC8vIEV4ZWN1dGUgdGhlIGJ1bGtcbiAgICBidWxrLmV4ZWN1dGUod3JpdGVDb24sIGZpbmFsT3B0aW9ucywgKGVyciwgcikgPT4ge1xuICAgICAgLy8gV2UgaGF2ZSBjb25uZWN0aW9uIGxldmVsIGVycm9yXG4gICAgICBpZiAoIXIgJiYgZXJyKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIG51bGwpO1xuICAgICAgfVxuXG4gICAgICByLmluc2VydGVkQ291bnQgPSByLm5JbnNlcnRlZDtcbiAgICAgIHIubWF0Y2hlZENvdW50ID0gci5uTWF0Y2hlZDtcbiAgICAgIHIubW9kaWZpZWRDb3VudCA9IHIubk1vZGlmaWVkIHx8IDA7XG4gICAgICByLmRlbGV0ZWRDb3VudCA9IHIublJlbW92ZWQ7XG4gICAgICByLnVwc2VydGVkQ291bnQgPSByLmdldFVwc2VydGVkSWRzKCkubGVuZ3RoO1xuICAgICAgci51cHNlcnRlZElkcyA9IHt9O1xuICAgICAgci5pbnNlcnRlZElkcyA9IHt9O1xuXG4gICAgICAvLyBVcGRhdGUgdGhlIG5cbiAgICAgIHIubiA9IHIuaW5zZXJ0ZWRDb3VudDtcblxuICAgICAgLy8gSW5zZXJ0ZWQgZG9jdW1lbnRzXG4gICAgICBjb25zdCBpbnNlcnRlZCA9IHIuZ2V0SW5zZXJ0ZWRJZHMoKTtcbiAgICAgIC8vIE1hcCBpbnNlcnRlZCBpZHNcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5zZXJ0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgci5pbnNlcnRlZElkc1tpbnNlcnRlZFtpXS5pbmRleF0gPSBpbnNlcnRlZFtpXS5faWQ7XG4gICAgICB9XG5cbiAgICAgIC8vIFVwc2VydGVkIGRvY3VtZW50c1xuICAgICAgY29uc3QgdXBzZXJ0ZWQgPSByLmdldFVwc2VydGVkSWRzKCk7XG4gICAgICAvLyBNYXAgdXBzZXJ0ZWQgaWRzXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVwc2VydGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHIudXBzZXJ0ZWRJZHNbdXBzZXJ0ZWRbaV0uaW5kZXhdID0gdXBzZXJ0ZWRbaV0uX2lkO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXR1cm4gdGhlIHJlc3VsdHNcbiAgICAgIGNhbGxiYWNrKG51bGwsIHIpO1xuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQnVsa1dyaXRlT3BlcmF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///121\n");

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst AggregateOperation = __webpack_require__(119);\n\nclass CountDocumentsOperation extends AggregateOperation {\n  constructor(collection, query, options) {\n    const pipeline = [{ $match: query }];\n    if (typeof options.skip === 'number') {\n      pipeline.push({ $skip: options.skip });\n    }\n\n    if (typeof options.limit === 'number') {\n      pipeline.push({ $limit: options.limit });\n    }\n\n    pipeline.push({ $group: { _id: 1, n: { $sum: 1 } } });\n\n    super(collection, pipeline, options);\n  }\n\n  execute(server, callback) {\n    super.execute(server, (err, result) => {\n      if (err) {\n        callback(err, null);\n        return;\n      }\n\n      // NOTE: We're avoiding creating a cursor here to reduce the callstack.\n      const response = result.result;\n      if (response.cursor == null || response.cursor.firstBatch == null) {\n        callback(null, 0);\n        return;\n      }\n\n      const docs = response.cursor.firstBatch;\n      callback(null, docs.length ? docs[0].n : 0);\n    });\n  }\n}\n\nmodule.exports = CountDocumentsOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvY291bnRfZG9jdW1lbnRzLmpzP2Y4NzciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsMkJBQTJCLG1CQUFPLENBQUMsR0FBYTs7QUFFaEQ7QUFDQTtBQUNBLHVCQUF1QixnQkFBZ0I7QUFDdkM7QUFDQSxxQkFBcUIsc0JBQXNCO0FBQzNDOztBQUVBO0FBQ0EscUJBQXFCLHdCQUF3QjtBQUM3Qzs7QUFFQSxtQkFBbUIsVUFBVSxhQUFhLFVBQVUsRUFBRSxFQUFFOztBQUV4RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBIiwiZmlsZSI6IjEyMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgQWdncmVnYXRlT3BlcmF0aW9uID0gcmVxdWlyZSgnLi9hZ2dyZWdhdGUnKTtcblxuY2xhc3MgQ291bnREb2N1bWVudHNPcGVyYXRpb24gZXh0ZW5kcyBBZ2dyZWdhdGVPcGVyYXRpb24ge1xuICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBxdWVyeSwgb3B0aW9ucykge1xuICAgIGNvbnN0IHBpcGVsaW5lID0gW3sgJG1hdGNoOiBxdWVyeSB9XTtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuc2tpcCA9PT0gJ251bWJlcicpIHtcbiAgICAgIHBpcGVsaW5lLnB1c2goeyAkc2tpcDogb3B0aW9ucy5za2lwIH0pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5saW1pdCA9PT0gJ251bWJlcicpIHtcbiAgICAgIHBpcGVsaW5lLnB1c2goeyAkbGltaXQ6IG9wdGlvbnMubGltaXQgfSk7XG4gICAgfVxuXG4gICAgcGlwZWxpbmUucHVzaCh7ICRncm91cDogeyBfaWQ6IDEsIG46IHsgJHN1bTogMSB9IH0gfSk7XG5cbiAgICBzdXBlcihjb2xsZWN0aW9uLCBwaXBlbGluZSwgb3B0aW9ucyk7XG4gIH1cblxuICBleGVjdXRlKHNlcnZlciwgY2FsbGJhY2spIHtcbiAgICBzdXBlci5leGVjdXRlKHNlcnZlciwgKGVyciwgcmVzdWx0KSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGNhbGxiYWNrKGVyciwgbnVsbCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gTk9URTogV2UncmUgYXZvaWRpbmcgY3JlYXRpbmcgYSBjdXJzb3IgaGVyZSB0byByZWR1Y2UgdGhlIGNhbGxzdGFjay5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gcmVzdWx0LnJlc3VsdDtcbiAgICAgIGlmIChyZXNwb25zZS5jdXJzb3IgPT0gbnVsbCB8fCByZXNwb25zZS5jdXJzb3IuZmlyc3RCYXRjaCA9PSBudWxsKSB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIDApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRvY3MgPSByZXNwb25zZS5jdXJzb3IuZmlyc3RCYXRjaDtcbiAgICAgIGNhbGxiYWNrKG51bGwsIGRvY3MubGVuZ3RoID8gZG9jc1swXS5uIDogMCk7XG4gICAgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb3VudERvY3VtZW50c09wZXJhdGlvbjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///122\n");

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Aspect = __webpack_require__(84).Aspect;\nconst CommandOperation = __webpack_require__(124);\nconst defineAspects = __webpack_require__(84).defineAspects;\nconst handleCallback = __webpack_require__(86).handleCallback;\nconst MongoError = __webpack_require__(3).MongoError;\nconst parseIndexOptions = __webpack_require__(86).parseIndexOptions;\n\nconst keysToOmit = new Set([\n  'name',\n  'key',\n  'writeConcern',\n  'w',\n  'wtimeout',\n  'j',\n  'fsync',\n  'readPreference',\n  'session'\n]);\n\nclass CreateIndexOperation extends CommandOperation {\n  constructor(db, name, fieldOrSpec, options) {\n    super(db, options);\n\n    // Build the index\n    const indexParameters = parseIndexOptions(fieldOrSpec);\n    // Generate the index name\n    const indexName = typeof options.name === 'string' ? options.name : indexParameters.name;\n    // Set up the index\n    const indexesObject = { name: indexName, key: indexParameters.fieldHash };\n\n    this.name = name;\n    this.fieldOrSpec = fieldOrSpec;\n    this.indexes = indexesObject;\n  }\n\n  _buildCommand() {\n    const options = this.options;\n    const name = this.name;\n    const indexes = this.indexes;\n\n    // merge all the options\n    for (let optionName in options) {\n      if (!keysToOmit.has(optionName)) {\n        indexes[optionName] = options[optionName];\n      }\n    }\n\n    // Create command, apply write concern to command\n    const cmd = { createIndexes: name, indexes: [indexes] };\n\n    return cmd;\n  }\n\n  execute(callback) {\n    const db = this.db;\n    const options = this.options;\n    const indexes = this.indexes;\n\n    // Get capabilities\n    const capabilities = db.s.topology.capabilities();\n\n    // Did the user pass in a collation, check if our write server supports it\n    if (options.collation && capabilities && !capabilities.commandsTakeCollation) {\n      // Create a new error\n      const error = new MongoError('server/primary/mongos does not support collation');\n      error.code = 67;\n      // Return the error\n      return callback(error);\n    }\n\n    // Ensure we have a callback\n    if (options.writeConcern && typeof callback !== 'function') {\n      throw MongoError.create({\n        message: 'Cannot use a writeConcern without a provided callback',\n        driver: true\n      });\n    }\n\n    // Attempt to run using createIndexes command\n    super.execute((err, result) => {\n      if (err == null) return handleCallback(callback, err, indexes.name);\n\n      return handleCallback(callback, err, result);\n    });\n  }\n}\n\ndefineAspects(CreateIndexOperation, Aspect.WRITE_OPERATION);\n\nmodule.exports = CreateIndexOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvY3JlYXRlX2luZGV4LmpzPzllZTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZUFBZSxtQkFBTyxDQUFDLEVBQWE7QUFDcEMseUJBQXlCLG1CQUFPLENBQUMsR0FBVztBQUM1QyxzQkFBc0IsbUJBQU8sQ0FBQyxFQUFhO0FBQzNDLHVCQUF1QixtQkFBTyxDQUFDLEVBQVU7QUFDekMsbUJBQW1CLG1CQUFPLENBQUMsQ0FBUztBQUNwQywwQkFBMEIsbUJBQU8sQ0FBQyxFQUFVOztBQUU1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCOztBQUUzQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUI7O0FBRWpCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7O0FBRUEiLCJmaWxlIjoiMTIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBBc3BlY3QgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLkFzcGVjdDtcbmNvbnN0IENvbW1hbmRPcGVyYXRpb24gPSByZXF1aXJlKCcuL2NvbW1hbmQnKTtcbmNvbnN0IGRlZmluZUFzcGVjdHMgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLmRlZmluZUFzcGVjdHM7XG5jb25zdCBoYW5kbGVDYWxsYmFjayA9IHJlcXVpcmUoJy4uL3V0aWxzJykuaGFuZGxlQ2FsbGJhY2s7XG5jb25zdCBNb25nb0Vycm9yID0gcmVxdWlyZSgnLi4vY29yZScpLk1vbmdvRXJyb3I7XG5jb25zdCBwYXJzZUluZGV4T3B0aW9ucyA9IHJlcXVpcmUoJy4uL3V0aWxzJykucGFyc2VJbmRleE9wdGlvbnM7XG5cbmNvbnN0IGtleXNUb09taXQgPSBuZXcgU2V0KFtcbiAgJ25hbWUnLFxuICAna2V5JyxcbiAgJ3dyaXRlQ29uY2VybicsXG4gICd3JyxcbiAgJ3d0aW1lb3V0JyxcbiAgJ2onLFxuICAnZnN5bmMnLFxuICAncmVhZFByZWZlcmVuY2UnLFxuICAnc2Vzc2lvbidcbl0pO1xuXG5jbGFzcyBDcmVhdGVJbmRleE9wZXJhdGlvbiBleHRlbmRzIENvbW1hbmRPcGVyYXRpb24ge1xuICBjb25zdHJ1Y3RvcihkYiwgbmFtZSwgZmllbGRPclNwZWMsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihkYiwgb3B0aW9ucyk7XG5cbiAgICAvLyBCdWlsZCB0aGUgaW5kZXhcbiAgICBjb25zdCBpbmRleFBhcmFtZXRlcnMgPSBwYXJzZUluZGV4T3B0aW9ucyhmaWVsZE9yU3BlYyk7XG4gICAgLy8gR2VuZXJhdGUgdGhlIGluZGV4IG5hbWVcbiAgICBjb25zdCBpbmRleE5hbWUgPSB0eXBlb2Ygb3B0aW9ucy5uYW1lID09PSAnc3RyaW5nJyA/IG9wdGlvbnMubmFtZSA6IGluZGV4UGFyYW1ldGVycy5uYW1lO1xuICAgIC8vIFNldCB1cCB0aGUgaW5kZXhcbiAgICBjb25zdCBpbmRleGVzT2JqZWN0ID0geyBuYW1lOiBpbmRleE5hbWUsIGtleTogaW5kZXhQYXJhbWV0ZXJzLmZpZWxkSGFzaCB9O1xuXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmZpZWxkT3JTcGVjID0gZmllbGRPclNwZWM7XG4gICAgdGhpcy5pbmRleGVzID0gaW5kZXhlc09iamVjdDtcbiAgfVxuXG4gIF9idWlsZENvbW1hbmQoKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBuYW1lID0gdGhpcy5uYW1lO1xuICAgIGNvbnN0IGluZGV4ZXMgPSB0aGlzLmluZGV4ZXM7XG5cbiAgICAvLyBtZXJnZSBhbGwgdGhlIG9wdGlvbnNcbiAgICBmb3IgKGxldCBvcHRpb25OYW1lIGluIG9wdGlvbnMpIHtcbiAgICAgIGlmICgha2V5c1RvT21pdC5oYXMob3B0aW9uTmFtZSkpIHtcbiAgICAgICAgaW5kZXhlc1tvcHRpb25OYW1lXSA9IG9wdGlvbnNbb3B0aW9uTmFtZV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGNvbW1hbmQsIGFwcGx5IHdyaXRlIGNvbmNlcm4gdG8gY29tbWFuZFxuICAgIGNvbnN0IGNtZCA9IHsgY3JlYXRlSW5kZXhlczogbmFtZSwgaW5kZXhlczogW2luZGV4ZXNdIH07XG5cbiAgICByZXR1cm4gY21kO1xuICB9XG5cbiAgZXhlY3V0ZShjYWxsYmFjaykge1xuICAgIGNvbnN0IGRiID0gdGhpcy5kYjtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IGluZGV4ZXMgPSB0aGlzLmluZGV4ZXM7XG5cbiAgICAvLyBHZXQgY2FwYWJpbGl0aWVzXG4gICAgY29uc3QgY2FwYWJpbGl0aWVzID0gZGIucy50b3BvbG9neS5jYXBhYmlsaXRpZXMoKTtcblxuICAgIC8vIERpZCB0aGUgdXNlciBwYXNzIGluIGEgY29sbGF0aW9uLCBjaGVjayBpZiBvdXIgd3JpdGUgc2VydmVyIHN1cHBvcnRzIGl0XG4gICAgaWYgKG9wdGlvbnMuY29sbGF0aW9uICYmIGNhcGFiaWxpdGllcyAmJiAhY2FwYWJpbGl0aWVzLmNvbW1hbmRzVGFrZUNvbGxhdGlvbikge1xuICAgICAgLy8gQ3JlYXRlIGEgbmV3IGVycm9yXG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBNb25nb0Vycm9yKCdzZXJ2ZXIvcHJpbWFyeS9tb25nb3MgZG9lcyBub3Qgc3VwcG9ydCBjb2xsYXRpb24nKTtcbiAgICAgIGVycm9yLmNvZGUgPSA2NztcbiAgICAgIC8vIFJldHVybiB0aGUgZXJyb3JcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnJvcik7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIHdlIGhhdmUgYSBjYWxsYmFja1xuICAgIGlmIChvcHRpb25zLndyaXRlQ29uY2VybiAmJiB0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IE1vbmdvRXJyb3IuY3JlYXRlKHtcbiAgICAgICAgbWVzc2FnZTogJ0Nhbm5vdCB1c2UgYSB3cml0ZUNvbmNlcm4gd2l0aG91dCBhIHByb3ZpZGVkIGNhbGxiYWNrJyxcbiAgICAgICAgZHJpdmVyOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBdHRlbXB0IHRvIHJ1biB1c2luZyBjcmVhdGVJbmRleGVzIGNvbW1hbmRcbiAgICBzdXBlci5leGVjdXRlKChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKGVyciA9PSBudWxsKSByZXR1cm4gaGFuZGxlQ2FsbGJhY2soY2FsbGJhY2ssIGVyciwgaW5kZXhlcy5uYW1lKTtcblxuICAgICAgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKGNhbGxiYWNrLCBlcnIsIHJlc3VsdCk7XG4gICAgfSk7XG4gIH1cbn1cblxuZGVmaW5lQXNwZWN0cyhDcmVhdGVJbmRleE9wZXJhdGlvbiwgQXNwZWN0LldSSVRFX09QRVJBVElPTik7XG5cbm1vZHVsZS5leHBvcnRzID0gQ3JlYXRlSW5kZXhPcGVyYXRpb247XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///123\n");

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Aspect = __webpack_require__(84).Aspect;\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst applyWriteConcern = __webpack_require__(86).applyWriteConcern;\nconst debugOptions = __webpack_require__(86).debugOptions;\nconst handleCallback = __webpack_require__(86).handleCallback;\nconst MongoError = __webpack_require__(3).MongoError;\nconst ReadPreference = __webpack_require__(3).ReadPreference;\nconst resolveReadPreference = __webpack_require__(86).resolveReadPreference;\nconst MongoDBNamespace = __webpack_require__(86).MongoDBNamespace;\n\nconst debugFields = [\n  'authSource',\n  'w',\n  'wtimeout',\n  'j',\n  'native_parser',\n  'forceServerObjectId',\n  'serializeFunctions',\n  'raw',\n  'promoteLongs',\n  'promoteValues',\n  'promoteBuffers',\n  'bufferMaxEntries',\n  'numberOfRetries',\n  'retryMiliSeconds',\n  'readPreference',\n  'pkFactory',\n  'parentDb',\n  'promiseLibrary',\n  'noListener'\n];\n\nclass CommandOperation extends OperationBase {\n  constructor(db, options, collection, command) {\n    super(options);\n\n    if (!this.hasAspect(Aspect.WRITE_OPERATION)) {\n      if (collection != null) {\n        this.options.readPreference = resolveReadPreference(collection, options);\n      } else {\n        this.options.readPreference = resolveReadPreference(db, options);\n      }\n    } else {\n      if (collection != null) {\n        applyWriteConcern(this.options, { db, coll: collection }, this.options);\n      } else {\n        applyWriteConcern(this.options, { db }, this.options);\n      }\n      this.options.readPreference = ReadPreference.primary;\n    }\n\n    this.db = db;\n\n    if (command != null) {\n      this.command = command;\n    }\n\n    if (collection != null) {\n      this.collection = collection;\n    }\n  }\n\n  _buildCommand() {\n    if (this.command != null) {\n      return this.command;\n    }\n  }\n\n  execute(callback) {\n    const db = this.db;\n    const options = Object.assign({}, this.options);\n\n    // Did the user destroy the topology\n    if (db.serverConfig && db.serverConfig.isDestroyed()) {\n      return callback(new MongoError('topology was destroyed'));\n    }\n\n    let command;\n    try {\n      command = this._buildCommand();\n    } catch (e) {\n      return callback(e);\n    }\n\n    // Get the db name we are executing against\n    const dbName = options.dbName || options.authdb || db.databaseName;\n\n    // Convert the readPreference if its not a write\n    if (this.hasAspect(Aspect.WRITE_OPERATION)) {\n      if (options.writeConcern && (!options.session || !options.session.inTransaction())) {\n        command.writeConcern = options.writeConcern;\n      }\n    }\n\n    // Debug information\n    if (db.s.logger.isDebug()) {\n      db.s.logger.debug(\n        `executing command ${JSON.stringify(\n          command\n        )} against ${dbName}.$cmd with options [${JSON.stringify(\n          debugOptions(debugFields, options)\n        )}]`\n      );\n    }\n\n    const namespace =\n      this.namespace != null ? this.namespace : new MongoDBNamespace(dbName, '$cmd');\n\n    // Execute command\n    db.s.topology.command(namespace, command, options, (err, result) => {\n      if (err) return handleCallback(callback, err);\n      if (options.full) return handleCallback(callback, null, result);\n      handleCallback(callback, null, result.result);\n    });\n  }\n}\n\nmodule.exports = CommandOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvY29tbWFuZC5qcz9hN2ZkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGVBQWUsbUJBQU8sQ0FBQyxFQUFhO0FBQ3BDLHNCQUFzQixtQkFBTyxDQUFDLEVBQWE7QUFDM0MsMEJBQTBCLG1CQUFPLENBQUMsRUFBVTtBQUM1QyxxQkFBcUIsbUJBQU8sQ0FBQyxFQUFVO0FBQ3ZDLHVCQUF1QixtQkFBTyxDQUFDLEVBQVU7QUFDekMsbUJBQW1CLG1CQUFPLENBQUMsQ0FBUztBQUNwQyx1QkFBdUIsbUJBQU8sQ0FBQyxDQUFTO0FBQ3hDLDhCQUE4QixtQkFBTyxDQUFDLEVBQVU7QUFDaEQseUJBQXlCLG1CQUFPLENBQUMsRUFBVTs7QUFFM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHlDQUF5Qyx1QkFBdUI7QUFDaEUsT0FBTztBQUNQLHlDQUF5QyxLQUFLO0FBQzlDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0NBQW9DOztBQUVwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQSxVQUFVLFdBQVcsT0FBTyxzQkFBc0I7QUFDbEQ7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSIsImZpbGUiOiIxMjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEFzcGVjdCA9IHJlcXVpcmUoJy4vb3BlcmF0aW9uJykuQXNwZWN0O1xuY29uc3QgT3BlcmF0aW9uQmFzZSA9IHJlcXVpcmUoJy4vb3BlcmF0aW9uJykuT3BlcmF0aW9uQmFzZTtcbmNvbnN0IGFwcGx5V3JpdGVDb25jZXJuID0gcmVxdWlyZSgnLi4vdXRpbHMnKS5hcHBseVdyaXRlQ29uY2VybjtcbmNvbnN0IGRlYnVnT3B0aW9ucyA9IHJlcXVpcmUoJy4uL3V0aWxzJykuZGVidWdPcHRpb25zO1xuY29uc3QgaGFuZGxlQ2FsbGJhY2sgPSByZXF1aXJlKCcuLi91dGlscycpLmhhbmRsZUNhbGxiYWNrO1xuY29uc3QgTW9uZ29FcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUnKS5Nb25nb0Vycm9yO1xuY29uc3QgUmVhZFByZWZlcmVuY2UgPSByZXF1aXJlKCcuLi9jb3JlJykuUmVhZFByZWZlcmVuY2U7XG5jb25zdCByZXNvbHZlUmVhZFByZWZlcmVuY2UgPSByZXF1aXJlKCcuLi91dGlscycpLnJlc29sdmVSZWFkUHJlZmVyZW5jZTtcbmNvbnN0IE1vbmdvREJOYW1lc3BhY2UgPSByZXF1aXJlKCcuLi91dGlscycpLk1vbmdvREJOYW1lc3BhY2U7XG5cbmNvbnN0IGRlYnVnRmllbGRzID0gW1xuICAnYXV0aFNvdXJjZScsXG4gICd3JyxcbiAgJ3d0aW1lb3V0JyxcbiAgJ2onLFxuICAnbmF0aXZlX3BhcnNlcicsXG4gICdmb3JjZVNlcnZlck9iamVjdElkJyxcbiAgJ3NlcmlhbGl6ZUZ1bmN0aW9ucycsXG4gICdyYXcnLFxuICAncHJvbW90ZUxvbmdzJyxcbiAgJ3Byb21vdGVWYWx1ZXMnLFxuICAncHJvbW90ZUJ1ZmZlcnMnLFxuICAnYnVmZmVyTWF4RW50cmllcycsXG4gICdudW1iZXJPZlJldHJpZXMnLFxuICAncmV0cnlNaWxpU2Vjb25kcycsXG4gICdyZWFkUHJlZmVyZW5jZScsXG4gICdwa0ZhY3RvcnknLFxuICAncGFyZW50RGInLFxuICAncHJvbWlzZUxpYnJhcnknLFxuICAnbm9MaXN0ZW5lcidcbl07XG5cbmNsYXNzIENvbW1hbmRPcGVyYXRpb24gZXh0ZW5kcyBPcGVyYXRpb25CYXNlIHtcbiAgY29uc3RydWN0b3IoZGIsIG9wdGlvbnMsIGNvbGxlY3Rpb24sIGNvbW1hbmQpIHtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIGlmICghdGhpcy5oYXNBc3BlY3QoQXNwZWN0LldSSVRFX09QRVJBVElPTikpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLnJlYWRQcmVmZXJlbmNlID0gcmVzb2x2ZVJlYWRQcmVmZXJlbmNlKGNvbGxlY3Rpb24sIG9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLnJlYWRQcmVmZXJlbmNlID0gcmVzb2x2ZVJlYWRQcmVmZXJlbmNlKGRiLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gIT0gbnVsbCkge1xuICAgICAgICBhcHBseVdyaXRlQ29uY2Vybih0aGlzLm9wdGlvbnMsIHsgZGIsIGNvbGw6IGNvbGxlY3Rpb24gfSwgdGhpcy5vcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFwcGx5V3JpdGVDb25jZXJuKHRoaXMub3B0aW9ucywgeyBkYiB9LCB0aGlzLm9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgdGhpcy5vcHRpb25zLnJlYWRQcmVmZXJlbmNlID0gUmVhZFByZWZlcmVuY2UucHJpbWFyeTtcbiAgICB9XG5cbiAgICB0aGlzLmRiID0gZGI7XG5cbiAgICBpZiAoY29tbWFuZCAhPSBudWxsKSB7XG4gICAgICB0aGlzLmNvbW1hbmQgPSBjb21tYW5kO1xuICAgIH1cblxuICAgIGlmIChjb2xsZWN0aW9uICE9IG51bGwpIHtcbiAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgfVxuICB9XG5cbiAgX2J1aWxkQ29tbWFuZCgpIHtcbiAgICBpZiAodGhpcy5jb21tYW5kICE9IG51bGwpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbW1hbmQ7XG4gICAgfVxuICB9XG5cbiAgZXhlY3V0ZShjYWxsYmFjaykge1xuICAgIGNvbnN0IGRiID0gdGhpcy5kYjtcbiAgICBjb25zdCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5vcHRpb25zKTtcblxuICAgIC8vIERpZCB0aGUgdXNlciBkZXN0cm95IHRoZSB0b3BvbG9neVxuICAgIGlmIChkYi5zZXJ2ZXJDb25maWcgJiYgZGIuc2VydmVyQ29uZmlnLmlzRGVzdHJveWVkKCkpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgTW9uZ29FcnJvcigndG9wb2xvZ3kgd2FzIGRlc3Ryb3llZCcpKTtcbiAgICB9XG5cbiAgICBsZXQgY29tbWFuZDtcbiAgICB0cnkge1xuICAgICAgY29tbWFuZCA9IHRoaXMuX2J1aWxkQ29tbWFuZCgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhlKTtcbiAgICB9XG5cbiAgICAvLyBHZXQgdGhlIGRiIG5hbWUgd2UgYXJlIGV4ZWN1dGluZyBhZ2FpbnN0XG4gICAgY29uc3QgZGJOYW1lID0gb3B0aW9ucy5kYk5hbWUgfHwgb3B0aW9ucy5hdXRoZGIgfHwgZGIuZGF0YWJhc2VOYW1lO1xuXG4gICAgLy8gQ29udmVydCB0aGUgcmVhZFByZWZlcmVuY2UgaWYgaXRzIG5vdCBhIHdyaXRlXG4gICAgaWYgKHRoaXMuaGFzQXNwZWN0KEFzcGVjdC5XUklURV9PUEVSQVRJT04pKSB7XG4gICAgICBpZiAob3B0aW9ucy53cml0ZUNvbmNlcm4gJiYgKCFvcHRpb25zLnNlc3Npb24gfHwgIW9wdGlvbnMuc2Vzc2lvbi5pblRyYW5zYWN0aW9uKCkpKSB7XG4gICAgICAgIGNvbW1hbmQud3JpdGVDb25jZXJuID0gb3B0aW9ucy53cml0ZUNvbmNlcm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGVidWcgaW5mb3JtYXRpb25cbiAgICBpZiAoZGIucy5sb2dnZXIuaXNEZWJ1ZygpKSB7XG4gICAgICBkYi5zLmxvZ2dlci5kZWJ1ZyhcbiAgICAgICAgYGV4ZWN1dGluZyBjb21tYW5kICR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgY29tbWFuZFxuICAgICAgICApfSBhZ2FpbnN0ICR7ZGJOYW1lfS4kY21kIHdpdGggb3B0aW9ucyBbJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICBkZWJ1Z09wdGlvbnMoZGVidWdGaWVsZHMsIG9wdGlvbnMpXG4gICAgICAgICl9XWBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgbmFtZXNwYWNlID1cbiAgICAgIHRoaXMubmFtZXNwYWNlICE9IG51bGwgPyB0aGlzLm5hbWVzcGFjZSA6IG5ldyBNb25nb0RCTmFtZXNwYWNlKGRiTmFtZSwgJyRjbWQnKTtcblxuICAgIC8vIEV4ZWN1dGUgY29tbWFuZFxuICAgIGRiLnMudG9wb2xvZ3kuY29tbWFuZChuYW1lc3BhY2UsIGNvbW1hbmQsIG9wdGlvbnMsIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKGVycikgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKGNhbGxiYWNrLCBlcnIpO1xuICAgICAgaWYgKG9wdGlvbnMuZnVsbCkgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKGNhbGxiYWNrLCBudWxsLCByZXN1bHQpO1xuICAgICAgaGFuZGxlQ2FsbGJhY2soY2FsbGJhY2ssIG51bGwsIHJlc3VsdC5yZXN1bHQpO1xuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tbWFuZE9wZXJhdGlvbjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///124\n");

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Aspect = __webpack_require__(84).Aspect;\nconst defineAspects = __webpack_require__(84).defineAspects;\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst executeCommand = __webpack_require__(109).executeCommand;\nconst MongoError = __webpack_require__(3).MongoError;\nconst ReadPreference = __webpack_require__(3).ReadPreference;\n\nclass CreateIndexesOperation extends OperationBase {\n  constructor(collection, indexSpecs, options) {\n    super(options);\n\n    this.collection = collection;\n    this.indexSpecs = indexSpecs;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const indexSpecs = this.indexSpecs;\n    let options = this.options;\n\n    const capabilities = coll.s.topology.capabilities();\n\n    // Ensure we generate the correct name if the parameter is not set\n    for (let i = 0; i < indexSpecs.length; i++) {\n      if (indexSpecs[i].name == null) {\n        const keys = [];\n\n        // Did the user pass in a collation, check if our write server supports it\n        if (indexSpecs[i].collation && capabilities && !capabilities.commandsTakeCollation) {\n          return callback(new MongoError('server/primary/mongos does not support collation'));\n        }\n\n        for (let name in indexSpecs[i].key) {\n          keys.push(`${name}_${indexSpecs[i].key[name]}`);\n        }\n\n        // Set the name\n        indexSpecs[i].name = keys.join('_');\n      }\n    }\n\n    options = Object.assign({}, options, { readPreference: ReadPreference.PRIMARY });\n\n    // Execute the index\n    executeCommand(\n      coll.s.db,\n      {\n        createIndexes: coll.collectionName,\n        indexes: indexSpecs\n      },\n      options,\n      callback\n    );\n  }\n}\n\ndefineAspects(CreateIndexesOperation, Aspect.WRITE_OPERATION);\n\nmodule.exports = CreateIndexesOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvY3JlYXRlX2luZGV4ZXMuanM/MjAzOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixlQUFlLG1CQUFPLENBQUMsRUFBYTtBQUNwQyxzQkFBc0IsbUJBQU8sQ0FBQyxFQUFhO0FBQzNDLHNCQUFzQixtQkFBTyxDQUFDLEVBQWE7QUFDM0MsdUJBQXVCLG1CQUFPLENBQUMsR0FBVTtBQUN6QyxtQkFBbUIsbUJBQU8sQ0FBQyxDQUFTO0FBQ3BDLHVCQUF1QixtQkFBTyxDQUFDLENBQVM7O0FBRXhDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxtQkFBbUIsdUJBQXVCO0FBQzFDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx1QkFBdUIsS0FBSyxHQUFHLHdCQUF3QjtBQUN2RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEIsWUFBWSx5Q0FBeUM7O0FBRW5GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBIiwiZmlsZSI6IjEyNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgQXNwZWN0ID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5Bc3BlY3Q7XG5jb25zdCBkZWZpbmVBc3BlY3RzID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5kZWZpbmVBc3BlY3RzO1xuY29uc3QgT3BlcmF0aW9uQmFzZSA9IHJlcXVpcmUoJy4vb3BlcmF0aW9uJykuT3BlcmF0aW9uQmFzZTtcbmNvbnN0IGV4ZWN1dGVDb21tYW5kID0gcmVxdWlyZSgnLi9kYl9vcHMnKS5leGVjdXRlQ29tbWFuZDtcbmNvbnN0IE1vbmdvRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlJykuTW9uZ29FcnJvcjtcbmNvbnN0IFJlYWRQcmVmZXJlbmNlID0gcmVxdWlyZSgnLi4vY29yZScpLlJlYWRQcmVmZXJlbmNlO1xuXG5jbGFzcyBDcmVhdGVJbmRleGVzT3BlcmF0aW9uIGV4dGVuZHMgT3BlcmF0aW9uQmFzZSB7XG4gIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIGluZGV4U3BlY3MsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgdGhpcy5pbmRleFNwZWNzID0gaW5kZXhTcGVjcztcbiAgfVxuXG4gIGV4ZWN1dGUoY2FsbGJhY2spIHtcbiAgICBjb25zdCBjb2xsID0gdGhpcy5jb2xsZWN0aW9uO1xuICAgIGNvbnN0IGluZGV4U3BlY3MgPSB0aGlzLmluZGV4U3BlY3M7XG4gICAgbGV0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICBjb25zdCBjYXBhYmlsaXRpZXMgPSBjb2xsLnMudG9wb2xvZ3kuY2FwYWJpbGl0aWVzKCk7XG5cbiAgICAvLyBFbnN1cmUgd2UgZ2VuZXJhdGUgdGhlIGNvcnJlY3QgbmFtZSBpZiB0aGUgcGFyYW1ldGVyIGlzIG5vdCBzZXRcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluZGV4U3BlY3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChpbmRleFNwZWNzW2ldLm5hbWUgPT0gbnVsbCkge1xuICAgICAgICBjb25zdCBrZXlzID0gW107XG5cbiAgICAgICAgLy8gRGlkIHRoZSB1c2VyIHBhc3MgaW4gYSBjb2xsYXRpb24sIGNoZWNrIGlmIG91ciB3cml0ZSBzZXJ2ZXIgc3VwcG9ydHMgaXRcbiAgICAgICAgaWYgKGluZGV4U3BlY3NbaV0uY29sbGF0aW9uICYmIGNhcGFiaWxpdGllcyAmJiAhY2FwYWJpbGl0aWVzLmNvbW1hbmRzVGFrZUNvbGxhdGlvbikge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgTW9uZ29FcnJvcignc2VydmVyL3ByaW1hcnkvbW9uZ29zIGRvZXMgbm90IHN1cHBvcnQgY29sbGF0aW9uJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgbmFtZSBpbiBpbmRleFNwZWNzW2ldLmtleSkge1xuICAgICAgICAgIGtleXMucHVzaChgJHtuYW1lfV8ke2luZGV4U3BlY3NbaV0ua2V5W25hbWVdfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IHRoZSBuYW1lXG4gICAgICAgIGluZGV4U3BlY3NbaV0ubmFtZSA9IGtleXMuam9pbignXycpO1xuICAgICAgfVxuICAgIH1cblxuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7IHJlYWRQcmVmZXJlbmNlOiBSZWFkUHJlZmVyZW5jZS5QUklNQVJZIH0pO1xuXG4gICAgLy8gRXhlY3V0ZSB0aGUgaW5kZXhcbiAgICBleGVjdXRlQ29tbWFuZChcbiAgICAgIGNvbGwucy5kYixcbiAgICAgIHtcbiAgICAgICAgY3JlYXRlSW5kZXhlczogY29sbC5jb2xsZWN0aW9uTmFtZSxcbiAgICAgICAgaW5kZXhlczogaW5kZXhTcGVjc1xuICAgICAgfSxcbiAgICAgIG9wdGlvbnMsXG4gICAgICBjYWxsYmFja1xuICAgICk7XG4gIH1cbn1cblxuZGVmaW5lQXNwZWN0cyhDcmVhdGVJbmRleGVzT3BlcmF0aW9uLCBBc3BlY3QuV1JJVEVfT1BFUkFUSU9OKTtcblxubW9kdWxlLmV4cG9ydHMgPSBDcmVhdGVJbmRleGVzT3BlcmF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///125\n");

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst deleteCallback = __webpack_require__(118).deleteCallback;\nconst removeDocuments = __webpack_require__(118).removeDocuments;\n\nclass DeleteManyOperation extends OperationBase {\n  constructor(collection, filter, options) {\n    super(options);\n\n    this.collection = collection;\n    this.filter = filter;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const filter = this.filter;\n    const options = this.options;\n\n    options.single = false;\n    removeDocuments(coll, filter, options, (err, r) => deleteCallback(err, r, callback));\n  }\n}\n\nmodule.exports = DeleteManyOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZGVsZXRlX21hbnkuanM/MGQ4MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixzQkFBc0IsbUJBQU8sQ0FBQyxFQUFhO0FBQzNDLHVCQUF1QixtQkFBTyxDQUFDLEdBQW9CO0FBQ25ELHdCQUF3QixtQkFBTyxDQUFDLEdBQW9COztBQUVwRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjEyNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgT3BlcmF0aW9uQmFzZSA9IHJlcXVpcmUoJy4vb3BlcmF0aW9uJykuT3BlcmF0aW9uQmFzZTtcbmNvbnN0IGRlbGV0ZUNhbGxiYWNrID0gcmVxdWlyZSgnLi9jb21tb25fZnVuY3Rpb25zJykuZGVsZXRlQ2FsbGJhY2s7XG5jb25zdCByZW1vdmVEb2N1bWVudHMgPSByZXF1aXJlKCcuL2NvbW1vbl9mdW5jdGlvbnMnKS5yZW1vdmVEb2N1bWVudHM7XG5cbmNsYXNzIERlbGV0ZU1hbnlPcGVyYXRpb24gZXh0ZW5kcyBPcGVyYXRpb25CYXNlIHtcbiAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgZmlsdGVyLCBvcHRpb25zKSB7XG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgIHRoaXMuZmlsdGVyID0gZmlsdGVyO1xuICB9XG5cbiAgZXhlY3V0ZShjYWxsYmFjaykge1xuICAgIGNvbnN0IGNvbGwgPSB0aGlzLmNvbGxlY3Rpb247XG4gICAgY29uc3QgZmlsdGVyID0gdGhpcy5maWx0ZXI7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgIG9wdGlvbnMuc2luZ2xlID0gZmFsc2U7XG4gICAgcmVtb3ZlRG9jdW1lbnRzKGNvbGwsIGZpbHRlciwgb3B0aW9ucywgKGVyciwgcikgPT4gZGVsZXRlQ2FsbGJhY2soZXJyLCByLCBjYWxsYmFjaykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRGVsZXRlTWFueU9wZXJhdGlvbjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///126\n");

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst deleteCallback = __webpack_require__(118).deleteCallback;\nconst removeDocuments = __webpack_require__(118).removeDocuments;\n\nclass DeleteOneOperation extends OperationBase {\n  constructor(collection, filter, options) {\n    super(options);\n\n    this.collection = collection;\n    this.filter = filter;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const filter = this.filter;\n    const options = this.options;\n\n    options.single = true;\n    removeDocuments(coll, filter, options, (err, r) => deleteCallback(err, r, callback));\n  }\n}\n\nmodule.exports = DeleteOneOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZGVsZXRlX29uZS5qcz8zMjc3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLHNCQUFzQixtQkFBTyxDQUFDLEVBQWE7QUFDM0MsdUJBQXVCLG1CQUFPLENBQUMsR0FBb0I7QUFDbkQsd0JBQXdCLG1CQUFPLENBQUMsR0FBb0I7O0FBRXBEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMTI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBPcGVyYXRpb25CYXNlID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5PcGVyYXRpb25CYXNlO1xuY29uc3QgZGVsZXRlQ2FsbGJhY2sgPSByZXF1aXJlKCcuL2NvbW1vbl9mdW5jdGlvbnMnKS5kZWxldGVDYWxsYmFjaztcbmNvbnN0IHJlbW92ZURvY3VtZW50cyA9IHJlcXVpcmUoJy4vY29tbW9uX2Z1bmN0aW9ucycpLnJlbW92ZURvY3VtZW50cztcblxuY2xhc3MgRGVsZXRlT25lT3BlcmF0aW9uIGV4dGVuZHMgT3BlcmF0aW9uQmFzZSB7XG4gIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIGZpbHRlciwgb3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICB0aGlzLmZpbHRlciA9IGZpbHRlcjtcbiAgfVxuXG4gIGV4ZWN1dGUoY2FsbGJhY2spIHtcbiAgICBjb25zdCBjb2xsID0gdGhpcy5jb2xsZWN0aW9uO1xuICAgIGNvbnN0IGZpbHRlciA9IHRoaXMuZmlsdGVyO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICBvcHRpb25zLnNpbmdsZSA9IHRydWU7XG4gICAgcmVtb3ZlRG9jdW1lbnRzKGNvbGwsIGZpbHRlciwgb3B0aW9ucywgKGVyciwgcikgPT4gZGVsZXRlQ2FsbGJhY2soZXJyLCByLCBjYWxsYmFjaykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRGVsZXRlT25lT3BlcmF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///127\n");

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Aspect = __webpack_require__(84).Aspect;\nconst defineAspects = __webpack_require__(84).defineAspects;\nconst CommandOperationV2 = __webpack_require__(120);\nconst decorateWithCollation = __webpack_require__(86).decorateWithCollation;\nconst decorateWithReadConcern = __webpack_require__(86).decorateWithReadConcern;\n\n/**\n * Return a list of distinct values for the given key across a collection.\n *\n * @class\n * @property {Collection} a Collection instance.\n * @property {string} key Field of the document to find distinct values for.\n * @property {object} query The query for filtering the set of documents to which we apply the distinct filter.\n * @property {object} [options] Optional settings. See Collection.prototype.distinct for a list of options.\n */\nclass DistinctOperation extends CommandOperationV2 {\n  /**\n   * Construct a Distinct operation.\n   *\n   * @param {Collection} a Collection instance.\n   * @param {string} key Field of the document to find distinct values for.\n   * @param {object} query The query for filtering the set of documents to which we apply the distinct filter.\n   * @param {object} [options] Optional settings. See Collection.prototype.distinct for a list of options.\n   */\n  constructor(collection, key, query, options) {\n    super(collection, options);\n\n    this.collection = collection;\n    this.key = key;\n    this.query = query;\n  }\n\n  /**\n   * Execute the operation.\n   *\n   * @param {Collection~resultCallback} [callback] The command result callback\n   */\n  execute(server, callback) {\n    const coll = this.collection;\n    const key = this.key;\n    const query = this.query;\n    const options = this.options;\n\n    // Distinct command\n    const cmd = {\n      distinct: coll.collectionName,\n      key: key,\n      query: query\n    };\n\n    // Add maxTimeMS if defined\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n\n    // Do we have a readConcern specified\n    decorateWithReadConcern(cmd, coll, options);\n\n    // Have we specified collation\n    try {\n      decorateWithCollation(cmd, coll, options);\n    } catch (err) {\n      return callback(err, null);\n    }\n\n    super.executeCommand(server, cmd, (err, result) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      callback(null, this.options.full ? result : result.values);\n    });\n  }\n}\n\ndefineAspects(DistinctOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.EXECUTE_WITH_SELECTION\n]);\n\nmodule.exports = DistinctOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZGlzdGluY3QuanM/NjcwZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixlQUFlLG1CQUFPLENBQUMsRUFBYTtBQUNwQyxzQkFBc0IsbUJBQU8sQ0FBQyxFQUFhO0FBQzNDLDJCQUEyQixtQkFBTyxDQUFDLEdBQWM7QUFDakQsOEJBQThCLG1CQUFPLENBQUMsRUFBVTtBQUNoRCxnQ0FBZ0MsbUJBQU8sQ0FBQyxFQUFVOztBQUVsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsV0FBVztBQUN6QixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxXQUFXO0FBQ3hCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLDBCQUEwQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMTI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBBc3BlY3QgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLkFzcGVjdDtcbmNvbnN0IGRlZmluZUFzcGVjdHMgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLmRlZmluZUFzcGVjdHM7XG5jb25zdCBDb21tYW5kT3BlcmF0aW9uVjIgPSByZXF1aXJlKCcuL2NvbW1hbmRfdjInKTtcbmNvbnN0IGRlY29yYXRlV2l0aENvbGxhdGlvbiA9IHJlcXVpcmUoJy4uL3V0aWxzJykuZGVjb3JhdGVXaXRoQ29sbGF0aW9uO1xuY29uc3QgZGVjb3JhdGVXaXRoUmVhZENvbmNlcm4gPSByZXF1aXJlKCcuLi91dGlscycpLmRlY29yYXRlV2l0aFJlYWRDb25jZXJuO1xuXG4vKipcbiAqIFJldHVybiBhIGxpc3Qgb2YgZGlzdGluY3QgdmFsdWVzIGZvciB0aGUgZ2l2ZW4ga2V5IGFjcm9zcyBhIGNvbGxlY3Rpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcHJvcGVydHkge0NvbGxlY3Rpb259IGEgQ29sbGVjdGlvbiBpbnN0YW5jZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBrZXkgRmllbGQgb2YgdGhlIGRvY3VtZW50IHRvIGZpbmQgZGlzdGluY3QgdmFsdWVzIGZvci5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBxdWVyeSBUaGUgcXVlcnkgZm9yIGZpbHRlcmluZyB0aGUgc2V0IG9mIGRvY3VtZW50cyB0byB3aGljaCB3ZSBhcHBseSB0aGUgZGlzdGluY3QgZmlsdGVyLlxuICogQHByb3BlcnR5IHtvYmplY3R9IFtvcHRpb25zXSBPcHRpb25hbCBzZXR0aW5ncy4gU2VlIENvbGxlY3Rpb24ucHJvdG90eXBlLmRpc3RpbmN0IGZvciBhIGxpc3Qgb2Ygb3B0aW9ucy5cbiAqL1xuY2xhc3MgRGlzdGluY3RPcGVyYXRpb24gZXh0ZW5kcyBDb21tYW5kT3BlcmF0aW9uVjIge1xuICAvKipcbiAgICogQ29uc3RydWN0IGEgRGlzdGluY3Qgb3BlcmF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge0NvbGxlY3Rpb259IGEgQ29sbGVjdGlvbiBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBGaWVsZCBvZiB0aGUgZG9jdW1lbnQgdG8gZmluZCBkaXN0aW5jdCB2YWx1ZXMgZm9yLlxuICAgKiBAcGFyYW0ge29iamVjdH0gcXVlcnkgVGhlIHF1ZXJ5IGZvciBmaWx0ZXJpbmcgdGhlIHNldCBvZiBkb2N1bWVudHMgdG8gd2hpY2ggd2UgYXBwbHkgdGhlIGRpc3RpbmN0IGZpbHRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBPcHRpb25hbCBzZXR0aW5ncy4gU2VlIENvbGxlY3Rpb24ucHJvdG90eXBlLmRpc3RpbmN0IGZvciBhIGxpc3Qgb2Ygb3B0aW9ucy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIGtleSwgcXVlcnksIG9wdGlvbnMpIHtcbiAgICBzdXBlcihjb2xsZWN0aW9uLCBvcHRpb25zKTtcblxuICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgdGhlIG9wZXJhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtDb2xsZWN0aW9ufnJlc3VsdENhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSBjb21tYW5kIHJlc3VsdCBjYWxsYmFja1xuICAgKi9cbiAgZXhlY3V0ZShzZXJ2ZXIsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgY29sbCA9IHRoaXMuY29sbGVjdGlvbjtcbiAgICBjb25zdCBrZXkgPSB0aGlzLmtleTtcbiAgICBjb25zdCBxdWVyeSA9IHRoaXMucXVlcnk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgIC8vIERpc3RpbmN0IGNvbW1hbmRcbiAgICBjb25zdCBjbWQgPSB7XG4gICAgICBkaXN0aW5jdDogY29sbC5jb2xsZWN0aW9uTmFtZSxcbiAgICAgIGtleToga2V5LFxuICAgICAgcXVlcnk6IHF1ZXJ5XG4gICAgfTtcblxuICAgIC8vIEFkZCBtYXhUaW1lTVMgaWYgZGVmaW5lZFxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5tYXhUaW1lTVMgPT09ICdudW1iZXInKSB7XG4gICAgICBjbWQubWF4VGltZU1TID0gb3B0aW9ucy5tYXhUaW1lTVM7XG4gICAgfVxuXG4gICAgLy8gRG8gd2UgaGF2ZSBhIHJlYWRDb25jZXJuIHNwZWNpZmllZFxuICAgIGRlY29yYXRlV2l0aFJlYWRDb25jZXJuKGNtZCwgY29sbCwgb3B0aW9ucyk7XG5cbiAgICAvLyBIYXZlIHdlIHNwZWNpZmllZCBjb2xsYXRpb25cbiAgICB0cnkge1xuICAgICAgZGVjb3JhdGVXaXRoQ29sbGF0aW9uKGNtZCwgY29sbCwgb3B0aW9ucyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgICB9XG5cbiAgICBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIGNtZCwgKGVyciwgcmVzdWx0KSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2sobnVsbCwgdGhpcy5vcHRpb25zLmZ1bGwgPyByZXN1bHQgOiByZXN1bHQudmFsdWVzKTtcbiAgICB9KTtcbiAgfVxufVxuXG5kZWZpbmVBc3BlY3RzKERpc3RpbmN0T3BlcmF0aW9uLCBbXG4gIEFzcGVjdC5SRUFEX09QRVJBVElPTixcbiAgQXNwZWN0LlJFVFJZQUJMRSxcbiAgQXNwZWN0LkVYRUNVVEVfV0lUSF9TRUxFQ1RJT05cbl0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERpc3RpbmN0T3BlcmF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///128\n");

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Aspect = __webpack_require__(84).Aspect;\nconst CommandOperation = __webpack_require__(124);\nconst defineAspects = __webpack_require__(84).defineAspects;\nconst handleCallback = __webpack_require__(86).handleCallback;\n\nclass DropOperation extends CommandOperation {\n  constructor(db, options) {\n    const finalOptions = Object.assign({}, options, db.s.options);\n\n    if (options.session) {\n      finalOptions.session = options.session;\n    }\n\n    super(db, finalOptions);\n  }\n\n  execute(callback) {\n    super.execute((err, result) => {\n      if (err) return handleCallback(callback, err);\n      if (result.ok) return handleCallback(callback, null, true);\n      handleCallback(callback, null, false);\n    });\n  }\n}\n\ndefineAspects(DropOperation, Aspect.WRITE_OPERATION);\n\nclass DropCollectionOperation extends DropOperation {\n  constructor(db, name, options) {\n    super(db, options);\n\n    this.name = name;\n    this.namespace = `${db.namespace}.${name}`;\n  }\n\n  _buildCommand() {\n    return { drop: this.name };\n  }\n}\n\nclass DropDatabaseOperation extends DropOperation {\n  _buildCommand() {\n    return { dropDatabase: 1 };\n  }\n}\n\nmodule.exports = {\n  DropOperation,\n  DropCollectionOperation,\n  DropDatabaseOperation\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZHJvcC5qcz80OWU3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGVBQWUsbUJBQU8sQ0FBQyxFQUFhO0FBQ3BDLHlCQUF5QixtQkFBTyxDQUFDLEdBQVc7QUFDNUMsc0JBQXNCLG1CQUFPLENBQUMsRUFBYTtBQUMzQyx1QkFBdUIsbUJBQU8sQ0FBQyxFQUFVOztBQUV6QztBQUNBO0FBQ0EseUNBQXlDOztBQUV6QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0JBQXdCLGFBQWEsR0FBRyxLQUFLO0FBQzdDOztBQUVBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBBc3BlY3QgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLkFzcGVjdDtcbmNvbnN0IENvbW1hbmRPcGVyYXRpb24gPSByZXF1aXJlKCcuL2NvbW1hbmQnKTtcbmNvbnN0IGRlZmluZUFzcGVjdHMgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLmRlZmluZUFzcGVjdHM7XG5jb25zdCBoYW5kbGVDYWxsYmFjayA9IHJlcXVpcmUoJy4uL3V0aWxzJykuaGFuZGxlQ2FsbGJhY2s7XG5cbmNsYXNzIERyb3BPcGVyYXRpb24gZXh0ZW5kcyBDb21tYW5kT3BlcmF0aW9uIHtcbiAgY29uc3RydWN0b3IoZGIsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBmaW5hbE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCBkYi5zLm9wdGlvbnMpO1xuXG4gICAgaWYgKG9wdGlvbnMuc2Vzc2lvbikge1xuICAgICAgZmluYWxPcHRpb25zLnNlc3Npb24gPSBvcHRpb25zLnNlc3Npb247XG4gICAgfVxuXG4gICAgc3VwZXIoZGIsIGZpbmFsT3B0aW9ucyk7XG4gIH1cblxuICBleGVjdXRlKGNhbGxiYWNrKSB7XG4gICAgc3VwZXIuZXhlY3V0ZSgoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgIGlmIChlcnIpIHJldHVybiBoYW5kbGVDYWxsYmFjayhjYWxsYmFjaywgZXJyKTtcbiAgICAgIGlmIChyZXN1bHQub2spIHJldHVybiBoYW5kbGVDYWxsYmFjayhjYWxsYmFjaywgbnVsbCwgdHJ1ZSk7XG4gICAgICBoYW5kbGVDYWxsYmFjayhjYWxsYmFjaywgbnVsbCwgZmFsc2UpO1xuICAgIH0pO1xuICB9XG59XG5cbmRlZmluZUFzcGVjdHMoRHJvcE9wZXJhdGlvbiwgQXNwZWN0LldSSVRFX09QRVJBVElPTik7XG5cbmNsYXNzIERyb3BDb2xsZWN0aW9uT3BlcmF0aW9uIGV4dGVuZHMgRHJvcE9wZXJhdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGRiLCBuYW1lLCBvcHRpb25zKSB7XG4gICAgc3VwZXIoZGIsIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLm5hbWVzcGFjZSA9IGAke2RiLm5hbWVzcGFjZX0uJHtuYW1lfWA7XG4gIH1cblxuICBfYnVpbGRDb21tYW5kKCkge1xuICAgIHJldHVybiB7IGRyb3A6IHRoaXMubmFtZSB9O1xuICB9XG59XG5cbmNsYXNzIERyb3BEYXRhYmFzZU9wZXJhdGlvbiBleHRlbmRzIERyb3BPcGVyYXRpb24ge1xuICBfYnVpbGRDb21tYW5kKCkge1xuICAgIHJldHVybiB7IGRyb3BEYXRhYmFzZTogMSB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBEcm9wT3BlcmF0aW9uLFxuICBEcm9wQ29sbGVjdGlvbk9wZXJhdGlvbixcbiAgRHJvcERhdGFiYXNlT3BlcmF0aW9uXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///129\n");

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Aspect = __webpack_require__(84).Aspect;\nconst defineAspects = __webpack_require__(84).defineAspects;\nconst CommandOperation = __webpack_require__(124);\nconst applyWriteConcern = __webpack_require__(86).applyWriteConcern;\nconst handleCallback = __webpack_require__(86).handleCallback;\n\nclass DropIndexOperation extends CommandOperation {\n  constructor(collection, indexName, options) {\n    super(collection.s.db, options, collection);\n\n    this.collection = collection;\n    this.indexName = indexName;\n  }\n\n  _buildCommand() {\n    const collection = this.collection;\n    const indexName = this.indexName;\n    const options = this.options;\n\n    let cmd = { dropIndexes: collection.collectionName, index: indexName };\n\n    // Decorate command with writeConcern if supported\n    cmd = applyWriteConcern(cmd, { db: collection.s.db, collection }, options);\n\n    return cmd;\n  }\n\n  execute(callback) {\n    // Execute command\n    super.execute((err, result) => {\n      if (typeof callback !== 'function') return;\n      if (err) return handleCallback(callback, err, null);\n      handleCallback(callback, null, result);\n    });\n  }\n}\n\ndefineAspects(DropIndexOperation, Aspect.WRITE_OPERATION);\n\nmodule.exports = DropIndexOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZHJvcF9pbmRleC5qcz8xYWQ2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGVBQWUsbUJBQU8sQ0FBQyxFQUFhO0FBQ3BDLHNCQUFzQixtQkFBTyxDQUFDLEVBQWE7QUFDM0MseUJBQXlCLG1CQUFPLENBQUMsR0FBVztBQUM1QywwQkFBMEIsbUJBQU8sQ0FBQyxFQUFVO0FBQzVDLHVCQUF1QixtQkFBTyxDQUFDLEVBQVU7O0FBRXpDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZTs7QUFFZjtBQUNBLGtDQUFrQyxrQ0FBa0M7O0FBRXBFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7O0FBRUEiLCJmaWxlIjoiMTMwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBBc3BlY3QgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLkFzcGVjdDtcbmNvbnN0IGRlZmluZUFzcGVjdHMgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLmRlZmluZUFzcGVjdHM7XG5jb25zdCBDb21tYW5kT3BlcmF0aW9uID0gcmVxdWlyZSgnLi9jb21tYW5kJyk7XG5jb25zdCBhcHBseVdyaXRlQ29uY2VybiA9IHJlcXVpcmUoJy4uL3V0aWxzJykuYXBwbHlXcml0ZUNvbmNlcm47XG5jb25zdCBoYW5kbGVDYWxsYmFjayA9IHJlcXVpcmUoJy4uL3V0aWxzJykuaGFuZGxlQ2FsbGJhY2s7XG5cbmNsYXNzIERyb3BJbmRleE9wZXJhdGlvbiBleHRlbmRzIENvbW1hbmRPcGVyYXRpb24ge1xuICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBpbmRleE5hbWUsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihjb2xsZWN0aW9uLnMuZGIsIG9wdGlvbnMsIGNvbGxlY3Rpb24pO1xuXG4gICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICB0aGlzLmluZGV4TmFtZSA9IGluZGV4TmFtZTtcbiAgfVxuXG4gIF9idWlsZENvbW1hbmQoKSB7XG4gICAgY29uc3QgY29sbGVjdGlvbiA9IHRoaXMuY29sbGVjdGlvbjtcbiAgICBjb25zdCBpbmRleE5hbWUgPSB0aGlzLmluZGV4TmFtZTtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgbGV0IGNtZCA9IHsgZHJvcEluZGV4ZXM6IGNvbGxlY3Rpb24uY29sbGVjdGlvbk5hbWUsIGluZGV4OiBpbmRleE5hbWUgfTtcblxuICAgIC8vIERlY29yYXRlIGNvbW1hbmQgd2l0aCB3cml0ZUNvbmNlcm4gaWYgc3VwcG9ydGVkXG4gICAgY21kID0gYXBwbHlXcml0ZUNvbmNlcm4oY21kLCB7IGRiOiBjb2xsZWN0aW9uLnMuZGIsIGNvbGxlY3Rpb24gfSwgb3B0aW9ucyk7XG5cbiAgICByZXR1cm4gY21kO1xuICB9XG5cbiAgZXhlY3V0ZShjYWxsYmFjaykge1xuICAgIC8vIEV4ZWN1dGUgY29tbWFuZFxuICAgIHN1cGVyLmV4ZWN1dGUoKGVyciwgcmVzdWx0KSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSByZXR1cm47XG4gICAgICBpZiAoZXJyKSByZXR1cm4gaGFuZGxlQ2FsbGJhY2soY2FsbGJhY2ssIGVyciwgbnVsbCk7XG4gICAgICBoYW5kbGVDYWxsYmFjayhjYWxsYmFjaywgbnVsbCwgcmVzdWx0KTtcbiAgICB9KTtcbiAgfVxufVxuXG5kZWZpbmVBc3BlY3RzKERyb3BJbmRleE9wZXJhdGlvbiwgQXNwZWN0LldSSVRFX09QRVJBVElPTik7XG5cbm1vZHVsZS5leHBvcnRzID0gRHJvcEluZGV4T3BlcmF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///130\n");

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Aspect = __webpack_require__(84).Aspect;\nconst defineAspects = __webpack_require__(84).defineAspects;\nconst DropIndexOperation = __webpack_require__(130);\nconst handleCallback = __webpack_require__(86).handleCallback;\n\nclass DropIndexesOperation extends DropIndexOperation {\n  constructor(collection, options) {\n    super(collection, '*', options);\n  }\n\n  execute(callback) {\n    super.execute(err => {\n      if (err) return handleCallback(callback, err, false);\n      handleCallback(callback, null, true);\n    });\n  }\n}\n\ndefineAspects(DropIndexesOperation, Aspect.WRITE_OPERATION);\n\nmodule.exports = DropIndexesOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZHJvcF9pbmRleGVzLmpzPzIyZDciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZUFBZSxtQkFBTyxDQUFDLEVBQWE7QUFDcEMsc0JBQXNCLG1CQUFPLENBQUMsRUFBYTtBQUMzQywyQkFBMkIsbUJBQU8sQ0FBQyxHQUFjO0FBQ2pELHVCQUF1QixtQkFBTyxDQUFDLEVBQVU7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7O0FBRUEiLCJmaWxlIjoiMTMxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBBc3BlY3QgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLkFzcGVjdDtcbmNvbnN0IGRlZmluZUFzcGVjdHMgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLmRlZmluZUFzcGVjdHM7XG5jb25zdCBEcm9wSW5kZXhPcGVyYXRpb24gPSByZXF1aXJlKCcuL2Ryb3BfaW5kZXgnKTtcbmNvbnN0IGhhbmRsZUNhbGxiYWNrID0gcmVxdWlyZSgnLi4vdXRpbHMnKS5oYW5kbGVDYWxsYmFjaztcblxuY2xhc3MgRHJvcEluZGV4ZXNPcGVyYXRpb24gZXh0ZW5kcyBEcm9wSW5kZXhPcGVyYXRpb24ge1xuICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBvcHRpb25zKSB7XG4gICAgc3VwZXIoY29sbGVjdGlvbiwgJyonLCBvcHRpb25zKTtcbiAgfVxuXG4gIGV4ZWN1dGUoY2FsbGJhY2spIHtcbiAgICBzdXBlci5leGVjdXRlKGVyciA9PiB7XG4gICAgICBpZiAoZXJyKSByZXR1cm4gaGFuZGxlQ2FsbGJhY2soY2FsbGJhY2ssIGVyciwgZmFsc2UpO1xuICAgICAgaGFuZGxlQ2FsbGJhY2soY2FsbGJhY2ssIG51bGwsIHRydWUpO1xuICAgIH0pO1xuICB9XG59XG5cbmRlZmluZUFzcGVjdHMoRHJvcEluZGV4ZXNPcGVyYXRpb24sIEFzcGVjdC5XUklURV9PUEVSQVRJT04pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERyb3BJbmRleGVzT3BlcmF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///131\n");

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Aspect = __webpack_require__(84).Aspect;\nconst defineAspects = __webpack_require__(84).defineAspects;\nconst CommandOperationV2 = __webpack_require__(120);\n\nclass EstimatedDocumentCountOperation extends CommandOperationV2 {\n  constructor(collection, query, options) {\n    if (typeof options === 'undefined') {\n      options = query;\n      query = undefined;\n    }\n\n    super(collection, options);\n    this.collectionName = collection.s.namespace.collection;\n    if (query) {\n      this.query = query;\n    }\n  }\n\n  execute(server, callback) {\n    const options = this.options;\n    const cmd = { count: this.collectionName };\n\n    if (this.query) {\n      cmd.query = this.query;\n    }\n\n    if (typeof options.skip === 'number') {\n      cmd.skip = options.skip;\n    }\n\n    if (typeof options.limit === 'number') {\n      cmd.limit = options.limit;\n    }\n\n    if (options.hint) {\n      cmd.hint = options.hint;\n    }\n\n    super.executeCommand(server, cmd, (err, response) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      callback(null, response.n);\n    });\n  }\n}\n\ndefineAspects(EstimatedDocumentCountOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.EXECUTE_WITH_SELECTION\n]);\n\nmodule.exports = EstimatedDocumentCountOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZXN0aW1hdGVkX2RvY3VtZW50X2NvdW50LmpzPzA0N2IiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZUFBZSxtQkFBTyxDQUFDLEVBQWE7QUFDcEMsc0JBQXNCLG1CQUFPLENBQUMsRUFBYTtBQUMzQywyQkFBMkIsbUJBQU8sQ0FBQyxHQUFjOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIxMzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEFzcGVjdCA9IHJlcXVpcmUoJy4vb3BlcmF0aW9uJykuQXNwZWN0O1xuY29uc3QgZGVmaW5lQXNwZWN0cyA9IHJlcXVpcmUoJy4vb3BlcmF0aW9uJykuZGVmaW5lQXNwZWN0cztcbmNvbnN0IENvbW1hbmRPcGVyYXRpb25WMiA9IHJlcXVpcmUoJy4vY29tbWFuZF92MicpO1xuXG5jbGFzcyBFc3RpbWF0ZWREb2N1bWVudENvdW50T3BlcmF0aW9uIGV4dGVuZHMgQ29tbWFuZE9wZXJhdGlvblYyIHtcbiAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgcXVlcnksIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBvcHRpb25zID0gcXVlcnk7XG4gICAgICBxdWVyeSA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBzdXBlcihjb2xsZWN0aW9uLCBvcHRpb25zKTtcbiAgICB0aGlzLmNvbGxlY3Rpb25OYW1lID0gY29sbGVjdGlvbi5zLm5hbWVzcGFjZS5jb2xsZWN0aW9uO1xuICAgIGlmIChxdWVyeSkge1xuICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xuICAgIH1cbiAgfVxuXG4gIGV4ZWN1dGUoc2VydmVyLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgY21kID0geyBjb3VudDogdGhpcy5jb2xsZWN0aW9uTmFtZSB9O1xuXG4gICAgaWYgKHRoaXMucXVlcnkpIHtcbiAgICAgIGNtZC5xdWVyeSA9IHRoaXMucXVlcnk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnNraXAgPT09ICdudW1iZXInKSB7XG4gICAgICBjbWQuc2tpcCA9IG9wdGlvbnMuc2tpcDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMubGltaXQgPT09ICdudW1iZXInKSB7XG4gICAgICBjbWQubGltaXQgPSBvcHRpb25zLmxpbWl0O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmhpbnQpIHtcbiAgICAgIGNtZC5oaW50ID0gb3B0aW9ucy5oaW50O1xuICAgIH1cblxuICAgIHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgY21kLCAoZXJyLCByZXNwb25zZSkgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3BvbnNlLm4pO1xuICAgIH0pO1xuICB9XG59XG5cbmRlZmluZUFzcGVjdHMoRXN0aW1hdGVkRG9jdW1lbnRDb3VudE9wZXJhdGlvbiwgW1xuICBBc3BlY3QuUkVBRF9PUEVSQVRJT04sXG4gIEFzcGVjdC5SRVRSWUFCTEUsXG4gIEFzcGVjdC5FWEVDVVRFX1dJVEhfU0VMRUNUSU9OXG5dKTtcblxubW9kdWxlLmV4cG9ydHMgPSBFc3RpbWF0ZWREb2N1bWVudENvdW50T3BlcmF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///132\n");

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst Aspect = __webpack_require__(84).Aspect;\nconst defineAspects = __webpack_require__(84).defineAspects;\nconst resolveReadPreference = __webpack_require__(86).resolveReadPreference;\n\nclass FindOperation extends OperationBase {\n  constructor(collection, ns, command, options) {\n    super(options);\n\n    this.ns = ns;\n    this.cmd = command;\n    this.readPreference = resolveReadPreference(collection, this.options);\n  }\n\n  execute(server, callback) {\n    // copied from `CommandOperationV2`, to be subclassed in the future\n    this.server = server;\n\n    const cursorState = this.cursorState || {};\n\n    // TOOD: use `MongoDBNamespace` through and through\n    server.query(this.ns.toString(), this.cmd, cursorState, this.options, callback);\n  }\n}\n\ndefineAspects(FindOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.EXECUTE_WITH_SELECTION,\n  Aspect.SKIP_SESSION\n]);\n\nmodule.exports = FindOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZmluZC5qcz9lN2MzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLHNCQUFzQixtQkFBTyxDQUFDLEVBQWE7QUFDM0MsZUFBZSxtQkFBTyxDQUFDLEVBQWE7QUFDcEMsc0JBQXNCLG1CQUFPLENBQUMsRUFBYTtBQUMzQyw4QkFBOEIsbUJBQU8sQ0FBQyxFQUFVOztBQUVoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIxMzMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IE9wZXJhdGlvbkJhc2UgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLk9wZXJhdGlvbkJhc2U7XG5jb25zdCBBc3BlY3QgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLkFzcGVjdDtcbmNvbnN0IGRlZmluZUFzcGVjdHMgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLmRlZmluZUFzcGVjdHM7XG5jb25zdCByZXNvbHZlUmVhZFByZWZlcmVuY2UgPSByZXF1aXJlKCcuLi91dGlscycpLnJlc29sdmVSZWFkUHJlZmVyZW5jZTtcblxuY2xhc3MgRmluZE9wZXJhdGlvbiBleHRlbmRzIE9wZXJhdGlvbkJhc2Uge1xuICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBucywgY29tbWFuZCwgb3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgdGhpcy5ucyA9IG5zO1xuICAgIHRoaXMuY21kID0gY29tbWFuZDtcbiAgICB0aGlzLnJlYWRQcmVmZXJlbmNlID0gcmVzb2x2ZVJlYWRQcmVmZXJlbmNlKGNvbGxlY3Rpb24sIHRoaXMub3B0aW9ucyk7XG4gIH1cblxuICBleGVjdXRlKHNlcnZlciwgY2FsbGJhY2spIHtcbiAgICAvLyBjb3BpZWQgZnJvbSBgQ29tbWFuZE9wZXJhdGlvblYyYCwgdG8gYmUgc3ViY2xhc3NlZCBpbiB0aGUgZnV0dXJlXG4gICAgdGhpcy5zZXJ2ZXIgPSBzZXJ2ZXI7XG5cbiAgICBjb25zdCBjdXJzb3JTdGF0ZSA9IHRoaXMuY3Vyc29yU3RhdGUgfHwge307XG5cbiAgICAvLyBUT09EOiB1c2UgYE1vbmdvREJOYW1lc3BhY2VgIHRocm91Z2ggYW5kIHRocm91Z2hcbiAgICBzZXJ2ZXIucXVlcnkodGhpcy5ucy50b1N0cmluZygpLCB0aGlzLmNtZCwgY3Vyc29yU3RhdGUsIHRoaXMub3B0aW9ucywgY2FsbGJhY2spO1xuICB9XG59XG5cbmRlZmluZUFzcGVjdHMoRmluZE9wZXJhdGlvbiwgW1xuICBBc3BlY3QuUkVBRF9PUEVSQVRJT04sXG4gIEFzcGVjdC5SRVRSWUFCTEUsXG4gIEFzcGVjdC5FWEVDVVRFX1dJVEhfU0VMRUNUSU9OLFxuICBBc3BlY3QuU0tJUF9TRVNTSU9OXG5dKTtcblxubW9kdWxlLmV4cG9ydHMgPSBGaW5kT3BlcmF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///133\n");

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst handleCallback = __webpack_require__(86).handleCallback;\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst toError = __webpack_require__(86).toError;\n\nclass FindOneOperation extends OperationBase {\n  constructor(collection, query, options) {\n    super(options);\n\n    this.collection = collection;\n    this.query = query;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const query = this.query;\n    const options = this.options;\n\n    const cursor = coll\n      .find(query, options)\n      .limit(-1)\n      .batchSize(1);\n\n    // Return the item\n    cursor.next((err, item) => {\n      if (err != null) return handleCallback(callback, toError(err), null);\n      handleCallback(callback, null, item);\n    });\n  }\n}\n\nmodule.exports = FindOneOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZmluZF9vbmUuanM/ZDA3NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYix1QkFBdUIsbUJBQU8sQ0FBQyxFQUFVO0FBQ3pDLHNCQUFzQixtQkFBTyxDQUFDLEVBQWE7QUFDM0MsZ0JBQWdCLG1CQUFPLENBQUMsRUFBVTs7QUFFbEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBIiwiZmlsZSI6IjEzNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgaGFuZGxlQ2FsbGJhY2sgPSByZXF1aXJlKCcuLi91dGlscycpLmhhbmRsZUNhbGxiYWNrO1xuY29uc3QgT3BlcmF0aW9uQmFzZSA9IHJlcXVpcmUoJy4vb3BlcmF0aW9uJykuT3BlcmF0aW9uQmFzZTtcbmNvbnN0IHRvRXJyb3IgPSByZXF1aXJlKCcuLi91dGlscycpLnRvRXJyb3I7XG5cbmNsYXNzIEZpbmRPbmVPcGVyYXRpb24gZXh0ZW5kcyBPcGVyYXRpb25CYXNlIHtcbiAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgcXVlcnksIG9wdGlvbnMpIHtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xuICB9XG5cbiAgZXhlY3V0ZShjYWxsYmFjaykge1xuICAgIGNvbnN0IGNvbGwgPSB0aGlzLmNvbGxlY3Rpb247XG4gICAgY29uc3QgcXVlcnkgPSB0aGlzLnF1ZXJ5O1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICBjb25zdCBjdXJzb3IgPSBjb2xsXG4gICAgICAuZmluZChxdWVyeSwgb3B0aW9ucylcbiAgICAgIC5saW1pdCgtMSlcbiAgICAgIC5iYXRjaFNpemUoMSk7XG5cbiAgICAvLyBSZXR1cm4gdGhlIGl0ZW1cbiAgICBjdXJzb3IubmV4dCgoZXJyLCBpdGVtKSA9PiB7XG4gICAgICBpZiAoZXJyICE9IG51bGwpIHJldHVybiBoYW5kbGVDYWxsYmFjayhjYWxsYmFjaywgdG9FcnJvcihlcnIpLCBudWxsKTtcbiAgICAgIGhhbmRsZUNhbGxiYWNrKGNhbGxiYWNrLCBudWxsLCBpdGVtKTtcbiAgICB9KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZpbmRPbmVPcGVyYXRpb247XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///134\n");

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst applyRetryableWrites = __webpack_require__(86).applyRetryableWrites;\nconst applyWriteConcern = __webpack_require__(86).applyWriteConcern;\nconst decorateWithCollation = __webpack_require__(86).decorateWithCollation;\nconst executeCommand = __webpack_require__(109).executeCommand;\nconst formattedOrderClause = __webpack_require__(86).formattedOrderClause;\nconst handleCallback = __webpack_require__(86).handleCallback;\nconst ReadPreference = __webpack_require__(3).ReadPreference;\n\nclass FindAndModifyOperation extends OperationBase {\n  constructor(collection, query, sort, doc, options) {\n    super(options);\n\n    this.collection = collection;\n    this.query = query;\n    this.sort = sort;\n    this.doc = doc;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const query = this.query;\n    const sort = formattedOrderClause(this.sort);\n    const doc = this.doc;\n    let options = this.options;\n\n    // Create findAndModify command object\n    const queryObject = {\n      findAndModify: coll.collectionName,\n      query: query\n    };\n\n    if (sort) {\n      queryObject.sort = sort;\n    }\n\n    queryObject.new = options.new ? true : false;\n    queryObject.remove = options.remove ? true : false;\n    queryObject.upsert = options.upsert ? true : false;\n\n    const projection = options.projection || options.fields;\n\n    if (projection) {\n      queryObject.fields = projection;\n    }\n\n    if (options.arrayFilters) {\n      queryObject.arrayFilters = options.arrayFilters;\n    }\n\n    if (doc && !options.remove) {\n      queryObject.update = doc;\n    }\n\n    if (options.maxTimeMS) queryObject.maxTimeMS = options.maxTimeMS;\n\n    // Either use override on the function, or go back to default on either the collection\n    // level or db\n    options.serializeFunctions = options.serializeFunctions || coll.s.serializeFunctions;\n\n    // No check on the documents\n    options.checkKeys = false;\n\n    // Final options for retryable writes and write concern\n    options = applyRetryableWrites(options, coll.s.db);\n    options = applyWriteConcern(options, { db: coll.s.db, collection: coll }, options);\n\n    // Decorate the findAndModify command with the write Concern\n    if (options.writeConcern) {\n      queryObject.writeConcern = options.writeConcern;\n    }\n\n    // Have we specified bypassDocumentValidation\n    if (options.bypassDocumentValidation === true) {\n      queryObject.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n\n    options.readPreference = ReadPreference.primary;\n\n    // Have we specified collation\n    try {\n      decorateWithCollation(queryObject, coll, options);\n    } catch (err) {\n      return callback(err, null);\n    }\n\n    // Execute the command\n    executeCommand(coll.s.db, queryObject, options, (err, result) => {\n      if (err) return handleCallback(callback, err, null);\n\n      return handleCallback(callback, null, result);\n    });\n  }\n}\n\nmodule.exports = FindAndModifyOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZmluZF9hbmRfbW9kaWZ5LmpzP2JkYWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLG1CQUFPLENBQUMsRUFBYTtBQUMzQyw2QkFBNkIsbUJBQU8sQ0FBQyxFQUFVO0FBQy9DLDBCQUEwQixtQkFBTyxDQUFDLEVBQVU7QUFDNUMsOEJBQThCLG1CQUFPLENBQUMsRUFBVTtBQUNoRCx1QkFBdUIsbUJBQU8sQ0FBQyxHQUFVO0FBQ3pDLDZCQUE2QixtQkFBTyxDQUFDLEVBQVU7QUFDL0MsdUJBQXVCLG1CQUFPLENBQUMsRUFBVTtBQUN6Qyx1QkFBdUIsbUJBQU8sQ0FBQyxDQUFTOztBQUV4QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwwQ0FBMEMsa0NBQWtDOztBQUU1RTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSIsImZpbGUiOiIxMzUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IE9wZXJhdGlvbkJhc2UgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLk9wZXJhdGlvbkJhc2U7XG5jb25zdCBhcHBseVJldHJ5YWJsZVdyaXRlcyA9IHJlcXVpcmUoJy4uL3V0aWxzJykuYXBwbHlSZXRyeWFibGVXcml0ZXM7XG5jb25zdCBhcHBseVdyaXRlQ29uY2VybiA9IHJlcXVpcmUoJy4uL3V0aWxzJykuYXBwbHlXcml0ZUNvbmNlcm47XG5jb25zdCBkZWNvcmF0ZVdpdGhDb2xsYXRpb24gPSByZXF1aXJlKCcuLi91dGlscycpLmRlY29yYXRlV2l0aENvbGxhdGlvbjtcbmNvbnN0IGV4ZWN1dGVDb21tYW5kID0gcmVxdWlyZSgnLi9kYl9vcHMnKS5leGVjdXRlQ29tbWFuZDtcbmNvbnN0IGZvcm1hdHRlZE9yZGVyQ2xhdXNlID0gcmVxdWlyZSgnLi4vdXRpbHMnKS5mb3JtYXR0ZWRPcmRlckNsYXVzZTtcbmNvbnN0IGhhbmRsZUNhbGxiYWNrID0gcmVxdWlyZSgnLi4vdXRpbHMnKS5oYW5kbGVDYWxsYmFjaztcbmNvbnN0IFJlYWRQcmVmZXJlbmNlID0gcmVxdWlyZSgnLi4vY29yZScpLlJlYWRQcmVmZXJlbmNlO1xuXG5jbGFzcyBGaW5kQW5kTW9kaWZ5T3BlcmF0aW9uIGV4dGVuZHMgT3BlcmF0aW9uQmFzZSB7XG4gIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIHF1ZXJ5LCBzb3J0LCBkb2MsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xuICAgIHRoaXMuc29ydCA9IHNvcnQ7XG4gICAgdGhpcy5kb2MgPSBkb2M7XG4gIH1cblxuICBleGVjdXRlKGNhbGxiYWNrKSB7XG4gICAgY29uc3QgY29sbCA9IHRoaXMuY29sbGVjdGlvbjtcbiAgICBjb25zdCBxdWVyeSA9IHRoaXMucXVlcnk7XG4gICAgY29uc3Qgc29ydCA9IGZvcm1hdHRlZE9yZGVyQ2xhdXNlKHRoaXMuc29ydCk7XG4gICAgY29uc3QgZG9jID0gdGhpcy5kb2M7XG4gICAgbGV0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAvLyBDcmVhdGUgZmluZEFuZE1vZGlmeSBjb21tYW5kIG9iamVjdFxuICAgIGNvbnN0IHF1ZXJ5T2JqZWN0ID0ge1xuICAgICAgZmluZEFuZE1vZGlmeTogY29sbC5jb2xsZWN0aW9uTmFtZSxcbiAgICAgIHF1ZXJ5OiBxdWVyeVxuICAgIH07XG5cbiAgICBpZiAoc29ydCkge1xuICAgICAgcXVlcnlPYmplY3Quc29ydCA9IHNvcnQ7XG4gICAgfVxuXG4gICAgcXVlcnlPYmplY3QubmV3ID0gb3B0aW9ucy5uZXcgPyB0cnVlIDogZmFsc2U7XG4gICAgcXVlcnlPYmplY3QucmVtb3ZlID0gb3B0aW9ucy5yZW1vdmUgPyB0cnVlIDogZmFsc2U7XG4gICAgcXVlcnlPYmplY3QudXBzZXJ0ID0gb3B0aW9ucy51cHNlcnQgPyB0cnVlIDogZmFsc2U7XG5cbiAgICBjb25zdCBwcm9qZWN0aW9uID0gb3B0aW9ucy5wcm9qZWN0aW9uIHx8IG9wdGlvbnMuZmllbGRzO1xuXG4gICAgaWYgKHByb2plY3Rpb24pIHtcbiAgICAgIHF1ZXJ5T2JqZWN0LmZpZWxkcyA9IHByb2plY3Rpb247XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuYXJyYXlGaWx0ZXJzKSB7XG4gICAgICBxdWVyeU9iamVjdC5hcnJheUZpbHRlcnMgPSBvcHRpb25zLmFycmF5RmlsdGVycztcbiAgICB9XG5cbiAgICBpZiAoZG9jICYmICFvcHRpb25zLnJlbW92ZSkge1xuICAgICAgcXVlcnlPYmplY3QudXBkYXRlID0gZG9jO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLm1heFRpbWVNUykgcXVlcnlPYmplY3QubWF4VGltZU1TID0gb3B0aW9ucy5tYXhUaW1lTVM7XG5cbiAgICAvLyBFaXRoZXIgdXNlIG92ZXJyaWRlIG9uIHRoZSBmdW5jdGlvbiwgb3IgZ28gYmFjayB0byBkZWZhdWx0IG9uIGVpdGhlciB0aGUgY29sbGVjdGlvblxuICAgIC8vIGxldmVsIG9yIGRiXG4gICAgb3B0aW9ucy5zZXJpYWxpemVGdW5jdGlvbnMgPSBvcHRpb25zLnNlcmlhbGl6ZUZ1bmN0aW9ucyB8fCBjb2xsLnMuc2VyaWFsaXplRnVuY3Rpb25zO1xuXG4gICAgLy8gTm8gY2hlY2sgb24gdGhlIGRvY3VtZW50c1xuICAgIG9wdGlvbnMuY2hlY2tLZXlzID0gZmFsc2U7XG5cbiAgICAvLyBGaW5hbCBvcHRpb25zIGZvciByZXRyeWFibGUgd3JpdGVzIGFuZCB3cml0ZSBjb25jZXJuXG4gICAgb3B0aW9ucyA9IGFwcGx5UmV0cnlhYmxlV3JpdGVzKG9wdGlvbnMsIGNvbGwucy5kYik7XG4gICAgb3B0aW9ucyA9IGFwcGx5V3JpdGVDb25jZXJuKG9wdGlvbnMsIHsgZGI6IGNvbGwucy5kYiwgY29sbGVjdGlvbjogY29sbCB9LCBvcHRpb25zKTtcblxuICAgIC8vIERlY29yYXRlIHRoZSBmaW5kQW5kTW9kaWZ5IGNvbW1hbmQgd2l0aCB0aGUgd3JpdGUgQ29uY2VyblxuICAgIGlmIChvcHRpb25zLndyaXRlQ29uY2Vybikge1xuICAgICAgcXVlcnlPYmplY3Qud3JpdGVDb25jZXJuID0gb3B0aW9ucy53cml0ZUNvbmNlcm47XG4gICAgfVxuXG4gICAgLy8gSGF2ZSB3ZSBzcGVjaWZpZWQgYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uXG4gICAgaWYgKG9wdGlvbnMuYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uID09PSB0cnVlKSB7XG4gICAgICBxdWVyeU9iamVjdC5ieXBhc3NEb2N1bWVudFZhbGlkYXRpb24gPSBvcHRpb25zLmJ5cGFzc0RvY3VtZW50VmFsaWRhdGlvbjtcbiAgICB9XG5cbiAgICBvcHRpb25zLnJlYWRQcmVmZXJlbmNlID0gUmVhZFByZWZlcmVuY2UucHJpbWFyeTtcblxuICAgIC8vIEhhdmUgd2Ugc3BlY2lmaWVkIGNvbGxhdGlvblxuICAgIHRyeSB7XG4gICAgICBkZWNvcmF0ZVdpdGhDb2xsYXRpb24ocXVlcnlPYmplY3QsIGNvbGwsIG9wdGlvbnMpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgbnVsbCk7XG4gICAgfVxuXG4gICAgLy8gRXhlY3V0ZSB0aGUgY29tbWFuZFxuICAgIGV4ZWN1dGVDb21tYW5kKGNvbGwucy5kYiwgcXVlcnlPYmplY3QsIG9wdGlvbnMsIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKGVycikgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKGNhbGxiYWNrLCBlcnIsIG51bGwpO1xuXG4gICAgICByZXR1cm4gaGFuZGxlQ2FsbGJhY2soY2FsbGJhY2ssIG51bGwsIHJlc3VsdCk7XG4gICAgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBGaW5kQW5kTW9kaWZ5T3BlcmF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///135\n");

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst FindAndModifyOperation = __webpack_require__(135);\n\nclass FindOneAndDeleteOperation extends FindAndModifyOperation {\n  constructor(collection, filter, options) {\n    // Final options\n    const finalOptions = Object.assign({}, options);\n    finalOptions.fields = options.projection;\n    finalOptions.remove = true;\n\n    super(collection, filter, finalOptions.sort, null, finalOptions);\n  }\n}\n\nmodule.exports = FindOneAndDeleteOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZmluZF9vbmVfYW5kX2RlbGV0ZS5qcz8xZDE3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLCtCQUErQixtQkFBTyxDQUFDLEdBQW1COztBQUUxRDtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMTM2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBGaW5kQW5kTW9kaWZ5T3BlcmF0aW9uID0gcmVxdWlyZSgnLi9maW5kX2FuZF9tb2RpZnknKTtcblxuY2xhc3MgRmluZE9uZUFuZERlbGV0ZU9wZXJhdGlvbiBleHRlbmRzIEZpbmRBbmRNb2RpZnlPcGVyYXRpb24ge1xuICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBmaWx0ZXIsIG9wdGlvbnMpIHtcbiAgICAvLyBGaW5hbCBvcHRpb25zXG4gICAgY29uc3QgZmluYWxPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyk7XG4gICAgZmluYWxPcHRpb25zLmZpZWxkcyA9IG9wdGlvbnMucHJvamVjdGlvbjtcbiAgICBmaW5hbE9wdGlvbnMucmVtb3ZlID0gdHJ1ZTtcblxuICAgIHN1cGVyKGNvbGxlY3Rpb24sIGZpbHRlciwgZmluYWxPcHRpb25zLnNvcnQsIG51bGwsIGZpbmFsT3B0aW9ucyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBGaW5kT25lQW5kRGVsZXRlT3BlcmF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///136\n");

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst FindAndModifyOperation = __webpack_require__(135);\n\nclass FindOneAndReplaceOperation extends FindAndModifyOperation {\n  constructor(collection, filter, replacement, options) {\n    // Final options\n    const finalOptions = Object.assign({}, options);\n    finalOptions.fields = options.projection;\n    finalOptions.update = true;\n    finalOptions.new = options.returnOriginal !== void 0 ? !options.returnOriginal : false;\n    finalOptions.upsert = options.upsert !== void 0 ? !!options.upsert : false;\n\n    super(collection, filter, finalOptions.sort, replacement, finalOptions);\n  }\n}\n\nmodule.exports = FindOneAndReplaceOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZmluZF9vbmVfYW5kX3JlcGxhY2UuanM/N2FkMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiwrQkFBK0IsbUJBQU8sQ0FBQyxHQUFtQjs7QUFFMUQ7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIxMzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEZpbmRBbmRNb2RpZnlPcGVyYXRpb24gPSByZXF1aXJlKCcuL2ZpbmRfYW5kX21vZGlmeScpO1xuXG5jbGFzcyBGaW5kT25lQW5kUmVwbGFjZU9wZXJhdGlvbiBleHRlbmRzIEZpbmRBbmRNb2RpZnlPcGVyYXRpb24ge1xuICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBmaWx0ZXIsIHJlcGxhY2VtZW50LCBvcHRpb25zKSB7XG4gICAgLy8gRmluYWwgb3B0aW9uc1xuICAgIGNvbnN0IGZpbmFsT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpO1xuICAgIGZpbmFsT3B0aW9ucy5maWVsZHMgPSBvcHRpb25zLnByb2plY3Rpb247XG4gICAgZmluYWxPcHRpb25zLnVwZGF0ZSA9IHRydWU7XG4gICAgZmluYWxPcHRpb25zLm5ldyA9IG9wdGlvbnMucmV0dXJuT3JpZ2luYWwgIT09IHZvaWQgMCA/ICFvcHRpb25zLnJldHVybk9yaWdpbmFsIDogZmFsc2U7XG4gICAgZmluYWxPcHRpb25zLnVwc2VydCA9IG9wdGlvbnMudXBzZXJ0ICE9PSB2b2lkIDAgPyAhIW9wdGlvbnMudXBzZXJ0IDogZmFsc2U7XG5cbiAgICBzdXBlcihjb2xsZWN0aW9uLCBmaWx0ZXIsIGZpbmFsT3B0aW9ucy5zb3J0LCByZXBsYWNlbWVudCwgZmluYWxPcHRpb25zKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZpbmRPbmVBbmRSZXBsYWNlT3BlcmF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///137\n");

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst FindAndModifyOperation = __webpack_require__(135);\n\nclass FindOneAndUpdateOperation extends FindAndModifyOperation {\n  constructor(collection, filter, update, options) {\n    // Final options\n    const finalOptions = Object.assign({}, options);\n    finalOptions.fields = options.projection;\n    finalOptions.update = true;\n    finalOptions.new =\n      typeof options.returnOriginal === 'boolean' ? !options.returnOriginal : false;\n    finalOptions.upsert = typeof options.upsert === 'boolean' ? options.upsert : false;\n\n    super(collection, filter, finalOptions.sort, update, finalOptions);\n  }\n}\n\nmodule.exports = FindOneAndUpdateOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZmluZF9vbmVfYW5kX3VwZGF0ZS5qcz83M2ExIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLCtCQUErQixtQkFBTyxDQUFDLEdBQW1COztBQUUxRDtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMTM4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBGaW5kQW5kTW9kaWZ5T3BlcmF0aW9uID0gcmVxdWlyZSgnLi9maW5kX2FuZF9tb2RpZnknKTtcblxuY2xhc3MgRmluZE9uZUFuZFVwZGF0ZU9wZXJhdGlvbiBleHRlbmRzIEZpbmRBbmRNb2RpZnlPcGVyYXRpb24ge1xuICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBmaWx0ZXIsIHVwZGF0ZSwgb3B0aW9ucykge1xuICAgIC8vIEZpbmFsIG9wdGlvbnNcbiAgICBjb25zdCBmaW5hbE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcbiAgICBmaW5hbE9wdGlvbnMuZmllbGRzID0gb3B0aW9ucy5wcm9qZWN0aW9uO1xuICAgIGZpbmFsT3B0aW9ucy51cGRhdGUgPSB0cnVlO1xuICAgIGZpbmFsT3B0aW9ucy5uZXcgPVxuICAgICAgdHlwZW9mIG9wdGlvbnMucmV0dXJuT3JpZ2luYWwgPT09ICdib29sZWFuJyA/ICFvcHRpb25zLnJldHVybk9yaWdpbmFsIDogZmFsc2U7XG4gICAgZmluYWxPcHRpb25zLnVwc2VydCA9IHR5cGVvZiBvcHRpb25zLnVwc2VydCA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy51cHNlcnQgOiBmYWxzZTtcblxuICAgIHN1cGVyKGNvbGxlY3Rpb24sIGZpbHRlciwgZmluYWxPcHRpb25zLnNvcnQsIHVwZGF0ZSwgZmluYWxPcHRpb25zKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZpbmRPbmVBbmRVcGRhdGVPcGVyYXRpb247XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///138\n");

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Aspect = __webpack_require__(84).Aspect;\nconst defineAspects = __webpack_require__(84).defineAspects;\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst decorateCommand = __webpack_require__(86).decorateCommand;\nconst decorateWithReadConcern = __webpack_require__(86).decorateWithReadConcern;\nconst executeCommand = __webpack_require__(109).executeCommand;\nconst handleCallback = __webpack_require__(86).handleCallback;\nconst resolveReadPreference = __webpack_require__(86).resolveReadPreference;\nconst toError = __webpack_require__(86).toError;\n\n/**\n * Execute a geo search using a geo haystack index on a collection.\n *\n * @class\n * @property {Collection} a Collection instance.\n * @property {number} x Point to search on the x axis, ensure the indexes are ordered in the same order.\n * @property {number} y Point to search on the y axis, ensure the indexes are ordered in the same order.\n * @property {object} [options] Optional settings. See Collection.prototype.geoHaystackSearch for a list of options.\n */\nclass GeoHaystackSearchOperation extends OperationBase {\n  /**\n   * Construct a GeoHaystackSearch operation.\n   *\n   * @param {Collection} a Collection instance.\n   * @param {number} x Point to search on the x axis, ensure the indexes are ordered in the same order.\n   * @param {number} y Point to search on the y axis, ensure the indexes are ordered in the same order.\n   * @param {object} [options] Optional settings. See Collection.prototype.geoHaystackSearch for a list of options.\n   */\n  constructor(collection, x, y, options) {\n    super(options);\n\n    this.collection = collection;\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Execute the operation.\n   *\n   * @param {Collection~resultCallback} [callback] The command result callback\n   */\n  execute(callback) {\n    const coll = this.collection;\n    const x = this.x;\n    const y = this.y;\n    let options = this.options;\n\n    // Build command object\n    let commandObject = {\n      geoSearch: coll.collectionName,\n      near: [x, y]\n    };\n\n    // Remove read preference from hash if it exists\n    commandObject = decorateCommand(commandObject, options, ['readPreference', 'session']);\n\n    options = Object.assign({}, options);\n    // Ensure we have the right read preference inheritance\n    options.readPreference = resolveReadPreference(coll, options);\n\n    // Do we have a readConcern specified\n    decorateWithReadConcern(commandObject, coll, options);\n\n    // Execute the command\n    executeCommand(coll.s.db, commandObject, options, (err, res) => {\n      if (err) return handleCallback(callback, err);\n      if (res.err || res.errmsg) handleCallback(callback, toError(res));\n      // should we only be returning res.results here? Not sure if the user\n      // should see the other return information\n      handleCallback(callback, null, res);\n    });\n  }\n}\n\ndefineAspects(GeoHaystackSearchOperation, Aspect.READ_OPERATION);\n\nmodule.exports = GeoHaystackSearchOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZ2VvX2hheXN0YWNrX3NlYXJjaC5qcz9kN2QyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGVBQWUsbUJBQU8sQ0FBQyxFQUFhO0FBQ3BDLHNCQUFzQixtQkFBTyxDQUFDLEVBQWE7QUFDM0Msc0JBQXNCLG1CQUFPLENBQUMsRUFBYTtBQUMzQyx3QkFBd0IsbUJBQU8sQ0FBQyxFQUFVO0FBQzFDLGdDQUFnQyxtQkFBTyxDQUFDLEVBQVU7QUFDbEQsdUJBQXVCLG1CQUFPLENBQUMsR0FBVTtBQUN6Qyx1QkFBdUIsbUJBQU8sQ0FBQyxFQUFVO0FBQ3pDLDhCQUE4QixtQkFBTyxDQUFDLEVBQVU7QUFDaEQsZ0JBQWdCLG1CQUFPLENBQUMsRUFBVTs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFdBQVc7QUFDekIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsV0FBVztBQUN4QixhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSwwQkFBMEI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw4QkFBOEI7QUFDOUI7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7O0FBRUEiLCJmaWxlIjoiMTM5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBBc3BlY3QgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLkFzcGVjdDtcbmNvbnN0IGRlZmluZUFzcGVjdHMgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLmRlZmluZUFzcGVjdHM7XG5jb25zdCBPcGVyYXRpb25CYXNlID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5PcGVyYXRpb25CYXNlO1xuY29uc3QgZGVjb3JhdGVDb21tYW5kID0gcmVxdWlyZSgnLi4vdXRpbHMnKS5kZWNvcmF0ZUNvbW1hbmQ7XG5jb25zdCBkZWNvcmF0ZVdpdGhSZWFkQ29uY2VybiA9IHJlcXVpcmUoJy4uL3V0aWxzJykuZGVjb3JhdGVXaXRoUmVhZENvbmNlcm47XG5jb25zdCBleGVjdXRlQ29tbWFuZCA9IHJlcXVpcmUoJy4vZGJfb3BzJykuZXhlY3V0ZUNvbW1hbmQ7XG5jb25zdCBoYW5kbGVDYWxsYmFjayA9IHJlcXVpcmUoJy4uL3V0aWxzJykuaGFuZGxlQ2FsbGJhY2s7XG5jb25zdCByZXNvbHZlUmVhZFByZWZlcmVuY2UgPSByZXF1aXJlKCcuLi91dGlscycpLnJlc29sdmVSZWFkUHJlZmVyZW5jZTtcbmNvbnN0IHRvRXJyb3IgPSByZXF1aXJlKCcuLi91dGlscycpLnRvRXJyb3I7XG5cbi8qKlxuICogRXhlY3V0ZSBhIGdlbyBzZWFyY2ggdXNpbmcgYSBnZW8gaGF5c3RhY2sgaW5kZXggb24gYSBjb2xsZWN0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHByb3BlcnR5IHtDb2xsZWN0aW9ufSBhIENvbGxlY3Rpb24gaW5zdGFuY2UuXG4gKiBAcHJvcGVydHkge251bWJlcn0geCBQb2ludCB0byBzZWFyY2ggb24gdGhlIHggYXhpcywgZW5zdXJlIHRoZSBpbmRleGVzIGFyZSBvcmRlcmVkIGluIHRoZSBzYW1lIG9yZGVyLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IHkgUG9pbnQgdG8gc2VhcmNoIG9uIHRoZSB5IGF4aXMsIGVuc3VyZSB0aGUgaW5kZXhlcyBhcmUgb3JkZXJlZCBpbiB0aGUgc2FtZSBvcmRlci5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbb3B0aW9uc10gT3B0aW9uYWwgc2V0dGluZ3MuIFNlZSBDb2xsZWN0aW9uLnByb3RvdHlwZS5nZW9IYXlzdGFja1NlYXJjaCBmb3IgYSBsaXN0IG9mIG9wdGlvbnMuXG4gKi9cbmNsYXNzIEdlb0hheXN0YWNrU2VhcmNoT3BlcmF0aW9uIGV4dGVuZHMgT3BlcmF0aW9uQmFzZSB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBHZW9IYXlzdGFja1NlYXJjaCBvcGVyYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7Q29sbGVjdGlvbn0gYSBDb2xsZWN0aW9uIGluc3RhbmNlLlxuICAgKiBAcGFyYW0ge251bWJlcn0geCBQb2ludCB0byBzZWFyY2ggb24gdGhlIHggYXhpcywgZW5zdXJlIHRoZSBpbmRleGVzIGFyZSBvcmRlcmVkIGluIHRoZSBzYW1lIG9yZGVyLlxuICAgKiBAcGFyYW0ge251bWJlcn0geSBQb2ludCB0byBzZWFyY2ggb24gdGhlIHkgYXhpcywgZW5zdXJlIHRoZSBpbmRleGVzIGFyZSBvcmRlcmVkIGluIHRoZSBzYW1lIG9yZGVyLlxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIE9wdGlvbmFsIHNldHRpbmdzLiBTZWUgQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2VvSGF5c3RhY2tTZWFyY2ggZm9yIGEgbGlzdCBvZiBvcHRpb25zLlxuICAgKi9cbiAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgeCwgeSwgb3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZSB0aGUgb3BlcmF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge0NvbGxlY3Rpb25+cmVzdWx0Q2FsbGJhY2t9IFtjYWxsYmFja10gVGhlIGNvbW1hbmQgcmVzdWx0IGNhbGxiYWNrXG4gICAqL1xuICBleGVjdXRlKGNhbGxiYWNrKSB7XG4gICAgY29uc3QgY29sbCA9IHRoaXMuY29sbGVjdGlvbjtcbiAgICBjb25zdCB4ID0gdGhpcy54O1xuICAgIGNvbnN0IHkgPSB0aGlzLnk7XG4gICAgbGV0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAvLyBCdWlsZCBjb21tYW5kIG9iamVjdFxuICAgIGxldCBjb21tYW5kT2JqZWN0ID0ge1xuICAgICAgZ2VvU2VhcmNoOiBjb2xsLmNvbGxlY3Rpb25OYW1lLFxuICAgICAgbmVhcjogW3gsIHldXG4gICAgfTtcblxuICAgIC8vIFJlbW92ZSByZWFkIHByZWZlcmVuY2UgZnJvbSBoYXNoIGlmIGl0IGV4aXN0c1xuICAgIGNvbW1hbmRPYmplY3QgPSBkZWNvcmF0ZUNvbW1hbmQoY29tbWFuZE9iamVjdCwgb3B0aW9ucywgWydyZWFkUHJlZmVyZW5jZScsICdzZXNzaW9uJ10pO1xuXG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpO1xuICAgIC8vIEVuc3VyZSB3ZSBoYXZlIHRoZSByaWdodCByZWFkIHByZWZlcmVuY2UgaW5oZXJpdGFuY2VcbiAgICBvcHRpb25zLnJlYWRQcmVmZXJlbmNlID0gcmVzb2x2ZVJlYWRQcmVmZXJlbmNlKGNvbGwsIG9wdGlvbnMpO1xuXG4gICAgLy8gRG8gd2UgaGF2ZSBhIHJlYWRDb25jZXJuIHNwZWNpZmllZFxuICAgIGRlY29yYXRlV2l0aFJlYWRDb25jZXJuKGNvbW1hbmRPYmplY3QsIGNvbGwsIG9wdGlvbnMpO1xuXG4gICAgLy8gRXhlY3V0ZSB0aGUgY29tbWFuZFxuICAgIGV4ZWN1dGVDb21tYW5kKGNvbGwucy5kYiwgY29tbWFuZE9iamVjdCwgb3B0aW9ucywgKGVyciwgcmVzKSA9PiB7XG4gICAgICBpZiAoZXJyKSByZXR1cm4gaGFuZGxlQ2FsbGJhY2soY2FsbGJhY2ssIGVycik7XG4gICAgICBpZiAocmVzLmVyciB8fCByZXMuZXJybXNnKSBoYW5kbGVDYWxsYmFjayhjYWxsYmFjaywgdG9FcnJvcihyZXMpKTtcbiAgICAgIC8vIHNob3VsZCB3ZSBvbmx5IGJlIHJldHVybmluZyByZXMucmVzdWx0cyBoZXJlPyBOb3Qgc3VyZSBpZiB0aGUgdXNlclxuICAgICAgLy8gc2hvdWxkIHNlZSB0aGUgb3RoZXIgcmV0dXJuIGluZm9ybWF0aW9uXG4gICAgICBoYW5kbGVDYWxsYmFjayhjYWxsYmFjaywgbnVsbCwgcmVzKTtcbiAgICB9KTtcbiAgfVxufVxuXG5kZWZpbmVBc3BlY3RzKEdlb0hheXN0YWNrU2VhcmNoT3BlcmF0aW9uLCBBc3BlY3QuUkVBRF9PUEVSQVRJT04pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdlb0hheXN0YWNrU2VhcmNoT3BlcmF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///139\n");

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst indexInformation = __webpack_require__(118).indexInformation;\n\nclass IndexesOperation extends OperationBase {\n  constructor(collection, options) {\n    super(options);\n\n    this.collection = collection;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    let options = this.options;\n\n    options = Object.assign({}, { full: true }, options);\n    indexInformation(coll.s.db, coll.collectionName, options, callback);\n  }\n}\n\nmodule.exports = IndexesOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvaW5kZXhlcy5qcz9hODQ1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLHNCQUFzQixtQkFBTyxDQUFDLEVBQWE7QUFDM0MseUJBQXlCLG1CQUFPLENBQUMsR0FBb0I7O0FBRXJEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEIsR0FBRyxhQUFhO0FBQzlDO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIxNDAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IE9wZXJhdGlvbkJhc2UgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLk9wZXJhdGlvbkJhc2U7XG5jb25zdCBpbmRleEluZm9ybWF0aW9uID0gcmVxdWlyZSgnLi9jb21tb25fZnVuY3Rpb25zJykuaW5kZXhJbmZvcm1hdGlvbjtcblxuY2xhc3MgSW5kZXhlc09wZXJhdGlvbiBleHRlbmRzIE9wZXJhdGlvbkJhc2Uge1xuICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBvcHRpb25zKSB7XG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICB9XG5cbiAgZXhlY3V0ZShjYWxsYmFjaykge1xuICAgIGNvbnN0IGNvbGwgPSB0aGlzLmNvbGxlY3Rpb247XG4gICAgbGV0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgeyBmdWxsOiB0cnVlIH0sIG9wdGlvbnMpO1xuICAgIGluZGV4SW5mb3JtYXRpb24oY29sbC5zLmRiLCBjb2xsLmNvbGxlY3Rpb25OYW1lLCBvcHRpb25zLCBjYWxsYmFjayk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBJbmRleGVzT3BlcmF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///140\n");

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst handleCallback = __webpack_require__(86).handleCallback;\nconst indexInformationDb = __webpack_require__(109).indexInformation;\n\nclass IndexExistsOperation extends OperationBase {\n  constructor(collection, indexes, options) {\n    super(options);\n\n    this.collection = collection;\n    this.indexes = indexes;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const indexes = this.indexes;\n    const options = this.options;\n\n    indexInformationDb(coll.s.db, coll.collectionName, options, (err, indexInformation) => {\n      // If we have an error return\n      if (err != null) return handleCallback(callback, err, null);\n      // Let's check for the index names\n      if (!Array.isArray(indexes))\n        return handleCallback(callback, null, indexInformation[indexes] != null);\n      // Check in list of indexes\n      for (let i = 0; i < indexes.length; i++) {\n        if (indexInformation[indexes[i]] == null) {\n          return handleCallback(callback, null, false);\n        }\n      }\n\n      // All keys found return true\n      return handleCallback(callback, null, true);\n    });\n  }\n}\n\nmodule.exports = IndexExistsOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvaW5kZXhfZXhpc3RzLmpzPzJkNTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLG1CQUFPLENBQUMsRUFBYTtBQUMzQyx1QkFBdUIsbUJBQU8sQ0FBQyxFQUFVO0FBQ3pDLDJCQUEyQixtQkFBTyxDQUFDLEdBQVU7O0FBRTdDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsb0JBQW9CO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSIsImZpbGUiOiIxNDEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IE9wZXJhdGlvbkJhc2UgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLk9wZXJhdGlvbkJhc2U7XG5jb25zdCBoYW5kbGVDYWxsYmFjayA9IHJlcXVpcmUoJy4uL3V0aWxzJykuaGFuZGxlQ2FsbGJhY2s7XG5jb25zdCBpbmRleEluZm9ybWF0aW9uRGIgPSByZXF1aXJlKCcuL2RiX29wcycpLmluZGV4SW5mb3JtYXRpb247XG5cbmNsYXNzIEluZGV4RXhpc3RzT3BlcmF0aW9uIGV4dGVuZHMgT3BlcmF0aW9uQmFzZSB7XG4gIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIGluZGV4ZXMsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgdGhpcy5pbmRleGVzID0gaW5kZXhlcztcbiAgfVxuXG4gIGV4ZWN1dGUoY2FsbGJhY2spIHtcbiAgICBjb25zdCBjb2xsID0gdGhpcy5jb2xsZWN0aW9uO1xuICAgIGNvbnN0IGluZGV4ZXMgPSB0aGlzLmluZGV4ZXM7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgIGluZGV4SW5mb3JtYXRpb25EYihjb2xsLnMuZGIsIGNvbGwuY29sbGVjdGlvbk5hbWUsIG9wdGlvbnMsIChlcnIsIGluZGV4SW5mb3JtYXRpb24pID0+IHtcbiAgICAgIC8vIElmIHdlIGhhdmUgYW4gZXJyb3IgcmV0dXJuXG4gICAgICBpZiAoZXJyICE9IG51bGwpIHJldHVybiBoYW5kbGVDYWxsYmFjayhjYWxsYmFjaywgZXJyLCBudWxsKTtcbiAgICAgIC8vIExldCdzIGNoZWNrIGZvciB0aGUgaW5kZXggbmFtZXNcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShpbmRleGVzKSlcbiAgICAgICAgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKGNhbGxiYWNrLCBudWxsLCBpbmRleEluZm9ybWF0aW9uW2luZGV4ZXNdICE9IG51bGwpO1xuICAgICAgLy8gQ2hlY2sgaW4gbGlzdCBvZiBpbmRleGVzXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluZGV4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGluZGV4SW5mb3JtYXRpb25baW5kZXhlc1tpXV0gPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBoYW5kbGVDYWxsYmFjayhjYWxsYmFjaywgbnVsbCwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEFsbCBrZXlzIGZvdW5kIHJldHVybiB0cnVlXG4gICAgICByZXR1cm4gaGFuZGxlQ2FsbGJhY2soY2FsbGJhY2ssIG51bGwsIHRydWUpO1xuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gSW5kZXhFeGlzdHNPcGVyYXRpb247XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///141\n");

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst indexInformation = __webpack_require__(118).indexInformation;\n\nclass IndexInformationOperation extends OperationBase {\n  constructor(db, name, options) {\n    super(options);\n\n    this.db = db;\n    this.name = name;\n  }\n\n  execute(callback) {\n    const db = this.db;\n    const name = this.name;\n    const options = this.options;\n\n    indexInformation(db, name, options, callback);\n  }\n}\n\nmodule.exports = IndexInformationOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvaW5kZXhfaW5mb3JtYXRpb24uanM/NWQyOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixzQkFBc0IsbUJBQU8sQ0FBQyxFQUFhO0FBQzNDLHlCQUF5QixtQkFBTyxDQUFDLEdBQW9COztBQUVyRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIxNDIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IE9wZXJhdGlvbkJhc2UgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLk9wZXJhdGlvbkJhc2U7XG5jb25zdCBpbmRleEluZm9ybWF0aW9uID0gcmVxdWlyZSgnLi9jb21tb25fZnVuY3Rpb25zJykuaW5kZXhJbmZvcm1hdGlvbjtcblxuY2xhc3MgSW5kZXhJbmZvcm1hdGlvbk9wZXJhdGlvbiBleHRlbmRzIE9wZXJhdGlvbkJhc2Uge1xuICBjb25zdHJ1Y3RvcihkYiwgbmFtZSwgb3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgdGhpcy5kYiA9IGRiO1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gIH1cblxuICBleGVjdXRlKGNhbGxiYWNrKSB7XG4gICAgY29uc3QgZGIgPSB0aGlzLmRiO1xuICAgIGNvbnN0IG5hbWUgPSB0aGlzLm5hbWU7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgIGluZGV4SW5mb3JtYXRpb24oZGIsIG5hbWUsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEluZGV4SW5mb3JtYXRpb25PcGVyYXRpb247XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///142\n");

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst BulkWriteOperation = __webpack_require__(121);\nconst MongoError = __webpack_require__(3).MongoError;\nconst prepareDocs = __webpack_require__(118).prepareDocs;\n\nclass InsertManyOperation extends OperationBase {\n  constructor(collection, docs, options) {\n    super(options);\n\n    this.collection = collection;\n    this.docs = docs;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    let docs = this.docs;\n    const options = this.options;\n\n    if (!Array.isArray(docs)) {\n      return callback(\n        MongoError.create({ message: 'docs parameter must be an array of documents', driver: true })\n      );\n    }\n\n    // If keep going set unordered\n    options['serializeFunctions'] = options['serializeFunctions'] || coll.s.serializeFunctions;\n\n    docs = prepareDocs(coll, docs, options);\n\n    // Generate the bulk write operations\n    const operations = [\n      {\n        insertMany: docs\n      }\n    ];\n\n    const bulkWriteOperation = new BulkWriteOperation(coll, operations, options);\n\n    bulkWriteOperation.execute((err, result) => {\n      if (err) return callback(err, null);\n      callback(null, mapInsertManyResults(docs, result));\n    });\n  }\n}\n\nfunction mapInsertManyResults(docs, r) {\n  const finalResult = {\n    result: { ok: 1, n: r.insertedCount },\n    ops: docs,\n    insertedCount: r.insertedCount,\n    insertedIds: r.insertedIds\n  };\n\n  if (r.getLastOp()) {\n    finalResult.result.opTime = r.getLastOp();\n  }\n\n  return finalResult;\n}\n\nmodule.exports = InsertManyOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvaW5zZXJ0X21hbnkuanM/OTQyNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixzQkFBc0IsbUJBQU8sQ0FBQyxFQUFhO0FBQzNDLDJCQUEyQixtQkFBTyxDQUFDLEdBQWM7QUFDakQsbUJBQW1CLG1CQUFPLENBQUMsQ0FBUztBQUNwQyxvQkFBb0IsbUJBQU8sQ0FBQyxHQUFvQjs7QUFFaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkJBQTJCLHdFQUF3RTtBQUNuRztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLDRCQUE0QjtBQUN6QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSIsImZpbGUiOiIxNDMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IE9wZXJhdGlvbkJhc2UgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLk9wZXJhdGlvbkJhc2U7XG5jb25zdCBCdWxrV3JpdGVPcGVyYXRpb24gPSByZXF1aXJlKCcuL2J1bGtfd3JpdGUnKTtcbmNvbnN0IE1vbmdvRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlJykuTW9uZ29FcnJvcjtcbmNvbnN0IHByZXBhcmVEb2NzID0gcmVxdWlyZSgnLi9jb21tb25fZnVuY3Rpb25zJykucHJlcGFyZURvY3M7XG5cbmNsYXNzIEluc2VydE1hbnlPcGVyYXRpb24gZXh0ZW5kcyBPcGVyYXRpb25CYXNlIHtcbiAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgZG9jcywgb3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICB0aGlzLmRvY3MgPSBkb2NzO1xuICB9XG5cbiAgZXhlY3V0ZShjYWxsYmFjaykge1xuICAgIGNvbnN0IGNvbGwgPSB0aGlzLmNvbGxlY3Rpb247XG4gICAgbGV0IGRvY3MgPSB0aGlzLmRvY3M7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgIGlmICghQXJyYXkuaXNBcnJheShkb2NzKSkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKFxuICAgICAgICBNb25nb0Vycm9yLmNyZWF0ZSh7IG1lc3NhZ2U6ICdkb2NzIHBhcmFtZXRlciBtdXN0IGJlIGFuIGFycmF5IG9mIGRvY3VtZW50cycsIGRyaXZlcjogdHJ1ZSB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBJZiBrZWVwIGdvaW5nIHNldCB1bm9yZGVyZWRcbiAgICBvcHRpb25zWydzZXJpYWxpemVGdW5jdGlvbnMnXSA9IG9wdGlvbnNbJ3NlcmlhbGl6ZUZ1bmN0aW9ucyddIHx8IGNvbGwucy5zZXJpYWxpemVGdW5jdGlvbnM7XG5cbiAgICBkb2NzID0gcHJlcGFyZURvY3MoY29sbCwgZG9jcywgb3B0aW9ucyk7XG5cbiAgICAvLyBHZW5lcmF0ZSB0aGUgYnVsayB3cml0ZSBvcGVyYXRpb25zXG4gICAgY29uc3Qgb3BlcmF0aW9ucyA9IFtcbiAgICAgIHtcbiAgICAgICAgaW5zZXJ0TWFueTogZG9jc1xuICAgICAgfVxuICAgIF07XG5cbiAgICBjb25zdCBidWxrV3JpdGVPcGVyYXRpb24gPSBuZXcgQnVsa1dyaXRlT3BlcmF0aW9uKGNvbGwsIG9wZXJhdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgYnVsa1dyaXRlT3BlcmF0aW9uLmV4ZWN1dGUoKGVyciwgcmVzdWx0KSA9PiB7XG4gICAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgICAgIGNhbGxiYWNrKG51bGwsIG1hcEluc2VydE1hbnlSZXN1bHRzKGRvY3MsIHJlc3VsdCkpO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcEluc2VydE1hbnlSZXN1bHRzKGRvY3MsIHIpIHtcbiAgY29uc3QgZmluYWxSZXN1bHQgPSB7XG4gICAgcmVzdWx0OiB7IG9rOiAxLCBuOiByLmluc2VydGVkQ291bnQgfSxcbiAgICBvcHM6IGRvY3MsXG4gICAgaW5zZXJ0ZWRDb3VudDogci5pbnNlcnRlZENvdW50LFxuICAgIGluc2VydGVkSWRzOiByLmluc2VydGVkSWRzXG4gIH07XG5cbiAgaWYgKHIuZ2V0TGFzdE9wKCkpIHtcbiAgICBmaW5hbFJlc3VsdC5yZXN1bHQub3BUaW1lID0gci5nZXRMYXN0T3AoKTtcbiAgfVxuXG4gIHJldHVybiBmaW5hbFJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBJbnNlcnRNYW55T3BlcmF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///143\n");

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst MongoError = __webpack_require__(3).MongoError;\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst insertDocuments = __webpack_require__(118).insertDocuments;\n\nclass InsertOneOperation extends OperationBase {\n  constructor(collection, doc, options) {\n    super(options);\n\n    this.collection = collection;\n    this.doc = doc;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const doc = this.doc;\n    const options = this.options;\n\n    if (Array.isArray(doc)) {\n      return callback(\n        MongoError.create({ message: 'doc parameter must be an object', driver: true })\n      );\n    }\n\n    insertDocuments(coll, [doc], options, (err, r) => {\n      if (callback == null) return;\n      if (err && callback) return callback(err);\n      // Workaround for pre 2.6 servers\n      if (r == null) return callback(null, { result: { ok: 1 } });\n      // Add values to top level to ensure crud spec compatibility\n      r.insertedCount = r.result.n;\n      r.insertedId = doc._id;\n      if (callback) callback(null, r);\n    });\n  }\n}\n\nmodule.exports = InsertOneOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvaW5zZXJ0X29uZS5qcz9jNDQyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLG1CQUFtQixtQkFBTyxDQUFDLENBQVM7QUFDcEMsc0JBQXNCLG1CQUFPLENBQUMsRUFBYTtBQUMzQyx3QkFBd0IsbUJBQU8sQ0FBQyxHQUFvQjs7QUFFcEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkJBQTJCLDJEQUEyRDtBQUN0RjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFVBQVUsUUFBUSxFQUFFO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMTQ0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBNb25nb0Vycm9yID0gcmVxdWlyZSgnLi4vY29yZScpLk1vbmdvRXJyb3I7XG5jb25zdCBPcGVyYXRpb25CYXNlID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5PcGVyYXRpb25CYXNlO1xuY29uc3QgaW5zZXJ0RG9jdW1lbnRzID0gcmVxdWlyZSgnLi9jb21tb25fZnVuY3Rpb25zJykuaW5zZXJ0RG9jdW1lbnRzO1xuXG5jbGFzcyBJbnNlcnRPbmVPcGVyYXRpb24gZXh0ZW5kcyBPcGVyYXRpb25CYXNlIHtcbiAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgZG9jLCBvcHRpb25zKSB7XG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgIHRoaXMuZG9jID0gZG9jO1xuICB9XG5cbiAgZXhlY3V0ZShjYWxsYmFjaykge1xuICAgIGNvbnN0IGNvbGwgPSB0aGlzLmNvbGxlY3Rpb247XG4gICAgY29uc3QgZG9jID0gdGhpcy5kb2M7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgIGlmIChBcnJheS5pc0FycmF5KGRvYykpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhcbiAgICAgICAgTW9uZ29FcnJvci5jcmVhdGUoeyBtZXNzYWdlOiAnZG9jIHBhcmFtZXRlciBtdXN0IGJlIGFuIG9iamVjdCcsIGRyaXZlcjogdHJ1ZSB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpbnNlcnREb2N1bWVudHMoY29sbCwgW2RvY10sIG9wdGlvbnMsIChlcnIsIHIpID0+IHtcbiAgICAgIGlmIChjYWxsYmFjayA9PSBudWxsKSByZXR1cm47XG4gICAgICBpZiAoZXJyICYmIGNhbGxiYWNrKSByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgIC8vIFdvcmthcm91bmQgZm9yIHByZSAyLjYgc2VydmVyc1xuICAgICAgaWYgKHIgPT0gbnVsbCkgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHsgcmVzdWx0OiB7IG9rOiAxIH0gfSk7XG4gICAgICAvLyBBZGQgdmFsdWVzIHRvIHRvcCBsZXZlbCB0byBlbnN1cmUgY3J1ZCBzcGVjIGNvbXBhdGliaWxpdHlcbiAgICAgIHIuaW5zZXJ0ZWRDb3VudCA9IHIucmVzdWx0Lm47XG4gICAgICByLmluc2VydGVkSWQgPSBkb2MuX2lkO1xuICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhudWxsLCByKTtcbiAgICB9KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEluc2VydE9uZU9wZXJhdGlvbjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///144\n");

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst OptionsOperation = __webpack_require__(146);\nconst handleCallback = __webpack_require__(86).handleCallback;\n\nclass IsCappedOperation extends OptionsOperation {\n  constructor(collection, options) {\n    super(collection, options);\n  }\n\n  execute(callback) {\n    super.execute((err, document) => {\n      if (err) return handleCallback(callback, err);\n      handleCallback(callback, null, !!(document && document.capped));\n    });\n  }\n}\n\nmodule.exports = IsCappedOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvaXNfY2FwcGVkLmpzPzk0MTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIseUJBQXlCLG1CQUFPLENBQUMsR0FBcUI7QUFDdEQsdUJBQXVCLG1CQUFPLENBQUMsRUFBVTs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSIsImZpbGUiOiIxNDUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IE9wdGlvbnNPcGVyYXRpb24gPSByZXF1aXJlKCcuL29wdGlvbnNfb3BlcmF0aW9uJyk7XG5jb25zdCBoYW5kbGVDYWxsYmFjayA9IHJlcXVpcmUoJy4uL3V0aWxzJykuaGFuZGxlQ2FsbGJhY2s7XG5cbmNsYXNzIElzQ2FwcGVkT3BlcmF0aW9uIGV4dGVuZHMgT3B0aW9uc09wZXJhdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIG9wdGlvbnMpIHtcbiAgICBzdXBlcihjb2xsZWN0aW9uLCBvcHRpb25zKTtcbiAgfVxuXG4gIGV4ZWN1dGUoY2FsbGJhY2spIHtcbiAgICBzdXBlci5leGVjdXRlKChlcnIsIGRvY3VtZW50KSA9PiB7XG4gICAgICBpZiAoZXJyKSByZXR1cm4gaGFuZGxlQ2FsbGJhY2soY2FsbGJhY2ssIGVycik7XG4gICAgICBoYW5kbGVDYWxsYmFjayhjYWxsYmFjaywgbnVsbCwgISEoZG9jdW1lbnQgJiYgZG9jdW1lbnQuY2FwcGVkKSk7XG4gICAgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBJc0NhcHBlZE9wZXJhdGlvbjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///145\n");

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst handleCallback = __webpack_require__(86).handleCallback;\nconst MongoError = __webpack_require__(3).MongoError;\n\nclass OptionsOperation extends OperationBase {\n  constructor(collection, options) {\n    super(options);\n\n    this.collection = collection;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const opts = this.options;\n\n    coll.s.db.listCollections({ name: coll.collectionName }, opts).toArray((err, collections) => {\n      if (err) return handleCallback(callback, err);\n      if (collections.length === 0) {\n        return handleCallback(\n          callback,\n          MongoError.create({ message: `collection ${coll.namespace} not found`, driver: true })\n        );\n      }\n\n      handleCallback(callback, err, collections[0].options || null);\n    });\n  }\n}\n\nmodule.exports = OptionsOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvb3B0aW9uc19vcGVyYXRpb24uanM/ODk0YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixzQkFBc0IsbUJBQU8sQ0FBQyxFQUFhO0FBQzNDLHVCQUF1QixtQkFBTyxDQUFDLEVBQVU7QUFDekMsbUJBQW1CLG1CQUFPLENBQUMsQ0FBUzs7QUFFcEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLCtCQUErQiw0QkFBNEI7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsd0JBQXdCLGVBQWUsMkJBQTJCO0FBQy9GO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSIsImZpbGUiOiIxNDYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IE9wZXJhdGlvbkJhc2UgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLk9wZXJhdGlvbkJhc2U7XG5jb25zdCBoYW5kbGVDYWxsYmFjayA9IHJlcXVpcmUoJy4uL3V0aWxzJykuaGFuZGxlQ2FsbGJhY2s7XG5jb25zdCBNb25nb0Vycm9yID0gcmVxdWlyZSgnLi4vY29yZScpLk1vbmdvRXJyb3I7XG5cbmNsYXNzIE9wdGlvbnNPcGVyYXRpb24gZXh0ZW5kcyBPcGVyYXRpb25CYXNlIHtcbiAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgb3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgfVxuXG4gIGV4ZWN1dGUoY2FsbGJhY2spIHtcbiAgICBjb25zdCBjb2xsID0gdGhpcy5jb2xsZWN0aW9uO1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICBjb2xsLnMuZGIubGlzdENvbGxlY3Rpb25zKHsgbmFtZTogY29sbC5jb2xsZWN0aW9uTmFtZSB9LCBvcHRzKS50b0FycmF5KChlcnIsIGNvbGxlY3Rpb25zKSA9PiB7XG4gICAgICBpZiAoZXJyKSByZXR1cm4gaGFuZGxlQ2FsbGJhY2soY2FsbGJhY2ssIGVycik7XG4gICAgICBpZiAoY29sbGVjdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVDYWxsYmFjayhcbiAgICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgICBNb25nb0Vycm9yLmNyZWF0ZSh7IG1lc3NhZ2U6IGBjb2xsZWN0aW9uICR7Y29sbC5uYW1lc3BhY2V9IG5vdCBmb3VuZGAsIGRyaXZlcjogdHJ1ZSB9KVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBoYW5kbGVDYWxsYmFjayhjYWxsYmFjaywgZXJyLCBjb2xsZWN0aW9uc1swXS5vcHRpb25zIHx8IG51bGwpO1xuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gT3B0aW9uc09wZXJhdGlvbjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///146\n");

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst CommandOperationV2 = __webpack_require__(120);\nconst Aspect = __webpack_require__(84).Aspect;\nconst defineAspects = __webpack_require__(84).defineAspects;\nconst maxWireVersion = __webpack_require__(35).maxWireVersion;\n\nconst LIST_INDEXES_WIRE_VERSION = 3;\n\nclass ListIndexesOperation extends CommandOperationV2 {\n  constructor(collection, options) {\n    super(collection, options, { fullResponse: true });\n\n    this.collectionNamespace = collection.s.namespace;\n  }\n\n  execute(server, callback) {\n    const serverWireVersion = maxWireVersion(server);\n    if (serverWireVersion < LIST_INDEXES_WIRE_VERSION) {\n      const systemIndexesNS = this.collectionNamespace.withCollection('system.indexes').toString();\n      const collectionNS = this.collectionNamespace.toString();\n\n      server.query(systemIndexesNS, { query: { ns: collectionNS } }, {}, this.options, callback);\n      return;\n    }\n\n    const cursor = this.options.batchSize ? { batchSize: this.options.batchSize } : {};\n    super.executeCommand(\n      server,\n      { listIndexes: this.collectionNamespace.collection, cursor },\n      callback\n    );\n  }\n}\n\ndefineAspects(ListIndexesOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.EXECUTE_WITH_SELECTION\n]);\n\nmodule.exports = ListIndexesOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvbGlzdF9pbmRleGVzLmpzPzAxOTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsMkJBQTJCLG1CQUFPLENBQUMsR0FBYztBQUNqRCxlQUFlLG1CQUFPLENBQUMsRUFBYTtBQUNwQyxzQkFBc0IsbUJBQU8sQ0FBQyxFQUFhO0FBQzNDLHVCQUF1QixtQkFBTyxDQUFDLEVBQWU7O0FBRTlDOztBQUVBO0FBQ0E7QUFDQSxnQ0FBZ0MscUJBQXFCOztBQUVyRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUNBQXFDLFNBQVMsbUJBQW1CLEVBQUUsSUFBSTtBQUN2RTtBQUNBOztBQUVBLDZDQUE2QyxvQ0FBb0M7QUFDakY7QUFDQTtBQUNBLE9BQU8sMkRBQTJEO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMTQ3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBDb21tYW5kT3BlcmF0aW9uVjIgPSByZXF1aXJlKCcuL2NvbW1hbmRfdjInKTtcbmNvbnN0IEFzcGVjdCA9IHJlcXVpcmUoJy4vb3BlcmF0aW9uJykuQXNwZWN0O1xuY29uc3QgZGVmaW5lQXNwZWN0cyA9IHJlcXVpcmUoJy4vb3BlcmF0aW9uJykuZGVmaW5lQXNwZWN0cztcbmNvbnN0IG1heFdpcmVWZXJzaW9uID0gcmVxdWlyZSgnLi4vY29yZS91dGlscycpLm1heFdpcmVWZXJzaW9uO1xuXG5jb25zdCBMSVNUX0lOREVYRVNfV0lSRV9WRVJTSU9OID0gMztcblxuY2xhc3MgTGlzdEluZGV4ZXNPcGVyYXRpb24gZXh0ZW5kcyBDb21tYW5kT3BlcmF0aW9uVjIge1xuICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBvcHRpb25zKSB7XG4gICAgc3VwZXIoY29sbGVjdGlvbiwgb3B0aW9ucywgeyBmdWxsUmVzcG9uc2U6IHRydWUgfSk7XG5cbiAgICB0aGlzLmNvbGxlY3Rpb25OYW1lc3BhY2UgPSBjb2xsZWN0aW9uLnMubmFtZXNwYWNlO1xuICB9XG5cbiAgZXhlY3V0ZShzZXJ2ZXIsIGNhbGxiYWNrKSB7XG4gICAgY29uc3Qgc2VydmVyV2lyZVZlcnNpb24gPSBtYXhXaXJlVmVyc2lvbihzZXJ2ZXIpO1xuICAgIGlmIChzZXJ2ZXJXaXJlVmVyc2lvbiA8IExJU1RfSU5ERVhFU19XSVJFX1ZFUlNJT04pIHtcbiAgICAgIGNvbnN0IHN5c3RlbUluZGV4ZXNOUyA9IHRoaXMuY29sbGVjdGlvbk5hbWVzcGFjZS53aXRoQ29sbGVjdGlvbignc3lzdGVtLmluZGV4ZXMnKS50b1N0cmluZygpO1xuICAgICAgY29uc3QgY29sbGVjdGlvbk5TID0gdGhpcy5jb2xsZWN0aW9uTmFtZXNwYWNlLnRvU3RyaW5nKCk7XG5cbiAgICAgIHNlcnZlci5xdWVyeShzeXN0ZW1JbmRleGVzTlMsIHsgcXVlcnk6IHsgbnM6IGNvbGxlY3Rpb25OUyB9IH0sIHt9LCB0aGlzLm9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBjdXJzb3IgPSB0aGlzLm9wdGlvbnMuYmF0Y2hTaXplID8geyBiYXRjaFNpemU6IHRoaXMub3B0aW9ucy5iYXRjaFNpemUgfSA6IHt9O1xuICAgIHN1cGVyLmV4ZWN1dGVDb21tYW5kKFxuICAgICAgc2VydmVyLFxuICAgICAgeyBsaXN0SW5kZXhlczogdGhpcy5jb2xsZWN0aW9uTmFtZXNwYWNlLmNvbGxlY3Rpb24sIGN1cnNvciB9LFxuICAgICAgY2FsbGJhY2tcbiAgICApO1xuICB9XG59XG5cbmRlZmluZUFzcGVjdHMoTGlzdEluZGV4ZXNPcGVyYXRpb24sIFtcbiAgQXNwZWN0LlJFQURfT1BFUkFUSU9OLFxuICBBc3BlY3QuUkVUUllBQkxFLFxuICBBc3BlY3QuRVhFQ1VURV9XSVRIX1NFTEVDVElPTlxuXSk7XG5cbm1vZHVsZS5leHBvcnRzID0gTGlzdEluZGV4ZXNPcGVyYXRpb247XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///147\n");

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst applyWriteConcern = __webpack_require__(86).applyWriteConcern;\nconst Code = __webpack_require__(3).BSON.Code;\nconst decorateWithCollation = __webpack_require__(86).decorateWithCollation;\nconst decorateWithReadConcern = __webpack_require__(86).decorateWithReadConcern;\nconst executeCommand = __webpack_require__(109).executeCommand;\nconst handleCallback = __webpack_require__(86).handleCallback;\nconst isObject = __webpack_require__(86).isObject;\nconst loadDb = __webpack_require__(149).loadDb;\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst resolveReadPreference = __webpack_require__(86).resolveReadPreference;\nconst toError = __webpack_require__(86).toError;\n\nconst exclusionList = [\n  'readPreference',\n  'session',\n  'bypassDocumentValidation',\n  'w',\n  'wtimeout',\n  'j',\n  'writeConcern'\n];\n\n/**\n * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n *\n * @class\n * @property {Collection} a Collection instance.\n * @property {(function|string)} map The mapping function.\n * @property {(function|string)} reduce The reduce function.\n * @property {object} [options] Optional settings. See Collection.prototype.mapReduce for a list of options.\n */\nclass MapReduceOperation extends OperationBase {\n  /**\n   * Constructs a MapReduce operation.\n   *\n   * @param {Collection} a Collection instance.\n   * @param {(function|string)} map The mapping function.\n   * @param {(function|string)} reduce The reduce function.\n   * @param {object} [options] Optional settings. See Collection.prototype.mapReduce for a list of options.\n   */\n  constructor(collection, map, reduce, options) {\n    super(options);\n\n    this.collection = collection;\n    this.map = map;\n    this.reduce = reduce;\n  }\n\n  /**\n   * Execute the operation.\n   *\n   * @param {Collection~resultCallback} [callback] The command result callback\n   */\n  execute(callback) {\n    const coll = this.collection;\n    const map = this.map;\n    const reduce = this.reduce;\n    let options = this.options;\n\n    const mapCommandHash = {\n      mapreduce: coll.collectionName,\n      map: map,\n      reduce: reduce\n    };\n\n    // Add any other options passed in\n    for (let n in options) {\n      if ('scope' === n) {\n        mapCommandHash[n] = processScope(options[n]);\n      } else {\n        // Only include if not in exclusion list\n        if (exclusionList.indexOf(n) === -1) {\n          mapCommandHash[n] = options[n];\n        }\n      }\n    }\n\n    options = Object.assign({}, options);\n\n    // Ensure we have the right read preference inheritance\n    options.readPreference = resolveReadPreference(coll, options);\n\n    // If we have a read preference and inline is not set as output fail hard\n    if (\n      options.readPreference !== false &&\n      options.readPreference !== 'primary' &&\n      options['out'] &&\n      (options['out'].inline !== 1 && options['out'] !== 'inline')\n    ) {\n      // Force readPreference to primary\n      options.readPreference = 'primary';\n      // Decorate command with writeConcern if supported\n      applyWriteConcern(mapCommandHash, { db: coll.s.db, collection: coll }, options);\n    } else {\n      decorateWithReadConcern(mapCommandHash, coll, options);\n    }\n\n    // Is bypassDocumentValidation specified\n    if (options.bypassDocumentValidation === true) {\n      mapCommandHash.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n\n    // Have we specified collation\n    try {\n      decorateWithCollation(mapCommandHash, coll, options);\n    } catch (err) {\n      return callback(err, null);\n    }\n\n    // Execute command\n    executeCommand(coll.s.db, mapCommandHash, options, (err, result) => {\n      if (err) return handleCallback(callback, err);\n      // Check if we have an error\n      if (1 !== result.ok || result.err || result.errmsg) {\n        return handleCallback(callback, toError(result));\n      }\n\n      // Create statistics value\n      const stats = {};\n      if (result.timeMillis) stats['processtime'] = result.timeMillis;\n      if (result.counts) stats['counts'] = result.counts;\n      if (result.timing) stats['timing'] = result.timing;\n\n      // invoked with inline?\n      if (result.results) {\n        // If we wish for no verbosity\n        if (options['verbose'] == null || !options['verbose']) {\n          return handleCallback(callback, null, result.results);\n        }\n\n        return handleCallback(callback, null, { results: result.results, stats: stats });\n      }\n\n      // The returned collection\n      let collection = null;\n\n      // If we have an object it's a different db\n      if (result.result != null && typeof result.result === 'object') {\n        const doc = result.result;\n        // Return a collection from another db\n        let Db = loadDb();\n        collection = new Db(doc.db, coll.s.db.s.topology, coll.s.db.s.options).collection(\n          doc.collection\n        );\n      } else {\n        // Create a collection object that wraps the result collection\n        collection = coll.s.db.collection(result.result);\n      }\n\n      // If we wish for no verbosity\n      if (options['verbose'] == null || !options['verbose']) {\n        return handleCallback(callback, err, collection);\n      }\n\n      // Return stats as third set of values\n      handleCallback(callback, err, { collection: collection, stats: stats });\n    });\n  }\n}\n\n/**\n * Functions that are passed as scope args must\n * be converted to Code instances.\n * @ignore\n */\nfunction processScope(scope) {\n  if (!isObject(scope) || scope._bsontype === 'ObjectID') {\n    return scope;\n  }\n\n  const keys = Object.keys(scope);\n  let key;\n  const new_scope = {};\n\n  for (let i = keys.length - 1; i >= 0; i--) {\n    key = keys[i];\n    if ('function' === typeof scope[key]) {\n      new_scope[key] = new Code(String(scope[key]));\n    } else {\n      new_scope[key] = processScope(scope[key]);\n    }\n  }\n\n  return new_scope;\n}\n\nmodule.exports = MapReduceOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvbWFwX3JlZHVjZS5qcz9jMTNmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLDBCQUEwQixtQkFBTyxDQUFDLEVBQVU7QUFDNUMsYUFBYSxtQkFBTyxDQUFDLENBQVM7QUFDOUIsOEJBQThCLG1CQUFPLENBQUMsRUFBVTtBQUNoRCxnQ0FBZ0MsbUJBQU8sQ0FBQyxFQUFVO0FBQ2xELHVCQUF1QixtQkFBTyxDQUFDLEdBQVU7QUFDekMsdUJBQXVCLG1CQUFPLENBQUMsRUFBVTtBQUN6QyxpQkFBaUIsbUJBQU8sQ0FBQyxFQUFVO0FBQ25DLGVBQWUsbUJBQU8sQ0FBQyxHQUFvQjtBQUMzQyxzQkFBc0IsbUJBQU8sQ0FBQyxFQUFhO0FBQzNDLDhCQUE4QixtQkFBTyxDQUFDLEVBQVU7QUFDaEQsZ0JBQWdCLG1CQUFPLENBQUMsRUFBVTs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxXQUFXO0FBQ3pCLGNBQWMsa0JBQWtCO0FBQ2hDLGNBQWMsa0JBQWtCO0FBQ2hDLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxXQUFXO0FBQ3hCLGFBQWEsa0JBQWtCO0FBQy9CLGFBQWEsa0JBQWtCO0FBQy9CLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSwwQkFBMEI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDhCQUE4Qjs7QUFFOUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxrQ0FBa0M7QUFDM0UsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0NBQStDLHdDQUF3QztBQUN2Rjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EscUNBQXFDLHVDQUF1QztBQUM1RSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLCtCQUErQixRQUFRO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSIsImZpbGUiOiIxNDguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGFwcGx5V3JpdGVDb25jZXJuID0gcmVxdWlyZSgnLi4vdXRpbHMnKS5hcHBseVdyaXRlQ29uY2VybjtcbmNvbnN0IENvZGUgPSByZXF1aXJlKCcuLi9jb3JlJykuQlNPTi5Db2RlO1xuY29uc3QgZGVjb3JhdGVXaXRoQ29sbGF0aW9uID0gcmVxdWlyZSgnLi4vdXRpbHMnKS5kZWNvcmF0ZVdpdGhDb2xsYXRpb247XG5jb25zdCBkZWNvcmF0ZVdpdGhSZWFkQ29uY2VybiA9IHJlcXVpcmUoJy4uL3V0aWxzJykuZGVjb3JhdGVXaXRoUmVhZENvbmNlcm47XG5jb25zdCBleGVjdXRlQ29tbWFuZCA9IHJlcXVpcmUoJy4vZGJfb3BzJykuZXhlY3V0ZUNvbW1hbmQ7XG5jb25zdCBoYW5kbGVDYWxsYmFjayA9IHJlcXVpcmUoJy4uL3V0aWxzJykuaGFuZGxlQ2FsbGJhY2s7XG5jb25zdCBpc09iamVjdCA9IHJlcXVpcmUoJy4uL3V0aWxzJykuaXNPYmplY3Q7XG5jb25zdCBsb2FkRGIgPSByZXF1aXJlKCcuLi9keW5hbWljX2xvYWRlcnMnKS5sb2FkRGI7XG5jb25zdCBPcGVyYXRpb25CYXNlID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5PcGVyYXRpb25CYXNlO1xuY29uc3QgcmVzb2x2ZVJlYWRQcmVmZXJlbmNlID0gcmVxdWlyZSgnLi4vdXRpbHMnKS5yZXNvbHZlUmVhZFByZWZlcmVuY2U7XG5jb25zdCB0b0Vycm9yID0gcmVxdWlyZSgnLi4vdXRpbHMnKS50b0Vycm9yO1xuXG5jb25zdCBleGNsdXNpb25MaXN0ID0gW1xuICAncmVhZFByZWZlcmVuY2UnLFxuICAnc2Vzc2lvbicsXG4gICdieXBhc3NEb2N1bWVudFZhbGlkYXRpb24nLFxuICAndycsXG4gICd3dGltZW91dCcsXG4gICdqJyxcbiAgJ3dyaXRlQ29uY2Vybidcbl07XG5cbi8qKlxuICogUnVuIE1hcCBSZWR1Y2UgYWNyb3NzIGEgY29sbGVjdGlvbi4gQmUgYXdhcmUgdGhhdCB0aGUgaW5saW5lIG9wdGlvbiBmb3Igb3V0IHdpbGwgcmV0dXJuIGFuIGFycmF5IG9mIHJlc3VsdHMgbm90IGEgY29sbGVjdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwcm9wZXJ0eSB7Q29sbGVjdGlvbn0gYSBDb2xsZWN0aW9uIGluc3RhbmNlLlxuICogQHByb3BlcnR5IHsoZnVuY3Rpb258c3RyaW5nKX0gbWFwIFRoZSBtYXBwaW5nIGZ1bmN0aW9uLlxuICogQHByb3BlcnR5IHsoZnVuY3Rpb258c3RyaW5nKX0gcmVkdWNlIFRoZSByZWR1Y2UgZnVuY3Rpb24uXG4gKiBAcHJvcGVydHkge29iamVjdH0gW29wdGlvbnNdIE9wdGlvbmFsIHNldHRpbmdzLiBTZWUgQ29sbGVjdGlvbi5wcm90b3R5cGUubWFwUmVkdWNlIGZvciBhIGxpc3Qgb2Ygb3B0aW9ucy5cbiAqL1xuY2xhc3MgTWFwUmVkdWNlT3BlcmF0aW9uIGV4dGVuZHMgT3BlcmF0aW9uQmFzZSB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgTWFwUmVkdWNlIG9wZXJhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtDb2xsZWN0aW9ufSBhIENvbGxlY3Rpb24gaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB7KGZ1bmN0aW9ufHN0cmluZyl9IG1hcCBUaGUgbWFwcGluZyBmdW5jdGlvbi5cbiAgICogQHBhcmFtIHsoZnVuY3Rpb258c3RyaW5nKX0gcmVkdWNlIFRoZSByZWR1Y2UgZnVuY3Rpb24uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gT3B0aW9uYWwgc2V0dGluZ3MuIFNlZSBDb2xsZWN0aW9uLnByb3RvdHlwZS5tYXBSZWR1Y2UgZm9yIGEgbGlzdCBvZiBvcHRpb25zLlxuICAgKi9cbiAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgbWFwLCByZWR1Y2UsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgdGhpcy5tYXAgPSBtYXA7XG4gICAgdGhpcy5yZWR1Y2UgPSByZWR1Y2U7XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZSB0aGUgb3BlcmF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge0NvbGxlY3Rpb25+cmVzdWx0Q2FsbGJhY2t9IFtjYWxsYmFja10gVGhlIGNvbW1hbmQgcmVzdWx0IGNhbGxiYWNrXG4gICAqL1xuICBleGVjdXRlKGNhbGxiYWNrKSB7XG4gICAgY29uc3QgY29sbCA9IHRoaXMuY29sbGVjdGlvbjtcbiAgICBjb25zdCBtYXAgPSB0aGlzLm1hcDtcbiAgICBjb25zdCByZWR1Y2UgPSB0aGlzLnJlZHVjZTtcbiAgICBsZXQgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgIGNvbnN0IG1hcENvbW1hbmRIYXNoID0ge1xuICAgICAgbWFwcmVkdWNlOiBjb2xsLmNvbGxlY3Rpb25OYW1lLFxuICAgICAgbWFwOiBtYXAsXG4gICAgICByZWR1Y2U6IHJlZHVjZVxuICAgIH07XG5cbiAgICAvLyBBZGQgYW55IG90aGVyIG9wdGlvbnMgcGFzc2VkIGluXG4gICAgZm9yIChsZXQgbiBpbiBvcHRpb25zKSB7XG4gICAgICBpZiAoJ3Njb3BlJyA9PT0gbikge1xuICAgICAgICBtYXBDb21tYW5kSGFzaFtuXSA9IHByb2Nlc3NTY29wZShvcHRpb25zW25dKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE9ubHkgaW5jbHVkZSBpZiBub3QgaW4gZXhjbHVzaW9uIGxpc3RcbiAgICAgICAgaWYgKGV4Y2x1c2lvbkxpc3QuaW5kZXhPZihuKSA9PT0gLTEpIHtcbiAgICAgICAgICBtYXBDb21tYW5kSGFzaFtuXSA9IG9wdGlvbnNbbl07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyk7XG5cbiAgICAvLyBFbnN1cmUgd2UgaGF2ZSB0aGUgcmlnaHQgcmVhZCBwcmVmZXJlbmNlIGluaGVyaXRhbmNlXG4gICAgb3B0aW9ucy5yZWFkUHJlZmVyZW5jZSA9IHJlc29sdmVSZWFkUHJlZmVyZW5jZShjb2xsLCBvcHRpb25zKTtcblxuICAgIC8vIElmIHdlIGhhdmUgYSByZWFkIHByZWZlcmVuY2UgYW5kIGlubGluZSBpcyBub3Qgc2V0IGFzIG91dHB1dCBmYWlsIGhhcmRcbiAgICBpZiAoXG4gICAgICBvcHRpb25zLnJlYWRQcmVmZXJlbmNlICE9PSBmYWxzZSAmJlxuICAgICAgb3B0aW9ucy5yZWFkUHJlZmVyZW5jZSAhPT0gJ3ByaW1hcnknICYmXG4gICAgICBvcHRpb25zWydvdXQnXSAmJlxuICAgICAgKG9wdGlvbnNbJ291dCddLmlubGluZSAhPT0gMSAmJiBvcHRpb25zWydvdXQnXSAhPT0gJ2lubGluZScpXG4gICAgKSB7XG4gICAgICAvLyBGb3JjZSByZWFkUHJlZmVyZW5jZSB0byBwcmltYXJ5XG4gICAgICBvcHRpb25zLnJlYWRQcmVmZXJlbmNlID0gJ3ByaW1hcnknO1xuICAgICAgLy8gRGVjb3JhdGUgY29tbWFuZCB3aXRoIHdyaXRlQ29uY2VybiBpZiBzdXBwb3J0ZWRcbiAgICAgIGFwcGx5V3JpdGVDb25jZXJuKG1hcENvbW1hbmRIYXNoLCB7IGRiOiBjb2xsLnMuZGIsIGNvbGxlY3Rpb246IGNvbGwgfSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlY29yYXRlV2l0aFJlYWRDb25jZXJuKG1hcENvbW1hbmRIYXNoLCBjb2xsLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICAvLyBJcyBieXBhc3NEb2N1bWVudFZhbGlkYXRpb24gc3BlY2lmaWVkXG4gICAgaWYgKG9wdGlvbnMuYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uID09PSB0cnVlKSB7XG4gICAgICBtYXBDb21tYW5kSGFzaC5ieXBhc3NEb2N1bWVudFZhbGlkYXRpb24gPSBvcHRpb25zLmJ5cGFzc0RvY3VtZW50VmFsaWRhdGlvbjtcbiAgICB9XG5cbiAgICAvLyBIYXZlIHdlIHNwZWNpZmllZCBjb2xsYXRpb25cbiAgICB0cnkge1xuICAgICAgZGVjb3JhdGVXaXRoQ29sbGF0aW9uKG1hcENvbW1hbmRIYXNoLCBjb2xsLCBvcHRpb25zKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIG51bGwpO1xuICAgIH1cblxuICAgIC8vIEV4ZWN1dGUgY29tbWFuZFxuICAgIGV4ZWN1dGVDb21tYW5kKGNvbGwucy5kYiwgbWFwQ29tbWFuZEhhc2gsIG9wdGlvbnMsIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKGVycikgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKGNhbGxiYWNrLCBlcnIpO1xuICAgICAgLy8gQ2hlY2sgaWYgd2UgaGF2ZSBhbiBlcnJvclxuICAgICAgaWYgKDEgIT09IHJlc3VsdC5vayB8fCByZXN1bHQuZXJyIHx8IHJlc3VsdC5lcnJtc2cpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKGNhbGxiYWNrLCB0b0Vycm9yKHJlc3VsdCkpO1xuICAgICAgfVxuXG4gICAgICAvLyBDcmVhdGUgc3RhdGlzdGljcyB2YWx1ZVxuICAgICAgY29uc3Qgc3RhdHMgPSB7fTtcbiAgICAgIGlmIChyZXN1bHQudGltZU1pbGxpcykgc3RhdHNbJ3Byb2Nlc3N0aW1lJ10gPSByZXN1bHQudGltZU1pbGxpcztcbiAgICAgIGlmIChyZXN1bHQuY291bnRzKSBzdGF0c1snY291bnRzJ10gPSByZXN1bHQuY291bnRzO1xuICAgICAgaWYgKHJlc3VsdC50aW1pbmcpIHN0YXRzWyd0aW1pbmcnXSA9IHJlc3VsdC50aW1pbmc7XG5cbiAgICAgIC8vIGludm9rZWQgd2l0aCBpbmxpbmU/XG4gICAgICBpZiAocmVzdWx0LnJlc3VsdHMpIHtcbiAgICAgICAgLy8gSWYgd2Ugd2lzaCBmb3Igbm8gdmVyYm9zaXR5XG4gICAgICAgIGlmIChvcHRpb25zWyd2ZXJib3NlJ10gPT0gbnVsbCB8fCAhb3B0aW9uc1sndmVyYm9zZSddKSB7XG4gICAgICAgICAgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKGNhbGxiYWNrLCBudWxsLCByZXN1bHQucmVzdWx0cyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaGFuZGxlQ2FsbGJhY2soY2FsbGJhY2ssIG51bGwsIHsgcmVzdWx0czogcmVzdWx0LnJlc3VsdHMsIHN0YXRzOiBzdGF0cyB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJldHVybmVkIGNvbGxlY3Rpb25cbiAgICAgIGxldCBjb2xsZWN0aW9uID0gbnVsbDtcblxuICAgICAgLy8gSWYgd2UgaGF2ZSBhbiBvYmplY3QgaXQncyBhIGRpZmZlcmVudCBkYlxuICAgICAgaWYgKHJlc3VsdC5yZXN1bHQgIT0gbnVsbCAmJiB0eXBlb2YgcmVzdWx0LnJlc3VsdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgY29uc3QgZG9jID0gcmVzdWx0LnJlc3VsdDtcbiAgICAgICAgLy8gUmV0dXJuIGEgY29sbGVjdGlvbiBmcm9tIGFub3RoZXIgZGJcbiAgICAgICAgbGV0IERiID0gbG9hZERiKCk7XG4gICAgICAgIGNvbGxlY3Rpb24gPSBuZXcgRGIoZG9jLmRiLCBjb2xsLnMuZGIucy50b3BvbG9neSwgY29sbC5zLmRiLnMub3B0aW9ucykuY29sbGVjdGlvbihcbiAgICAgICAgICBkb2MuY29sbGVjdGlvblxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgY29sbGVjdGlvbiBvYmplY3QgdGhhdCB3cmFwcyB0aGUgcmVzdWx0IGNvbGxlY3Rpb25cbiAgICAgICAgY29sbGVjdGlvbiA9IGNvbGwucy5kYi5jb2xsZWN0aW9uKHJlc3VsdC5yZXN1bHQpO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB3ZSB3aXNoIGZvciBubyB2ZXJib3NpdHlcbiAgICAgIGlmIChvcHRpb25zWyd2ZXJib3NlJ10gPT0gbnVsbCB8fCAhb3B0aW9uc1sndmVyYm9zZSddKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVDYWxsYmFjayhjYWxsYmFjaywgZXJyLCBjb2xsZWN0aW9uKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmV0dXJuIHN0YXRzIGFzIHRoaXJkIHNldCBvZiB2YWx1ZXNcbiAgICAgIGhhbmRsZUNhbGxiYWNrKGNhbGxiYWNrLCBlcnIsIHsgY29sbGVjdGlvbjogY29sbGVjdGlvbiwgc3RhdHM6IHN0YXRzIH0pO1xuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogRnVuY3Rpb25zIHRoYXQgYXJlIHBhc3NlZCBhcyBzY29wZSBhcmdzIG11c3RcbiAqIGJlIGNvbnZlcnRlZCB0byBDb2RlIGluc3RhbmNlcy5cbiAqIEBpZ25vcmVcbiAqL1xuZnVuY3Rpb24gcHJvY2Vzc1Njb3BlKHNjb3BlKSB7XG4gIGlmICghaXNPYmplY3Qoc2NvcGUpIHx8IHNjb3BlLl9ic29udHlwZSA9PT0gJ09iamVjdElEJykge1xuICAgIHJldHVybiBzY29wZTtcbiAgfVxuXG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzY29wZSk7XG4gIGxldCBrZXk7XG4gIGNvbnN0IG5ld19zY29wZSA9IHt9O1xuXG4gIGZvciAobGV0IGkgPSBrZXlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIHNjb3BlW2tleV0pIHtcbiAgICAgIG5ld19zY29wZVtrZXldID0gbmV3IENvZGUoU3RyaW5nKHNjb3BlW2tleV0pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3X3Njb3BlW2tleV0gPSBwcm9jZXNzU2NvcGUoc2NvcGVba2V5XSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld19zY29wZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNYXBSZWR1Y2VPcGVyYXRpb247XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///148\n");

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nlet collection;\nlet cursor;\nlet db;\n\nfunction loadCollection() {\n  if (!collection) {\n    collection = __webpack_require__(111);\n  }\n  return collection;\n}\n\nfunction loadCursor() {\n  if (!cursor) {\n    cursor = __webpack_require__(106);\n  }\n  return cursor;\n}\n\nfunction loadDb() {\n  if (!db) {\n    db = __webpack_require__(150);\n  }\n  return db;\n}\n\nmodule.exports = {\n  loadCollection,\n  loadCursor,\n  loadDb\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2R5bmFtaWNfbG9hZGVycy5qcz9hODdiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLG1CQUFPLENBQUMsR0FBYztBQUN2QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsbUJBQU8sQ0FBQyxHQUFVO0FBQy9CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUyxtQkFBTyxDQUFDLEdBQU07QUFDdkI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTQ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5sZXQgY29sbGVjdGlvbjtcbmxldCBjdXJzb3I7XG5sZXQgZGI7XG5cbmZ1bmN0aW9uIGxvYWRDb2xsZWN0aW9uKCkge1xuICBpZiAoIWNvbGxlY3Rpb24pIHtcbiAgICBjb2xsZWN0aW9uID0gcmVxdWlyZSgnLi9jb2xsZWN0aW9uJyk7XG4gIH1cbiAgcmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIGxvYWRDdXJzb3IoKSB7XG4gIGlmICghY3Vyc29yKSB7XG4gICAgY3Vyc29yID0gcmVxdWlyZSgnLi9jdXJzb3InKTtcbiAgfVxuICByZXR1cm4gY3Vyc29yO1xufVxuXG5mdW5jdGlvbiBsb2FkRGIoKSB7XG4gIGlmICghZGIpIHtcbiAgICBkYiA9IHJlcXVpcmUoJy4vZGInKTtcbiAgfVxuICByZXR1cm4gZGI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBsb2FkQ29sbGVjdGlvbixcbiAgbG9hZEN1cnNvcixcbiAgbG9hZERiXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///149\n");

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst EventEmitter = __webpack_require__(39).EventEmitter;\nconst inherits = __webpack_require__(12).inherits;\nconst getSingleProperty = __webpack_require__(86).getSingleProperty;\nconst CommandCursor = __webpack_require__(117);\nconst handleCallback = __webpack_require__(86).handleCallback;\nconst filterOptions = __webpack_require__(86).filterOptions;\nconst toError = __webpack_require__(86).toError;\nconst ReadPreference = __webpack_require__(3).ReadPreference;\nconst MongoError = __webpack_require__(3).MongoError;\nconst ObjectID = __webpack_require__(3).ObjectID;\nconst Logger = __webpack_require__(3).Logger;\nconst Collection = __webpack_require__(111);\nconst mergeOptionsAndWriteConcern = __webpack_require__(86).mergeOptionsAndWriteConcern;\nconst executeLegacyOperation = __webpack_require__(86).executeLegacyOperation;\nconst resolveReadPreference = __webpack_require__(86).resolveReadPreference;\nconst ChangeStream = __webpack_require__(104);\nconst deprecate = __webpack_require__(12).deprecate;\nconst deprecateOptions = __webpack_require__(86).deprecateOptions;\nconst MongoDBNamespace = __webpack_require__(86).MongoDBNamespace;\nconst CONSTANTS = __webpack_require__(110);\nconst WriteConcern = __webpack_require__(87);\nconst ReadConcern = __webpack_require__(115);\nconst AggregationCursor = __webpack_require__(116);\n\n// Operations\nconst createListener = __webpack_require__(109).createListener;\nconst ensureIndex = __webpack_require__(109).ensureIndex;\nconst evaluate = __webpack_require__(109).evaluate;\nconst profilingInfo = __webpack_require__(109).profilingInfo;\nconst validateDatabaseName = __webpack_require__(109).validateDatabaseName;\n\nconst AggregateOperation = __webpack_require__(119);\nconst AddUserOperation = __webpack_require__(151);\nconst CollectionsOperation = __webpack_require__(152);\nconst CommandOperation = __webpack_require__(124);\nconst CreateCollectionOperation = __webpack_require__(153);\nconst CreateIndexOperation = __webpack_require__(123);\nconst DropCollectionOperation = __webpack_require__(129).DropCollectionOperation;\nconst DropDatabaseOperation = __webpack_require__(129).DropDatabaseOperation;\nconst ExecuteDbAdminCommandOperation = __webpack_require__(154);\nconst IndexInformationOperation = __webpack_require__(142);\nconst ListCollectionsOperation = __webpack_require__(155);\nconst ProfilingLevelOperation = __webpack_require__(156);\nconst RemoveUserOperation = __webpack_require__(157);\nconst RenameOperation = __webpack_require__(158);\nconst SetProfilingLevelOperation = __webpack_require__(159);\n\nconst executeOperation = __webpack_require__(83);\n\n/**\n * @fileOverview The **Db** class is a class that represents a MongoDB Database.\n *\n * @example\n * const MongoClient = require('mongodb').MongoClient;\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Select the database by name\n *   const testDb = client.db(dbName);\n *   client.close();\n * });\n */\n\n// Allowed parameters\nconst legalOptionNames = [\n  'w',\n  'wtimeout',\n  'fsync',\n  'j',\n  'readPreference',\n  'readPreferenceTags',\n  'native_parser',\n  'forceServerObjectId',\n  'pkFactory',\n  'serializeFunctions',\n  'raw',\n  'bufferMaxEntries',\n  'authSource',\n  'ignoreUndefined',\n  'promoteLongs',\n  'promiseLibrary',\n  'readConcern',\n  'retryMiliSeconds',\n  'numberOfRetries',\n  'parentDb',\n  'noListener',\n  'loggerLevel',\n  'logger',\n  'promoteBuffers',\n  'promoteLongs',\n  'promoteValues',\n  'compression',\n  'retryWrites'\n];\n\n/**\n * Creates a new Db instance\n * @class\n * @param {string} databaseName The name of the database this instance represents.\n * @param {(Server|ReplSet|Mongos)} topology The server topology for the database.\n * @param {object} [options] Optional settings.\n * @param {string} [options.authSource] If the database authentication is dependent on another databaseName.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\n * @param {boolean} [options.promoteLongs=true] Promotes Long values to number if they fit inside the 53 bits resolution.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {number} [options.bufferMaxEntries=-1] Sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {object} [options.pkFactory] A primary key factory object for generation of custom _id keys.\n * @param {object} [options.promiseLibrary] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {object} [options.readConcern] Specify a read concern for the collection. (only MongoDB 3.2 or higher supported)\n * @param {ReadConcernLevel} [options.readConcern.level='local'] Specify a read concern level for the collection operations (only MongoDB 3.2 or higher supported)\n * @property {(Server|ReplSet|Mongos)} serverConfig Get the current db topology.\n * @property {number} bufferMaxEntries Current bufferMaxEntries value for the database\n * @property {string} databaseName The name of the database this instance represents.\n * @property {object} options The options associated with the db instance.\n * @property {boolean} native_parser The current value of the parameter native_parser.\n * @property {boolean} slaveOk The current slaveOk value for the db instance.\n * @property {object} writeConcern The current write concern values.\n * @property {object} topology Access the topology object (single server, replicaset or mongos).\n * @fires Db#close\n * @fires Db#reconnect\n * @fires Db#error\n * @fires Db#timeout\n * @fires Db#parseError\n * @fires Db#fullsetup\n * @return {Db} a Db instance.\n */\nfunction Db(databaseName, topology, options) {\n  options = options || {};\n  if (!(this instanceof Db)) return new Db(databaseName, topology, options);\n  EventEmitter.call(this);\n\n  // Get the promiseLibrary\n  const promiseLibrary = options.promiseLibrary || Promise;\n\n  // Filter the options\n  options = filterOptions(options, legalOptionNames);\n\n  // Ensure we put the promiseLib in the options\n  options.promiseLibrary = promiseLibrary;\n\n  // Internal state of the db object\n  this.s = {\n    // DbCache\n    dbCache: {},\n    // Children db's\n    children: [],\n    // Topology\n    topology: topology,\n    // Options\n    options: options,\n    // Logger instance\n    logger: Logger('Db', options),\n    // Get the bson parser\n    bson: topology ? topology.bson : null,\n    // Unpack read preference\n    readPreference: ReadPreference.fromOptions(options),\n    // Set buffermaxEntries\n    bufferMaxEntries: typeof options.bufferMaxEntries === 'number' ? options.bufferMaxEntries : -1,\n    // Parent db (if chained)\n    parentDb: options.parentDb || null,\n    // Set up the primary key factory or fallback to ObjectID\n    pkFactory: options.pkFactory || ObjectID,\n    // Get native parser\n    nativeParser: options.nativeParser || options.native_parser,\n    // Promise library\n    promiseLibrary: promiseLibrary,\n    // No listener\n    noListener: typeof options.noListener === 'boolean' ? options.noListener : false,\n    // ReadConcern\n    readConcern: ReadConcern.fromOptions(options),\n    writeConcern: WriteConcern.fromOptions(options),\n    // Namespace\n    namespace: new MongoDBNamespace(databaseName)\n  };\n\n  // Ensure we have a valid db name\n  validateDatabaseName(databaseName);\n\n  // Add a read Only property\n  getSingleProperty(this, 'serverConfig', this.s.topology);\n  getSingleProperty(this, 'bufferMaxEntries', this.s.bufferMaxEntries);\n  getSingleProperty(this, 'databaseName', this.s.namespace.db);\n\n  // This is a child db, do not register any listeners\n  if (options.parentDb) return;\n  if (this.s.noListener) return;\n\n  // Add listeners\n  topology.on('error', createListener(this, 'error', this));\n  topology.on('timeout', createListener(this, 'timeout', this));\n  topology.on('close', createListener(this, 'close', this));\n  topology.on('parseError', createListener(this, 'parseError', this));\n  topology.once('open', createListener(this, 'open', this));\n  topology.once('fullsetup', createListener(this, 'fullsetup', this));\n  topology.once('all', createListener(this, 'all', this));\n  topology.on('reconnect', createListener(this, 'reconnect', this));\n}\n\ninherits(Db, EventEmitter);\n\n// Topology\nObject.defineProperty(Db.prototype, 'topology', {\n  enumerable: true,\n  get: function() {\n    return this.s.topology;\n  }\n});\n\n// Options\nObject.defineProperty(Db.prototype, 'options', {\n  enumerable: true,\n  get: function() {\n    return this.s.options;\n  }\n});\n\n// slaveOk specified\nObject.defineProperty(Db.prototype, 'slaveOk', {\n  enumerable: true,\n  get: function() {\n    if (\n      this.s.options.readPreference != null &&\n      (this.s.options.readPreference !== 'primary' ||\n        this.s.options.readPreference.mode !== 'primary')\n    ) {\n      return true;\n    }\n    return false;\n  }\n});\n\nObject.defineProperty(Db.prototype, 'readConcern', {\n  enumerable: true,\n  get: function() {\n    return this.s.readConcern;\n  }\n});\n\nObject.defineProperty(Db.prototype, 'readPreference', {\n  enumerable: true,\n  get: function() {\n    if (this.s.readPreference == null) {\n      // TODO: check client\n      return ReadPreference.primary;\n    }\n\n    return this.s.readPreference;\n  }\n});\n\n// get the write Concern\nObject.defineProperty(Db.prototype, 'writeConcern', {\n  enumerable: true,\n  get: function() {\n    return this.s.writeConcern;\n  }\n});\n\nObject.defineProperty(Db.prototype, 'namespace', {\n  enumerable: true,\n  get: function() {\n    return this.s.namespace.toString();\n  }\n});\n\n/**\n * Execute a command\n * @method\n * @param {object} command The command hash\n * @param {object} [options] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.command = function(command, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = Object.assign({}, options);\n\n  const commandOperation = new CommandOperation(this, options, null, command);\n\n  return executeOperation(this.s.topology, commandOperation, callback);\n};\n\n/**\n * Execute an aggregation framework pipeline against the database, needs MongoDB >= 3.6\n * @method\n * @param {object} [pipeline=[]] Array containing all the aggregation framework commands for the execution.\n * @param {object} [options] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {object} [options.cursor] Return the query as cursor, on 2.6 > it returns as a real cursor on pre 2.6 it returns as an emulated cursor.\n * @param {number} [options.cursor.batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @param {boolean} [options.explain=false] Explain returns the aggregation execution plan (requires mongodb 2.6 >).\n * @param {boolean} [options.allowDiskUse=false] allowDiskUse lets the server know if it can use disk to store temporary results for the aggregation (requires mongodb 2.6 >).\n * @param {number} [options.maxTimeMS] maxTimeMS specifies a cumulative time limit in milliseconds for processing operations on the cursor. MongoDB interrupts the operation at the earliest following interrupt point.\n * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\n * @param {boolean} [options.promoteLongs=true] Promotes Long values to number if they fit inside the 53 bits resolution.\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n * @param {string} [options.comment] Add a comment to an aggregation command\n * @param {string|object} [options.hint] Add an index selection hint to an aggregation command\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Database~aggregationCallback} callback The command result callback\n * @return {(null|AggregationCursor)}\n */\nDb.prototype.aggregate = function(pipeline, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  // If we have no options or callback we are doing\n  // a cursor based aggregation\n  if (options == null && callback == null) {\n    options = {};\n  }\n\n  const cursor = new AggregationCursor(\n    this.s.topology,\n    new AggregateOperation(this, pipeline, options),\n    options\n  );\n\n  // TODO: remove this when NODE-2074 is resolved\n  if (typeof callback === 'function') {\n    callback(null, cursor);\n    return;\n  }\n\n  return cursor;\n};\n\n/**\n * Return the Admin db instance\n * @method\n * @return {Admin} return the new Admin db instance\n */\nDb.prototype.admin = function() {\n  const Admin = __webpack_require__(160);\n\n  return new Admin(this, this.s.topology, this.s.promiseLibrary);\n};\n\n/**\n * The callback format for the collection method, must be used if strict is specified\n * @callback Db~collectionResultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Collection} collection The collection instance.\n */\n\n/**\n * The callback format for an aggregation call\n * @callback Database~aggregationCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {AggregationCursor} cursor The cursor if the aggregation command was executed successfully.\n */\n\nconst collectionKeys = [\n  'pkFactory',\n  'readPreference',\n  'serializeFunctions',\n  'strict',\n  'readConcern',\n  'ignoreUndefined',\n  'promoteValues',\n  'promoteBuffers',\n  'promoteLongs'\n];\n\n/**\n * Fetch a specific collection (containing the actual collection information). If the application does not use strict mode you\n * can use it without a callback in the following way: `const collection = db.collection('mycollection');`\n *\n * @method\n * @param {string} name the collection name we wish to access.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\n * @param {object} [options.pkFactory] A primary key factory object for generation of custom _id keys.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n * @param {boolean} [options.strict=false] Returns an error if the collection does not exist\n * @param {object} [options.readConcern] Specify a read concern for the collection. (only MongoDB 3.2 or higher supported)\n * @param {ReadConcernLevel} [options.readConcern.level='local'] Specify a read concern level for the collection operations (only MongoDB 3.2 or higher supported)\n * @param {Db~collectionResultCallback} [callback] The collection result callback\n * @return {Collection} return the new Collection instance if not in strict mode\n */\nDb.prototype.collection = function(name, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n  options = Object.assign({}, options);\n\n  // Set the promise library\n  options.promiseLibrary = this.s.promiseLibrary;\n\n  // If we have not set a collection level readConcern set the db level one\n  options.readConcern = options.readConcern\n    ? new ReadConcern(options.readConcern.level)\n    : this.readConcern;\n\n  // Do we have ignoreUndefined set\n  if (this.s.options.ignoreUndefined) {\n    options.ignoreUndefined = this.s.options.ignoreUndefined;\n  }\n\n  // Merge in all needed options and ensure correct writeConcern merging from db level\n  options = mergeOptionsAndWriteConcern(options, this.s.options, collectionKeys, true);\n\n  // Execute\n  if (options == null || !options.strict) {\n    try {\n      const collection = new Collection(\n        this,\n        this.s.topology,\n        this.databaseName,\n        name,\n        this.s.pkFactory,\n        options\n      );\n      if (callback) callback(null, collection);\n      return collection;\n    } catch (err) {\n      if (err instanceof MongoError && callback) return callback(err);\n      throw err;\n    }\n  }\n\n  // Strict mode\n  if (typeof callback !== 'function') {\n    throw toError(`A callback is required in strict mode. While getting collection ${name}`);\n  }\n\n  // Did the user destroy the topology\n  if (this.serverConfig && this.serverConfig.isDestroyed()) {\n    return callback(new MongoError('topology was destroyed'));\n  }\n\n  const listCollectionOptions = Object.assign({}, options, { nameOnly: true });\n\n  // Strict mode\n  this.listCollections({ name: name }, listCollectionOptions).toArray((err, collections) => {\n    if (err != null) return handleCallback(callback, err, null);\n    if (collections.length === 0)\n      return handleCallback(\n        callback,\n        toError(`Collection ${name} does not exist. Currently in strict mode.`),\n        null\n      );\n\n    try {\n      return handleCallback(\n        callback,\n        null,\n        new Collection(this, this.s.topology, this.databaseName, name, this.s.pkFactory, options)\n      );\n    } catch (err) {\n      return handleCallback(callback, err, null);\n    }\n  });\n};\n\n/**\n * Create a new collection on a server with the specified options. Use this to create capped collections.\n * More information about command options available at https://docs.mongodb.com/manual/reference/command/create/\n *\n * @method\n * @param {string} name the collection name we wish to access.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\n * @param {object} [options.pkFactory] A primary key factory object for generation of custom _id keys.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n * @param {boolean} [options.strict=false] Returns an error if the collection does not exist\n * @param {boolean} [options.capped=false] Create a capped collection.\n * @param {boolean} [options.autoIndexId=true] DEPRECATED: Create an index on the _id field of the document, True by default on MongoDB 2.6 - 3.0\n * @param {number} [options.size] The size of the capped collection in bytes.\n * @param {number} [options.max] The maximum number of documents in the capped collection.\n * @param {number} [options.flags] Optional. Available for the MMAPv1 storage engine only to set the usePowerOf2Sizes and the noPadding flag.\n * @param {object} [options.storageEngine] Allows users to specify configuration to the storage engine on a per-collection basis when creating a collection on MongoDB 3.0 or higher.\n * @param {object} [options.validator] Allows users to specify validation rules or expressions for the collection. For more information, see Document Validation on MongoDB 3.2 or higher.\n * @param {string} [options.validationLevel] Determines how strictly MongoDB applies the validation rules to existing documents during an update on MongoDB 3.2 or higher.\n * @param {string} [options.validationAction] Determines whether to error on invalid documents or just warn about the violations but allow invalid documents to be inserted on MongoDB 3.2 or higher.\n * @param {object} [options.indexOptionDefaults] Allows users to specify a default configuration for indexes when creating a collection on MongoDB 3.2 or higher.\n * @param {string} [options.viewOn] The name of the source collection or view from which to create the view. The name is not the full namespace of the collection or view; i.e. does not include the database name and implies the same database as the view to create on MongoDB 3.4 or higher.\n * @param {array} [options.pipeline] An array that consists of the aggregation pipeline stage. Creates the view by applying the specified pipeline to the viewOn collection or view on MongoDB 3.4 or higher.\n * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~collectionResultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.createCollection = deprecateOptions(\n  {\n    name: 'Db.createCollection',\n    deprecatedOptions: ['autoIndexId'],\n    optionsIndex: 1\n  },\n  function(name, options, callback) {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options || {};\n    options.promiseLibrary = options.promiseLibrary || this.s.promiseLibrary;\n    options.readConcern = options.readConcern\n      ? new ReadConcern(options.readConcern.level)\n      : this.readConcern;\n    const createCollectionOperation = new CreateCollectionOperation(this, name, options);\n\n    return executeOperation(this.s.topology, createCollectionOperation, callback);\n  }\n);\n\n/**\n * Get all the db statistics.\n *\n * @method\n * @param {object} [options] Optional settings.\n * @param {number} [options.scale] Divide the returned sizes by scale value.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The collection result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.stats = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n  // Build command object\n  const commandObject = { dbStats: true };\n  // Check if we have the scale value\n  if (options['scale'] != null) commandObject['scale'] = options['scale'];\n\n  // If we have a readPreference set\n  if (options.readPreference == null && this.s.readPreference) {\n    options.readPreference = this.s.readPreference;\n  }\n\n  const statsOperation = new CommandOperation(this, options, null, commandObject);\n\n  // Execute the command\n  return executeOperation(this.s.topology, statsOperation, callback);\n};\n\n/**\n * Get the list of all collection information for the specified db.\n *\n * @method\n * @param {object} [filter={}] Query to filter collections by\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.nameOnly=false] Since 4.0: If true, will only return the collection name in the response, and will omit additional info\n * @param {number} [options.batchSize=1000] The batchSize for the returned command cursor or if pre 2.8 the systems batch collection\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @return {CommandCursor}\n */\nDb.prototype.listCollections = function(filter, options) {\n  filter = filter || {};\n  options = options || {};\n\n  return new CommandCursor(\n    this.s.topology,\n    new ListCollectionsOperation(this, filter, options),\n    options\n  );\n};\n\n/**\n * Evaluate JavaScript on the server\n *\n * @method\n * @param {Code} code JavaScript to execute on server.\n * @param {(object|array)} parameters The parameters for the call.\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.nolock=false] Tell MongoDB not to block on the evaluation of the javascript.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The results callback\n * @deprecated Eval is deprecated on MongoDB 3.2 and forward\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.eval = deprecate(function(code, parameters, options, callback) {\n  const args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  parameters = args.length ? args.shift() : parameters;\n  options = args.length ? args.shift() || {} : {};\n\n  return executeLegacyOperation(this.s.topology, evaluate, [\n    this,\n    code,\n    parameters,\n    options,\n    callback\n  ]);\n}, 'Db.eval is deprecated as of MongoDB version 3.2');\n\n/**\n * Rename a collection.\n *\n * @method\n * @param {string} fromCollection Name of current collection to rename.\n * @param {string} toCollection New name of of the collection.\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.dropTarget=false] Drop the target name collection if it previously exists.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~collectionResultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.renameCollection = function(fromCollection, toCollection, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = Object.assign({}, options, { readPreference: ReadPreference.PRIMARY });\n\n  // Add return new collection\n  options.new_collection = true;\n\n  const renameOperation = new RenameOperation(\n    this.collection(fromCollection),\n    toCollection,\n    options\n  );\n\n  return executeOperation(this.s.topology, renameOperation, callback);\n};\n\n/**\n * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n *\n * @method\n * @param {string} name Name of collection to drop\n * @param {Object} [options] Optional settings\n * @param {WriteConcern} [options.writeConcern] A full WriteConcern object\n * @param {(number|string)} [options.w] The write concern\n * @param {number} [options.wtimeout] The write concern timeout\n * @param {boolean} [options.j] The journal write concern\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.dropCollection = function(name, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const dropCollectionOperation = new DropCollectionOperation(this, name, options);\n\n  return executeOperation(this.s.topology, dropCollectionOperation, callback);\n};\n\n/**\n * Drop a database, removing it permanently from the server.\n *\n * @method\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.dropDatabase = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const dropDatabaseOperation = new DropDatabaseOperation(this, options);\n\n  return executeOperation(this.s.topology, dropDatabaseOperation, callback);\n};\n\n/**\n * Fetch all collections for the current db.\n *\n * @method\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~collectionsResultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.collections = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const collectionsOperation = new CollectionsOperation(this, options);\n\n  return executeOperation(this.s.topology, collectionsOperation, callback);\n};\n\n/**\n * Runs a command on the database as admin.\n * @method\n * @param {object} command The command hash\n * @param {object} [options] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.executeDbAdminCommand = function(selector, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n  options.readPreference = resolveReadPreference(this, options);\n\n  const executeDbAdminCommandOperation = new ExecuteDbAdminCommandOperation(\n    this,\n    selector,\n    options\n  );\n\n  return executeOperation(this.s.topology, executeDbAdminCommandOperation, callback);\n};\n\n/**\n * Creates an index on the db and collection.\n * @method\n * @param {string} name Name of the collection to create the index on.\n * @param {(string|object)} fieldOrSpec Defines the index.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.unique=false] Creates an unique index.\n * @param {boolean} [options.sparse=false] Creates a sparse index.\n * @param {boolean} [options.background=false] Creates the index in the background, yielding whenever possible.\n * @param {boolean} [options.dropDups=false] A unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value\n * @param {number} [options.min] For geospatial indexes set the lower bound for the co-ordinates.\n * @param {number} [options.max] For geospatial indexes set the high bound for the co-ordinates.\n * @param {number} [options.v] Specify the format version of the indexes.\n * @param {number} [options.expireAfterSeconds] Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)\n * @param {string} [options.name] Override the autogenerated index name (useful if the resulting name is larger than 128 bytes)\n * @param {object} [options.partialFilterExpression] Creates a partial index based on the given filter object (MongoDB 3.2 or higher)\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.createIndex = function(name, fieldOrSpec, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options ? Object.assign({}, options) : {};\n\n  const createIndexOperation = new CreateIndexOperation(this, name, fieldOrSpec, options);\n\n  return executeOperation(this.s.topology, createIndexOperation, callback);\n};\n\n/**\n * Ensures that an index exists, if it does not it creates it\n * @method\n * @deprecated since version 2.0\n * @param {string} name The index name\n * @param {(string|object)} fieldOrSpec Defines the index.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.unique=false] Creates an unique index.\n * @param {boolean} [options.sparse=false] Creates a sparse index.\n * @param {boolean} [options.background=false] Creates the index in the background, yielding whenever possible.\n * @param {boolean} [options.dropDups=false] A unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value\n * @param {number} [options.min] For geospatial indexes set the lower bound for the co-ordinates.\n * @param {number} [options.max] For geospatial indexes set the high bound for the co-ordinates.\n * @param {number} [options.v] Specify the format version of the indexes.\n * @param {number} [options.expireAfterSeconds] Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)\n * @param {number} [options.name] Override the autogenerated index name (useful if the resulting name is larger than 128 bytes)\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.ensureIndex = deprecate(function(name, fieldOrSpec, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeLegacyOperation(this.s.topology, ensureIndex, [\n    this,\n    name,\n    fieldOrSpec,\n    options,\n    callback\n  ]);\n}, 'Db.ensureIndex is deprecated as of MongoDB version 3.0 / driver version 2.0');\n\nDb.prototype.addChild = function(db) {\n  if (this.s.parentDb) return this.s.parentDb.addChild(db);\n  this.s.children.push(db);\n};\n\n/**\n * Add a user to the database.\n * @method\n * @param {string} username The username.\n * @param {string} password The password.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {object} [options.customData] Custom data associated with the user (only Mongodb 2.6 or higher)\n * @param {object[]} [options.roles] Roles associated with the created user (only Mongodb 2.6 or higher)\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.addUser = function(username, password, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // Special case where there is no password ($external users)\n  if (typeof username === 'string' && password != null && typeof password === 'object') {\n    options = password;\n    password = null;\n  }\n\n  const addUserOperation = new AddUserOperation(this, username, password, options);\n\n  return executeOperation(this.s.topology, addUserOperation, callback);\n};\n\n/**\n * Remove a user from a database\n * @method\n * @param {string} username The username.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.removeUser = function(username, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const removeUserOperation = new RemoveUserOperation(this, username, options);\n\n  return executeOperation(this.s.topology, removeUserOperation, callback);\n};\n\n/**\n * Set the current profiling level of MongoDB\n *\n * @param {string} level The new profiling level (off, slow_only, all).\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback.\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.setProfilingLevel = function(level, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const setProfilingLevelOperation = new SetProfilingLevelOperation(this, level, options);\n\n  return executeOperation(this.s.topology, setProfilingLevelOperation, callback);\n};\n\n/**\n * Retrieve the current profiling information for MongoDB\n *\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Query the system.profile collection directly.\n */\nDb.prototype.profilingInfo = deprecate(function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeLegacyOperation(this.s.topology, profilingInfo, [this, options, callback]);\n}, 'Db.profilingInfo is deprecated. Query the system.profile collection directly.');\n\n/**\n * Retrieve the current profiling Level for MongoDB\n *\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.profilingLevel = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const profilingLevelOperation = new ProfilingLevelOperation(this, options);\n\n  return executeOperation(this.s.topology, profilingLevelOperation, callback);\n};\n\n/**\n * Retrieves this collections index info.\n * @method\n * @param {string} name The name of the collection.\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.full=false] Returns the full raw index information.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.indexInformation = function(name, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const indexInformationOperation = new IndexInformationOperation(this, name, options);\n\n  return executeOperation(this.s.topology, indexInformationOperation, callback);\n};\n\n/**\n * Unref all sockets\n * @method\n */\nDb.prototype.unref = function() {\n  this.s.topology.unref();\n};\n\n/**\n * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this database. Will ignore all changes to system collections.\n * @method\n * @since 3.1.0\n * @param {Array} [pipeline] An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n * @param {object} [options] Optional settings\n * @param {string} [options.fullDocument='default'] Allowed values: ‘default’, ‘updateLookup’. When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred.\n * @param {object} [options.resumeAfter] Specifies the logical starting point for the new change stream. This should be the _id field from a previously returned change stream document.\n * @param {number} [options.maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a change stream query\n * @param {number} [options.batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @param {object} [options.collation] Specify collation settings for operation. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @param {ReadPreference} [options.readPreference] The read preference. Defaults to the read preference of the database. See {@link https://docs.mongodb.com/manual/reference/read-preference|read preference documentation}.\n * @param {Timestamp} [options.startAtOperationTime] receive change events that occur after the specified timestamp\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @return {ChangeStream} a ChangeStream instance.\n */\nDb.prototype.watch = function(pipeline, options) {\n  pipeline = pipeline || [];\n  options = options || {};\n\n  // Allow optionally not specifying a pipeline\n  if (!Array.isArray(pipeline)) {\n    options = pipeline;\n    pipeline = [];\n  }\n\n  return new ChangeStream(this, pipeline, options);\n};\n\n/**\n * Return the db logger\n * @method\n * @return {Logger} return the db logger\n * @ignore\n */\nDb.prototype.getLogger = function() {\n  return this.s.logger;\n};\n\n/**\n * Db close event\n *\n * Emitted after a socket closed against a single server or mongos proxy.\n *\n * @event Db#close\n * @type {MongoError}\n */\n\n/**\n * Db reconnect event\n *\n *  * Server: Emitted when the driver has reconnected and re-authenticated.\n *  * ReplicaSet: N/A\n *  * Mongos: Emitted when the driver reconnects and re-authenticates successfully against a Mongos.\n *\n * @event Db#reconnect\n * @type {object}\n */\n\n/**\n * Db error event\n *\n * Emitted after an error occurred against a single server or mongos proxy.\n *\n * @event Db#error\n * @type {MongoError}\n */\n\n/**\n * Db timeout event\n *\n * Emitted after a socket timeout occurred against a single server or mongos proxy.\n *\n * @event Db#timeout\n * @type {MongoError}\n */\n\n/**\n * Db parseError event\n *\n * The parseError event is emitted if the driver detects illegal or corrupt BSON being received from the server.\n *\n * @event Db#parseError\n * @type {MongoError}\n */\n\n/**\n * Db fullsetup event, emitted when all servers in the topology have been connected to at start up time.\n *\n * * Server: Emitted when the driver has connected to the single server and has authenticated.\n * * ReplSet: Emitted after the driver has attempted to connect to all replicaset members.\n * * Mongos: Emitted after the driver has attempted to connect to all mongos proxies.\n *\n * @event Db#fullsetup\n * @type {Db}\n */\n\n// Constants\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\n\nmodule.exports = Db;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2RiLmpzPzUxMGIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIscUJBQXFCLG1CQUFPLENBQUMsRUFBUTtBQUNyQyxpQkFBaUIsbUJBQU8sQ0FBQyxFQUFNO0FBQy9CLDBCQUEwQixtQkFBTyxDQUFDLEVBQVM7QUFDM0Msc0JBQXNCLG1CQUFPLENBQUMsR0FBa0I7QUFDaEQsdUJBQXVCLG1CQUFPLENBQUMsRUFBUztBQUN4QyxzQkFBc0IsbUJBQU8sQ0FBQyxFQUFTO0FBQ3ZDLGdCQUFnQixtQkFBTyxDQUFDLEVBQVM7QUFDakMsdUJBQXVCLG1CQUFPLENBQUMsQ0FBUTtBQUN2QyxtQkFBbUIsbUJBQU8sQ0FBQyxDQUFRO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLENBQVE7QUFDakMsZUFBZSxtQkFBTyxDQUFDLENBQVE7QUFDL0IsbUJBQW1CLG1CQUFPLENBQUMsR0FBYztBQUN6QyxvQ0FBb0MsbUJBQU8sQ0FBQyxFQUFTO0FBQ3JELCtCQUErQixtQkFBTyxDQUFDLEVBQVM7QUFDaEQsOEJBQThCLG1CQUFPLENBQUMsRUFBUztBQUMvQyxxQkFBcUIsbUJBQU8sQ0FBQyxHQUFpQjtBQUM5QyxrQkFBa0IsbUJBQU8sQ0FBQyxFQUFNO0FBQ2hDLHlCQUF5QixtQkFBTyxDQUFDLEVBQVM7QUFDMUMseUJBQXlCLG1CQUFPLENBQUMsRUFBUztBQUMxQyxrQkFBa0IsbUJBQU8sQ0FBQyxHQUFhO0FBQ3ZDLHFCQUFxQixtQkFBTyxDQUFDLEVBQWlCO0FBQzlDLG9CQUFvQixtQkFBTyxDQUFDLEdBQWdCO0FBQzVDLDBCQUEwQixtQkFBTyxDQUFDLEdBQXNCOztBQUV4RDtBQUNBLHVCQUF1QixtQkFBTyxDQUFDLEdBQXFCO0FBQ3BELG9CQUFvQixtQkFBTyxDQUFDLEdBQXFCO0FBQ2pELGlCQUFpQixtQkFBTyxDQUFDLEdBQXFCO0FBQzlDLHNCQUFzQixtQkFBTyxDQUFDLEdBQXFCO0FBQ25ELDZCQUE2QixtQkFBTyxDQUFDLEdBQXFCOztBQUUxRCwyQkFBMkIsbUJBQU8sQ0FBQyxHQUF3QjtBQUMzRCx5QkFBeUIsbUJBQU8sQ0FBQyxHQUF1QjtBQUN4RCw2QkFBNkIsbUJBQU8sQ0FBQyxHQUEwQjtBQUMvRCx5QkFBeUIsbUJBQU8sQ0FBQyxHQUFzQjtBQUN2RCxrQ0FBa0MsbUJBQU8sQ0FBQyxHQUFnQztBQUMxRSw2QkFBNkIsbUJBQU8sQ0FBQyxHQUEyQjtBQUNoRSxnQ0FBZ0MsbUJBQU8sQ0FBQyxHQUFtQjtBQUMzRCw4QkFBOEIsbUJBQU8sQ0FBQyxHQUFtQjtBQUN6RCx1Q0FBdUMsbUJBQU8sQ0FBQyxHQUF1QztBQUN0RixrQ0FBa0MsbUJBQU8sQ0FBQyxHQUFnQztBQUMxRSxpQ0FBaUMsbUJBQU8sQ0FBQyxHQUErQjtBQUN4RSxnQ0FBZ0MsbUJBQU8sQ0FBQyxHQUE4QjtBQUN0RSw0QkFBNEIsbUJBQU8sQ0FBQyxHQUEwQjtBQUM5RCx3QkFBd0IsbUJBQU8sQ0FBQyxHQUFxQjtBQUNyRCxtQ0FBbUMsbUJBQU8sQ0FBQyxHQUFrQzs7QUFFN0UseUJBQXlCLG1CQUFPLENBQUMsRUFBZ0M7O0FBRWpFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsd0JBQXdCO0FBQ25DLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxnQkFBZ0I7QUFDM0IsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsd0JBQXdCO0FBQ25DLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsaUJBQWlCO0FBQzVCLGNBQWMsd0JBQXdCO0FBQ3RDLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsUUFBUTtBQUN0QixjQUFjLFFBQVE7QUFDdEIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLEdBQUc7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyx3QkFBd0I7QUFDbkMsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsa0JBQWtCO0FBQzdCLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0Esd0VBQXdFO0FBQ3hFLDRCQUE0Qjs7QUFFNUI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsd0JBQXdCO0FBQ25DLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU8sbUZBQW1GLDRGQUE0RjtBQUNqTSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsT0FBTztBQUNsQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsY0FBYztBQUN6QixXQUFXLDZCQUE2QjtBQUN4QyxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWSxNQUFNO0FBQ2xCO0FBQ0E7QUFDQSxnQkFBZ0IsbUJBQU8sQ0FBQyxHQUFTOztBQUVqQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsV0FBVztBQUN0QixXQUFXLFdBQVc7QUFDdEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxXQUFXO0FBQ3RCLFdBQVcsa0JBQWtCO0FBQzdCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHlHQUF5RztBQUN6RztBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLGdCQUFnQjtBQUMzQixXQUFXLE9BQU87QUFDbEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLE9BQU87QUFDbEIsV0FBVyx3QkFBd0I7QUFDbkMsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLE9BQU87QUFDbEIsV0FBVyxpQkFBaUI7QUFDNUIsV0FBVyw0QkFBNEI7QUFDdkMsWUFBWSxXQUFXO0FBQ3ZCO0FBQ0E7QUFDQSx3RUFBd0U7QUFDeEU7QUFDQSw0QkFBNEI7O0FBRTVCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EscUZBQXFGLEtBQUs7QUFDMUY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0RBQWdELFlBQVksaUJBQWlCOztBQUU3RTtBQUNBLHdCQUF3QixhQUFhO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLEtBQUs7QUFDbkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLGdCQUFnQjtBQUMzQixXQUFXLE9BQU87QUFDbEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLE9BQU87QUFDbEIsV0FBVyx3QkFBd0I7QUFDbkMsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPLHdKQUF3SjtBQUMxSyxXQUFXLE1BQU07QUFDakIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsY0FBYztBQUN6QixXQUFXLDRCQUE0QjtBQUN2QyxZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsMEVBQTBFO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsY0FBYztBQUN6QixXQUFXLGtCQUFrQjtBQUM3QixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBLHdFQUF3RTtBQUN4RTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPLFdBQVc7QUFDN0IsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsUUFBUTtBQUNuQixXQUFXLE9BQU87QUFDbEIsV0FBVyx3QkFBd0I7QUFDbkMsV0FBVyxjQUFjO0FBQ3pCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxlQUFlO0FBQzFCLFdBQVcsT0FBTztBQUNsQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsa0JBQWtCO0FBQzdCO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsUUFBUTtBQUNuQixXQUFXLGNBQWM7QUFDekIsV0FBVyw0QkFBNEI7QUFDdkMsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQSx3RUFBd0U7QUFDeEUsNEJBQTRCLFlBQVkseUNBQXlDOztBQUVqRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxhQUFhO0FBQ3hCLFdBQVcsZ0JBQWdCO0FBQzNCLFdBQVcsT0FBTztBQUNsQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsa0JBQWtCO0FBQzdCLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0Esd0VBQXdFO0FBQ3hFOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsa0JBQWtCO0FBQzdCLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0Esd0VBQXdFO0FBQ3hFOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsNkJBQTZCO0FBQ3hDLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0Esd0VBQXdFO0FBQ3hFOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLHdCQUF3QjtBQUNuQyxXQUFXLGNBQWM7QUFDekIsV0FBVyxrQkFBa0I7QUFDN0IsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQSx3RUFBd0U7QUFDeEU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsZ0JBQWdCO0FBQzNCLFdBQVcsT0FBTztBQUNsQixXQUFXLGdCQUFnQjtBQUMzQixXQUFXLE9BQU87QUFDbEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLGNBQWM7QUFDekIsV0FBVyxrQkFBa0I7QUFDN0IsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQSx3RUFBd0U7QUFDeEUsc0NBQXNDOztBQUV0Qzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsZ0JBQWdCO0FBQzNCLFdBQVcsT0FBTztBQUNsQixXQUFXLGdCQUFnQjtBQUMzQixXQUFXLE9BQU87QUFDbEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsY0FBYztBQUN6QixXQUFXLGtCQUFrQjtBQUM3QixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBLHdFQUF3RTtBQUN4RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxnQkFBZ0I7QUFDM0IsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsUUFBUTtBQUNuQixXQUFXLE9BQU87QUFDbEIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsY0FBYztBQUN6QixXQUFXLGtCQUFrQjtBQUM3QixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBLHdFQUF3RTtBQUN4RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLGdCQUFnQjtBQUMzQixXQUFXLE9BQU87QUFDbEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsY0FBYztBQUN6QixXQUFXLGtCQUFrQjtBQUM3QixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBLHdFQUF3RTtBQUN4RTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsa0JBQWtCO0FBQzdCLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0Esd0VBQXdFO0FBQ3hFOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsY0FBYztBQUN6QixXQUFXLGtCQUFrQjtBQUM3QixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFO0FBQ3hFOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsa0JBQWtCO0FBQzdCLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0Esd0VBQXdFO0FBQ3hFOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLFFBQVE7QUFDbkIsV0FBVyx3QkFBd0I7QUFDbkMsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsa0JBQWtCO0FBQzdCLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0Esd0VBQXdFO0FBQ3hFOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU0seUJBQXlCLDJHQUEyRztBQUNySixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPLDRFQUE0RSw0RkFBNEY7QUFDMUwsV0FBVyxPQUFPLG9FQUFvRSw0RkFBNEY7QUFDbEwsV0FBVyxlQUFlLHFHQUFxRyw4RkFBOEY7QUFDN04sV0FBVyxVQUFVO0FBQ3JCLFdBQVcsY0FBYztBQUN6QixZQUFZLGFBQWE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMTUwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5jb25zdCBpbmhlcml0cyA9IHJlcXVpcmUoJ3V0aWwnKS5pbmhlcml0cztcbmNvbnN0IGdldFNpbmdsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi91dGlscycpLmdldFNpbmdsZVByb3BlcnR5O1xuY29uc3QgQ29tbWFuZEN1cnNvciA9IHJlcXVpcmUoJy4vY29tbWFuZF9jdXJzb3InKTtcbmNvbnN0IGhhbmRsZUNhbGxiYWNrID0gcmVxdWlyZSgnLi91dGlscycpLmhhbmRsZUNhbGxiYWNrO1xuY29uc3QgZmlsdGVyT3B0aW9ucyA9IHJlcXVpcmUoJy4vdXRpbHMnKS5maWx0ZXJPcHRpb25zO1xuY29uc3QgdG9FcnJvciA9IHJlcXVpcmUoJy4vdXRpbHMnKS50b0Vycm9yO1xuY29uc3QgUmVhZFByZWZlcmVuY2UgPSByZXF1aXJlKCcuL2NvcmUnKS5SZWFkUHJlZmVyZW5jZTtcbmNvbnN0IE1vbmdvRXJyb3IgPSByZXF1aXJlKCcuL2NvcmUnKS5Nb25nb0Vycm9yO1xuY29uc3QgT2JqZWN0SUQgPSByZXF1aXJlKCcuL2NvcmUnKS5PYmplY3RJRDtcbmNvbnN0IExvZ2dlciA9IHJlcXVpcmUoJy4vY29yZScpLkxvZ2dlcjtcbmNvbnN0IENvbGxlY3Rpb24gPSByZXF1aXJlKCcuL2NvbGxlY3Rpb24nKTtcbmNvbnN0IG1lcmdlT3B0aW9uc0FuZFdyaXRlQ29uY2VybiA9IHJlcXVpcmUoJy4vdXRpbHMnKS5tZXJnZU9wdGlvbnNBbmRXcml0ZUNvbmNlcm47XG5jb25zdCBleGVjdXRlTGVnYWN5T3BlcmF0aW9uID0gcmVxdWlyZSgnLi91dGlscycpLmV4ZWN1dGVMZWdhY3lPcGVyYXRpb247XG5jb25zdCByZXNvbHZlUmVhZFByZWZlcmVuY2UgPSByZXF1aXJlKCcuL3V0aWxzJykucmVzb2x2ZVJlYWRQcmVmZXJlbmNlO1xuY29uc3QgQ2hhbmdlU3RyZWFtID0gcmVxdWlyZSgnLi9jaGFuZ2Vfc3RyZWFtJyk7XG5jb25zdCBkZXByZWNhdGUgPSByZXF1aXJlKCd1dGlsJykuZGVwcmVjYXRlO1xuY29uc3QgZGVwcmVjYXRlT3B0aW9ucyA9IHJlcXVpcmUoJy4vdXRpbHMnKS5kZXByZWNhdGVPcHRpb25zO1xuY29uc3QgTW9uZ29EQk5hbWVzcGFjZSA9IHJlcXVpcmUoJy4vdXRpbHMnKS5Nb25nb0RCTmFtZXNwYWNlO1xuY29uc3QgQ09OU1RBTlRTID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcbmNvbnN0IFdyaXRlQ29uY2VybiA9IHJlcXVpcmUoJy4vd3JpdGVfY29uY2VybicpO1xuY29uc3QgUmVhZENvbmNlcm4gPSByZXF1aXJlKCcuL3JlYWRfY29uY2VybicpO1xuY29uc3QgQWdncmVnYXRpb25DdXJzb3IgPSByZXF1aXJlKCcuL2FnZ3JlZ2F0aW9uX2N1cnNvcicpO1xuXG4vLyBPcGVyYXRpb25zXG5jb25zdCBjcmVhdGVMaXN0ZW5lciA9IHJlcXVpcmUoJy4vb3BlcmF0aW9ucy9kYl9vcHMnKS5jcmVhdGVMaXN0ZW5lcjtcbmNvbnN0IGVuc3VyZUluZGV4ID0gcmVxdWlyZSgnLi9vcGVyYXRpb25zL2RiX29wcycpLmVuc3VyZUluZGV4O1xuY29uc3QgZXZhbHVhdGUgPSByZXF1aXJlKCcuL29wZXJhdGlvbnMvZGJfb3BzJykuZXZhbHVhdGU7XG5jb25zdCBwcm9maWxpbmdJbmZvID0gcmVxdWlyZSgnLi9vcGVyYXRpb25zL2RiX29wcycpLnByb2ZpbGluZ0luZm87XG5jb25zdCB2YWxpZGF0ZURhdGFiYXNlTmFtZSA9IHJlcXVpcmUoJy4vb3BlcmF0aW9ucy9kYl9vcHMnKS52YWxpZGF0ZURhdGFiYXNlTmFtZTtcblxuY29uc3QgQWdncmVnYXRlT3BlcmF0aW9uID0gcmVxdWlyZSgnLi9vcGVyYXRpb25zL2FnZ3JlZ2F0ZScpO1xuY29uc3QgQWRkVXNlck9wZXJhdGlvbiA9IHJlcXVpcmUoJy4vb3BlcmF0aW9ucy9hZGRfdXNlcicpO1xuY29uc3QgQ29sbGVjdGlvbnNPcGVyYXRpb24gPSByZXF1aXJlKCcuL29wZXJhdGlvbnMvY29sbGVjdGlvbnMnKTtcbmNvbnN0IENvbW1hbmRPcGVyYXRpb24gPSByZXF1aXJlKCcuL29wZXJhdGlvbnMvY29tbWFuZCcpO1xuY29uc3QgQ3JlYXRlQ29sbGVjdGlvbk9wZXJhdGlvbiA9IHJlcXVpcmUoJy4vb3BlcmF0aW9ucy9jcmVhdGVfY29sbGVjdGlvbicpO1xuY29uc3QgQ3JlYXRlSW5kZXhPcGVyYXRpb24gPSByZXF1aXJlKCcuL29wZXJhdGlvbnMvY3JlYXRlX2luZGV4Jyk7XG5jb25zdCBEcm9wQ29sbGVjdGlvbk9wZXJhdGlvbiA9IHJlcXVpcmUoJy4vb3BlcmF0aW9ucy9kcm9wJykuRHJvcENvbGxlY3Rpb25PcGVyYXRpb247XG5jb25zdCBEcm9wRGF0YWJhc2VPcGVyYXRpb24gPSByZXF1aXJlKCcuL29wZXJhdGlvbnMvZHJvcCcpLkRyb3BEYXRhYmFzZU9wZXJhdGlvbjtcbmNvbnN0IEV4ZWN1dGVEYkFkbWluQ29tbWFuZE9wZXJhdGlvbiA9IHJlcXVpcmUoJy4vb3BlcmF0aW9ucy9leGVjdXRlX2RiX2FkbWluX2NvbW1hbmQnKTtcbmNvbnN0IEluZGV4SW5mb3JtYXRpb25PcGVyYXRpb24gPSByZXF1aXJlKCcuL29wZXJhdGlvbnMvaW5kZXhfaW5mb3JtYXRpb24nKTtcbmNvbnN0IExpc3RDb2xsZWN0aW9uc09wZXJhdGlvbiA9IHJlcXVpcmUoJy4vb3BlcmF0aW9ucy9saXN0X2NvbGxlY3Rpb25zJyk7XG5jb25zdCBQcm9maWxpbmdMZXZlbE9wZXJhdGlvbiA9IHJlcXVpcmUoJy4vb3BlcmF0aW9ucy9wcm9maWxpbmdfbGV2ZWwnKTtcbmNvbnN0IFJlbW92ZVVzZXJPcGVyYXRpb24gPSByZXF1aXJlKCcuL29wZXJhdGlvbnMvcmVtb3ZlX3VzZXInKTtcbmNvbnN0IFJlbmFtZU9wZXJhdGlvbiA9IHJlcXVpcmUoJy4vb3BlcmF0aW9ucy9yZW5hbWUnKTtcbmNvbnN0IFNldFByb2ZpbGluZ0xldmVsT3BlcmF0aW9uID0gcmVxdWlyZSgnLi9vcGVyYXRpb25zL3NldF9wcm9maWxpbmdfbGV2ZWwnKTtcblxuY29uc3QgZXhlY3V0ZU9wZXJhdGlvbiA9IHJlcXVpcmUoJy4vb3BlcmF0aW9ucy9leGVjdXRlX29wZXJhdGlvbicpO1xuXG4vKipcbiAqIEBmaWxlT3ZlcnZpZXcgVGhlICoqRGIqKiBjbGFzcyBpcyBhIGNsYXNzIHRoYXQgcmVwcmVzZW50cyBhIE1vbmdvREIgRGF0YWJhc2UuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IE1vbmdvQ2xpZW50ID0gcmVxdWlyZSgnbW9uZ29kYicpLk1vbmdvQ2xpZW50O1xuICogLy8gQ29ubmVjdGlvbiB1cmxcbiAqIGNvbnN0IHVybCA9ICdtb25nb2RiOi8vbG9jYWxob3N0OjI3MDE3JztcbiAqIC8vIERhdGFiYXNlIE5hbWVcbiAqIGNvbnN0IGRiTmFtZSA9ICd0ZXN0JztcbiAqIC8vIENvbm5lY3QgdXNpbmcgTW9uZ29DbGllbnRcbiAqIE1vbmdvQ2xpZW50LmNvbm5lY3QodXJsLCBmdW5jdGlvbihlcnIsIGNsaWVudCkge1xuICogICAvLyBTZWxlY3QgdGhlIGRhdGFiYXNlIGJ5IG5hbWVcbiAqICAgY29uc3QgdGVzdERiID0gY2xpZW50LmRiKGRiTmFtZSk7XG4gKiAgIGNsaWVudC5jbG9zZSgpO1xuICogfSk7XG4gKi9cblxuLy8gQWxsb3dlZCBwYXJhbWV0ZXJzXG5jb25zdCBsZWdhbE9wdGlvbk5hbWVzID0gW1xuICAndycsXG4gICd3dGltZW91dCcsXG4gICdmc3luYycsXG4gICdqJyxcbiAgJ3JlYWRQcmVmZXJlbmNlJyxcbiAgJ3JlYWRQcmVmZXJlbmNlVGFncycsXG4gICduYXRpdmVfcGFyc2VyJyxcbiAgJ2ZvcmNlU2VydmVyT2JqZWN0SWQnLFxuICAncGtGYWN0b3J5JyxcbiAgJ3NlcmlhbGl6ZUZ1bmN0aW9ucycsXG4gICdyYXcnLFxuICAnYnVmZmVyTWF4RW50cmllcycsXG4gICdhdXRoU291cmNlJyxcbiAgJ2lnbm9yZVVuZGVmaW5lZCcsXG4gICdwcm9tb3RlTG9uZ3MnLFxuICAncHJvbWlzZUxpYnJhcnknLFxuICAncmVhZENvbmNlcm4nLFxuICAncmV0cnlNaWxpU2Vjb25kcycsXG4gICdudW1iZXJPZlJldHJpZXMnLFxuICAncGFyZW50RGInLFxuICAnbm9MaXN0ZW5lcicsXG4gICdsb2dnZXJMZXZlbCcsXG4gICdsb2dnZXInLFxuICAncHJvbW90ZUJ1ZmZlcnMnLFxuICAncHJvbW90ZUxvbmdzJyxcbiAgJ3Byb21vdGVWYWx1ZXMnLFxuICAnY29tcHJlc3Npb24nLFxuICAncmV0cnlXcml0ZXMnXG5dO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgRGIgaW5zdGFuY2VcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmd9IGRhdGFiYXNlTmFtZSBUaGUgbmFtZSBvZiB0aGUgZGF0YWJhc2UgdGhpcyBpbnN0YW5jZSByZXByZXNlbnRzLlxuICogQHBhcmFtIHsoU2VydmVyfFJlcGxTZXR8TW9uZ29zKX0gdG9wb2xvZ3kgVGhlIHNlcnZlciB0b3BvbG9neSBmb3IgdGhlIGRhdGFiYXNlLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBPcHRpb25hbCBzZXR0aW5ncy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5hdXRoU291cmNlXSBJZiB0aGUgZGF0YWJhc2UgYXV0aGVudGljYXRpb24gaXMgZGVwZW5kZW50IG9uIGFub3RoZXIgZGF0YWJhc2VOYW1lLlxuICogQHBhcmFtIHsobnVtYmVyfHN0cmluZyl9IFtvcHRpb25zLnddIFRoZSB3cml0ZSBjb25jZXJuLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnd0aW1lb3V0XSBUaGUgd3JpdGUgY29uY2VybiB0aW1lb3V0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5qPWZhbHNlXSBTcGVjaWZ5IGEgam91cm5hbCB3cml0ZSBjb25jZXJuLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5mb3JjZVNlcnZlck9iamVjdElkPWZhbHNlXSBGb3JjZSBzZXJ2ZXIgdG8gYXNzaWduIF9pZCB2YWx1ZXMgaW5zdGVhZCBvZiBkcml2ZXIuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnNlcmlhbGl6ZUZ1bmN0aW9ucz1mYWxzZV0gU2VyaWFsaXplIGZ1bmN0aW9ucyBvbiBhbnkgb2JqZWN0LlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5pZ25vcmVVbmRlZmluZWQ9ZmFsc2VdIFNwZWNpZnkgaWYgdGhlIEJTT04gc2VyaWFsaXplciBzaG91bGQgaWdub3JlIHVuZGVmaW5lZCBmaWVsZHMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnJhdz1mYWxzZV0gUmV0dXJuIGRvY3VtZW50IHJlc3VsdHMgYXMgcmF3IEJTT04gYnVmZmVycy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucHJvbW90ZUxvbmdzPXRydWVdIFByb21vdGVzIExvbmcgdmFsdWVzIHRvIG51bWJlciBpZiB0aGV5IGZpdCBpbnNpZGUgdGhlIDUzIGJpdHMgcmVzb2x1dGlvbi5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucHJvbW90ZUJ1ZmZlcnM9ZmFsc2VdIFByb21vdGVzIEJpbmFyeSBCU09OIHZhbHVlcyB0byBuYXRpdmUgTm9kZSBCdWZmZXJzLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5wcm9tb3RlVmFsdWVzPXRydWVdIFByb21vdGVzIEJTT04gdmFsdWVzIHRvIG5hdGl2ZSB0eXBlcyB3aGVyZSBwb3NzaWJsZSwgc2V0IHRvIGZhbHNlIHRvIG9ubHkgcmVjZWl2ZSB3cmFwcGVyIHR5cGVzLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmJ1ZmZlck1heEVudHJpZXM9LTFdIFNldHMgYSBjYXAgb24gaG93IG1hbnkgb3BlcmF0aW9ucyB0aGUgZHJpdmVyIHdpbGwgYnVmZmVyIHVwIGJlZm9yZSBnaXZpbmcgdXAgb24gZ2V0dGluZyBhIHdvcmtpbmcgY29ubmVjdGlvbiwgZGVmYXVsdCBpcyAtMSB3aGljaCBpcyB1bmxpbWl0ZWQuXG4gKiBAcGFyYW0geyhSZWFkUHJlZmVyZW5jZXxzdHJpbmcpfSBbb3B0aW9ucy5yZWFkUHJlZmVyZW5jZV0gVGhlIHByZWZlcnJlZCByZWFkIHByZWZlcmVuY2UgKFJlYWRQcmVmZXJlbmNlLlBSSU1BUlksIFJlYWRQcmVmZXJlbmNlLlBSSU1BUllfUFJFRkVSUkVELCBSZWFkUHJlZmVyZW5jZS5TRUNPTkRBUlksIFJlYWRQcmVmZXJlbmNlLlNFQ09OREFSWV9QUkVGRVJSRUQsIFJlYWRQcmVmZXJlbmNlLk5FQVJFU1QpLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLnBrRmFjdG9yeV0gQSBwcmltYXJ5IGtleSBmYWN0b3J5IG9iamVjdCBmb3IgZ2VuZXJhdGlvbiBvZiBjdXN0b20gX2lkIGtleXMuXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMucHJvbWlzZUxpYnJhcnldIEEgUHJvbWlzZSBsaWJyYXJ5IGNsYXNzIHRoZSBhcHBsaWNhdGlvbiB3aXNoZXMgdG8gdXNlIHN1Y2ggYXMgQmx1ZWJpcmQsIG11c3QgYmUgRVM2IGNvbXBhdGlibGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5yZWFkQ29uY2Vybl0gU3BlY2lmeSBhIHJlYWQgY29uY2VybiBmb3IgdGhlIGNvbGxlY3Rpb24uIChvbmx5IE1vbmdvREIgMy4yIG9yIGhpZ2hlciBzdXBwb3J0ZWQpXG4gKiBAcGFyYW0ge1JlYWRDb25jZXJuTGV2ZWx9IFtvcHRpb25zLnJlYWRDb25jZXJuLmxldmVsPSdsb2NhbCddIFNwZWNpZnkgYSByZWFkIGNvbmNlcm4gbGV2ZWwgZm9yIHRoZSBjb2xsZWN0aW9uIG9wZXJhdGlvbnMgKG9ubHkgTW9uZ29EQiAzLjIgb3IgaGlnaGVyIHN1cHBvcnRlZClcbiAqIEBwcm9wZXJ0eSB7KFNlcnZlcnxSZXBsU2V0fE1vbmdvcyl9IHNlcnZlckNvbmZpZyBHZXQgdGhlIGN1cnJlbnQgZGIgdG9wb2xvZ3kuXG4gKiBAcHJvcGVydHkge251bWJlcn0gYnVmZmVyTWF4RW50cmllcyBDdXJyZW50IGJ1ZmZlck1heEVudHJpZXMgdmFsdWUgZm9yIHRoZSBkYXRhYmFzZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRhdGFiYXNlTmFtZSBUaGUgbmFtZSBvZiB0aGUgZGF0YWJhc2UgdGhpcyBpbnN0YW5jZSByZXByZXNlbnRzLlxuICogQHByb3BlcnR5IHtvYmplY3R9IG9wdGlvbnMgVGhlIG9wdGlvbnMgYXNzb2NpYXRlZCB3aXRoIHRoZSBkYiBpbnN0YW5jZS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gbmF0aXZlX3BhcnNlciBUaGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgcGFyYW1ldGVyIG5hdGl2ZV9wYXJzZXIuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHNsYXZlT2sgVGhlIGN1cnJlbnQgc2xhdmVPayB2YWx1ZSBmb3IgdGhlIGRiIGluc3RhbmNlLlxuICogQHByb3BlcnR5IHtvYmplY3R9IHdyaXRlQ29uY2VybiBUaGUgY3VycmVudCB3cml0ZSBjb25jZXJuIHZhbHVlcy5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSB0b3BvbG9neSBBY2Nlc3MgdGhlIHRvcG9sb2d5IG9iamVjdCAoc2luZ2xlIHNlcnZlciwgcmVwbGljYXNldCBvciBtb25nb3MpLlxuICogQGZpcmVzIERiI2Nsb3NlXG4gKiBAZmlyZXMgRGIjcmVjb25uZWN0XG4gKiBAZmlyZXMgRGIjZXJyb3JcbiAqIEBmaXJlcyBEYiN0aW1lb3V0XG4gKiBAZmlyZXMgRGIjcGFyc2VFcnJvclxuICogQGZpcmVzIERiI2Z1bGxzZXR1cFxuICogQHJldHVybiB7RGJ9IGEgRGIgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIERiKGRhdGFiYXNlTmFtZSwgdG9wb2xvZ3ksIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEYikpIHJldHVybiBuZXcgRGIoZGF0YWJhc2VOYW1lLCB0b3BvbG9neSwgb3B0aW9ucyk7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gIC8vIEdldCB0aGUgcHJvbWlzZUxpYnJhcnlcbiAgY29uc3QgcHJvbWlzZUxpYnJhcnkgPSBvcHRpb25zLnByb21pc2VMaWJyYXJ5IHx8IFByb21pc2U7XG5cbiAgLy8gRmlsdGVyIHRoZSBvcHRpb25zXG4gIG9wdGlvbnMgPSBmaWx0ZXJPcHRpb25zKG9wdGlvbnMsIGxlZ2FsT3B0aW9uTmFtZXMpO1xuXG4gIC8vIEVuc3VyZSB3ZSBwdXQgdGhlIHByb21pc2VMaWIgaW4gdGhlIG9wdGlvbnNcbiAgb3B0aW9ucy5wcm9taXNlTGlicmFyeSA9IHByb21pc2VMaWJyYXJ5O1xuXG4gIC8vIEludGVybmFsIHN0YXRlIG9mIHRoZSBkYiBvYmplY3RcbiAgdGhpcy5zID0ge1xuICAgIC8vIERiQ2FjaGVcbiAgICBkYkNhY2hlOiB7fSxcbiAgICAvLyBDaGlsZHJlbiBkYidzXG4gICAgY2hpbGRyZW46IFtdLFxuICAgIC8vIFRvcG9sb2d5XG4gICAgdG9wb2xvZ3k6IHRvcG9sb2d5LFxuICAgIC8vIE9wdGlvbnNcbiAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgIC8vIExvZ2dlciBpbnN0YW5jZVxuICAgIGxvZ2dlcjogTG9nZ2VyKCdEYicsIG9wdGlvbnMpLFxuICAgIC8vIEdldCB0aGUgYnNvbiBwYXJzZXJcbiAgICBic29uOiB0b3BvbG9neSA/IHRvcG9sb2d5LmJzb24gOiBudWxsLFxuICAgIC8vIFVucGFjayByZWFkIHByZWZlcmVuY2VcbiAgICByZWFkUHJlZmVyZW5jZTogUmVhZFByZWZlcmVuY2UuZnJvbU9wdGlvbnMob3B0aW9ucyksXG4gICAgLy8gU2V0IGJ1ZmZlcm1heEVudHJpZXNcbiAgICBidWZmZXJNYXhFbnRyaWVzOiB0eXBlb2Ygb3B0aW9ucy5idWZmZXJNYXhFbnRyaWVzID09PSAnbnVtYmVyJyA/IG9wdGlvbnMuYnVmZmVyTWF4RW50cmllcyA6IC0xLFxuICAgIC8vIFBhcmVudCBkYiAoaWYgY2hhaW5lZClcbiAgICBwYXJlbnREYjogb3B0aW9ucy5wYXJlbnREYiB8fCBudWxsLFxuICAgIC8vIFNldCB1cCB0aGUgcHJpbWFyeSBrZXkgZmFjdG9yeSBvciBmYWxsYmFjayB0byBPYmplY3RJRFxuICAgIHBrRmFjdG9yeTogb3B0aW9ucy5wa0ZhY3RvcnkgfHwgT2JqZWN0SUQsXG4gICAgLy8gR2V0IG5hdGl2ZSBwYXJzZXJcbiAgICBuYXRpdmVQYXJzZXI6IG9wdGlvbnMubmF0aXZlUGFyc2VyIHx8IG9wdGlvbnMubmF0aXZlX3BhcnNlcixcbiAgICAvLyBQcm9taXNlIGxpYnJhcnlcbiAgICBwcm9taXNlTGlicmFyeTogcHJvbWlzZUxpYnJhcnksXG4gICAgLy8gTm8gbGlzdGVuZXJcbiAgICBub0xpc3RlbmVyOiB0eXBlb2Ygb3B0aW9ucy5ub0xpc3RlbmVyID09PSAnYm9vbGVhbicgPyBvcHRpb25zLm5vTGlzdGVuZXIgOiBmYWxzZSxcbiAgICAvLyBSZWFkQ29uY2VyblxuICAgIHJlYWRDb25jZXJuOiBSZWFkQ29uY2Vybi5mcm9tT3B0aW9ucyhvcHRpb25zKSxcbiAgICB3cml0ZUNvbmNlcm46IFdyaXRlQ29uY2Vybi5mcm9tT3B0aW9ucyhvcHRpb25zKSxcbiAgICAvLyBOYW1lc3BhY2VcbiAgICBuYW1lc3BhY2U6IG5ldyBNb25nb0RCTmFtZXNwYWNlKGRhdGFiYXNlTmFtZSlcbiAgfTtcblxuICAvLyBFbnN1cmUgd2UgaGF2ZSBhIHZhbGlkIGRiIG5hbWVcbiAgdmFsaWRhdGVEYXRhYmFzZU5hbWUoZGF0YWJhc2VOYW1lKTtcblxuICAvLyBBZGQgYSByZWFkIE9ubHkgcHJvcGVydHlcbiAgZ2V0U2luZ2xlUHJvcGVydHkodGhpcywgJ3NlcnZlckNvbmZpZycsIHRoaXMucy50b3BvbG9neSk7XG4gIGdldFNpbmdsZVByb3BlcnR5KHRoaXMsICdidWZmZXJNYXhFbnRyaWVzJywgdGhpcy5zLmJ1ZmZlck1heEVudHJpZXMpO1xuICBnZXRTaW5nbGVQcm9wZXJ0eSh0aGlzLCAnZGF0YWJhc2VOYW1lJywgdGhpcy5zLm5hbWVzcGFjZS5kYik7XG5cbiAgLy8gVGhpcyBpcyBhIGNoaWxkIGRiLCBkbyBub3QgcmVnaXN0ZXIgYW55IGxpc3RlbmVyc1xuICBpZiAob3B0aW9ucy5wYXJlbnREYikgcmV0dXJuO1xuICBpZiAodGhpcy5zLm5vTGlzdGVuZXIpIHJldHVybjtcblxuICAvLyBBZGQgbGlzdGVuZXJzXG4gIHRvcG9sb2d5Lm9uKCdlcnJvcicsIGNyZWF0ZUxpc3RlbmVyKHRoaXMsICdlcnJvcicsIHRoaXMpKTtcbiAgdG9wb2xvZ3kub24oJ3RpbWVvdXQnLCBjcmVhdGVMaXN0ZW5lcih0aGlzLCAndGltZW91dCcsIHRoaXMpKTtcbiAgdG9wb2xvZ3kub24oJ2Nsb3NlJywgY3JlYXRlTGlzdGVuZXIodGhpcywgJ2Nsb3NlJywgdGhpcykpO1xuICB0b3BvbG9neS5vbigncGFyc2VFcnJvcicsIGNyZWF0ZUxpc3RlbmVyKHRoaXMsICdwYXJzZUVycm9yJywgdGhpcykpO1xuICB0b3BvbG9neS5vbmNlKCdvcGVuJywgY3JlYXRlTGlzdGVuZXIodGhpcywgJ29wZW4nLCB0aGlzKSk7XG4gIHRvcG9sb2d5Lm9uY2UoJ2Z1bGxzZXR1cCcsIGNyZWF0ZUxpc3RlbmVyKHRoaXMsICdmdWxsc2V0dXAnLCB0aGlzKSk7XG4gIHRvcG9sb2d5Lm9uY2UoJ2FsbCcsIGNyZWF0ZUxpc3RlbmVyKHRoaXMsICdhbGwnLCB0aGlzKSk7XG4gIHRvcG9sb2d5Lm9uKCdyZWNvbm5lY3QnLCBjcmVhdGVMaXN0ZW5lcih0aGlzLCAncmVjb25uZWN0JywgdGhpcykpO1xufVxuXG5pbmhlcml0cyhEYiwgRXZlbnRFbWl0dGVyKTtcblxuLy8gVG9wb2xvZ3lcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEYi5wcm90b3R5cGUsICd0b3BvbG9neScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zLnRvcG9sb2d5O1xuICB9XG59KTtcblxuLy8gT3B0aW9uc1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KERiLnByb3RvdHlwZSwgJ29wdGlvbnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucy5vcHRpb25zO1xuICB9XG59KTtcblxuLy8gc2xhdmVPayBzcGVjaWZpZWRcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEYi5wcm90b3R5cGUsICdzbGF2ZU9rJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmIChcbiAgICAgIHRoaXMucy5vcHRpb25zLnJlYWRQcmVmZXJlbmNlICE9IG51bGwgJiZcbiAgICAgICh0aGlzLnMub3B0aW9ucy5yZWFkUHJlZmVyZW5jZSAhPT0gJ3ByaW1hcnknIHx8XG4gICAgICAgIHRoaXMucy5vcHRpb25zLnJlYWRQcmVmZXJlbmNlLm1vZGUgIT09ICdwcmltYXJ5JylcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRGIucHJvdG90eXBlLCAncmVhZENvbmNlcm4nLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucy5yZWFkQ29uY2VybjtcbiAgfVxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEYi5wcm90b3R5cGUsICdyZWFkUHJlZmVyZW5jZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5zLnJlYWRQcmVmZXJlbmNlID09IG51bGwpIHtcbiAgICAgIC8vIFRPRE86IGNoZWNrIGNsaWVudFxuICAgICAgcmV0dXJuIFJlYWRQcmVmZXJlbmNlLnByaW1hcnk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucy5yZWFkUHJlZmVyZW5jZTtcbiAgfVxufSk7XG5cbi8vIGdldCB0aGUgd3JpdGUgQ29uY2VyblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KERiLnByb3RvdHlwZSwgJ3dyaXRlQ29uY2VybicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zLndyaXRlQ29uY2VybjtcbiAgfVxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEYi5wcm90b3R5cGUsICduYW1lc3BhY2UnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucy5uYW1lc3BhY2UudG9TdHJpbmcoKTtcbiAgfVxufSk7XG5cbi8qKlxuICogRXhlY3V0ZSBhIGNvbW1hbmRcbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb21tYW5kIFRoZSBjb21tYW5kIGhhc2hcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gT3B0aW9uYWwgc2V0dGluZ3MuXG4gKiBAcGFyYW0geyhSZWFkUHJlZmVyZW5jZXxzdHJpbmcpfSBbb3B0aW9ucy5yZWFkUHJlZmVyZW5jZV0gVGhlIHByZWZlcnJlZCByZWFkIHByZWZlcmVuY2UgKFJlYWRQcmVmZXJlbmNlLlBSSU1BUlksIFJlYWRQcmVmZXJlbmNlLlBSSU1BUllfUFJFRkVSUkVELCBSZWFkUHJlZmVyZW5jZS5TRUNPTkRBUlksIFJlYWRQcmVmZXJlbmNlLlNFQ09OREFSWV9QUkVGRVJSRUQsIFJlYWRQcmVmZXJlbmNlLk5FQVJFU1QpLlxuICogQHBhcmFtIHtDbGllbnRTZXNzaW9ufSBbb3B0aW9ucy5zZXNzaW9uXSBvcHRpb25hbCBzZXNzaW9uIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb25cbiAqIEBwYXJhbSB7RGJ+cmVzdWx0Q2FsbGJhY2t9IFtjYWxsYmFja10gVGhlIGNvbW1hbmQgcmVzdWx0IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIFByb21pc2UgaWYgbm8gY2FsbGJhY2sgcGFzc2VkXG4gKi9cbkRiLnByb3RvdHlwZS5jb21tYW5kID0gZnVuY3Rpb24oY29tbWFuZCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSAoY2FsbGJhY2sgPSBvcHRpb25zKSwgKG9wdGlvbnMgPSB7fSk7XG4gIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcblxuICBjb25zdCBjb21tYW5kT3BlcmF0aW9uID0gbmV3IENvbW1hbmRPcGVyYXRpb24odGhpcywgb3B0aW9ucywgbnVsbCwgY29tbWFuZCk7XG5cbiAgcmV0dXJuIGV4ZWN1dGVPcGVyYXRpb24odGhpcy5zLnRvcG9sb2d5LCBjb21tYW5kT3BlcmF0aW9uLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIEV4ZWN1dGUgYW4gYWdncmVnYXRpb24gZnJhbWV3b3JrIHBpcGVsaW5lIGFnYWluc3QgdGhlIGRhdGFiYXNlLCBuZWVkcyBNb25nb0RCID49IDMuNlxuICogQG1ldGhvZFxuICogQHBhcmFtIHtvYmplY3R9IFtwaXBlbGluZT1bXV0gQXJyYXkgY29udGFpbmluZyBhbGwgdGhlIGFnZ3JlZ2F0aW9uIGZyYW1ld29yayBjb21tYW5kcyBmb3IgdGhlIGV4ZWN1dGlvbi5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gT3B0aW9uYWwgc2V0dGluZ3MuXG4gKiBAcGFyYW0geyhSZWFkUHJlZmVyZW5jZXxzdHJpbmcpfSBbb3B0aW9ucy5yZWFkUHJlZmVyZW5jZV0gVGhlIHByZWZlcnJlZCByZWFkIHByZWZlcmVuY2UgKFJlYWRQcmVmZXJlbmNlLlBSSU1BUlksIFJlYWRQcmVmZXJlbmNlLlBSSU1BUllfUFJFRkVSUkVELCBSZWFkUHJlZmVyZW5jZS5TRUNPTkRBUlksIFJlYWRQcmVmZXJlbmNlLlNFQ09OREFSWV9QUkVGRVJSRUQsIFJlYWRQcmVmZXJlbmNlLk5FQVJFU1QpLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLmN1cnNvcl0gUmV0dXJuIHRoZSBxdWVyeSBhcyBjdXJzb3IsIG9uIDIuNiA+IGl0IHJldHVybnMgYXMgYSByZWFsIGN1cnNvciBvbiBwcmUgMi42IGl0IHJldHVybnMgYXMgYW4gZW11bGF0ZWQgY3Vyc29yLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmN1cnNvci5iYXRjaFNpemU9MTAwMF0gVGhlIG51bWJlciBvZiBkb2N1bWVudHMgdG8gcmV0dXJuIHBlciBiYXRjaC4gU2VlIHtAbGluayBodHRwczovL2RvY3MubW9uZ29kYi5jb20vbWFudWFsL3JlZmVyZW5jZS9jb21tYW5kL2FnZ3JlZ2F0ZXxhZ2dyZWdhdGlvbiBkb2N1bWVudGF0aW9ufS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZXhwbGFpbj1mYWxzZV0gRXhwbGFpbiByZXR1cm5zIHRoZSBhZ2dyZWdhdGlvbiBleGVjdXRpb24gcGxhbiAocmVxdWlyZXMgbW9uZ29kYiAyLjYgPikuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmFsbG93RGlza1VzZT1mYWxzZV0gYWxsb3dEaXNrVXNlIGxldHMgdGhlIHNlcnZlciBrbm93IGlmIGl0IGNhbiB1c2UgZGlzayB0byBzdG9yZSB0ZW1wb3JhcnkgcmVzdWx0cyBmb3IgdGhlIGFnZ3JlZ2F0aW9uIChyZXF1aXJlcyBtb25nb2RiIDIuNiA+KS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhUaW1lTVNdIG1heFRpbWVNUyBzcGVjaWZpZXMgYSBjdW11bGF0aXZlIHRpbWUgbGltaXQgaW4gbWlsbGlzZWNvbmRzIGZvciBwcm9jZXNzaW5nIG9wZXJhdGlvbnMgb24gdGhlIGN1cnNvci4gTW9uZ29EQiBpbnRlcnJ1cHRzIHRoZSBvcGVyYXRpb24gYXQgdGhlIGVhcmxpZXN0IGZvbGxvd2luZyBpbnRlcnJ1cHQgcG9pbnQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmJ5cGFzc0RvY3VtZW50VmFsaWRhdGlvbj1mYWxzZV0gQWxsb3cgZHJpdmVyIHRvIGJ5cGFzcyBzY2hlbWEgdmFsaWRhdGlvbiBpbiBNb25nb0RCIDMuMiBvciBoaWdoZXIuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnJhdz1mYWxzZV0gUmV0dXJuIGRvY3VtZW50IHJlc3VsdHMgYXMgcmF3IEJTT04gYnVmZmVycy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucHJvbW90ZUxvbmdzPXRydWVdIFByb21vdGVzIExvbmcgdmFsdWVzIHRvIG51bWJlciBpZiB0aGV5IGZpdCBpbnNpZGUgdGhlIDUzIGJpdHMgcmVzb2x1dGlvbi5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucHJvbW90ZVZhbHVlcz10cnVlXSBQcm9tb3RlcyBCU09OIHZhbHVlcyB0byBuYXRpdmUgdHlwZXMgd2hlcmUgcG9zc2libGUsIHNldCB0byBmYWxzZSB0byBvbmx5IHJlY2VpdmUgd3JhcHBlciB0eXBlcy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucHJvbW90ZUJ1ZmZlcnM9ZmFsc2VdIFByb21vdGVzIEJpbmFyeSBCU09OIHZhbHVlcyB0byBuYXRpdmUgTm9kZSBCdWZmZXJzLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLmNvbGxhdGlvbl0gU3BlY2lmeSBjb2xsYXRpb24gKE1vbmdvREIgMy40IG9yIGhpZ2hlcikgc2V0dGluZ3MgZm9yIHVwZGF0ZSBvcGVyYXRpb24gKHNlZSAzLjQgZG9jdW1lbnRhdGlvbiBmb3IgYXZhaWxhYmxlIGZpZWxkcykuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuY29tbWVudF0gQWRkIGEgY29tbWVudCB0byBhbiBhZ2dyZWdhdGlvbiBjb21tYW5kXG4gKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IFtvcHRpb25zLmhpbnRdIEFkZCBhbiBpbmRleCBzZWxlY3Rpb24gaGludCB0byBhbiBhZ2dyZWdhdGlvbiBjb21tYW5kXG4gKiBAcGFyYW0ge0NsaWVudFNlc3Npb259IFtvcHRpb25zLnNlc3Npb25dIG9wdGlvbmFsIHNlc3Npb24gdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvblxuICogQHBhcmFtIHtEYXRhYmFzZX5hZ2dyZWdhdGlvbkNhbGxiYWNrfSBjYWxsYmFjayBUaGUgY29tbWFuZCByZXN1bHQgY2FsbGJhY2tcbiAqIEByZXR1cm4geyhudWxsfEFnZ3JlZ2F0aW9uQ3Vyc29yKX1cbiAqL1xuRGIucHJvdG90eXBlLmFnZ3JlZ2F0ZSA9IGZ1bmN0aW9uKHBpcGVsaW5lLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgLy8gSWYgd2UgaGF2ZSBubyBvcHRpb25zIG9yIGNhbGxiYWNrIHdlIGFyZSBkb2luZ1xuICAvLyBhIGN1cnNvciBiYXNlZCBhZ2dyZWdhdGlvblxuICBpZiAob3B0aW9ucyA9PSBudWxsICYmIGNhbGxiYWNrID09IG51bGwpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBjb25zdCBjdXJzb3IgPSBuZXcgQWdncmVnYXRpb25DdXJzb3IoXG4gICAgdGhpcy5zLnRvcG9sb2d5LFxuICAgIG5ldyBBZ2dyZWdhdGVPcGVyYXRpb24odGhpcywgcGlwZWxpbmUsIG9wdGlvbnMpLFxuICAgIG9wdGlvbnNcbiAgKTtcblxuICAvLyBUT0RPOiByZW1vdmUgdGhpcyB3aGVuIE5PREUtMjA3NCBpcyByZXNvbHZlZFxuICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sobnVsbCwgY3Vyc29yKTtcbiAgICByZXR1cm47XG4gIH1cblxuICByZXR1cm4gY3Vyc29yO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIEFkbWluIGRiIGluc3RhbmNlXG4gKiBAbWV0aG9kXG4gKiBAcmV0dXJuIHtBZG1pbn0gcmV0dXJuIHRoZSBuZXcgQWRtaW4gZGIgaW5zdGFuY2VcbiAqL1xuRGIucHJvdG90eXBlLmFkbWluID0gZnVuY3Rpb24oKSB7XG4gIGNvbnN0IEFkbWluID0gcmVxdWlyZSgnLi9hZG1pbicpO1xuXG4gIHJldHVybiBuZXcgQWRtaW4odGhpcywgdGhpcy5zLnRvcG9sb2d5LCB0aGlzLnMucHJvbWlzZUxpYnJhcnkpO1xufTtcblxuLyoqXG4gKiBUaGUgY2FsbGJhY2sgZm9ybWF0IGZvciB0aGUgY29sbGVjdGlvbiBtZXRob2QsIG11c3QgYmUgdXNlZCBpZiBzdHJpY3QgaXMgc3BlY2lmaWVkXG4gKiBAY2FsbGJhY2sgRGJ+Y29sbGVjdGlvblJlc3VsdENhbGxiYWNrXG4gKiBAcGFyYW0ge01vbmdvRXJyb3J9IGVycm9yIEFuIGVycm9yIGluc3RhbmNlIHJlcHJlc2VudGluZyB0aGUgZXJyb3IgZHVyaW5nIHRoZSBleGVjdXRpb24uXG4gKiBAcGFyYW0ge0NvbGxlY3Rpb259IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gaW5zdGFuY2UuXG4gKi9cblxuLyoqXG4gKiBUaGUgY2FsbGJhY2sgZm9ybWF0IGZvciBhbiBhZ2dyZWdhdGlvbiBjYWxsXG4gKiBAY2FsbGJhY2sgRGF0YWJhc2V+YWdncmVnYXRpb25DYWxsYmFja1xuICogQHBhcmFtIHtNb25nb0Vycm9yfSBlcnJvciBBbiBlcnJvciBpbnN0YW5jZSByZXByZXNlbnRpbmcgdGhlIGVycm9yIGR1cmluZyB0aGUgZXhlY3V0aW9uLlxuICogQHBhcmFtIHtBZ2dyZWdhdGlvbkN1cnNvcn0gY3Vyc29yIFRoZSBjdXJzb3IgaWYgdGhlIGFnZ3JlZ2F0aW9uIGNvbW1hbmQgd2FzIGV4ZWN1dGVkIHN1Y2Nlc3NmdWxseS5cbiAqL1xuXG5jb25zdCBjb2xsZWN0aW9uS2V5cyA9IFtcbiAgJ3BrRmFjdG9yeScsXG4gICdyZWFkUHJlZmVyZW5jZScsXG4gICdzZXJpYWxpemVGdW5jdGlvbnMnLFxuICAnc3RyaWN0JyxcbiAgJ3JlYWRDb25jZXJuJyxcbiAgJ2lnbm9yZVVuZGVmaW5lZCcsXG4gICdwcm9tb3RlVmFsdWVzJyxcbiAgJ3Byb21vdGVCdWZmZXJzJyxcbiAgJ3Byb21vdGVMb25ncydcbl07XG5cbi8qKlxuICogRmV0Y2ggYSBzcGVjaWZpYyBjb2xsZWN0aW9uIChjb250YWluaW5nIHRoZSBhY3R1YWwgY29sbGVjdGlvbiBpbmZvcm1hdGlvbikuIElmIHRoZSBhcHBsaWNhdGlvbiBkb2VzIG5vdCB1c2Ugc3RyaWN0IG1vZGUgeW91XG4gKiBjYW4gdXNlIGl0IHdpdGhvdXQgYSBjYWxsYmFjayBpbiB0aGUgZm9sbG93aW5nIHdheTogYGNvbnN0IGNvbGxlY3Rpb24gPSBkYi5jb2xsZWN0aW9uKCdteWNvbGxlY3Rpb24nKTtgXG4gKlxuICogQG1ldGhvZFxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgdGhlIGNvbGxlY3Rpb24gbmFtZSB3ZSB3aXNoIHRvIGFjY2Vzcy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gT3B0aW9uYWwgc2V0dGluZ3MuXG4gKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nKX0gW29wdGlvbnMud10gVGhlIHdyaXRlIGNvbmNlcm4uXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMud3RpbWVvdXRdIFRoZSB3cml0ZSBjb25jZXJuIHRpbWVvdXQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmo9ZmFsc2VdIFNwZWNpZnkgYSBqb3VybmFsIHdyaXRlIGNvbmNlcm4uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnJhdz1mYWxzZV0gUmV0dXJuIGRvY3VtZW50IHJlc3VsdHMgYXMgcmF3IEJTT04gYnVmZmVycy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5wa0ZhY3RvcnldIEEgcHJpbWFyeSBrZXkgZmFjdG9yeSBvYmplY3QgZm9yIGdlbmVyYXRpb24gb2YgY3VzdG9tIF9pZCBrZXlzLlxuICogQHBhcmFtIHsoUmVhZFByZWZlcmVuY2V8c3RyaW5nKX0gW29wdGlvbnMucmVhZFByZWZlcmVuY2VdIFRoZSBwcmVmZXJyZWQgcmVhZCBwcmVmZXJlbmNlIChSZWFkUHJlZmVyZW5jZS5QUklNQVJZLCBSZWFkUHJlZmVyZW5jZS5QUklNQVJZX1BSRUZFUlJFRCwgUmVhZFByZWZlcmVuY2UuU0VDT05EQVJZLCBSZWFkUHJlZmVyZW5jZS5TRUNPTkRBUllfUFJFRkVSUkVELCBSZWFkUHJlZmVyZW5jZS5ORUFSRVNUKS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuc2VyaWFsaXplRnVuY3Rpb25zPWZhbHNlXSBTZXJpYWxpemUgZnVuY3Rpb25zIG9uIGFueSBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnN0cmljdD1mYWxzZV0gUmV0dXJucyBhbiBlcnJvciBpZiB0aGUgY29sbGVjdGlvbiBkb2VzIG5vdCBleGlzdFxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLnJlYWRDb25jZXJuXSBTcGVjaWZ5IGEgcmVhZCBjb25jZXJuIGZvciB0aGUgY29sbGVjdGlvbi4gKG9ubHkgTW9uZ29EQiAzLjIgb3IgaGlnaGVyIHN1cHBvcnRlZClcbiAqIEBwYXJhbSB7UmVhZENvbmNlcm5MZXZlbH0gW29wdGlvbnMucmVhZENvbmNlcm4ubGV2ZWw9J2xvY2FsJ10gU3BlY2lmeSBhIHJlYWQgY29uY2VybiBsZXZlbCBmb3IgdGhlIGNvbGxlY3Rpb24gb3BlcmF0aW9ucyAob25seSBNb25nb0RCIDMuMiBvciBoaWdoZXIgc3VwcG9ydGVkKVxuICogQHBhcmFtIHtEYn5jb2xsZWN0aW9uUmVzdWx0Q2FsbGJhY2t9IFtjYWxsYmFja10gVGhlIGNvbGxlY3Rpb24gcmVzdWx0IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtDb2xsZWN0aW9ufSByZXR1cm4gdGhlIG5ldyBDb2xsZWN0aW9uIGluc3RhbmNlIGlmIG5vdCBpbiBzdHJpY3QgbW9kZVxuICovXG5EYi5wcm90b3R5cGUuY29sbGVjdGlvbiA9IGZ1bmN0aW9uKG5hbWUsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykgKGNhbGxiYWNrID0gb3B0aW9ucyksIChvcHRpb25zID0ge30pO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpO1xuXG4gIC8vIFNldCB0aGUgcHJvbWlzZSBsaWJyYXJ5XG4gIG9wdGlvbnMucHJvbWlzZUxpYnJhcnkgPSB0aGlzLnMucHJvbWlzZUxpYnJhcnk7XG5cbiAgLy8gSWYgd2UgaGF2ZSBub3Qgc2V0IGEgY29sbGVjdGlvbiBsZXZlbCByZWFkQ29uY2VybiBzZXQgdGhlIGRiIGxldmVsIG9uZVxuICBvcHRpb25zLnJlYWRDb25jZXJuID0gb3B0aW9ucy5yZWFkQ29uY2VyblxuICAgID8gbmV3IFJlYWRDb25jZXJuKG9wdGlvbnMucmVhZENvbmNlcm4ubGV2ZWwpXG4gICAgOiB0aGlzLnJlYWRDb25jZXJuO1xuXG4gIC8vIERvIHdlIGhhdmUgaWdub3JlVW5kZWZpbmVkIHNldFxuICBpZiAodGhpcy5zLm9wdGlvbnMuaWdub3JlVW5kZWZpbmVkKSB7XG4gICAgb3B0aW9ucy5pZ25vcmVVbmRlZmluZWQgPSB0aGlzLnMub3B0aW9ucy5pZ25vcmVVbmRlZmluZWQ7XG4gIH1cblxuICAvLyBNZXJnZSBpbiBhbGwgbmVlZGVkIG9wdGlvbnMgYW5kIGVuc3VyZSBjb3JyZWN0IHdyaXRlQ29uY2VybiBtZXJnaW5nIGZyb20gZGIgbGV2ZWxcbiAgb3B0aW9ucyA9IG1lcmdlT3B0aW9uc0FuZFdyaXRlQ29uY2VybihvcHRpb25zLCB0aGlzLnMub3B0aW9ucywgY29sbGVjdGlvbktleXMsIHRydWUpO1xuXG4gIC8vIEV4ZWN1dGVcbiAgaWYgKG9wdGlvbnMgPT0gbnVsbCB8fCAhb3B0aW9ucy5zdHJpY3QpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY29sbGVjdGlvbiA9IG5ldyBDb2xsZWN0aW9uKFxuICAgICAgICB0aGlzLFxuICAgICAgICB0aGlzLnMudG9wb2xvZ3ksXG4gICAgICAgIHRoaXMuZGF0YWJhc2VOYW1lLFxuICAgICAgICBuYW1lLFxuICAgICAgICB0aGlzLnMucGtGYWN0b3J5LFxuICAgICAgICBvcHRpb25zXG4gICAgICApO1xuICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhudWxsLCBjb2xsZWN0aW9uKTtcbiAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIE1vbmdvRXJyb3IgJiYgY2FsbGJhY2spIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuXG4gIC8vIFN0cmljdCBtb2RlXG4gIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyB0b0Vycm9yKGBBIGNhbGxiYWNrIGlzIHJlcXVpcmVkIGluIHN0cmljdCBtb2RlLiBXaGlsZSBnZXR0aW5nIGNvbGxlY3Rpb24gJHtuYW1lfWApO1xuICB9XG5cbiAgLy8gRGlkIHRoZSB1c2VyIGRlc3Ryb3kgdGhlIHRvcG9sb2d5XG4gIGlmICh0aGlzLnNlcnZlckNvbmZpZyAmJiB0aGlzLnNlcnZlckNvbmZpZy5pc0Rlc3Ryb3llZCgpKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBNb25nb0Vycm9yKCd0b3BvbG9neSB3YXMgZGVzdHJveWVkJykpO1xuICB9XG5cbiAgY29uc3QgbGlzdENvbGxlY3Rpb25PcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywgeyBuYW1lT25seTogdHJ1ZSB9KTtcblxuICAvLyBTdHJpY3QgbW9kZVxuICB0aGlzLmxpc3RDb2xsZWN0aW9ucyh7IG5hbWU6IG5hbWUgfSwgbGlzdENvbGxlY3Rpb25PcHRpb25zKS50b0FycmF5KChlcnIsIGNvbGxlY3Rpb25zKSA9PiB7XG4gICAgaWYgKGVyciAhPSBudWxsKSByZXR1cm4gaGFuZGxlQ2FsbGJhY2soY2FsbGJhY2ssIGVyciwgbnVsbCk7XG4gICAgaWYgKGNvbGxlY3Rpb25zLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiBoYW5kbGVDYWxsYmFjayhcbiAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgIHRvRXJyb3IoYENvbGxlY3Rpb24gJHtuYW1lfSBkb2VzIG5vdCBleGlzdC4gQ3VycmVudGx5IGluIHN0cmljdCBtb2RlLmApLFxuICAgICAgICBudWxsXG4gICAgICApO1xuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBoYW5kbGVDYWxsYmFjayhcbiAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgIG51bGwsXG4gICAgICAgIG5ldyBDb2xsZWN0aW9uKHRoaXMsIHRoaXMucy50b3BvbG9neSwgdGhpcy5kYXRhYmFzZU5hbWUsIG5hbWUsIHRoaXMucy5wa0ZhY3RvcnksIG9wdGlvbnMpXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKGNhbGxiYWNrLCBlcnIsIG51bGwpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBjb2xsZWN0aW9uIG9uIGEgc2VydmVyIHdpdGggdGhlIHNwZWNpZmllZCBvcHRpb25zLiBVc2UgdGhpcyB0byBjcmVhdGUgY2FwcGVkIGNvbGxlY3Rpb25zLlxuICogTW9yZSBpbmZvcm1hdGlvbiBhYm91dCBjb21tYW5kIG9wdGlvbnMgYXZhaWxhYmxlIGF0IGh0dHBzOi8vZG9jcy5tb25nb2RiLmNvbS9tYW51YWwvcmVmZXJlbmNlL2NvbW1hbmQvY3JlYXRlL1xuICpcbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHRoZSBjb2xsZWN0aW9uIG5hbWUgd2Ugd2lzaCB0byBhY2Nlc3MuXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIE9wdGlvbmFsIHNldHRpbmdzLlxuICogQHBhcmFtIHsobnVtYmVyfHN0cmluZyl9IFtvcHRpb25zLnddIFRoZSB3cml0ZSBjb25jZXJuLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnd0aW1lb3V0XSBUaGUgd3JpdGUgY29uY2VybiB0aW1lb3V0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5qPWZhbHNlXSBTcGVjaWZ5IGEgam91cm5hbCB3cml0ZSBjb25jZXJuLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yYXc9ZmFsc2VdIFJldHVybiBkb2N1bWVudCByZXN1bHRzIGFzIHJhdyBCU09OIGJ1ZmZlcnMuXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMucGtGYWN0b3J5XSBBIHByaW1hcnkga2V5IGZhY3Rvcnkgb2JqZWN0IGZvciBnZW5lcmF0aW9uIG9mIGN1c3RvbSBfaWQga2V5cy5cbiAqIEBwYXJhbSB7KFJlYWRQcmVmZXJlbmNlfHN0cmluZyl9IFtvcHRpb25zLnJlYWRQcmVmZXJlbmNlXSBUaGUgcHJlZmVycmVkIHJlYWQgcHJlZmVyZW5jZSAoUmVhZFByZWZlcmVuY2UuUFJJTUFSWSwgUmVhZFByZWZlcmVuY2UuUFJJTUFSWV9QUkVGRVJSRUQsIFJlYWRQcmVmZXJlbmNlLlNFQ09OREFSWSwgUmVhZFByZWZlcmVuY2UuU0VDT05EQVJZX1BSRUZFUlJFRCwgUmVhZFByZWZlcmVuY2UuTkVBUkVTVCkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnNlcmlhbGl6ZUZ1bmN0aW9ucz1mYWxzZV0gU2VyaWFsaXplIGZ1bmN0aW9ucyBvbiBhbnkgb2JqZWN0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5zdHJpY3Q9ZmFsc2VdIFJldHVybnMgYW4gZXJyb3IgaWYgdGhlIGNvbGxlY3Rpb24gZG9lcyBub3QgZXhpc3RcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY2FwcGVkPWZhbHNlXSBDcmVhdGUgYSBjYXBwZWQgY29sbGVjdGlvbi5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuYXV0b0luZGV4SWQ9dHJ1ZV0gREVQUkVDQVRFRDogQ3JlYXRlIGFuIGluZGV4IG9uIHRoZSBfaWQgZmllbGQgb2YgdGhlIGRvY3VtZW50LCBUcnVlIGJ5IGRlZmF1bHQgb24gTW9uZ29EQiAyLjYgLSAzLjBcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5zaXplXSBUaGUgc2l6ZSBvZiB0aGUgY2FwcGVkIGNvbGxlY3Rpb24gaW4gYnl0ZXMuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4XSBUaGUgbWF4aW11bSBudW1iZXIgb2YgZG9jdW1lbnRzIGluIHRoZSBjYXBwZWQgY29sbGVjdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5mbGFnc10gT3B0aW9uYWwuIEF2YWlsYWJsZSBmb3IgdGhlIE1NQVB2MSBzdG9yYWdlIGVuZ2luZSBvbmx5IHRvIHNldCB0aGUgdXNlUG93ZXJPZjJTaXplcyBhbmQgdGhlIG5vUGFkZGluZyBmbGFnLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLnN0b3JhZ2VFbmdpbmVdIEFsbG93cyB1c2VycyB0byBzcGVjaWZ5IGNvbmZpZ3VyYXRpb24gdG8gdGhlIHN0b3JhZ2UgZW5naW5lIG9uIGEgcGVyLWNvbGxlY3Rpb24gYmFzaXMgd2hlbiBjcmVhdGluZyBhIGNvbGxlY3Rpb24gb24gTW9uZ29EQiAzLjAgb3IgaGlnaGVyLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLnZhbGlkYXRvcl0gQWxsb3dzIHVzZXJzIHRvIHNwZWNpZnkgdmFsaWRhdGlvbiBydWxlcyBvciBleHByZXNzaW9ucyBmb3IgdGhlIGNvbGxlY3Rpb24uIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgRG9jdW1lbnQgVmFsaWRhdGlvbiBvbiBNb25nb0RCIDMuMiBvciBoaWdoZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudmFsaWRhdGlvbkxldmVsXSBEZXRlcm1pbmVzIGhvdyBzdHJpY3RseSBNb25nb0RCIGFwcGxpZXMgdGhlIHZhbGlkYXRpb24gcnVsZXMgdG8gZXhpc3RpbmcgZG9jdW1lbnRzIGR1cmluZyBhbiB1cGRhdGUgb24gTW9uZ29EQiAzLjIgb3IgaGlnaGVyLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnZhbGlkYXRpb25BY3Rpb25dIERldGVybWluZXMgd2hldGhlciB0byBlcnJvciBvbiBpbnZhbGlkIGRvY3VtZW50cyBvciBqdXN0IHdhcm4gYWJvdXQgdGhlIHZpb2xhdGlvbnMgYnV0IGFsbG93IGludmFsaWQgZG9jdW1lbnRzIHRvIGJlIGluc2VydGVkIG9uIE1vbmdvREIgMy4yIG9yIGhpZ2hlci5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5pbmRleE9wdGlvbkRlZmF1bHRzXSBBbGxvd3MgdXNlcnMgdG8gc3BlY2lmeSBhIGRlZmF1bHQgY29uZmlndXJhdGlvbiBmb3IgaW5kZXhlcyB3aGVuIGNyZWF0aW5nIGEgY29sbGVjdGlvbiBvbiBNb25nb0RCIDMuMiBvciBoaWdoZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudmlld09uXSBUaGUgbmFtZSBvZiB0aGUgc291cmNlIGNvbGxlY3Rpb24gb3IgdmlldyBmcm9tIHdoaWNoIHRvIGNyZWF0ZSB0aGUgdmlldy4gVGhlIG5hbWUgaXMgbm90IHRoZSBmdWxsIG5hbWVzcGFjZSBvZiB0aGUgY29sbGVjdGlvbiBvciB2aWV3OyBpLmUuIGRvZXMgbm90IGluY2x1ZGUgdGhlIGRhdGFiYXNlIG5hbWUgYW5kIGltcGxpZXMgdGhlIHNhbWUgZGF0YWJhc2UgYXMgdGhlIHZpZXcgdG8gY3JlYXRlIG9uIE1vbmdvREIgMy40IG9yIGhpZ2hlci5cbiAqIEBwYXJhbSB7YXJyYXl9IFtvcHRpb25zLnBpcGVsaW5lXSBBbiBhcnJheSB0aGF0IGNvbnNpc3RzIG9mIHRoZSBhZ2dyZWdhdGlvbiBwaXBlbGluZSBzdGFnZS4gQ3JlYXRlcyB0aGUgdmlldyBieSBhcHBseWluZyB0aGUgc3BlY2lmaWVkIHBpcGVsaW5lIHRvIHRoZSB2aWV3T24gY29sbGVjdGlvbiBvciB2aWV3IG9uIE1vbmdvREIgMy40IG9yIGhpZ2hlci5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5jb2xsYXRpb25dIFNwZWNpZnkgY29sbGF0aW9uIChNb25nb0RCIDMuNCBvciBoaWdoZXIpIHNldHRpbmdzIGZvciB1cGRhdGUgb3BlcmF0aW9uIChzZWUgMy40IGRvY3VtZW50YXRpb24gZm9yIGF2YWlsYWJsZSBmaWVsZHMpLlxuICogQHBhcmFtIHtDbGllbnRTZXNzaW9ufSBbb3B0aW9ucy5zZXNzaW9uXSBvcHRpb25hbCBzZXNzaW9uIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb25cbiAqIEBwYXJhbSB7RGJ+Y29sbGVjdGlvblJlc3VsdENhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSByZXN1bHRzIGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIFByb21pc2UgaWYgbm8gY2FsbGJhY2sgcGFzc2VkXG4gKi9cbkRiLnByb3RvdHlwZS5jcmVhdGVDb2xsZWN0aW9uID0gZGVwcmVjYXRlT3B0aW9ucyhcbiAge1xuICAgIG5hbWU6ICdEYi5jcmVhdGVDb2xsZWN0aW9uJyxcbiAgICBkZXByZWNhdGVkT3B0aW9uczogWydhdXRvSW5kZXhJZCddLFxuICAgIG9wdGlvbnNJbmRleDogMVxuICB9LFxuICBmdW5jdGlvbihuYW1lLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykgKGNhbGxiYWNrID0gb3B0aW9ucyksIChvcHRpb25zID0ge30pO1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMucHJvbWlzZUxpYnJhcnkgPSBvcHRpb25zLnByb21pc2VMaWJyYXJ5IHx8IHRoaXMucy5wcm9taXNlTGlicmFyeTtcbiAgICBvcHRpb25zLnJlYWRDb25jZXJuID0gb3B0aW9ucy5yZWFkQ29uY2VyblxuICAgICAgPyBuZXcgUmVhZENvbmNlcm4ob3B0aW9ucy5yZWFkQ29uY2Vybi5sZXZlbClcbiAgICAgIDogdGhpcy5yZWFkQ29uY2VybjtcbiAgICBjb25zdCBjcmVhdGVDb2xsZWN0aW9uT3BlcmF0aW9uID0gbmV3IENyZWF0ZUNvbGxlY3Rpb25PcGVyYXRpb24odGhpcywgbmFtZSwgb3B0aW9ucyk7XG5cbiAgICByZXR1cm4gZXhlY3V0ZU9wZXJhdGlvbih0aGlzLnMudG9wb2xvZ3ksIGNyZWF0ZUNvbGxlY3Rpb25PcGVyYXRpb24sIGNhbGxiYWNrKTtcbiAgfVxuKTtcblxuLyoqXG4gKiBHZXQgYWxsIHRoZSBkYiBzdGF0aXN0aWNzLlxuICpcbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gT3B0aW9uYWwgc2V0dGluZ3MuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuc2NhbGVdIERpdmlkZSB0aGUgcmV0dXJuZWQgc2l6ZXMgYnkgc2NhbGUgdmFsdWUuXG4gKiBAcGFyYW0ge0NsaWVudFNlc3Npb259IFtvcHRpb25zLnNlc3Npb25dIG9wdGlvbmFsIHNlc3Npb24gdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvblxuICogQHBhcmFtIHtEYn5yZXN1bHRDYWxsYmFja30gW2NhbGxiYWNrXSBUaGUgY29sbGVjdGlvbiByZXN1bHQgY2FsbGJhY2tcbiAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgUHJvbWlzZSBpZiBubyBjYWxsYmFjayBwYXNzZWRcbiAqL1xuRGIucHJvdG90eXBlLnN0YXRzID0gZnVuY3Rpb24ob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSAoY2FsbGJhY2sgPSBvcHRpb25zKSwgKG9wdGlvbnMgPSB7fSk7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAvLyBCdWlsZCBjb21tYW5kIG9iamVjdFxuICBjb25zdCBjb21tYW5kT2JqZWN0ID0geyBkYlN0YXRzOiB0cnVlIH07XG4gIC8vIENoZWNrIGlmIHdlIGhhdmUgdGhlIHNjYWxlIHZhbHVlXG4gIGlmIChvcHRpb25zWydzY2FsZSddICE9IG51bGwpIGNvbW1hbmRPYmplY3RbJ3NjYWxlJ10gPSBvcHRpb25zWydzY2FsZSddO1xuXG4gIC8vIElmIHdlIGhhdmUgYSByZWFkUHJlZmVyZW5jZSBzZXRcbiAgaWYgKG9wdGlvbnMucmVhZFByZWZlcmVuY2UgPT0gbnVsbCAmJiB0aGlzLnMucmVhZFByZWZlcmVuY2UpIHtcbiAgICBvcHRpb25zLnJlYWRQcmVmZXJlbmNlID0gdGhpcy5zLnJlYWRQcmVmZXJlbmNlO1xuICB9XG5cbiAgY29uc3Qgc3RhdHNPcGVyYXRpb24gPSBuZXcgQ29tbWFuZE9wZXJhdGlvbih0aGlzLCBvcHRpb25zLCBudWxsLCBjb21tYW5kT2JqZWN0KTtcblxuICAvLyBFeGVjdXRlIHRoZSBjb21tYW5kXG4gIHJldHVybiBleGVjdXRlT3BlcmF0aW9uKHRoaXMucy50b3BvbG9neSwgc3RhdHNPcGVyYXRpb24sIGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBsaXN0IG9mIGFsbCBjb2xsZWN0aW9uIGluZm9ybWF0aW9uIGZvciB0aGUgc3BlY2lmaWVkIGRiLlxuICpcbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7b2JqZWN0fSBbZmlsdGVyPXt9XSBRdWVyeSB0byBmaWx0ZXIgY29sbGVjdGlvbnMgYnlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gT3B0aW9uYWwgc2V0dGluZ3MuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLm5hbWVPbmx5PWZhbHNlXSBTaW5jZSA0LjA6IElmIHRydWUsIHdpbGwgb25seSByZXR1cm4gdGhlIGNvbGxlY3Rpb24gbmFtZSBpbiB0aGUgcmVzcG9uc2UsIGFuZCB3aWxsIG9taXQgYWRkaXRpb25hbCBpbmZvXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuYmF0Y2hTaXplPTEwMDBdIFRoZSBiYXRjaFNpemUgZm9yIHRoZSByZXR1cm5lZCBjb21tYW5kIGN1cnNvciBvciBpZiBwcmUgMi44IHRoZSBzeXN0ZW1zIGJhdGNoIGNvbGxlY3Rpb25cbiAqIEBwYXJhbSB7KFJlYWRQcmVmZXJlbmNlfHN0cmluZyl9IFtvcHRpb25zLnJlYWRQcmVmZXJlbmNlXSBUaGUgcHJlZmVycmVkIHJlYWQgcHJlZmVyZW5jZSAoUmVhZFByZWZlcmVuY2UuUFJJTUFSWSwgUmVhZFByZWZlcmVuY2UuUFJJTUFSWV9QUkVGRVJSRUQsIFJlYWRQcmVmZXJlbmNlLlNFQ09OREFSWSwgUmVhZFByZWZlcmVuY2UuU0VDT05EQVJZX1BSRUZFUlJFRCwgUmVhZFByZWZlcmVuY2UuTkVBUkVTVCkuXG4gKiBAcGFyYW0ge0NsaWVudFNlc3Npb259IFtvcHRpb25zLnNlc3Npb25dIG9wdGlvbmFsIHNlc3Npb24gdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvblxuICogQHJldHVybiB7Q29tbWFuZEN1cnNvcn1cbiAqL1xuRGIucHJvdG90eXBlLmxpc3RDb2xsZWN0aW9ucyA9IGZ1bmN0aW9uKGZpbHRlciwgb3B0aW9ucykge1xuICBmaWx0ZXIgPSBmaWx0ZXIgfHwge307XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHJldHVybiBuZXcgQ29tbWFuZEN1cnNvcihcbiAgICB0aGlzLnMudG9wb2xvZ3ksXG4gICAgbmV3IExpc3RDb2xsZWN0aW9uc09wZXJhdGlvbih0aGlzLCBmaWx0ZXIsIG9wdGlvbnMpLFxuICAgIG9wdGlvbnNcbiAgKTtcbn07XG5cbi8qKlxuICogRXZhbHVhdGUgSmF2YVNjcmlwdCBvbiB0aGUgc2VydmVyXG4gKlxuICogQG1ldGhvZFxuICogQHBhcmFtIHtDb2RlfSBjb2RlIEphdmFTY3JpcHQgdG8gZXhlY3V0ZSBvbiBzZXJ2ZXIuXG4gKiBAcGFyYW0geyhvYmplY3R8YXJyYXkpfSBwYXJhbWV0ZXJzIFRoZSBwYXJhbWV0ZXJzIGZvciB0aGUgY2FsbC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gT3B0aW9uYWwgc2V0dGluZ3MuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLm5vbG9jaz1mYWxzZV0gVGVsbCBNb25nb0RCIG5vdCB0byBibG9jayBvbiB0aGUgZXZhbHVhdGlvbiBvZiB0aGUgamF2YXNjcmlwdC5cbiAqIEBwYXJhbSB7Q2xpZW50U2Vzc2lvbn0gW29wdGlvbnMuc2Vzc2lvbl0gb3B0aW9uYWwgc2Vzc2lvbiB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uXG4gKiBAcGFyYW0ge0RifnJlc3VsdENhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSByZXN1bHRzIGNhbGxiYWNrXG4gKiBAZGVwcmVjYXRlZCBFdmFsIGlzIGRlcHJlY2F0ZWQgb24gTW9uZ29EQiAzLjIgYW5kIGZvcndhcmRcbiAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgUHJvbWlzZSBpZiBubyBjYWxsYmFjayBwYXNzZWRcbiAqL1xuRGIucHJvdG90eXBlLmV2YWwgPSBkZXByZWNhdGUoZnVuY3Rpb24oY29kZSwgcGFyYW1ldGVycywgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgY29uc3QgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIGNhbGxiYWNrID0gdHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSA9PT0gJ2Z1bmN0aW9uJyA/IGFyZ3MucG9wKCkgOiB1bmRlZmluZWQ7XG4gIHBhcmFtZXRlcnMgPSBhcmdzLmxlbmd0aCA/IGFyZ3Muc2hpZnQoKSA6IHBhcmFtZXRlcnM7XG4gIG9wdGlvbnMgPSBhcmdzLmxlbmd0aCA/IGFyZ3Muc2hpZnQoKSB8fCB7fSA6IHt9O1xuXG4gIHJldHVybiBleGVjdXRlTGVnYWN5T3BlcmF0aW9uKHRoaXMucy50b3BvbG9neSwgZXZhbHVhdGUsIFtcbiAgICB0aGlzLFxuICAgIGNvZGUsXG4gICAgcGFyYW1ldGVycyxcbiAgICBvcHRpb25zLFxuICAgIGNhbGxiYWNrXG4gIF0pO1xufSwgJ0RiLmV2YWwgaXMgZGVwcmVjYXRlZCBhcyBvZiBNb25nb0RCIHZlcnNpb24gMy4yJyk7XG5cbi8qKlxuICogUmVuYW1lIGEgY29sbGVjdGlvbi5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAcGFyYW0ge3N0cmluZ30gZnJvbUNvbGxlY3Rpb24gTmFtZSBvZiBjdXJyZW50IGNvbGxlY3Rpb24gdG8gcmVuYW1lLlxuICogQHBhcmFtIHtzdHJpbmd9IHRvQ29sbGVjdGlvbiBOZXcgbmFtZSBvZiBvZiB0aGUgY29sbGVjdGlvbi5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gT3B0aW9uYWwgc2V0dGluZ3MuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmRyb3BUYXJnZXQ9ZmFsc2VdIERyb3AgdGhlIHRhcmdldCBuYW1lIGNvbGxlY3Rpb24gaWYgaXQgcHJldmlvdXNseSBleGlzdHMuXG4gKiBAcGFyYW0ge0NsaWVudFNlc3Npb259IFtvcHRpb25zLnNlc3Npb25dIG9wdGlvbmFsIHNlc3Npb24gdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvblxuICogQHBhcmFtIHtEYn5jb2xsZWN0aW9uUmVzdWx0Q2FsbGJhY2t9IFtjYWxsYmFja10gVGhlIHJlc3VsdHMgY2FsbGJhY2tcbiAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgUHJvbWlzZSBpZiBubyBjYWxsYmFjayBwYXNzZWRcbiAqL1xuRGIucHJvdG90eXBlLnJlbmFtZUNvbGxlY3Rpb24gPSBmdW5jdGlvbihmcm9tQ29sbGVjdGlvbiwgdG9Db2xsZWN0aW9uLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIChjYWxsYmFjayA9IG9wdGlvbnMpLCAob3B0aW9ucyA9IHt9KTtcbiAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHsgcmVhZFByZWZlcmVuY2U6IFJlYWRQcmVmZXJlbmNlLlBSSU1BUlkgfSk7XG5cbiAgLy8gQWRkIHJldHVybiBuZXcgY29sbGVjdGlvblxuICBvcHRpb25zLm5ld19jb2xsZWN0aW9uID0gdHJ1ZTtcblxuICBjb25zdCByZW5hbWVPcGVyYXRpb24gPSBuZXcgUmVuYW1lT3BlcmF0aW9uKFxuICAgIHRoaXMuY29sbGVjdGlvbihmcm9tQ29sbGVjdGlvbiksXG4gICAgdG9Db2xsZWN0aW9uLFxuICAgIG9wdGlvbnNcbiAgKTtcblxuICByZXR1cm4gZXhlY3V0ZU9wZXJhdGlvbih0aGlzLnMudG9wb2xvZ3ksIHJlbmFtZU9wZXJhdGlvbiwgY2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBEcm9wIGEgY29sbGVjdGlvbiBmcm9tIHRoZSBkYXRhYmFzZSwgcmVtb3ZpbmcgaXQgcGVybWFuZW50bHkuIE5ldyBhY2Nlc3NlcyB3aWxsIGNyZWF0ZSBhIG5ldyBjb2xsZWN0aW9uLlxuICpcbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgY29sbGVjdGlvbiB0byBkcm9wXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbmFsIHNldHRpbmdzXG4gKiBAcGFyYW0ge1dyaXRlQ29uY2Vybn0gW29wdGlvbnMud3JpdGVDb25jZXJuXSBBIGZ1bGwgV3JpdGVDb25jZXJuIG9iamVjdFxuICogQHBhcmFtIHsobnVtYmVyfHN0cmluZyl9IFtvcHRpb25zLnddIFRoZSB3cml0ZSBjb25jZXJuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMud3RpbWVvdXRdIFRoZSB3cml0ZSBjb25jZXJuIHRpbWVvdXRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMual0gVGhlIGpvdXJuYWwgd3JpdGUgY29uY2VyblxuICogQHBhcmFtIHtDbGllbnRTZXNzaW9ufSBbb3B0aW9ucy5zZXNzaW9uXSBvcHRpb25hbCBzZXNzaW9uIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb25cbiAqIEBwYXJhbSB7RGJ+cmVzdWx0Q2FsbGJhY2t9IFtjYWxsYmFja10gVGhlIHJlc3VsdHMgY2FsbGJhY2tcbiAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgUHJvbWlzZSBpZiBubyBjYWxsYmFjayBwYXNzZWRcbiAqL1xuRGIucHJvdG90eXBlLmRyb3BDb2xsZWN0aW9uID0gZnVuY3Rpb24obmFtZSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSAoY2FsbGJhY2sgPSBvcHRpb25zKSwgKG9wdGlvbnMgPSB7fSk7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGNvbnN0IGRyb3BDb2xsZWN0aW9uT3BlcmF0aW9uID0gbmV3IERyb3BDb2xsZWN0aW9uT3BlcmF0aW9uKHRoaXMsIG5hbWUsIG9wdGlvbnMpO1xuXG4gIHJldHVybiBleGVjdXRlT3BlcmF0aW9uKHRoaXMucy50b3BvbG9neSwgZHJvcENvbGxlY3Rpb25PcGVyYXRpb24sIGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogRHJvcCBhIGRhdGFiYXNlLCByZW1vdmluZyBpdCBwZXJtYW5lbnRseSBmcm9tIHRoZSBzZXJ2ZXIuXG4gKlxuICogQG1ldGhvZFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25hbCBzZXR0aW5nc1xuICogQHBhcmFtIHtDbGllbnRTZXNzaW9ufSBbb3B0aW9ucy5zZXNzaW9uXSBvcHRpb25hbCBzZXNzaW9uIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb25cbiAqIEBwYXJhbSB7RGJ+cmVzdWx0Q2FsbGJhY2t9IFtjYWxsYmFja10gVGhlIHJlc3VsdHMgY2FsbGJhY2tcbiAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgUHJvbWlzZSBpZiBubyBjYWxsYmFjayBwYXNzZWRcbiAqL1xuRGIucHJvdG90eXBlLmRyb3BEYXRhYmFzZSA9IGZ1bmN0aW9uKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykgKGNhbGxiYWNrID0gb3B0aW9ucyksIChvcHRpb25zID0ge30pO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBjb25zdCBkcm9wRGF0YWJhc2VPcGVyYXRpb24gPSBuZXcgRHJvcERhdGFiYXNlT3BlcmF0aW9uKHRoaXMsIG9wdGlvbnMpO1xuXG4gIHJldHVybiBleGVjdXRlT3BlcmF0aW9uKHRoaXMucy50b3BvbG9neSwgZHJvcERhdGFiYXNlT3BlcmF0aW9uLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIEZldGNoIGFsbCBjb2xsZWN0aW9ucyBmb3IgdGhlIGN1cnJlbnQgZGIuXG4gKlxuICogQG1ldGhvZFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25hbCBzZXR0aW5nc1xuICogQHBhcmFtIHtDbGllbnRTZXNzaW9ufSBbb3B0aW9ucy5zZXNzaW9uXSBvcHRpb25hbCBzZXNzaW9uIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb25cbiAqIEBwYXJhbSB7RGJ+Y29sbGVjdGlvbnNSZXN1bHRDYWxsYmFja30gW2NhbGxiYWNrXSBUaGUgcmVzdWx0cyBjYWxsYmFja1xuICogQHJldHVybiB7UHJvbWlzZX0gcmV0dXJucyBQcm9taXNlIGlmIG5vIGNhbGxiYWNrIHBhc3NlZFxuICovXG5EYi5wcm90b3R5cGUuY29sbGVjdGlvbnMgPSBmdW5jdGlvbihvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIChjYWxsYmFjayA9IG9wdGlvbnMpLCAob3B0aW9ucyA9IHt9KTtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgY29uc3QgY29sbGVjdGlvbnNPcGVyYXRpb24gPSBuZXcgQ29sbGVjdGlvbnNPcGVyYXRpb24odGhpcywgb3B0aW9ucyk7XG5cbiAgcmV0dXJuIGV4ZWN1dGVPcGVyYXRpb24odGhpcy5zLnRvcG9sb2d5LCBjb2xsZWN0aW9uc09wZXJhdGlvbiwgY2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBSdW5zIGEgY29tbWFuZCBvbiB0aGUgZGF0YWJhc2UgYXMgYWRtaW4uXG4gKiBAbWV0aG9kXG4gKiBAcGFyYW0ge29iamVjdH0gY29tbWFuZCBUaGUgY29tbWFuZCBoYXNoXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIE9wdGlvbmFsIHNldHRpbmdzLlxuICogQHBhcmFtIHsoUmVhZFByZWZlcmVuY2V8c3RyaW5nKX0gW29wdGlvbnMucmVhZFByZWZlcmVuY2VdIFRoZSBwcmVmZXJyZWQgcmVhZCBwcmVmZXJlbmNlIChSZWFkUHJlZmVyZW5jZS5QUklNQVJZLCBSZWFkUHJlZmVyZW5jZS5QUklNQVJZX1BSRUZFUlJFRCwgUmVhZFByZWZlcmVuY2UuU0VDT05EQVJZLCBSZWFkUHJlZmVyZW5jZS5TRUNPTkRBUllfUFJFRkVSUkVELCBSZWFkUHJlZmVyZW5jZS5ORUFSRVNUKS5cbiAqIEBwYXJhbSB7Q2xpZW50U2Vzc2lvbn0gW29wdGlvbnMuc2Vzc2lvbl0gb3B0aW9uYWwgc2Vzc2lvbiB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uXG4gKiBAcGFyYW0ge0RifnJlc3VsdENhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSBjb21tYW5kIHJlc3VsdCBjYWxsYmFja1xuICogQHJldHVybiB7UHJvbWlzZX0gcmV0dXJucyBQcm9taXNlIGlmIG5vIGNhbGxiYWNrIHBhc3NlZFxuICovXG5EYi5wcm90b3R5cGUuZXhlY3V0ZURiQWRtaW5Db21tYW5kID0gZnVuY3Rpb24oc2VsZWN0b3IsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykgKGNhbGxiYWNrID0gb3B0aW9ucyksIChvcHRpb25zID0ge30pO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5yZWFkUHJlZmVyZW5jZSA9IHJlc29sdmVSZWFkUHJlZmVyZW5jZSh0aGlzLCBvcHRpb25zKTtcblxuICBjb25zdCBleGVjdXRlRGJBZG1pbkNvbW1hbmRPcGVyYXRpb24gPSBuZXcgRXhlY3V0ZURiQWRtaW5Db21tYW5kT3BlcmF0aW9uKFxuICAgIHRoaXMsXG4gICAgc2VsZWN0b3IsXG4gICAgb3B0aW9uc1xuICApO1xuXG4gIHJldHVybiBleGVjdXRlT3BlcmF0aW9uKHRoaXMucy50b3BvbG9neSwgZXhlY3V0ZURiQWRtaW5Db21tYW5kT3BlcmF0aW9uLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gaW5kZXggb24gdGhlIGRiIGFuZCBjb2xsZWN0aW9uLlxuICogQG1ldGhvZFxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgY29sbGVjdGlvbiB0byBjcmVhdGUgdGhlIGluZGV4IG9uLlxuICogQHBhcmFtIHsoc3RyaW5nfG9iamVjdCl9IGZpZWxkT3JTcGVjIERlZmluZXMgdGhlIGluZGV4LlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBPcHRpb25hbCBzZXR0aW5ncy5cbiAqIEBwYXJhbSB7KG51bWJlcnxzdHJpbmcpfSBbb3B0aW9ucy53XSBUaGUgd3JpdGUgY29uY2Vybi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy53dGltZW91dF0gVGhlIHdyaXRlIGNvbmNlcm4gdGltZW91dC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuaj1mYWxzZV0gU3BlY2lmeSBhIGpvdXJuYWwgd3JpdGUgY29uY2Vybi5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudW5pcXVlPWZhbHNlXSBDcmVhdGVzIGFuIHVuaXF1ZSBpbmRleC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuc3BhcnNlPWZhbHNlXSBDcmVhdGVzIGEgc3BhcnNlIGluZGV4LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5iYWNrZ3JvdW5kPWZhbHNlXSBDcmVhdGVzIHRoZSBpbmRleCBpbiB0aGUgYmFja2dyb3VuZCwgeWllbGRpbmcgd2hlbmV2ZXIgcG9zc2libGUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmRyb3BEdXBzPWZhbHNlXSBBIHVuaXF1ZSBpbmRleCBjYW5ub3QgYmUgY3JlYXRlZCBvbiBhIGtleSB0aGF0IGhhcyBwcmUtZXhpc3RpbmcgZHVwbGljYXRlIHZhbHVlcy4gSWYgeW91IHdvdWxkIGxpa2UgdG8gY3JlYXRlIHRoZSBpbmRleCBhbnl3YXksIGtlZXBpbmcgdGhlIGZpcnN0IGRvY3VtZW50IHRoZSBkYXRhYmFzZSBpbmRleGVzIGFuZCBkZWxldGluZyBhbGwgc3Vic2VxdWVudCBkb2N1bWVudHMgdGhhdCBoYXZlIGR1cGxpY2F0ZSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1pbl0gRm9yIGdlb3NwYXRpYWwgaW5kZXhlcyBzZXQgdGhlIGxvd2VyIGJvdW5kIGZvciB0aGUgY28tb3JkaW5hdGVzLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heF0gRm9yIGdlb3NwYXRpYWwgaW5kZXhlcyBzZXQgdGhlIGhpZ2ggYm91bmQgZm9yIHRoZSBjby1vcmRpbmF0ZXMuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMudl0gU3BlY2lmeSB0aGUgZm9ybWF0IHZlcnNpb24gb2YgdGhlIGluZGV4ZXMuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuZXhwaXJlQWZ0ZXJTZWNvbmRzXSBBbGxvd3MgeW91IHRvIGV4cGlyZSBkYXRhIG9uIGluZGV4ZXMgYXBwbGllZCB0byBhIGRhdGEgKE1vbmdvREIgMi4yIG9yIGhpZ2hlcilcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5uYW1lXSBPdmVycmlkZSB0aGUgYXV0b2dlbmVyYXRlZCBpbmRleCBuYW1lICh1c2VmdWwgaWYgdGhlIHJlc3VsdGluZyBuYW1lIGlzIGxhcmdlciB0aGFuIDEyOCBieXRlcylcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5wYXJ0aWFsRmlsdGVyRXhwcmVzc2lvbl0gQ3JlYXRlcyBhIHBhcnRpYWwgaW5kZXggYmFzZWQgb24gdGhlIGdpdmVuIGZpbHRlciBvYmplY3QgKE1vbmdvREIgMy4yIG9yIGhpZ2hlcilcbiAqIEBwYXJhbSB7Q2xpZW50U2Vzc2lvbn0gW29wdGlvbnMuc2Vzc2lvbl0gb3B0aW9uYWwgc2Vzc2lvbiB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uXG4gKiBAcGFyYW0ge0RifnJlc3VsdENhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSBjb21tYW5kIHJlc3VsdCBjYWxsYmFja1xuICogQHJldHVybiB7UHJvbWlzZX0gcmV0dXJucyBQcm9taXNlIGlmIG5vIGNhbGxiYWNrIHBhc3NlZFxuICovXG5EYi5wcm90b3R5cGUuY3JlYXRlSW5kZXggPSBmdW5jdGlvbihuYW1lLCBmaWVsZE9yU3BlYywgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSAoY2FsbGJhY2sgPSBvcHRpb25zKSwgKG9wdGlvbnMgPSB7fSk7XG4gIG9wdGlvbnMgPSBvcHRpb25zID8gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucykgOiB7fTtcblxuICBjb25zdCBjcmVhdGVJbmRleE9wZXJhdGlvbiA9IG5ldyBDcmVhdGVJbmRleE9wZXJhdGlvbih0aGlzLCBuYW1lLCBmaWVsZE9yU3BlYywgb3B0aW9ucyk7XG5cbiAgcmV0dXJuIGV4ZWN1dGVPcGVyYXRpb24odGhpcy5zLnRvcG9sb2d5LCBjcmVhdGVJbmRleE9wZXJhdGlvbiwgY2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBFbnN1cmVzIHRoYXQgYW4gaW5kZXggZXhpc3RzLCBpZiBpdCBkb2VzIG5vdCBpdCBjcmVhdGVzIGl0XG4gKiBAbWV0aG9kXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuMFxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIGluZGV4IG5hbWVcbiAqIEBwYXJhbSB7KHN0cmluZ3xvYmplY3QpfSBmaWVsZE9yU3BlYyBEZWZpbmVzIHRoZSBpbmRleC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gT3B0aW9uYWwgc2V0dGluZ3MuXG4gKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nKX0gW29wdGlvbnMud10gVGhlIHdyaXRlIGNvbmNlcm4uXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMud3RpbWVvdXRdIFRoZSB3cml0ZSBjb25jZXJuIHRpbWVvdXQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmo9ZmFsc2VdIFNwZWNpZnkgYSBqb3VybmFsIHdyaXRlIGNvbmNlcm4uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnVuaXF1ZT1mYWxzZV0gQ3JlYXRlcyBhbiB1bmlxdWUgaW5kZXguXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnNwYXJzZT1mYWxzZV0gQ3JlYXRlcyBhIHNwYXJzZSBpbmRleC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuYmFja2dyb3VuZD1mYWxzZV0gQ3JlYXRlcyB0aGUgaW5kZXggaW4gdGhlIGJhY2tncm91bmQsIHlpZWxkaW5nIHdoZW5ldmVyIHBvc3NpYmxlLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5kcm9wRHVwcz1mYWxzZV0gQSB1bmlxdWUgaW5kZXggY2Fubm90IGJlIGNyZWF0ZWQgb24gYSBrZXkgdGhhdCBoYXMgcHJlLWV4aXN0aW5nIGR1cGxpY2F0ZSB2YWx1ZXMuIElmIHlvdSB3b3VsZCBsaWtlIHRvIGNyZWF0ZSB0aGUgaW5kZXggYW55d2F5LCBrZWVwaW5nIHRoZSBmaXJzdCBkb2N1bWVudCB0aGUgZGF0YWJhc2UgaW5kZXhlcyBhbmQgZGVsZXRpbmcgYWxsIHN1YnNlcXVlbnQgZG9jdW1lbnRzIHRoYXQgaGF2ZSBkdXBsaWNhdGUgdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5taW5dIEZvciBnZW9zcGF0aWFsIGluZGV4ZXMgc2V0IHRoZSBsb3dlciBib3VuZCBmb3IgdGhlIGNvLW9yZGluYXRlcy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhdIEZvciBnZW9zcGF0aWFsIGluZGV4ZXMgc2V0IHRoZSBoaWdoIGJvdW5kIGZvciB0aGUgY28tb3JkaW5hdGVzLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnZdIFNwZWNpZnkgdGhlIGZvcm1hdCB2ZXJzaW9uIG9mIHRoZSBpbmRleGVzLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmV4cGlyZUFmdGVyU2Vjb25kc10gQWxsb3dzIHlvdSB0byBleHBpcmUgZGF0YSBvbiBpbmRleGVzIGFwcGxpZWQgdG8gYSBkYXRhIChNb25nb0RCIDIuMiBvciBoaWdoZXIpXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubmFtZV0gT3ZlcnJpZGUgdGhlIGF1dG9nZW5lcmF0ZWQgaW5kZXggbmFtZSAodXNlZnVsIGlmIHRoZSByZXN1bHRpbmcgbmFtZSBpcyBsYXJnZXIgdGhhbiAxMjggYnl0ZXMpXG4gKiBAcGFyYW0ge0NsaWVudFNlc3Npb259IFtvcHRpb25zLnNlc3Npb25dIG9wdGlvbmFsIHNlc3Npb24gdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvblxuICogQHBhcmFtIHtEYn5yZXN1bHRDYWxsYmFja30gW2NhbGxiYWNrXSBUaGUgY29tbWFuZCByZXN1bHQgY2FsbGJhY2tcbiAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgUHJvbWlzZSBpZiBubyBjYWxsYmFjayBwYXNzZWRcbiAqL1xuRGIucHJvdG90eXBlLmVuc3VyZUluZGV4ID0gZGVwcmVjYXRlKGZ1bmN0aW9uKG5hbWUsIGZpZWxkT3JTcGVjLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIChjYWxsYmFjayA9IG9wdGlvbnMpLCAob3B0aW9ucyA9IHt9KTtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgcmV0dXJuIGV4ZWN1dGVMZWdhY3lPcGVyYXRpb24odGhpcy5zLnRvcG9sb2d5LCBlbnN1cmVJbmRleCwgW1xuICAgIHRoaXMsXG4gICAgbmFtZSxcbiAgICBmaWVsZE9yU3BlYyxcbiAgICBvcHRpb25zLFxuICAgIGNhbGxiYWNrXG4gIF0pO1xufSwgJ0RiLmVuc3VyZUluZGV4IGlzIGRlcHJlY2F0ZWQgYXMgb2YgTW9uZ29EQiB2ZXJzaW9uIDMuMCAvIGRyaXZlciB2ZXJzaW9uIDIuMCcpO1xuXG5EYi5wcm90b3R5cGUuYWRkQ2hpbGQgPSBmdW5jdGlvbihkYikge1xuICBpZiAodGhpcy5zLnBhcmVudERiKSByZXR1cm4gdGhpcy5zLnBhcmVudERiLmFkZENoaWxkKGRiKTtcbiAgdGhpcy5zLmNoaWxkcmVuLnB1c2goZGIpO1xufTtcblxuLyoqXG4gKiBBZGQgYSB1c2VyIHRvIHRoZSBkYXRhYmFzZS5cbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7c3RyaW5nfSB1c2VybmFtZSBUaGUgdXNlcm5hbWUuXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFzc3dvcmQgVGhlIHBhc3N3b3JkLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBPcHRpb25hbCBzZXR0aW5ncy5cbiAqIEBwYXJhbSB7KG51bWJlcnxzdHJpbmcpfSBbb3B0aW9ucy53XSBUaGUgd3JpdGUgY29uY2Vybi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy53dGltZW91dF0gVGhlIHdyaXRlIGNvbmNlcm4gdGltZW91dC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuaj1mYWxzZV0gU3BlY2lmeSBhIGpvdXJuYWwgd3JpdGUgY29uY2Vybi5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5jdXN0b21EYXRhXSBDdXN0b20gZGF0YSBhc3NvY2lhdGVkIHdpdGggdGhlIHVzZXIgKG9ubHkgTW9uZ29kYiAyLjYgb3IgaGlnaGVyKVxuICogQHBhcmFtIHtvYmplY3RbXX0gW29wdGlvbnMucm9sZXNdIFJvbGVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgY3JlYXRlZCB1c2VyIChvbmx5IE1vbmdvZGIgMi42IG9yIGhpZ2hlcilcbiAqIEBwYXJhbSB7Q2xpZW50U2Vzc2lvbn0gW29wdGlvbnMuc2Vzc2lvbl0gb3B0aW9uYWwgc2Vzc2lvbiB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uXG4gKiBAcGFyYW0ge0RifnJlc3VsdENhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSBjb21tYW5kIHJlc3VsdCBjYWxsYmFja1xuICogQHJldHVybiB7UHJvbWlzZX0gcmV0dXJucyBQcm9taXNlIGlmIG5vIGNhbGxiYWNrIHBhc3NlZFxuICovXG5EYi5wcm90b3R5cGUuYWRkVXNlciA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSAoY2FsbGJhY2sgPSBvcHRpb25zKSwgKG9wdGlvbnMgPSB7fSk7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIFNwZWNpYWwgY2FzZSB3aGVyZSB0aGVyZSBpcyBubyBwYXNzd29yZCAoJGV4dGVybmFsIHVzZXJzKVxuICBpZiAodHlwZW9mIHVzZXJuYW1lID09PSAnc3RyaW5nJyAmJiBwYXNzd29yZCAhPSBudWxsICYmIHR5cGVvZiBwYXNzd29yZCA9PT0gJ29iamVjdCcpIHtcbiAgICBvcHRpb25zID0gcGFzc3dvcmQ7XG4gICAgcGFzc3dvcmQgPSBudWxsO1xuICB9XG5cbiAgY29uc3QgYWRkVXNlck9wZXJhdGlvbiA9IG5ldyBBZGRVc2VyT3BlcmF0aW9uKHRoaXMsIHVzZXJuYW1lLCBwYXNzd29yZCwgb3B0aW9ucyk7XG5cbiAgcmV0dXJuIGV4ZWN1dGVPcGVyYXRpb24odGhpcy5zLnRvcG9sb2d5LCBhZGRVc2VyT3BlcmF0aW9uLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhIHVzZXIgZnJvbSBhIGRhdGFiYXNlXG4gKiBAbWV0aG9kXG4gKiBAcGFyYW0ge3N0cmluZ30gdXNlcm5hbWUgVGhlIHVzZXJuYW1lLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBPcHRpb25hbCBzZXR0aW5ncy5cbiAqIEBwYXJhbSB7KG51bWJlcnxzdHJpbmcpfSBbb3B0aW9ucy53XSBUaGUgd3JpdGUgY29uY2Vybi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy53dGltZW91dF0gVGhlIHdyaXRlIGNvbmNlcm4gdGltZW91dC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuaj1mYWxzZV0gU3BlY2lmeSBhIGpvdXJuYWwgd3JpdGUgY29uY2Vybi5cbiAqIEBwYXJhbSB7Q2xpZW50U2Vzc2lvbn0gW29wdGlvbnMuc2Vzc2lvbl0gb3B0aW9uYWwgc2Vzc2lvbiB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uXG4gKiBAcGFyYW0ge0RifnJlc3VsdENhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSBjb21tYW5kIHJlc3VsdCBjYWxsYmFja1xuICogQHJldHVybiB7UHJvbWlzZX0gcmV0dXJucyBQcm9taXNlIGlmIG5vIGNhbGxiYWNrIHBhc3NlZFxuICovXG5EYi5wcm90b3R5cGUucmVtb3ZlVXNlciA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIChjYWxsYmFjayA9IG9wdGlvbnMpLCAob3B0aW9ucyA9IHt9KTtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgY29uc3QgcmVtb3ZlVXNlck9wZXJhdGlvbiA9IG5ldyBSZW1vdmVVc2VyT3BlcmF0aW9uKHRoaXMsIHVzZXJuYW1lLCBvcHRpb25zKTtcblxuICByZXR1cm4gZXhlY3V0ZU9wZXJhdGlvbih0aGlzLnMudG9wb2xvZ3ksIHJlbW92ZVVzZXJPcGVyYXRpb24sIGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBjdXJyZW50IHByb2ZpbGluZyBsZXZlbCBvZiBNb25nb0RCXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGxldmVsIFRoZSBuZXcgcHJvZmlsaW5nIGxldmVsIChvZmYsIHNsb3dfb25seSwgYWxsKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9uYWwgc2V0dGluZ3NcbiAqIEBwYXJhbSB7Q2xpZW50U2Vzc2lvbn0gW29wdGlvbnMuc2Vzc2lvbl0gb3B0aW9uYWwgc2Vzc2lvbiB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uXG4gKiBAcGFyYW0ge0RifnJlc3VsdENhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSBjb21tYW5kIHJlc3VsdCBjYWxsYmFjay5cbiAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgUHJvbWlzZSBpZiBubyBjYWxsYmFjayBwYXNzZWRcbiAqL1xuRGIucHJvdG90eXBlLnNldFByb2ZpbGluZ0xldmVsID0gZnVuY3Rpb24obGV2ZWwsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykgKGNhbGxiYWNrID0gb3B0aW9ucyksIChvcHRpb25zID0ge30pO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBjb25zdCBzZXRQcm9maWxpbmdMZXZlbE9wZXJhdGlvbiA9IG5ldyBTZXRQcm9maWxpbmdMZXZlbE9wZXJhdGlvbih0aGlzLCBsZXZlbCwgb3B0aW9ucyk7XG5cbiAgcmV0dXJuIGV4ZWN1dGVPcGVyYXRpb24odGhpcy5zLnRvcG9sb2d5LCBzZXRQcm9maWxpbmdMZXZlbE9wZXJhdGlvbiwgY2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgY3VycmVudCBwcm9maWxpbmcgaW5mb3JtYXRpb24gZm9yIE1vbmdvREJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbmFsIHNldHRpbmdzXG4gKiBAcGFyYW0ge0NsaWVudFNlc3Npb259IFtvcHRpb25zLnNlc3Npb25dIG9wdGlvbmFsIHNlc3Npb24gdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvblxuICogQHBhcmFtIHtEYn5yZXN1bHRDYWxsYmFja30gW2NhbGxiYWNrXSBUaGUgY29tbWFuZCByZXN1bHQgY2FsbGJhY2suXG4gKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIFByb21pc2UgaWYgbm8gY2FsbGJhY2sgcGFzc2VkXG4gKiBAZGVwcmVjYXRlZCBRdWVyeSB0aGUgc3lzdGVtLnByb2ZpbGUgY29sbGVjdGlvbiBkaXJlY3RseS5cbiAqL1xuRGIucHJvdG90eXBlLnByb2ZpbGluZ0luZm8gPSBkZXByZWNhdGUoZnVuY3Rpb24ob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSAoY2FsbGJhY2sgPSBvcHRpb25zKSwgKG9wdGlvbnMgPSB7fSk7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHJldHVybiBleGVjdXRlTGVnYWN5T3BlcmF0aW9uKHRoaXMucy50b3BvbG9neSwgcHJvZmlsaW5nSW5mbywgW3RoaXMsIG9wdGlvbnMsIGNhbGxiYWNrXSk7XG59LCAnRGIucHJvZmlsaW5nSW5mbyBpcyBkZXByZWNhdGVkLiBRdWVyeSB0aGUgc3lzdGVtLnByb2ZpbGUgY29sbGVjdGlvbiBkaXJlY3RseS4nKTtcblxuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgY3VycmVudCBwcm9maWxpbmcgTGV2ZWwgZm9yIE1vbmdvREJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbmFsIHNldHRpbmdzXG4gKiBAcGFyYW0ge0NsaWVudFNlc3Npb259IFtvcHRpb25zLnNlc3Npb25dIG9wdGlvbmFsIHNlc3Npb24gdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvblxuICogQHBhcmFtIHtEYn5yZXN1bHRDYWxsYmFja30gW2NhbGxiYWNrXSBUaGUgY29tbWFuZCByZXN1bHQgY2FsbGJhY2tcbiAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgUHJvbWlzZSBpZiBubyBjYWxsYmFjayBwYXNzZWRcbiAqL1xuRGIucHJvdG90eXBlLnByb2ZpbGluZ0xldmVsID0gZnVuY3Rpb24ob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSAoY2FsbGJhY2sgPSBvcHRpb25zKSwgKG9wdGlvbnMgPSB7fSk7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGNvbnN0IHByb2ZpbGluZ0xldmVsT3BlcmF0aW9uID0gbmV3IFByb2ZpbGluZ0xldmVsT3BlcmF0aW9uKHRoaXMsIG9wdGlvbnMpO1xuXG4gIHJldHVybiBleGVjdXRlT3BlcmF0aW9uKHRoaXMucy50b3BvbG9neSwgcHJvZmlsaW5nTGV2ZWxPcGVyYXRpb24sIGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogUmV0cmlldmVzIHRoaXMgY29sbGVjdGlvbnMgaW5kZXggaW5mby5cbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBjb2xsZWN0aW9uLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBPcHRpb25hbCBzZXR0aW5ncy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZnVsbD1mYWxzZV0gUmV0dXJucyB0aGUgZnVsbCByYXcgaW5kZXggaW5mb3JtYXRpb24uXG4gKiBAcGFyYW0geyhSZWFkUHJlZmVyZW5jZXxzdHJpbmcpfSBbb3B0aW9ucy5yZWFkUHJlZmVyZW5jZV0gVGhlIHByZWZlcnJlZCByZWFkIHByZWZlcmVuY2UgKFJlYWRQcmVmZXJlbmNlLlBSSU1BUlksIFJlYWRQcmVmZXJlbmNlLlBSSU1BUllfUFJFRkVSUkVELCBSZWFkUHJlZmVyZW5jZS5TRUNPTkRBUlksIFJlYWRQcmVmZXJlbmNlLlNFQ09OREFSWV9QUkVGRVJSRUQsIFJlYWRQcmVmZXJlbmNlLk5FQVJFU1QpLlxuICogQHBhcmFtIHtDbGllbnRTZXNzaW9ufSBbb3B0aW9ucy5zZXNzaW9uXSBvcHRpb25hbCBzZXNzaW9uIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb25cbiAqIEBwYXJhbSB7RGJ+cmVzdWx0Q2FsbGJhY2t9IFtjYWxsYmFja10gVGhlIGNvbW1hbmQgcmVzdWx0IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIFByb21pc2UgaWYgbm8gY2FsbGJhY2sgcGFzc2VkXG4gKi9cbkRiLnByb3RvdHlwZS5pbmRleEluZm9ybWF0aW9uID0gZnVuY3Rpb24obmFtZSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSAoY2FsbGJhY2sgPSBvcHRpb25zKSwgKG9wdGlvbnMgPSB7fSk7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGNvbnN0IGluZGV4SW5mb3JtYXRpb25PcGVyYXRpb24gPSBuZXcgSW5kZXhJbmZvcm1hdGlvbk9wZXJhdGlvbih0aGlzLCBuYW1lLCBvcHRpb25zKTtcblxuICByZXR1cm4gZXhlY3V0ZU9wZXJhdGlvbih0aGlzLnMudG9wb2xvZ3ksIGluZGV4SW5mb3JtYXRpb25PcGVyYXRpb24sIGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogVW5yZWYgYWxsIHNvY2tldHNcbiAqIEBtZXRob2RcbiAqL1xuRGIucHJvdG90eXBlLnVucmVmID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucy50b3BvbG9neS51bnJlZigpO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgQ2hhbmdlIFN0cmVhbSwgd2F0Y2hpbmcgZm9yIG5ldyBjaGFuZ2VzIChpbnNlcnRpb25zLCB1cGRhdGVzLCByZXBsYWNlbWVudHMsIGRlbGV0aW9ucywgYW5kIGludmFsaWRhdGlvbnMpIGluIHRoaXMgZGF0YWJhc2UuIFdpbGwgaWdub3JlIGFsbCBjaGFuZ2VzIHRvIHN5c3RlbSBjb2xsZWN0aW9ucy5cbiAqIEBtZXRob2RcbiAqIEBzaW5jZSAzLjEuMFxuICogQHBhcmFtIHtBcnJheX0gW3BpcGVsaW5lXSBBbiBhcnJheSBvZiB7QGxpbmsgaHR0cHM6Ly9kb2NzLm1vbmdvZGIuY29tL21hbnVhbC9yZWZlcmVuY2Uvb3BlcmF0b3IvYWdncmVnYXRpb24tcGlwZWxpbmUvfGFnZ3JlZ2F0aW9uIHBpcGVsaW5lIHN0YWdlc30gdGhyb3VnaCB3aGljaCB0byBwYXNzIGNoYW5nZSBzdHJlYW0gZG9jdW1lbnRzLiBUaGlzIGFsbG93cyBmb3IgZmlsdGVyaW5nICh1c2luZyAkbWF0Y2gpIGFuZCBtYW5pcHVsYXRpbmcgdGhlIGNoYW5nZSBzdHJlYW0gZG9jdW1lbnRzLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBPcHRpb25hbCBzZXR0aW5nc1xuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmZ1bGxEb2N1bWVudD0nZGVmYXVsdCddIEFsbG93ZWQgdmFsdWVzOiDigJhkZWZhdWx04oCZLCDigJh1cGRhdGVMb29rdXDigJkuIFdoZW4gc2V0IHRvIOKAmHVwZGF0ZUxvb2t1cOKAmSwgdGhlIGNoYW5nZSBzdHJlYW0gd2lsbCBpbmNsdWRlIGJvdGggYSBkZWx0YSBkZXNjcmliaW5nIHRoZSBjaGFuZ2VzIHRvIHRoZSBkb2N1bWVudCwgYXMgd2VsbCBhcyBhIGNvcHkgb2YgdGhlIGVudGlyZSBkb2N1bWVudCB0aGF0IHdhcyBjaGFuZ2VkIGZyb20gc29tZSB0aW1lIGFmdGVyIHRoZSBjaGFuZ2Ugb2NjdXJyZWQuXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMucmVzdW1lQWZ0ZXJdIFNwZWNpZmllcyB0aGUgbG9naWNhbCBzdGFydGluZyBwb2ludCBmb3IgdGhlIG5ldyBjaGFuZ2Ugc3RyZWFtLiBUaGlzIHNob3VsZCBiZSB0aGUgX2lkIGZpZWxkIGZyb20gYSBwcmV2aW91c2x5IHJldHVybmVkIGNoYW5nZSBzdHJlYW0gZG9jdW1lbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4QXdhaXRUaW1lTVNdIFRoZSBtYXhpbXVtIGFtb3VudCBvZiB0aW1lIGZvciB0aGUgc2VydmVyIHRvIHdhaXQgb24gbmV3IGRvY3VtZW50cyB0byBzYXRpc2Z5IGEgY2hhbmdlIHN0cmVhbSBxdWVyeVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmJhdGNoU2l6ZT0xMDAwXSBUaGUgbnVtYmVyIG9mIGRvY3VtZW50cyB0byByZXR1cm4gcGVyIGJhdGNoLiBTZWUge0BsaW5rIGh0dHBzOi8vZG9jcy5tb25nb2RiLmNvbS9tYW51YWwvcmVmZXJlbmNlL2NvbW1hbmQvYWdncmVnYXRlfGFnZ3JlZ2F0aW9uIGRvY3VtZW50YXRpb259LlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLmNvbGxhdGlvbl0gU3BlY2lmeSBjb2xsYXRpb24gc2V0dGluZ3MgZm9yIG9wZXJhdGlvbi4gU2VlIHtAbGluayBodHRwczovL2RvY3MubW9uZ29kYi5jb20vbWFudWFsL3JlZmVyZW5jZS9jb21tYW5kL2FnZ3JlZ2F0ZXxhZ2dyZWdhdGlvbiBkb2N1bWVudGF0aW9ufS5cbiAqIEBwYXJhbSB7UmVhZFByZWZlcmVuY2V9IFtvcHRpb25zLnJlYWRQcmVmZXJlbmNlXSBUaGUgcmVhZCBwcmVmZXJlbmNlLiBEZWZhdWx0cyB0byB0aGUgcmVhZCBwcmVmZXJlbmNlIG9mIHRoZSBkYXRhYmFzZS4gU2VlIHtAbGluayBodHRwczovL2RvY3MubW9uZ29kYi5jb20vbWFudWFsL3JlZmVyZW5jZS9yZWFkLXByZWZlcmVuY2V8cmVhZCBwcmVmZXJlbmNlIGRvY3VtZW50YXRpb259LlxuICogQHBhcmFtIHtUaW1lc3RhbXB9IFtvcHRpb25zLnN0YXJ0QXRPcGVyYXRpb25UaW1lXSByZWNlaXZlIGNoYW5nZSBldmVudHMgdGhhdCBvY2N1ciBhZnRlciB0aGUgc3BlY2lmaWVkIHRpbWVzdGFtcFxuICogQHBhcmFtIHtDbGllbnRTZXNzaW9ufSBbb3B0aW9ucy5zZXNzaW9uXSBvcHRpb25hbCBzZXNzaW9uIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb25cbiAqIEByZXR1cm4ge0NoYW5nZVN0cmVhbX0gYSBDaGFuZ2VTdHJlYW0gaW5zdGFuY2UuXG4gKi9cbkRiLnByb3RvdHlwZS53YXRjaCA9IGZ1bmN0aW9uKHBpcGVsaW5lLCBvcHRpb25zKSB7XG4gIHBpcGVsaW5lID0gcGlwZWxpbmUgfHwgW107XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIEFsbG93IG9wdGlvbmFsbHkgbm90IHNwZWNpZnlpbmcgYSBwaXBlbGluZVxuICBpZiAoIUFycmF5LmlzQXJyYXkocGlwZWxpbmUpKSB7XG4gICAgb3B0aW9ucyA9IHBpcGVsaW5lO1xuICAgIHBpcGVsaW5lID0gW107XG4gIH1cblxuICByZXR1cm4gbmV3IENoYW5nZVN0cmVhbSh0aGlzLCBwaXBlbGluZSwgb3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgZGIgbG9nZ2VyXG4gKiBAbWV0aG9kXG4gKiBAcmV0dXJuIHtMb2dnZXJ9IHJldHVybiB0aGUgZGIgbG9nZ2VyXG4gKiBAaWdub3JlXG4gKi9cbkRiLnByb3RvdHlwZS5nZXRMb2dnZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMucy5sb2dnZXI7XG59O1xuXG4vKipcbiAqIERiIGNsb3NlIGV2ZW50XG4gKlxuICogRW1pdHRlZCBhZnRlciBhIHNvY2tldCBjbG9zZWQgYWdhaW5zdCBhIHNpbmdsZSBzZXJ2ZXIgb3IgbW9uZ29zIHByb3h5LlxuICpcbiAqIEBldmVudCBEYiNjbG9zZVxuICogQHR5cGUge01vbmdvRXJyb3J9XG4gKi9cblxuLyoqXG4gKiBEYiByZWNvbm5lY3QgZXZlbnRcbiAqXG4gKiAgKiBTZXJ2ZXI6IEVtaXR0ZWQgd2hlbiB0aGUgZHJpdmVyIGhhcyByZWNvbm5lY3RlZCBhbmQgcmUtYXV0aGVudGljYXRlZC5cbiAqICAqIFJlcGxpY2FTZXQ6IE4vQVxuICogICogTW9uZ29zOiBFbWl0dGVkIHdoZW4gdGhlIGRyaXZlciByZWNvbm5lY3RzIGFuZCByZS1hdXRoZW50aWNhdGVzIHN1Y2Nlc3NmdWxseSBhZ2FpbnN0IGEgTW9uZ29zLlxuICpcbiAqIEBldmVudCBEYiNyZWNvbm5lY3RcbiAqIEB0eXBlIHtvYmplY3R9XG4gKi9cblxuLyoqXG4gKiBEYiBlcnJvciBldmVudFxuICpcbiAqIEVtaXR0ZWQgYWZ0ZXIgYW4gZXJyb3Igb2NjdXJyZWQgYWdhaW5zdCBhIHNpbmdsZSBzZXJ2ZXIgb3IgbW9uZ29zIHByb3h5LlxuICpcbiAqIEBldmVudCBEYiNlcnJvclxuICogQHR5cGUge01vbmdvRXJyb3J9XG4gKi9cblxuLyoqXG4gKiBEYiB0aW1lb3V0IGV2ZW50XG4gKlxuICogRW1pdHRlZCBhZnRlciBhIHNvY2tldCB0aW1lb3V0IG9jY3VycmVkIGFnYWluc3QgYSBzaW5nbGUgc2VydmVyIG9yIG1vbmdvcyBwcm94eS5cbiAqXG4gKiBAZXZlbnQgRGIjdGltZW91dFxuICogQHR5cGUge01vbmdvRXJyb3J9XG4gKi9cblxuLyoqXG4gKiBEYiBwYXJzZUVycm9yIGV2ZW50XG4gKlxuICogVGhlIHBhcnNlRXJyb3IgZXZlbnQgaXMgZW1pdHRlZCBpZiB0aGUgZHJpdmVyIGRldGVjdHMgaWxsZWdhbCBvciBjb3JydXB0IEJTT04gYmVpbmcgcmVjZWl2ZWQgZnJvbSB0aGUgc2VydmVyLlxuICpcbiAqIEBldmVudCBEYiNwYXJzZUVycm9yXG4gKiBAdHlwZSB7TW9uZ29FcnJvcn1cbiAqL1xuXG4vKipcbiAqIERiIGZ1bGxzZXR1cCBldmVudCwgZW1pdHRlZCB3aGVuIGFsbCBzZXJ2ZXJzIGluIHRoZSB0b3BvbG9neSBoYXZlIGJlZW4gY29ubmVjdGVkIHRvIGF0IHN0YXJ0IHVwIHRpbWUuXG4gKlxuICogKiBTZXJ2ZXI6IEVtaXR0ZWQgd2hlbiB0aGUgZHJpdmVyIGhhcyBjb25uZWN0ZWQgdG8gdGhlIHNpbmdsZSBzZXJ2ZXIgYW5kIGhhcyBhdXRoZW50aWNhdGVkLlxuICogKiBSZXBsU2V0OiBFbWl0dGVkIGFmdGVyIHRoZSBkcml2ZXIgaGFzIGF0dGVtcHRlZCB0byBjb25uZWN0IHRvIGFsbCByZXBsaWNhc2V0IG1lbWJlcnMuXG4gKiAqIE1vbmdvczogRW1pdHRlZCBhZnRlciB0aGUgZHJpdmVyIGhhcyBhdHRlbXB0ZWQgdG8gY29ubmVjdCB0byBhbGwgbW9uZ29zIHByb3hpZXMuXG4gKlxuICogQGV2ZW50IERiI2Z1bGxzZXR1cFxuICogQHR5cGUge0RifVxuICovXG5cbi8vIENvbnN0YW50c1xuRGIuU1lTVEVNX05BTUVTUEFDRV9DT0xMRUNUSU9OID0gQ09OU1RBTlRTLlNZU1RFTV9OQU1FU1BBQ0VfQ09MTEVDVElPTjtcbkRiLlNZU1RFTV9JTkRFWF9DT0xMRUNUSU9OID0gQ09OU1RBTlRTLlNZU1RFTV9JTkRFWF9DT0xMRUNUSU9OO1xuRGIuU1lTVEVNX1BST0ZJTEVfQ09MTEVDVElPTiA9IENPTlNUQU5UUy5TWVNURU1fUFJPRklMRV9DT0xMRUNUSU9OO1xuRGIuU1lTVEVNX1VTRVJfQ09MTEVDVElPTiA9IENPTlNUQU5UUy5TWVNURU1fVVNFUl9DT0xMRUNUSU9OO1xuRGIuU1lTVEVNX0NPTU1BTkRfQ09MTEVDVElPTiA9IENPTlNUQU5UUy5TWVNURU1fQ09NTUFORF9DT0xMRUNUSU9OO1xuRGIuU1lTVEVNX0pTX0NPTExFQ1RJT04gPSBDT05TVEFOVFMuU1lTVEVNX0pTX0NPTExFQ1RJT047XG5cbm1vZHVsZS5leHBvcnRzID0gRGI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///150\n");

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Aspect = __webpack_require__(84).Aspect;\nconst CommandOperation = __webpack_require__(124);\nconst defineAspects = __webpack_require__(84).defineAspects;\nconst crypto = __webpack_require__(36);\nconst handleCallback = __webpack_require__(86).handleCallback;\nconst toError = __webpack_require__(86).toError;\n\nclass AddUserOperation extends CommandOperation {\n  constructor(db, username, password, options) {\n    super(db, options);\n\n    this.username = username;\n    this.password = password;\n  }\n\n  _buildCommand() {\n    const db = this.db;\n    const username = this.username;\n    const password = this.password;\n    const options = this.options;\n\n    // Get additional values\n    let roles = Array.isArray(options.roles) ? options.roles : [];\n\n    // If not roles defined print deprecated message\n    // TODO: handle deprecation properly\n    if (roles.length === 0) {\n      console.log('Creating a user without roles is deprecated in MongoDB >= 2.6');\n    }\n\n    // Check the db name and add roles if needed\n    if (\n      (db.databaseName.toLowerCase() === 'admin' || options.dbName === 'admin') &&\n      !Array.isArray(options.roles)\n    ) {\n      roles = ['root'];\n    } else if (!Array.isArray(options.roles)) {\n      roles = ['dbOwner'];\n    }\n\n    const digestPassword = db.s.topology.lastIsMaster().maxWireVersion >= 7;\n\n    let userPassword = password;\n\n    if (!digestPassword) {\n      // Use node md5 generator\n      const md5 = crypto.createHash('md5');\n      // Generate keys used for authentication\n      md5.update(username + ':mongo:' + password);\n      userPassword = md5.digest('hex');\n    }\n\n    // Build the command to execute\n    const command = {\n      createUser: username,\n      customData: options.customData || {},\n      roles: roles,\n      digestPassword\n    };\n\n    // No password\n    if (typeof password === 'string') {\n      command.pwd = userPassword;\n    }\n\n    return command;\n  }\n\n  execute(callback) {\n    const options = this.options;\n\n    // Error out if digestPassword set\n    if (options.digestPassword != null) {\n      return callback(\n        toError(\n          \"The digestPassword option is not supported via add_user. Please use db.command('createUser', ...) instead for this option.\"\n        )\n      );\n    }\n\n    // Attempt to execute auth command\n    super.execute((err, r) => {\n      if (!err) {\n        return handleCallback(callback, err, r);\n      }\n\n      return handleCallback(callback, err, null);\n    });\n  }\n}\n\ndefineAspects(AddUserOperation, Aspect.WRITE_OPERATION);\n\nmodule.exports = AddUserOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvYWRkX3VzZXIuanM/MWU2MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixlQUFlLG1CQUFPLENBQUMsRUFBYTtBQUNwQyx5QkFBeUIsbUJBQU8sQ0FBQyxHQUFXO0FBQzVDLHNCQUFzQixtQkFBTyxDQUFDLEVBQWE7QUFDM0MsZUFBZSxtQkFBTyxDQUFDLEVBQVE7QUFDL0IsdUJBQXVCLG1CQUFPLENBQUMsRUFBVTtBQUN6QyxnQkFBZ0IsbUJBQU8sQ0FBQyxFQUFVOztBQUVsQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBOztBQUVBIiwiZmlsZSI6IjE1MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgQXNwZWN0ID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5Bc3BlY3Q7XG5jb25zdCBDb21tYW5kT3BlcmF0aW9uID0gcmVxdWlyZSgnLi9jb21tYW5kJyk7XG5jb25zdCBkZWZpbmVBc3BlY3RzID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5kZWZpbmVBc3BlY3RzO1xuY29uc3QgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG5jb25zdCBoYW5kbGVDYWxsYmFjayA9IHJlcXVpcmUoJy4uL3V0aWxzJykuaGFuZGxlQ2FsbGJhY2s7XG5jb25zdCB0b0Vycm9yID0gcmVxdWlyZSgnLi4vdXRpbHMnKS50b0Vycm9yO1xuXG5jbGFzcyBBZGRVc2VyT3BlcmF0aW9uIGV4dGVuZHMgQ29tbWFuZE9wZXJhdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGRiLCB1c2VybmFtZSwgcGFzc3dvcmQsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihkYiwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLnVzZXJuYW1lID0gdXNlcm5hbWU7XG4gICAgdGhpcy5wYXNzd29yZCA9IHBhc3N3b3JkO1xuICB9XG5cbiAgX2J1aWxkQ29tbWFuZCgpIHtcbiAgICBjb25zdCBkYiA9IHRoaXMuZGI7XG4gICAgY29uc3QgdXNlcm5hbWUgPSB0aGlzLnVzZXJuYW1lO1xuICAgIGNvbnN0IHBhc3N3b3JkID0gdGhpcy5wYXNzd29yZDtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgLy8gR2V0IGFkZGl0aW9uYWwgdmFsdWVzXG4gICAgbGV0IHJvbGVzID0gQXJyYXkuaXNBcnJheShvcHRpb25zLnJvbGVzKSA/IG9wdGlvbnMucm9sZXMgOiBbXTtcblxuICAgIC8vIElmIG5vdCByb2xlcyBkZWZpbmVkIHByaW50IGRlcHJlY2F0ZWQgbWVzc2FnZVxuICAgIC8vIFRPRE86IGhhbmRsZSBkZXByZWNhdGlvbiBwcm9wZXJseVxuICAgIGlmIChyb2xlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnNvbGUubG9nKCdDcmVhdGluZyBhIHVzZXIgd2l0aG91dCByb2xlcyBpcyBkZXByZWNhdGVkIGluIE1vbmdvREIgPj0gMi42Jyk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgdGhlIGRiIG5hbWUgYW5kIGFkZCByb2xlcyBpZiBuZWVkZWRcbiAgICBpZiAoXG4gICAgICAoZGIuZGF0YWJhc2VOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdhZG1pbicgfHwgb3B0aW9ucy5kYk5hbWUgPT09ICdhZG1pbicpICYmXG4gICAgICAhQXJyYXkuaXNBcnJheShvcHRpb25zLnJvbGVzKVxuICAgICkge1xuICAgICAgcm9sZXMgPSBbJ3Jvb3QnXTtcbiAgICB9IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KG9wdGlvbnMucm9sZXMpKSB7XG4gICAgICByb2xlcyA9IFsnZGJPd25lciddO1xuICAgIH1cblxuICAgIGNvbnN0IGRpZ2VzdFBhc3N3b3JkID0gZGIucy50b3BvbG9neS5sYXN0SXNNYXN0ZXIoKS5tYXhXaXJlVmVyc2lvbiA+PSA3O1xuXG4gICAgbGV0IHVzZXJQYXNzd29yZCA9IHBhc3N3b3JkO1xuXG4gICAgaWYgKCFkaWdlc3RQYXNzd29yZCkge1xuICAgICAgLy8gVXNlIG5vZGUgbWQ1IGdlbmVyYXRvclxuICAgICAgY29uc3QgbWQ1ID0gY3J5cHRvLmNyZWF0ZUhhc2goJ21kNScpO1xuICAgICAgLy8gR2VuZXJhdGUga2V5cyB1c2VkIGZvciBhdXRoZW50aWNhdGlvblxuICAgICAgbWQ1LnVwZGF0ZSh1c2VybmFtZSArICc6bW9uZ286JyArIHBhc3N3b3JkKTtcbiAgICAgIHVzZXJQYXNzd29yZCA9IG1kNS5kaWdlc3QoJ2hleCcpO1xuICAgIH1cblxuICAgIC8vIEJ1aWxkIHRoZSBjb21tYW5kIHRvIGV4ZWN1dGVcbiAgICBjb25zdCBjb21tYW5kID0ge1xuICAgICAgY3JlYXRlVXNlcjogdXNlcm5hbWUsXG4gICAgICBjdXN0b21EYXRhOiBvcHRpb25zLmN1c3RvbURhdGEgfHwge30sXG4gICAgICByb2xlczogcm9sZXMsXG4gICAgICBkaWdlc3RQYXNzd29yZFxuICAgIH07XG5cbiAgICAvLyBObyBwYXNzd29yZFxuICAgIGlmICh0eXBlb2YgcGFzc3dvcmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb21tYW5kLnB3ZCA9IHVzZXJQYXNzd29yZDtcbiAgICB9XG5cbiAgICByZXR1cm4gY29tbWFuZDtcbiAgfVxuXG4gIGV4ZWN1dGUoY2FsbGJhY2spIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgLy8gRXJyb3Igb3V0IGlmIGRpZ2VzdFBhc3N3b3JkIHNldFxuICAgIGlmIChvcHRpb25zLmRpZ2VzdFBhc3N3b3JkICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhcbiAgICAgICAgdG9FcnJvcihcbiAgICAgICAgICBcIlRoZSBkaWdlc3RQYXNzd29yZCBvcHRpb24gaXMgbm90IHN1cHBvcnRlZCB2aWEgYWRkX3VzZXIuIFBsZWFzZSB1c2UgZGIuY29tbWFuZCgnY3JlYXRlVXNlcicsIC4uLikgaW5zdGVhZCBmb3IgdGhpcyBvcHRpb24uXCJcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBBdHRlbXB0IHRvIGV4ZWN1dGUgYXV0aCBjb21tYW5kXG4gICAgc3VwZXIuZXhlY3V0ZSgoZXJyLCByKSA9PiB7XG4gICAgICBpZiAoIWVycikge1xuICAgICAgICByZXR1cm4gaGFuZGxlQ2FsbGJhY2soY2FsbGJhY2ssIGVyciwgcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoYW5kbGVDYWxsYmFjayhjYWxsYmFjaywgZXJyLCBudWxsKTtcbiAgICB9KTtcbiAgfVxufVxuXG5kZWZpbmVBc3BlY3RzKEFkZFVzZXJPcGVyYXRpb24sIEFzcGVjdC5XUklURV9PUEVSQVRJT04pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFkZFVzZXJPcGVyYXRpb247XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///151\n");

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst handleCallback = __webpack_require__(86).handleCallback;\n\nlet collection;\nfunction loadCollection() {\n  if (!collection) {\n    collection = __webpack_require__(111);\n  }\n  return collection;\n}\n\nclass CollectionsOperation extends OperationBase {\n  constructor(db, options) {\n    super(options);\n\n    this.db = db;\n  }\n\n  execute(callback) {\n    const db = this.db;\n    let options = this.options;\n\n    let Collection = loadCollection();\n\n    options = Object.assign({}, options, { nameOnly: true });\n    // Let's get the collection names\n    db.listCollections({}, options).toArray((err, documents) => {\n      if (err != null) return handleCallback(callback, err, null);\n      // Filter collections removing any illegal ones\n      documents = documents.filter(doc => {\n        return doc.name.indexOf('$') === -1;\n      });\n\n      // Return the collection objects\n      handleCallback(\n        callback,\n        null,\n        documents.map(d => {\n          return new Collection(\n            db,\n            db.s.topology,\n            db.databaseName,\n            d.name,\n            db.s.pkFactory,\n            db.s.options\n          );\n        })\n      );\n    });\n  }\n}\n\nmodule.exports = CollectionsOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvY29sbGVjdGlvbnMuanM/YjU2OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixzQkFBc0IsbUJBQU8sQ0FBQyxFQUFhO0FBQzNDLHVCQUF1QixtQkFBTyxDQUFDLEVBQVU7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixtQkFBTyxDQUFDLEdBQWU7QUFDeEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSw4QkFBOEIsWUFBWSxpQkFBaUI7QUFDM0Q7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMTUyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBPcGVyYXRpb25CYXNlID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5PcGVyYXRpb25CYXNlO1xuY29uc3QgaGFuZGxlQ2FsbGJhY2sgPSByZXF1aXJlKCcuLi91dGlscycpLmhhbmRsZUNhbGxiYWNrO1xuXG5sZXQgY29sbGVjdGlvbjtcbmZ1bmN0aW9uIGxvYWRDb2xsZWN0aW9uKCkge1xuICBpZiAoIWNvbGxlY3Rpb24pIHtcbiAgICBjb2xsZWN0aW9uID0gcmVxdWlyZSgnLi4vY29sbGVjdGlvbicpO1xuICB9XG4gIHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5jbGFzcyBDb2xsZWN0aW9uc09wZXJhdGlvbiBleHRlbmRzIE9wZXJhdGlvbkJhc2Uge1xuICBjb25zdHJ1Y3RvcihkYiwgb3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgdGhpcy5kYiA9IGRiO1xuICB9XG5cbiAgZXhlY3V0ZShjYWxsYmFjaykge1xuICAgIGNvbnN0IGRiID0gdGhpcy5kYjtcbiAgICBsZXQgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgIGxldCBDb2xsZWN0aW9uID0gbG9hZENvbGxlY3Rpb24oKTtcblxuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7IG5hbWVPbmx5OiB0cnVlIH0pO1xuICAgIC8vIExldCdzIGdldCB0aGUgY29sbGVjdGlvbiBuYW1lc1xuICAgIGRiLmxpc3RDb2xsZWN0aW9ucyh7fSwgb3B0aW9ucykudG9BcnJheSgoZXJyLCBkb2N1bWVudHMpID0+IHtcbiAgICAgIGlmIChlcnIgIT0gbnVsbCkgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKGNhbGxiYWNrLCBlcnIsIG51bGwpO1xuICAgICAgLy8gRmlsdGVyIGNvbGxlY3Rpb25zIHJlbW92aW5nIGFueSBpbGxlZ2FsIG9uZXNcbiAgICAgIGRvY3VtZW50cyA9IGRvY3VtZW50cy5maWx0ZXIoZG9jID0+IHtcbiAgICAgICAgcmV0dXJuIGRvYy5uYW1lLmluZGV4T2YoJyQnKSA9PT0gLTE7XG4gICAgICB9KTtcblxuICAgICAgLy8gUmV0dXJuIHRoZSBjb2xsZWN0aW9uIG9iamVjdHNcbiAgICAgIGhhbmRsZUNhbGxiYWNrKFxuICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgZG9jdW1lbnRzLm1hcChkID0+IHtcbiAgICAgICAgICByZXR1cm4gbmV3IENvbGxlY3Rpb24oXG4gICAgICAgICAgICBkYixcbiAgICAgICAgICAgIGRiLnMudG9wb2xvZ3ksXG4gICAgICAgICAgICBkYi5kYXRhYmFzZU5hbWUsXG4gICAgICAgICAgICBkLm5hbWUsXG4gICAgICAgICAgICBkYi5zLnBrRmFjdG9yeSxcbiAgICAgICAgICAgIGRiLnMub3B0aW9uc1xuICAgICAgICAgICk7XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29sbGVjdGlvbnNPcGVyYXRpb247XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///152\n");

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Aspect = __webpack_require__(84).Aspect;\nconst defineAspects = __webpack_require__(84).defineAspects;\nconst CommandOperation = __webpack_require__(124);\nconst applyWriteConcern = __webpack_require__(86).applyWriteConcern;\nconst handleCallback = __webpack_require__(86).handleCallback;\nconst loadCollection = __webpack_require__(149).loadCollection;\nconst MongoError = __webpack_require__(3).MongoError;\nconst ReadPreference = __webpack_require__(3).ReadPreference;\n\n// Filter out any write concern options\nconst illegalCommandFields = [\n  'w',\n  'wtimeout',\n  'j',\n  'fsync',\n  'autoIndexId',\n  'strict',\n  'serializeFunctions',\n  'pkFactory',\n  'raw',\n  'readPreference',\n  'session',\n  'readConcern',\n  'writeConcern'\n];\n\nclass CreateCollectionOperation extends CommandOperation {\n  constructor(db, name, options) {\n    super(db, options);\n\n    this.name = name;\n  }\n\n  _buildCommand() {\n    const name = this.name;\n    const options = this.options;\n\n    // Create collection command\n    const cmd = { create: name };\n    // Add all optional parameters\n    for (let n in options) {\n      if (\n        options[n] != null &&\n        typeof options[n] !== 'function' &&\n        illegalCommandFields.indexOf(n) === -1\n      ) {\n        cmd[n] = options[n];\n      }\n    }\n\n    return cmd;\n  }\n\n  execute(callback) {\n    const db = this.db;\n    const name = this.name;\n    const options = this.options;\n\n    let Collection = loadCollection();\n\n    // Did the user destroy the topology\n    if (db.serverConfig && db.serverConfig.isDestroyed()) {\n      return callback(new MongoError('topology was destroyed'));\n    }\n\n    let listCollectionOptions = Object.assign({}, options, { nameOnly: true });\n    listCollectionOptions = applyWriteConcern(listCollectionOptions, { db }, listCollectionOptions);\n\n    // Check if we have the name\n    db\n      .listCollections({ name }, listCollectionOptions)\n      .setReadPreference(ReadPreference.PRIMARY)\n      .toArray((err, collections) => {\n        if (err != null) return handleCallback(callback, err, null);\n        if (collections.length > 0 && listCollectionOptions.strict) {\n          return handleCallback(\n            callback,\n            MongoError.create({\n              message: `Collection ${name} already exists. Currently in strict mode.`,\n              driver: true\n            }),\n            null\n          );\n        } else if (collections.length > 0) {\n          try {\n            return handleCallback(\n              callback,\n              null,\n              new Collection(db, db.s.topology, db.databaseName, name, db.s.pkFactory, options)\n            );\n          } catch (err) {\n            return handleCallback(callback, err);\n          }\n        }\n\n        // Execute command\n        super.execute(err => {\n          if (err) return handleCallback(callback, err);\n\n          try {\n            return handleCallback(\n              callback,\n              null,\n              new Collection(db, db.s.topology, db.databaseName, name, db.s.pkFactory, options)\n            );\n          } catch (err) {\n            return handleCallback(callback, err);\n          }\n        });\n      });\n  }\n}\n\ndefineAspects(CreateCollectionOperation, Aspect.WRITE_OPERATION);\n\nmodule.exports = CreateCollectionOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvY3JlYXRlX2NvbGxlY3Rpb24uanM/OWY1YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixlQUFlLG1CQUFPLENBQUMsRUFBYTtBQUNwQyxzQkFBc0IsbUJBQU8sQ0FBQyxFQUFhO0FBQzNDLHlCQUF5QixtQkFBTyxDQUFDLEdBQVc7QUFDNUMsMEJBQTBCLG1CQUFPLENBQUMsRUFBVTtBQUM1Qyx1QkFBdUIsbUJBQU8sQ0FBQyxFQUFVO0FBQ3pDLHVCQUF1QixtQkFBTyxDQUFDLEdBQW9CO0FBQ25ELG1CQUFtQixtQkFBTyxDQUFDLENBQVM7QUFDcEMsdUJBQXVCLG1CQUFPLENBQUMsQ0FBUzs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0RBQWdELFlBQVksaUJBQWlCO0FBQzdFLHNFQUFzRSxLQUFLOztBQUUzRTtBQUNBO0FBQ0Esd0JBQXdCLE9BQU87QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsS0FBSztBQUMxQztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBOztBQUVBOztBQUVBIiwiZmlsZSI6IjE1My5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgQXNwZWN0ID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5Bc3BlY3Q7XG5jb25zdCBkZWZpbmVBc3BlY3RzID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5kZWZpbmVBc3BlY3RzO1xuY29uc3QgQ29tbWFuZE9wZXJhdGlvbiA9IHJlcXVpcmUoJy4vY29tbWFuZCcpO1xuY29uc3QgYXBwbHlXcml0ZUNvbmNlcm4gPSByZXF1aXJlKCcuLi91dGlscycpLmFwcGx5V3JpdGVDb25jZXJuO1xuY29uc3QgaGFuZGxlQ2FsbGJhY2sgPSByZXF1aXJlKCcuLi91dGlscycpLmhhbmRsZUNhbGxiYWNrO1xuY29uc3QgbG9hZENvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9keW5hbWljX2xvYWRlcnMnKS5sb2FkQ29sbGVjdGlvbjtcbmNvbnN0IE1vbmdvRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlJykuTW9uZ29FcnJvcjtcbmNvbnN0IFJlYWRQcmVmZXJlbmNlID0gcmVxdWlyZSgnLi4vY29yZScpLlJlYWRQcmVmZXJlbmNlO1xuXG4vLyBGaWx0ZXIgb3V0IGFueSB3cml0ZSBjb25jZXJuIG9wdGlvbnNcbmNvbnN0IGlsbGVnYWxDb21tYW5kRmllbGRzID0gW1xuICAndycsXG4gICd3dGltZW91dCcsXG4gICdqJyxcbiAgJ2ZzeW5jJyxcbiAgJ2F1dG9JbmRleElkJyxcbiAgJ3N0cmljdCcsXG4gICdzZXJpYWxpemVGdW5jdGlvbnMnLFxuICAncGtGYWN0b3J5JyxcbiAgJ3JhdycsXG4gICdyZWFkUHJlZmVyZW5jZScsXG4gICdzZXNzaW9uJyxcbiAgJ3JlYWRDb25jZXJuJyxcbiAgJ3dyaXRlQ29uY2Vybidcbl07XG5cbmNsYXNzIENyZWF0ZUNvbGxlY3Rpb25PcGVyYXRpb24gZXh0ZW5kcyBDb21tYW5kT3BlcmF0aW9uIHtcbiAgY29uc3RydWN0b3IoZGIsIG5hbWUsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihkYiwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICB9XG5cbiAgX2J1aWxkQ29tbWFuZCgpIHtcbiAgICBjb25zdCBuYW1lID0gdGhpcy5uYW1lO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAvLyBDcmVhdGUgY29sbGVjdGlvbiBjb21tYW5kXG4gICAgY29uc3QgY21kID0geyBjcmVhdGU6IG5hbWUgfTtcbiAgICAvLyBBZGQgYWxsIG9wdGlvbmFsIHBhcmFtZXRlcnNcbiAgICBmb3IgKGxldCBuIGluIG9wdGlvbnMpIHtcbiAgICAgIGlmIChcbiAgICAgICAgb3B0aW9uc1tuXSAhPSBudWxsICYmXG4gICAgICAgIHR5cGVvZiBvcHRpb25zW25dICE9PSAnZnVuY3Rpb24nICYmXG4gICAgICAgIGlsbGVnYWxDb21tYW5kRmllbGRzLmluZGV4T2YobikgPT09IC0xXG4gICAgICApIHtcbiAgICAgICAgY21kW25dID0gb3B0aW9uc1tuXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY21kO1xuICB9XG5cbiAgZXhlY3V0ZShjYWxsYmFjaykge1xuICAgIGNvbnN0IGRiID0gdGhpcy5kYjtcbiAgICBjb25zdCBuYW1lID0gdGhpcy5uYW1lO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICBsZXQgQ29sbGVjdGlvbiA9IGxvYWRDb2xsZWN0aW9uKCk7XG5cbiAgICAvLyBEaWQgdGhlIHVzZXIgZGVzdHJveSB0aGUgdG9wb2xvZ3lcbiAgICBpZiAoZGIuc2VydmVyQ29uZmlnICYmIGRiLnNlcnZlckNvbmZpZy5pc0Rlc3Ryb3llZCgpKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2sobmV3IE1vbmdvRXJyb3IoJ3RvcG9sb2d5IHdhcyBkZXN0cm95ZWQnKSk7XG4gICAgfVxuXG4gICAgbGV0IGxpc3RDb2xsZWN0aW9uT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHsgbmFtZU9ubHk6IHRydWUgfSk7XG4gICAgbGlzdENvbGxlY3Rpb25PcHRpb25zID0gYXBwbHlXcml0ZUNvbmNlcm4obGlzdENvbGxlY3Rpb25PcHRpb25zLCB7IGRiIH0sIGxpc3RDb2xsZWN0aW9uT3B0aW9ucyk7XG5cbiAgICAvLyBDaGVjayBpZiB3ZSBoYXZlIHRoZSBuYW1lXG4gICAgZGJcbiAgICAgIC5saXN0Q29sbGVjdGlvbnMoeyBuYW1lIH0sIGxpc3RDb2xsZWN0aW9uT3B0aW9ucylcbiAgICAgIC5zZXRSZWFkUHJlZmVyZW5jZShSZWFkUHJlZmVyZW5jZS5QUklNQVJZKVxuICAgICAgLnRvQXJyYXkoKGVyciwgY29sbGVjdGlvbnMpID0+IHtcbiAgICAgICAgaWYgKGVyciAhPSBudWxsKSByZXR1cm4gaGFuZGxlQ2FsbGJhY2soY2FsbGJhY2ssIGVyciwgbnVsbCk7XG4gICAgICAgIGlmIChjb2xsZWN0aW9ucy5sZW5ndGggPiAwICYmIGxpc3RDb2xsZWN0aW9uT3B0aW9ucy5zdHJpY3QpIHtcbiAgICAgICAgICByZXR1cm4gaGFuZGxlQ2FsbGJhY2soXG4gICAgICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgICAgIE1vbmdvRXJyb3IuY3JlYXRlKHtcbiAgICAgICAgICAgICAgbWVzc2FnZTogYENvbGxlY3Rpb24gJHtuYW1lfSBhbHJlYWR5IGV4aXN0cy4gQ3VycmVudGx5IGluIHN0cmljdCBtb2RlLmAsXG4gICAgICAgICAgICAgIGRyaXZlcjogdHJ1ZVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBudWxsXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2xsZWN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVDYWxsYmFjayhcbiAgICAgICAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIG5ldyBDb2xsZWN0aW9uKGRiLCBkYi5zLnRvcG9sb2d5LCBkYi5kYXRhYmFzZU5hbWUsIG5hbWUsIGRiLnMucGtGYWN0b3J5LCBvcHRpb25zKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVDYWxsYmFjayhjYWxsYmFjaywgZXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBFeGVjdXRlIGNvbW1hbmRcbiAgICAgICAgc3VwZXIuZXhlY3V0ZShlcnIgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHJldHVybiBoYW5kbGVDYWxsYmFjayhjYWxsYmFjaywgZXJyKTtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlQ2FsbGJhY2soXG4gICAgICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBuZXcgQ29sbGVjdGlvbihkYiwgZGIucy50b3BvbG9neSwgZGIuZGF0YWJhc2VOYW1lLCBuYW1lLCBkYi5zLnBrRmFjdG9yeSwgb3B0aW9ucylcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlQ2FsbGJhY2soY2FsbGJhY2ssIGVycik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICB9XG59XG5cbmRlZmluZUFzcGVjdHMoQ3JlYXRlQ29sbGVjdGlvbk9wZXJhdGlvbiwgQXNwZWN0LldSSVRFX09QRVJBVElPTik7XG5cbm1vZHVsZS5leHBvcnRzID0gQ3JlYXRlQ29sbGVjdGlvbk9wZXJhdGlvbjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///153\n");

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst handleCallback = __webpack_require__(86).handleCallback;\nconst MongoError = __webpack_require__(3).MongoError;\nconst MongoDBNamespace = __webpack_require__(86).MongoDBNamespace;\n\nclass ExecuteDbAdminCommandOperation extends OperationBase {\n  constructor(db, selector, options) {\n    super(options);\n\n    this.db = db;\n    this.selector = selector;\n  }\n\n  execute(callback) {\n    const db = this.db;\n    const selector = this.selector;\n    const options = this.options;\n\n    const namespace = new MongoDBNamespace('admin', '$cmd');\n    db.s.topology.command(namespace, selector, options, (err, result) => {\n      // Did the user destroy the topology\n      if (db.serverConfig && db.serverConfig.isDestroyed()) {\n        return callback(new MongoError('topology was destroyed'));\n      }\n\n      if (err) return handleCallback(callback, err);\n      handleCallback(callback, null, result.result);\n    });\n  }\n}\n\nmodule.exports = ExecuteDbAdminCommandOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZXhlY3V0ZV9kYl9hZG1pbl9jb21tYW5kLmpzP2I2NjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLG1CQUFPLENBQUMsRUFBYTtBQUMzQyx1QkFBdUIsbUJBQU8sQ0FBQyxFQUFVO0FBQ3pDLG1CQUFtQixtQkFBTyxDQUFDLENBQVM7QUFDcEMseUJBQXlCLG1CQUFPLENBQUMsRUFBVTs7QUFFM0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBIiwiZmlsZSI6IjE1NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgT3BlcmF0aW9uQmFzZSA9IHJlcXVpcmUoJy4vb3BlcmF0aW9uJykuT3BlcmF0aW9uQmFzZTtcbmNvbnN0IGhhbmRsZUNhbGxiYWNrID0gcmVxdWlyZSgnLi4vdXRpbHMnKS5oYW5kbGVDYWxsYmFjaztcbmNvbnN0IE1vbmdvRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlJykuTW9uZ29FcnJvcjtcbmNvbnN0IE1vbmdvREJOYW1lc3BhY2UgPSByZXF1aXJlKCcuLi91dGlscycpLk1vbmdvREJOYW1lc3BhY2U7XG5cbmNsYXNzIEV4ZWN1dGVEYkFkbWluQ29tbWFuZE9wZXJhdGlvbiBleHRlbmRzIE9wZXJhdGlvbkJhc2Uge1xuICBjb25zdHJ1Y3RvcihkYiwgc2VsZWN0b3IsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIHRoaXMuZGIgPSBkYjtcbiAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gIH1cblxuICBleGVjdXRlKGNhbGxiYWNrKSB7XG4gICAgY29uc3QgZGIgPSB0aGlzLmRiO1xuICAgIGNvbnN0IHNlbGVjdG9yID0gdGhpcy5zZWxlY3RvcjtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgY29uc3QgbmFtZXNwYWNlID0gbmV3IE1vbmdvREJOYW1lc3BhY2UoJ2FkbWluJywgJyRjbWQnKTtcbiAgICBkYi5zLnRvcG9sb2d5LmNvbW1hbmQobmFtZXNwYWNlLCBzZWxlY3Rvciwgb3B0aW9ucywgKGVyciwgcmVzdWx0KSA9PiB7XG4gICAgICAvLyBEaWQgdGhlIHVzZXIgZGVzdHJveSB0aGUgdG9wb2xvZ3lcbiAgICAgIGlmIChkYi5zZXJ2ZXJDb25maWcgJiYgZGIuc2VydmVyQ29uZmlnLmlzRGVzdHJveWVkKCkpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBNb25nb0Vycm9yKCd0b3BvbG9neSB3YXMgZGVzdHJveWVkJykpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXJyKSByZXR1cm4gaGFuZGxlQ2FsbGJhY2soY2FsbGJhY2ssIGVycik7XG4gICAgICBoYW5kbGVDYWxsYmFjayhjYWxsYmFjaywgbnVsbCwgcmVzdWx0LnJlc3VsdCk7XG4gICAgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRlRGJBZG1pbkNvbW1hbmRPcGVyYXRpb247XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///154\n");

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst CommandOperationV2 = __webpack_require__(120);\nconst Aspect = __webpack_require__(84).Aspect;\nconst defineAspects = __webpack_require__(84).defineAspects;\nconst maxWireVersion = __webpack_require__(35).maxWireVersion;\nconst CONSTANTS = __webpack_require__(110);\n\nconst LIST_COLLECTIONS_WIRE_VERSION = 3;\n\nfunction listCollectionsTransforms(databaseName) {\n  const matching = `${databaseName}.`;\n\n  return {\n    doc: doc => {\n      const index = doc.name.indexOf(matching);\n      // Remove database name if available\n      if (doc.name && index === 0) {\n        doc.name = doc.name.substr(index + matching.length);\n      }\n\n      return doc;\n    }\n  };\n}\n\nclass ListCollectionsOperation extends CommandOperationV2 {\n  constructor(db, filter, options) {\n    super(db, options, { fullResponse: true });\n\n    this.db = db;\n    this.filter = filter;\n    this.nameOnly = !!this.options.nameOnly;\n\n    if (typeof this.options.batchSize === 'number') {\n      this.batchSize = this.options.batchSize;\n    }\n  }\n\n  execute(server, callback) {\n    if (maxWireVersion(server) < LIST_COLLECTIONS_WIRE_VERSION) {\n      let filter = this.filter;\n      const databaseName = this.db.s.namespace.db;\n\n      // If we have legacy mode and have not provided a full db name filter it\n      if (\n        typeof filter.name === 'string' &&\n        !new RegExp('^' + databaseName + '\\\\.').test(filter.name)\n      ) {\n        filter = Object.assign({}, filter);\n        filter.name = this.db.s.namespace.withCollection(filter.name).toString();\n      }\n\n      // No filter, filter by current database\n      if (filter == null) {\n        filter.name = `/${databaseName}/`;\n      }\n\n      // Rewrite the filter to use $and to filter out indexes\n      if (filter.name) {\n        filter = { $and: [{ name: filter.name }, { name: /^((?!\\$).)*$/ }] };\n      } else {\n        filter = { name: /^((?!\\$).)*$/ };\n      }\n\n      const transforms = listCollectionsTransforms(databaseName);\n      server.query(\n        `${databaseName}.${CONSTANTS.SYSTEM_NAMESPACE_COLLECTION}`,\n        { query: filter },\n        { batchSize: this.batchSize || 1000 },\n        {},\n        (err, result) => {\n          if (\n            result &&\n            result.message &&\n            result.message.documents &&\n            Array.isArray(result.message.documents)\n          ) {\n            result.message.documents = result.message.documents.map(transforms.doc);\n          }\n\n          callback(err, result);\n        }\n      );\n\n      return;\n    }\n\n    const command = {\n      listCollections: 1,\n      filter: this.filter,\n      cursor: this.batchSize ? { batchSize: this.batchSize } : {},\n      nameOnly: this.nameOnly\n    };\n\n    return super.executeCommand(server, command, callback);\n  }\n}\n\ndefineAspects(ListCollectionsOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.EXECUTE_WITH_SELECTION\n]);\n\nmodule.exports = ListCollectionsOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvbGlzdF9jb2xsZWN0aW9ucy5qcz9iZGEzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLDJCQUEyQixtQkFBTyxDQUFDLEdBQWM7QUFDakQsZUFBZSxtQkFBTyxDQUFDLEVBQWE7QUFDcEMsc0JBQXNCLG1CQUFPLENBQUMsRUFBYTtBQUMzQyx1QkFBdUIsbUJBQU8sQ0FBQyxFQUFlO0FBQzlDLGtCQUFrQixtQkFBTyxDQUFDLEdBQWM7O0FBRXhDOztBQUVBO0FBQ0Esc0JBQXNCLGFBQWE7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0IscUJBQXFCOztBQUU3QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBOztBQUVBO0FBQ0E7QUFDQSwwQkFBMEIsYUFBYTtBQUN2Qzs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLFNBQVMsb0JBQW9CLEdBQUcsdUJBQXVCO0FBQ3pFLE9BQU87QUFDUCxrQkFBa0I7QUFDbEI7O0FBRUE7QUFDQTtBQUNBLFdBQVcsYUFBYSxHQUFHLHNDQUFzQztBQUNqRSxTQUFTLGdCQUFnQjtBQUN6QixTQUFTLG9DQUFvQztBQUM3QyxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyw0QkFBNEIsS0FBSztBQUNqRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjE1NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgQ29tbWFuZE9wZXJhdGlvblYyID0gcmVxdWlyZSgnLi9jb21tYW5kX3YyJyk7XG5jb25zdCBBc3BlY3QgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLkFzcGVjdDtcbmNvbnN0IGRlZmluZUFzcGVjdHMgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLmRlZmluZUFzcGVjdHM7XG5jb25zdCBtYXhXaXJlVmVyc2lvbiA9IHJlcXVpcmUoJy4uL2NvcmUvdXRpbHMnKS5tYXhXaXJlVmVyc2lvbjtcbmNvbnN0IENPTlNUQU5UUyA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cycpO1xuXG5jb25zdCBMSVNUX0NPTExFQ1RJT05TX1dJUkVfVkVSU0lPTiA9IDM7XG5cbmZ1bmN0aW9uIGxpc3RDb2xsZWN0aW9uc1RyYW5zZm9ybXMoZGF0YWJhc2VOYW1lKSB7XG4gIGNvbnN0IG1hdGNoaW5nID0gYCR7ZGF0YWJhc2VOYW1lfS5gO1xuXG4gIHJldHVybiB7XG4gICAgZG9jOiBkb2MgPT4ge1xuICAgICAgY29uc3QgaW5kZXggPSBkb2MubmFtZS5pbmRleE9mKG1hdGNoaW5nKTtcbiAgICAgIC8vIFJlbW92ZSBkYXRhYmFzZSBuYW1lIGlmIGF2YWlsYWJsZVxuICAgICAgaWYgKGRvYy5uYW1lICYmIGluZGV4ID09PSAwKSB7XG4gICAgICAgIGRvYy5uYW1lID0gZG9jLm5hbWUuc3Vic3RyKGluZGV4ICsgbWF0Y2hpbmcubGVuZ3RoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRvYztcbiAgICB9XG4gIH07XG59XG5cbmNsYXNzIExpc3RDb2xsZWN0aW9uc09wZXJhdGlvbiBleHRlbmRzIENvbW1hbmRPcGVyYXRpb25WMiB7XG4gIGNvbnN0cnVjdG9yKGRiLCBmaWx0ZXIsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihkYiwgb3B0aW9ucywgeyBmdWxsUmVzcG9uc2U6IHRydWUgfSk7XG5cbiAgICB0aGlzLmRiID0gZGI7XG4gICAgdGhpcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgdGhpcy5uYW1lT25seSA9ICEhdGhpcy5vcHRpb25zLm5hbWVPbmx5O1xuXG4gICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuYmF0Y2hTaXplID09PSAnbnVtYmVyJykge1xuICAgICAgdGhpcy5iYXRjaFNpemUgPSB0aGlzLm9wdGlvbnMuYmF0Y2hTaXplO1xuICAgIH1cbiAgfVxuXG4gIGV4ZWN1dGUoc2VydmVyLCBjYWxsYmFjaykge1xuICAgIGlmIChtYXhXaXJlVmVyc2lvbihzZXJ2ZXIpIDwgTElTVF9DT0xMRUNUSU9OU19XSVJFX1ZFUlNJT04pIHtcbiAgICAgIGxldCBmaWx0ZXIgPSB0aGlzLmZpbHRlcjtcbiAgICAgIGNvbnN0IGRhdGFiYXNlTmFtZSA9IHRoaXMuZGIucy5uYW1lc3BhY2UuZGI7XG5cbiAgICAgIC8vIElmIHdlIGhhdmUgbGVnYWN5IG1vZGUgYW5kIGhhdmUgbm90IHByb3ZpZGVkIGEgZnVsbCBkYiBuYW1lIGZpbHRlciBpdFxuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgZmlsdGVyLm5hbWUgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICFuZXcgUmVnRXhwKCdeJyArIGRhdGFiYXNlTmFtZSArICdcXFxcLicpLnRlc3QoZmlsdGVyLm5hbWUpXG4gICAgICApIHtcbiAgICAgICAgZmlsdGVyID0gT2JqZWN0LmFzc2lnbih7fSwgZmlsdGVyKTtcbiAgICAgICAgZmlsdGVyLm5hbWUgPSB0aGlzLmRiLnMubmFtZXNwYWNlLndpdGhDb2xsZWN0aW9uKGZpbHRlci5uYW1lKS50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICAvLyBObyBmaWx0ZXIsIGZpbHRlciBieSBjdXJyZW50IGRhdGFiYXNlXG4gICAgICBpZiAoZmlsdGVyID09IG51bGwpIHtcbiAgICAgICAgZmlsdGVyLm5hbWUgPSBgLyR7ZGF0YWJhc2VOYW1lfS9gO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXdyaXRlIHRoZSBmaWx0ZXIgdG8gdXNlICRhbmQgdG8gZmlsdGVyIG91dCBpbmRleGVzXG4gICAgICBpZiAoZmlsdGVyLm5hbWUpIHtcbiAgICAgICAgZmlsdGVyID0geyAkYW5kOiBbeyBuYW1lOiBmaWx0ZXIubmFtZSB9LCB7IG5hbWU6IC9eKCg/IVxcJCkuKSokLyB9XSB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlsdGVyID0geyBuYW1lOiAvXigoPyFcXCQpLikqJC8gfTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdHJhbnNmb3JtcyA9IGxpc3RDb2xsZWN0aW9uc1RyYW5zZm9ybXMoZGF0YWJhc2VOYW1lKTtcbiAgICAgIHNlcnZlci5xdWVyeShcbiAgICAgICAgYCR7ZGF0YWJhc2VOYW1lfS4ke0NPTlNUQU5UUy5TWVNURU1fTkFNRVNQQUNFX0NPTExFQ1RJT059YCxcbiAgICAgICAgeyBxdWVyeTogZmlsdGVyIH0sXG4gICAgICAgIHsgYmF0Y2hTaXplOiB0aGlzLmJhdGNoU2l6ZSB8fCAxMDAwIH0sXG4gICAgICAgIHt9LFxuICAgICAgICAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICByZXN1bHQgJiZcbiAgICAgICAgICAgIHJlc3VsdC5tZXNzYWdlICYmXG4gICAgICAgICAgICByZXN1bHQubWVzc2FnZS5kb2N1bWVudHMgJiZcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkocmVzdWx0Lm1lc3NhZ2UuZG9jdW1lbnRzKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmVzdWx0Lm1lc3NhZ2UuZG9jdW1lbnRzID0gcmVzdWx0Lm1lc3NhZ2UuZG9jdW1lbnRzLm1hcCh0cmFuc2Zvcm1zLmRvYyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2FsbGJhY2soZXJyLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgIGxpc3RDb2xsZWN0aW9uczogMSxcbiAgICAgIGZpbHRlcjogdGhpcy5maWx0ZXIsXG4gICAgICBjdXJzb3I6IHRoaXMuYmF0Y2hTaXplID8geyBiYXRjaFNpemU6IHRoaXMuYmF0Y2hTaXplIH0gOiB7fSxcbiAgICAgIG5hbWVPbmx5OiB0aGlzLm5hbWVPbmx5XG4gICAgfTtcblxuICAgIHJldHVybiBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIGNvbW1hbmQsIGNhbGxiYWNrKTtcbiAgfVxufVxuXG5kZWZpbmVBc3BlY3RzKExpc3RDb2xsZWN0aW9uc09wZXJhdGlvbiwgW1xuICBBc3BlY3QuUkVBRF9PUEVSQVRJT04sXG4gIEFzcGVjdC5SRVRSWUFCTEUsXG4gIEFzcGVjdC5FWEVDVVRFX1dJVEhfU0VMRUNUSU9OXG5dKTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0Q29sbGVjdGlvbnNPcGVyYXRpb247XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///155\n");

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst CommandOperation = __webpack_require__(124);\n\nclass ProfilingLevelOperation extends CommandOperation {\n  constructor(db, command, options) {\n    super(db, options);\n  }\n\n  _buildCommand() {\n    const command = { profile: -1 };\n\n    return command;\n  }\n\n  execute(callback) {\n    super.execute((err, doc) => {\n      if (err == null && doc.ok === 1) {\n        const was = doc.was;\n        if (was === 0) return callback(null, 'off');\n        if (was === 1) return callback(null, 'slow_only');\n        if (was === 2) return callback(null, 'all');\n        return callback(new Error('Error: illegal profiling level value ' + was), null);\n      } else {\n        err != null ? callback(err, null) : callback(new Error('Error with profile command'), null);\n      }\n    });\n  }\n}\n\nmodule.exports = ProfilingLevelOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvcHJvZmlsaW5nX2xldmVsLmpzP2FiMGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIseUJBQXlCLG1CQUFPLENBQUMsR0FBVzs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQkFBcUI7O0FBRXJCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMTU2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBDb21tYW5kT3BlcmF0aW9uID0gcmVxdWlyZSgnLi9jb21tYW5kJyk7XG5cbmNsYXNzIFByb2ZpbGluZ0xldmVsT3BlcmF0aW9uIGV4dGVuZHMgQ29tbWFuZE9wZXJhdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGRiLCBjb21tYW5kLCBvcHRpb25zKSB7XG4gICAgc3VwZXIoZGIsIG9wdGlvbnMpO1xuICB9XG5cbiAgX2J1aWxkQ29tbWFuZCgpIHtcbiAgICBjb25zdCBjb21tYW5kID0geyBwcm9maWxlOiAtMSB9O1xuXG4gICAgcmV0dXJuIGNvbW1hbmQ7XG4gIH1cblxuICBleGVjdXRlKGNhbGxiYWNrKSB7XG4gICAgc3VwZXIuZXhlY3V0ZSgoZXJyLCBkb2MpID0+IHtcbiAgICAgIGlmIChlcnIgPT0gbnVsbCAmJiBkb2Mub2sgPT09IDEpIHtcbiAgICAgICAgY29uc3Qgd2FzID0gZG9jLndhcztcbiAgICAgICAgaWYgKHdhcyA9PT0gMCkgcmV0dXJuIGNhbGxiYWNrKG51bGwsICdvZmYnKTtcbiAgICAgICAgaWYgKHdhcyA9PT0gMSkgcmV0dXJuIGNhbGxiYWNrKG51bGwsICdzbG93X29ubHknKTtcbiAgICAgICAgaWYgKHdhcyA9PT0gMikgcmV0dXJuIGNhbGxiYWNrKG51bGwsICdhbGwnKTtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcignRXJyb3I6IGlsbGVnYWwgcHJvZmlsaW5nIGxldmVsIHZhbHVlICcgKyB3YXMpLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVyciAhPSBudWxsID8gY2FsbGJhY2soZXJyLCBudWxsKSA6IGNhbGxiYWNrKG5ldyBFcnJvcignRXJyb3Igd2l0aCBwcm9maWxlIGNvbW1hbmQnKSwgbnVsbCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQcm9maWxpbmdMZXZlbE9wZXJhdGlvbjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///156\n");

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Aspect = __webpack_require__(84).Aspect;\nconst CommandOperation = __webpack_require__(124);\nconst defineAspects = __webpack_require__(84).defineAspects;\nconst handleCallback = __webpack_require__(86).handleCallback;\nconst WriteConcern = __webpack_require__(87);\n\nclass RemoveUserOperation extends CommandOperation {\n  constructor(db, username, options) {\n    const commandOptions = {};\n\n    const writeConcern = WriteConcern.fromOptions(options);\n    if (writeConcern != null) {\n      commandOptions.writeConcern = writeConcern;\n    }\n\n    if (options.dbName) {\n      commandOptions.dbName = options.dbName;\n    }\n\n    // Add maxTimeMS to options if set\n    if (typeof options.maxTimeMS === 'number') {\n      commandOptions.maxTimeMS = options.maxTimeMS;\n    }\n\n    super(db, commandOptions);\n\n    this.username = username;\n  }\n\n  _buildCommand() {\n    const username = this.username;\n\n    // Build the command to execute\n    const command = { dropUser: username };\n\n    return command;\n  }\n\n  execute(callback) {\n    // Attempt to execute command\n    super.execute((err, result) => {\n      if (err) return handleCallback(callback, err, null);\n      handleCallback(callback, err, result.ok ? true : false);\n    });\n  }\n}\n\ndefineAspects(RemoveUserOperation, [Aspect.WRITE_OPERATION, Aspect.SKIP_SESSIONS]);\n\nmodule.exports = RemoveUserOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvcmVtb3ZlX3VzZXIuanM/NDQyYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixlQUFlLG1CQUFPLENBQUMsRUFBYTtBQUNwQyx5QkFBeUIsbUJBQU8sQ0FBQyxHQUFXO0FBQzVDLHNCQUFzQixtQkFBTyxDQUFDLEVBQWE7QUFDM0MsdUJBQXVCLG1CQUFPLENBQUMsRUFBVTtBQUN6QyxxQkFBcUIsbUJBQU8sQ0FBQyxFQUFrQjs7QUFFL0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxxQkFBcUI7O0FBRXJCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBOztBQUVBIiwiZmlsZSI6IjE1Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgQXNwZWN0ID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5Bc3BlY3Q7XG5jb25zdCBDb21tYW5kT3BlcmF0aW9uID0gcmVxdWlyZSgnLi9jb21tYW5kJyk7XG5jb25zdCBkZWZpbmVBc3BlY3RzID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5kZWZpbmVBc3BlY3RzO1xuY29uc3QgaGFuZGxlQ2FsbGJhY2sgPSByZXF1aXJlKCcuLi91dGlscycpLmhhbmRsZUNhbGxiYWNrO1xuY29uc3QgV3JpdGVDb25jZXJuID0gcmVxdWlyZSgnLi4vd3JpdGVfY29uY2VybicpO1xuXG5jbGFzcyBSZW1vdmVVc2VyT3BlcmF0aW9uIGV4dGVuZHMgQ29tbWFuZE9wZXJhdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGRiLCB1c2VybmFtZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IGNvbW1hbmRPcHRpb25zID0ge307XG5cbiAgICBjb25zdCB3cml0ZUNvbmNlcm4gPSBXcml0ZUNvbmNlcm4uZnJvbU9wdGlvbnMob3B0aW9ucyk7XG4gICAgaWYgKHdyaXRlQ29uY2VybiAhPSBudWxsKSB7XG4gICAgICBjb21tYW5kT3B0aW9ucy53cml0ZUNvbmNlcm4gPSB3cml0ZUNvbmNlcm47XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZGJOYW1lKSB7XG4gICAgICBjb21tYW5kT3B0aW9ucy5kYk5hbWUgPSBvcHRpb25zLmRiTmFtZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgbWF4VGltZU1TIHRvIG9wdGlvbnMgaWYgc2V0XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLm1heFRpbWVNUyA9PT0gJ251bWJlcicpIHtcbiAgICAgIGNvbW1hbmRPcHRpb25zLm1heFRpbWVNUyA9IG9wdGlvbnMubWF4VGltZU1TO1xuICAgIH1cblxuICAgIHN1cGVyKGRiLCBjb21tYW5kT3B0aW9ucyk7XG5cbiAgICB0aGlzLnVzZXJuYW1lID0gdXNlcm5hbWU7XG4gIH1cblxuICBfYnVpbGRDb21tYW5kKCkge1xuICAgIGNvbnN0IHVzZXJuYW1lID0gdGhpcy51c2VybmFtZTtcblxuICAgIC8vIEJ1aWxkIHRoZSBjb21tYW5kIHRvIGV4ZWN1dGVcbiAgICBjb25zdCBjb21tYW5kID0geyBkcm9wVXNlcjogdXNlcm5hbWUgfTtcblxuICAgIHJldHVybiBjb21tYW5kO1xuICB9XG5cbiAgZXhlY3V0ZShjYWxsYmFjaykge1xuICAgIC8vIEF0dGVtcHQgdG8gZXhlY3V0ZSBjb21tYW5kXG4gICAgc3VwZXIuZXhlY3V0ZSgoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgIGlmIChlcnIpIHJldHVybiBoYW5kbGVDYWxsYmFjayhjYWxsYmFjaywgZXJyLCBudWxsKTtcbiAgICAgIGhhbmRsZUNhbGxiYWNrKGNhbGxiYWNrLCBlcnIsIHJlc3VsdC5vayA/IHRydWUgOiBmYWxzZSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZGVmaW5lQXNwZWN0cyhSZW1vdmVVc2VyT3BlcmF0aW9uLCBbQXNwZWN0LldSSVRFX09QRVJBVElPTiwgQXNwZWN0LlNLSVBfU0VTU0lPTlNdKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZW1vdmVVc2VyT3BlcmF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///157\n");

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst applyWriteConcern = __webpack_require__(86).applyWriteConcern;\nconst checkCollectionName = __webpack_require__(86).checkCollectionName;\nconst executeDbAdminCommand = __webpack_require__(109).executeDbAdminCommand;\nconst handleCallback = __webpack_require__(86).handleCallback;\nconst loadCollection = __webpack_require__(149).loadCollection;\nconst toError = __webpack_require__(86).toError;\n\nclass RenameOperation extends OperationBase {\n  constructor(collection, newName, options) {\n    super(options);\n\n    this.collection = collection;\n    this.newName = newName;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const newName = this.newName;\n    const options = this.options;\n\n    let Collection = loadCollection();\n    // Check the collection name\n    checkCollectionName(newName);\n    // Build the command\n    const renameCollection = coll.namespace;\n    const toCollection = coll.s.namespace.withCollection(newName).toString();\n    const dropTarget = typeof options.dropTarget === 'boolean' ? options.dropTarget : false;\n    const cmd = { renameCollection: renameCollection, to: toCollection, dropTarget: dropTarget };\n\n    // Decorate command with writeConcern if supported\n    applyWriteConcern(cmd, { db: coll.s.db, collection: coll }, options);\n\n    // Execute against admin\n    executeDbAdminCommand(coll.s.db.admin().s.db, cmd, options, (err, doc) => {\n      if (err) return handleCallback(callback, err, null);\n      // We have an error\n      if (doc.errmsg) return handleCallback(callback, toError(doc), null);\n      try {\n        return handleCallback(\n          callback,\n          null,\n          new Collection(\n            coll.s.db,\n            coll.s.topology,\n            coll.s.namespace.db,\n            newName,\n            coll.s.pkFactory,\n            coll.s.options\n          )\n        );\n      } catch (err) {\n        return handleCallback(callback, toError(err), null);\n      }\n    });\n  }\n}\n\nmodule.exports = RenameOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvcmVuYW1lLmpzPzMxOGEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLG1CQUFPLENBQUMsRUFBYTtBQUMzQywwQkFBMEIsbUJBQU8sQ0FBQyxFQUFVO0FBQzVDLDRCQUE0QixtQkFBTyxDQUFDLEVBQVU7QUFDOUMsOEJBQThCLG1CQUFPLENBQUMsR0FBVTtBQUNoRCx1QkFBdUIsbUJBQU8sQ0FBQyxFQUFVO0FBQ3pDLHVCQUF1QixtQkFBTyxDQUFDLEdBQW9CO0FBQ25ELGdCQUFnQixtQkFBTyxDQUFDLEVBQVU7O0FBRWxDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7O0FBRWpCO0FBQ0EsNEJBQTRCLGtDQUFrQzs7QUFFOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSIsImZpbGUiOiIxNTguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IE9wZXJhdGlvbkJhc2UgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLk9wZXJhdGlvbkJhc2U7XG5jb25zdCBhcHBseVdyaXRlQ29uY2VybiA9IHJlcXVpcmUoJy4uL3V0aWxzJykuYXBwbHlXcml0ZUNvbmNlcm47XG5jb25zdCBjaGVja0NvbGxlY3Rpb25OYW1lID0gcmVxdWlyZSgnLi4vdXRpbHMnKS5jaGVja0NvbGxlY3Rpb25OYW1lO1xuY29uc3QgZXhlY3V0ZURiQWRtaW5Db21tYW5kID0gcmVxdWlyZSgnLi9kYl9vcHMnKS5leGVjdXRlRGJBZG1pbkNvbW1hbmQ7XG5jb25zdCBoYW5kbGVDYWxsYmFjayA9IHJlcXVpcmUoJy4uL3V0aWxzJykuaGFuZGxlQ2FsbGJhY2s7XG5jb25zdCBsb2FkQ29sbGVjdGlvbiA9IHJlcXVpcmUoJy4uL2R5bmFtaWNfbG9hZGVycycpLmxvYWRDb2xsZWN0aW9uO1xuY29uc3QgdG9FcnJvciA9IHJlcXVpcmUoJy4uL3V0aWxzJykudG9FcnJvcjtcblxuY2xhc3MgUmVuYW1lT3BlcmF0aW9uIGV4dGVuZHMgT3BlcmF0aW9uQmFzZSB7XG4gIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIG5ld05hbWUsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgdGhpcy5uZXdOYW1lID0gbmV3TmFtZTtcbiAgfVxuXG4gIGV4ZWN1dGUoY2FsbGJhY2spIHtcbiAgICBjb25zdCBjb2xsID0gdGhpcy5jb2xsZWN0aW9uO1xuICAgIGNvbnN0IG5ld05hbWUgPSB0aGlzLm5ld05hbWU7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgIGxldCBDb2xsZWN0aW9uID0gbG9hZENvbGxlY3Rpb24oKTtcbiAgICAvLyBDaGVjayB0aGUgY29sbGVjdGlvbiBuYW1lXG4gICAgY2hlY2tDb2xsZWN0aW9uTmFtZShuZXdOYW1lKTtcbiAgICAvLyBCdWlsZCB0aGUgY29tbWFuZFxuICAgIGNvbnN0IHJlbmFtZUNvbGxlY3Rpb24gPSBjb2xsLm5hbWVzcGFjZTtcbiAgICBjb25zdCB0b0NvbGxlY3Rpb24gPSBjb2xsLnMubmFtZXNwYWNlLndpdGhDb2xsZWN0aW9uKG5ld05hbWUpLnRvU3RyaW5nKCk7XG4gICAgY29uc3QgZHJvcFRhcmdldCA9IHR5cGVvZiBvcHRpb25zLmRyb3BUYXJnZXQgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuZHJvcFRhcmdldCA6IGZhbHNlO1xuICAgIGNvbnN0IGNtZCA9IHsgcmVuYW1lQ29sbGVjdGlvbjogcmVuYW1lQ29sbGVjdGlvbiwgdG86IHRvQ29sbGVjdGlvbiwgZHJvcFRhcmdldDogZHJvcFRhcmdldCB9O1xuXG4gICAgLy8gRGVjb3JhdGUgY29tbWFuZCB3aXRoIHdyaXRlQ29uY2VybiBpZiBzdXBwb3J0ZWRcbiAgICBhcHBseVdyaXRlQ29uY2VybihjbWQsIHsgZGI6IGNvbGwucy5kYiwgY29sbGVjdGlvbjogY29sbCB9LCBvcHRpb25zKTtcblxuICAgIC8vIEV4ZWN1dGUgYWdhaW5zdCBhZG1pblxuICAgIGV4ZWN1dGVEYkFkbWluQ29tbWFuZChjb2xsLnMuZGIuYWRtaW4oKS5zLmRiLCBjbWQsIG9wdGlvbnMsIChlcnIsIGRvYykgPT4ge1xuICAgICAgaWYgKGVycikgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKGNhbGxiYWNrLCBlcnIsIG51bGwpO1xuICAgICAgLy8gV2UgaGF2ZSBhbiBlcnJvclxuICAgICAgaWYgKGRvYy5lcnJtc2cpIHJldHVybiBoYW5kbGVDYWxsYmFjayhjYWxsYmFjaywgdG9FcnJvcihkb2MpLCBudWxsKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVDYWxsYmFjayhcbiAgICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIG5ldyBDb2xsZWN0aW9uKFxuICAgICAgICAgICAgY29sbC5zLmRiLFxuICAgICAgICAgICAgY29sbC5zLnRvcG9sb2d5LFxuICAgICAgICAgICAgY29sbC5zLm5hbWVzcGFjZS5kYixcbiAgICAgICAgICAgIG5ld05hbWUsXG4gICAgICAgICAgICBjb2xsLnMucGtGYWN0b3J5LFxuICAgICAgICAgICAgY29sbC5zLm9wdGlvbnNcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKGNhbGxiYWNrLCB0b0Vycm9yKGVyciksIG51bGwpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVuYW1lT3BlcmF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///158\n");

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst CommandOperation = __webpack_require__(124);\nconst levelValues = new Set(['off', 'slow_only', 'all']);\n\nclass SetProfilingLevelOperation extends CommandOperation {\n  constructor(db, level, options) {\n    let profile = 0;\n\n    if (level === 'off') {\n      profile = 0;\n    } else if (level === 'slow_only') {\n      profile = 1;\n    } else if (level === 'all') {\n      profile = 2;\n    }\n\n    super(db, options);\n    this.level = level;\n    this.profile = profile;\n  }\n\n  _buildCommand() {\n    const profile = this.profile;\n\n    // Set up the profile number\n    const command = { profile };\n\n    return command;\n  }\n\n  execute(callback) {\n    const level = this.level;\n\n    if (!levelValues.has(level)) {\n      return callback(new Error('Error: illegal profiling level value ' + level));\n    }\n\n    super.execute((err, doc) => {\n      if (err == null && doc.ok === 1) return callback(null, level);\n      return err != null\n        ? callback(err, null)\n        : callback(new Error('Error with profile command'), null);\n    });\n  }\n}\n\nmodule.exports = SetProfilingLevelOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvc2V0X3Byb2ZpbGluZ19sZXZlbC5qcz84ZWE5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLHlCQUF5QixtQkFBTyxDQUFDLEdBQVc7QUFDNUM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EscUJBQXFCOztBQUVyQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSIsImZpbGUiOiIxNTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IENvbW1hbmRPcGVyYXRpb24gPSByZXF1aXJlKCcuL2NvbW1hbmQnKTtcbmNvbnN0IGxldmVsVmFsdWVzID0gbmV3IFNldChbJ29mZicsICdzbG93X29ubHknLCAnYWxsJ10pO1xuXG5jbGFzcyBTZXRQcm9maWxpbmdMZXZlbE9wZXJhdGlvbiBleHRlbmRzIENvbW1hbmRPcGVyYXRpb24ge1xuICBjb25zdHJ1Y3RvcihkYiwgbGV2ZWwsIG9wdGlvbnMpIHtcbiAgICBsZXQgcHJvZmlsZSA9IDA7XG5cbiAgICBpZiAobGV2ZWwgPT09ICdvZmYnKSB7XG4gICAgICBwcm9maWxlID0gMDtcbiAgICB9IGVsc2UgaWYgKGxldmVsID09PSAnc2xvd19vbmx5Jykge1xuICAgICAgcHJvZmlsZSA9IDE7XG4gICAgfSBlbHNlIGlmIChsZXZlbCA9PT0gJ2FsbCcpIHtcbiAgICAgIHByb2ZpbGUgPSAyO1xuICAgIH1cblxuICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICB0aGlzLmxldmVsID0gbGV2ZWw7XG4gICAgdGhpcy5wcm9maWxlID0gcHJvZmlsZTtcbiAgfVxuXG4gIF9idWlsZENvbW1hbmQoKSB7XG4gICAgY29uc3QgcHJvZmlsZSA9IHRoaXMucHJvZmlsZTtcblxuICAgIC8vIFNldCB1cCB0aGUgcHJvZmlsZSBudW1iZXJcbiAgICBjb25zdCBjb21tYW5kID0geyBwcm9maWxlIH07XG5cbiAgICByZXR1cm4gY29tbWFuZDtcbiAgfVxuXG4gIGV4ZWN1dGUoY2FsbGJhY2spIHtcbiAgICBjb25zdCBsZXZlbCA9IHRoaXMubGV2ZWw7XG5cbiAgICBpZiAoIWxldmVsVmFsdWVzLmhhcyhsZXZlbCkpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoJ0Vycm9yOiBpbGxlZ2FsIHByb2ZpbGluZyBsZXZlbCB2YWx1ZSAnICsgbGV2ZWwpKTtcbiAgICB9XG5cbiAgICBzdXBlci5leGVjdXRlKChlcnIsIGRvYykgPT4ge1xuICAgICAgaWYgKGVyciA9PSBudWxsICYmIGRvYy5vayA9PT0gMSkgcmV0dXJuIGNhbGxiYWNrKG51bGwsIGxldmVsKTtcbiAgICAgIHJldHVybiBlcnIgIT0gbnVsbFxuICAgICAgICA/IGNhbGxiYWNrKGVyciwgbnVsbClcbiAgICAgICAgOiBjYWxsYmFjayhuZXcgRXJyb3IoJ0Vycm9yIHdpdGggcHJvZmlsZSBjb21tYW5kJyksIG51bGwpO1xuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0UHJvZmlsaW5nTGV2ZWxPcGVyYXRpb247XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///159\n");

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst applyWriteConcern = __webpack_require__(86).applyWriteConcern;\n\nconst AddUserOperation = __webpack_require__(151);\nconst ExecuteDbAdminCommandOperation = __webpack_require__(154);\nconst RemoveUserOperation = __webpack_require__(157);\nconst ValidateCollectionOperation = __webpack_require__(161);\nconst ListDatabasesOperation = __webpack_require__(162);\n\nconst executeOperation = __webpack_require__(83);\n\n/**\n * @fileOverview The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @example\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n *\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Use the admin database for the operation\n *   const adminDb = client.db(dbName).admin();\n *\n *   // List all the available databases\n *   adminDb.listDatabases(function(err, dbs) {\n *     test.equal(null, err);\n *     test.ok(dbs.databases.length > 0);\n *     client.close();\n *   });\n * });\n */\n\n/**\n * Create a new Admin instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @return {Admin} a collection instance.\n */\nfunction Admin(db, topology, promiseLibrary) {\n  if (!(this instanceof Admin)) return new Admin(db, topology);\n\n  // Internal state\n  this.s = {\n    db: db,\n    topology: topology,\n    promiseLibrary: promiseLibrary\n  };\n}\n\n/**\n * The callback format for results\n * @callback Admin~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {object} result The result object if the command was executed successfully.\n */\n\n/**\n * Execute a command\n * @method\n * @param {object} command The command hash\n * @param {object} [options] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {number} [options.maxTimeMS] Number of milliseconds to wait before aborting the query.\n * @param {Admin~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nAdmin.prototype.command = function(command, options, callback) {\n  const args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  options = args.length ? args.shift() : {};\n\n  const commandOperation = new ExecuteDbAdminCommandOperation(this.s.db, command, options);\n\n  return executeOperation(this.s.db.s.topology, commandOperation, callback);\n};\n\n/**\n * Retrieve the server information for the current\n * instance of the db client\n *\n * @param {Object} [options] optional parameters for this operation\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Admin~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nAdmin.prototype.buildInfo = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const cmd = { buildinfo: 1 };\n\n  const buildInfoOperation = new ExecuteDbAdminCommandOperation(this.s.db, cmd, options);\n\n  return executeOperation(this.s.db.s.topology, buildInfoOperation, callback);\n};\n\n/**\n * Retrieve the server information for the current\n * instance of the db client\n *\n * @param {Object} [options] optional parameters for this operation\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Admin~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nAdmin.prototype.serverInfo = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const cmd = { buildinfo: 1 };\n\n  const serverInfoOperation = new ExecuteDbAdminCommandOperation(this.s.db, cmd, options);\n\n  return executeOperation(this.s.db.s.topology, serverInfoOperation, callback);\n};\n\n/**\n * Retrieve this db's server status.\n *\n * @param {Object} [options] optional parameters for this operation\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Admin~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nAdmin.prototype.serverStatus = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const serverStatusOperation = new ExecuteDbAdminCommandOperation(\n    this.s.db,\n    { serverStatus: 1 },\n    options\n  );\n\n  return executeOperation(this.s.db.s.topology, serverStatusOperation, callback);\n};\n\n/**\n * Ping the MongoDB server and retrieve results\n *\n * @param {Object} [options] optional parameters for this operation\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Admin~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nAdmin.prototype.ping = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const cmd = { ping: 1 };\n\n  const pingOperation = new ExecuteDbAdminCommandOperation(this.s.db, cmd, options);\n\n  return executeOperation(this.s.db.s.topology, pingOperation, callback);\n};\n\n/**\n * Add a user to the database.\n * @method\n * @param {string} username The username.\n * @param {string} password The password.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.fsync=false] Specify a file sync write concern.\n * @param {object} [options.customData] Custom data associated with the user (only Mongodb 2.6 or higher)\n * @param {object[]} [options.roles] Roles associated with the created user (only Mongodb 2.6 or higher)\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Admin~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nAdmin.prototype.addUser = function(username, password, options, callback) {\n  const args = Array.prototype.slice.call(arguments, 2);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n\n  // Special case where there is no password ($external users)\n  if (typeof username === 'string' && password != null && typeof password === 'object') {\n    options = password;\n    password = null;\n  }\n\n  options = args.length ? args.shift() : {};\n  options = Object.assign({}, options);\n  // Get the options\n  options = applyWriteConcern(options, { db: this.s.db });\n  // Set the db name to admin\n  options.dbName = 'admin';\n\n  const addUserOperation = new AddUserOperation(this.s.db, username, password, options);\n\n  return executeOperation(this.s.db.s.topology, addUserOperation, callback);\n};\n\n/**\n * Remove a user from a database\n * @method\n * @param {string} username The username.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.fsync=false] Specify a file sync write concern.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Admin~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nAdmin.prototype.removeUser = function(username, options, callback) {\n  const args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n\n  options = args.length ? args.shift() : {};\n  options = Object.assign({}, options);\n  // Get the options\n  options = applyWriteConcern(options, { db: this.s.db });\n  // Set the db name\n  options.dbName = 'admin';\n\n  const removeUserOperation = new RemoveUserOperation(this.s.db, username, options);\n\n  return executeOperation(this.s.db.s.topology, removeUserOperation, callback);\n};\n\n/**\n * Validate an existing collection\n *\n * @param {string} collectionName The name of the collection to validate.\n * @param {object} [options] Optional settings.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Admin~resultCallback} [callback] The command result callback.\n * @return {Promise} returns Promise if no callback passed\n */\nAdmin.prototype.validateCollection = function(collectionName, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const validateCollectionOperation = new ValidateCollectionOperation(\n    this,\n    collectionName,\n    options\n  );\n\n  return executeOperation(this.s.db.s.topology, validateCollectionOperation, callback);\n};\n\n/**\n * List the available databases\n *\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.nameOnly=false] Whether the command should return only db names, or names and size info.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Admin~resultCallback} [callback] The command result callback.\n * @return {Promise} returns Promise if no callback passed\n */\nAdmin.prototype.listDatabases = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeOperation(\n    this.s.db.s.topology,\n    new ListDatabasesOperation(this.s.db, options),\n    callback\n  );\n};\n\n/**\n * Get ReplicaSet status\n *\n * @param {Object} [options] optional parameters for this operation\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Admin~resultCallback} [callback] The command result callback.\n * @return {Promise} returns Promise if no callback passed\n */\nAdmin.prototype.replSetGetStatus = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const replSetGetStatusOperation = new ExecuteDbAdminCommandOperation(\n    this.s.db,\n    { replSetGetStatus: 1 },\n    options\n  );\n\n  return executeOperation(this.s.db.s.topology, replSetGetStatusOperation, callback);\n};\n\nmodule.exports = Admin;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///160\n");

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst CommandOperation = __webpack_require__(124);\n\nclass ValidateCollectionOperation extends CommandOperation {\n  constructor(admin, collectionName, options) {\n    // Decorate command with extra options\n    let command = { validate: collectionName };\n    const keys = Object.keys(options);\n    for (let i = 0; i < keys.length; i++) {\n      if (options.hasOwnProperty(keys[i]) && keys[i] !== 'session') {\n        command[keys[i]] = options[keys[i]];\n      }\n    }\n\n    super(admin.s.db, options, null, command);\n\n    this.collectionName;\n  }\n\n  execute(callback) {\n    const collectionName = this.collectionName;\n\n    super.execute((err, doc) => {\n      if (err != null) return callback(err, null);\n\n      if (doc.ok === 0) return callback(new Error('Error with validate command'), null);\n      if (doc.result != null && doc.result.constructor !== String)\n        return callback(new Error('Error with validation data'), null);\n      if (doc.result != null && doc.result.match(/exception|corrupt/) != null)\n        return callback(new Error('Error: invalid collection ' + collectionName), null);\n      if (doc.valid != null && !doc.valid)\n        return callback(new Error('Error: invalid collection ' + collectionName), null);\n\n      return callback(null, doc);\n    });\n  }\n}\n\nmodule.exports = ValidateCollectionOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvdmFsaWRhdGVfY29sbGVjdGlvbi5qcz84NjlkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLHlCQUF5QixtQkFBTyxDQUFDLEdBQVc7O0FBRTVDO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLG1CQUFtQixpQkFBaUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSIsImZpbGUiOiIxNjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IENvbW1hbmRPcGVyYXRpb24gPSByZXF1aXJlKCcuL2NvbW1hbmQnKTtcblxuY2xhc3MgVmFsaWRhdGVDb2xsZWN0aW9uT3BlcmF0aW9uIGV4dGVuZHMgQ29tbWFuZE9wZXJhdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGFkbWluLCBjb2xsZWN0aW9uTmFtZSwgb3B0aW9ucykge1xuICAgIC8vIERlY29yYXRlIGNvbW1hbmQgd2l0aCBleHRyYSBvcHRpb25zXG4gICAgbGV0IGNvbW1hbmQgPSB7IHZhbGlkYXRlOiBjb2xsZWN0aW9uTmFtZSB9O1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KGtleXNbaV0pICYmIGtleXNbaV0gIT09ICdzZXNzaW9uJykge1xuICAgICAgICBjb21tYW5kW2tleXNbaV1dID0gb3B0aW9uc1trZXlzW2ldXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdXBlcihhZG1pbi5zLmRiLCBvcHRpb25zLCBudWxsLCBjb21tYW5kKTtcblxuICAgIHRoaXMuY29sbGVjdGlvbk5hbWU7XG4gIH1cblxuICBleGVjdXRlKGNhbGxiYWNrKSB7XG4gICAgY29uc3QgY29sbGVjdGlvbk5hbWUgPSB0aGlzLmNvbGxlY3Rpb25OYW1lO1xuXG4gICAgc3VwZXIuZXhlY3V0ZSgoZXJyLCBkb2MpID0+IHtcbiAgICAgIGlmIChlcnIgIT0gbnVsbCkgcmV0dXJuIGNhbGxiYWNrKGVyciwgbnVsbCk7XG5cbiAgICAgIGlmIChkb2Mub2sgPT09IDApIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoJ0Vycm9yIHdpdGggdmFsaWRhdGUgY29tbWFuZCcpLCBudWxsKTtcbiAgICAgIGlmIChkb2MucmVzdWx0ICE9IG51bGwgJiYgZG9jLnJlc3VsdC5jb25zdHJ1Y3RvciAhPT0gU3RyaW5nKVxuICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKCdFcnJvciB3aXRoIHZhbGlkYXRpb24gZGF0YScpLCBudWxsKTtcbiAgICAgIGlmIChkb2MucmVzdWx0ICE9IG51bGwgJiYgZG9jLnJlc3VsdC5tYXRjaCgvZXhjZXB0aW9ufGNvcnJ1cHQvKSAhPSBudWxsKVxuICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKCdFcnJvcjogaW52YWxpZCBjb2xsZWN0aW9uICcgKyBjb2xsZWN0aW9uTmFtZSksIG51bGwpO1xuICAgICAgaWYgKGRvYy52YWxpZCAhPSBudWxsICYmICFkb2MudmFsaWQpXG4gICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoJ0Vycm9yOiBpbnZhbGlkIGNvbGxlY3Rpb24gJyArIGNvbGxlY3Rpb25OYW1lKSwgbnVsbCk7XG5cbiAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBkb2MpO1xuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVmFsaWRhdGVDb2xsZWN0aW9uT3BlcmF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///161\n");

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst CommandOperationV2 = __webpack_require__(120);\nconst Aspect = __webpack_require__(84).Aspect;\nconst defineAspects = __webpack_require__(84).defineAspects;\nconst MongoDBNamespace = __webpack_require__(86).MongoDBNamespace;\n\nclass ListDatabasesOperation extends CommandOperationV2 {\n  constructor(db, options) {\n    super(db, options);\n    this.ns = new MongoDBNamespace('admin', '$cmd');\n  }\n\n  execute(server, callback) {\n    const cmd = { listDatabases: 1 };\n    if (this.options.nameOnly) {\n      cmd.nameOnly = Number(cmd.nameOnly);\n    }\n\n    if (this.options.filter) {\n      cmd.filter = this.options.filter;\n    }\n\n    if (typeof this.options.authorizedDatabases === 'boolean') {\n      cmd.authorizedDatabases = this.options.authorizedDatabases;\n    }\n\n    super.executeCommand(server, cmd, callback);\n  }\n}\n\ndefineAspects(ListDatabasesOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.EXECUTE_WITH_SELECTION\n]);\n\nmodule.exports = ListDatabasesOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvbGlzdF9kYXRhYmFzZXMuanM/NjY4NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiwyQkFBMkIsbUJBQU8sQ0FBQyxHQUFjO0FBQ2pELGVBQWUsbUJBQU8sQ0FBQyxFQUFhO0FBQ3BDLHNCQUFzQixtQkFBTyxDQUFDLEVBQWE7QUFDM0MseUJBQXlCLG1CQUFPLENBQUMsRUFBVTs7QUFFM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIxNjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IENvbW1hbmRPcGVyYXRpb25WMiA9IHJlcXVpcmUoJy4vY29tbWFuZF92MicpO1xuY29uc3QgQXNwZWN0ID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5Bc3BlY3Q7XG5jb25zdCBkZWZpbmVBc3BlY3RzID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5kZWZpbmVBc3BlY3RzO1xuY29uc3QgTW9uZ29EQk5hbWVzcGFjZSA9IHJlcXVpcmUoJy4uL3V0aWxzJykuTW9uZ29EQk5hbWVzcGFjZTtcblxuY2xhc3MgTGlzdERhdGFiYXNlc09wZXJhdGlvbiBleHRlbmRzIENvbW1hbmRPcGVyYXRpb25WMiB7XG4gIGNvbnN0cnVjdG9yKGRiLCBvcHRpb25zKSB7XG4gICAgc3VwZXIoZGIsIG9wdGlvbnMpO1xuICAgIHRoaXMubnMgPSBuZXcgTW9uZ29EQk5hbWVzcGFjZSgnYWRtaW4nLCAnJGNtZCcpO1xuICB9XG5cbiAgZXhlY3V0ZShzZXJ2ZXIsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgY21kID0geyBsaXN0RGF0YWJhc2VzOiAxIH07XG4gICAgaWYgKHRoaXMub3B0aW9ucy5uYW1lT25seSkge1xuICAgICAgY21kLm5hbWVPbmx5ID0gTnVtYmVyKGNtZC5uYW1lT25seSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5maWx0ZXIpIHtcbiAgICAgIGNtZC5maWx0ZXIgPSB0aGlzLm9wdGlvbnMuZmlsdGVyO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmF1dGhvcml6ZWREYXRhYmFzZXMgPT09ICdib29sZWFuJykge1xuICAgICAgY21kLmF1dGhvcml6ZWREYXRhYmFzZXMgPSB0aGlzLm9wdGlvbnMuYXV0aG9yaXplZERhdGFiYXNlcztcbiAgICB9XG5cbiAgICBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIGNtZCwgY2FsbGJhY2spO1xuICB9XG59XG5cbmRlZmluZUFzcGVjdHMoTGlzdERhdGFiYXNlc09wZXJhdGlvbiwgW1xuICBBc3BlY3QuUkVBRF9PUEVSQVRJT04sXG4gIEFzcGVjdC5SRVRSWUFCTEUsXG4gIEFzcGVjdC5FWEVDVVRFX1dJVEhfU0VMRUNUSU9OXG5dKTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0RGF0YWJhc2VzT3BlcmF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///162\n");

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst CommandOperation = __webpack_require__(124);\nconst handleCallback = __webpack_require__(86).handleCallback;\n\nclass ReIndexOperation extends CommandOperation {\n  constructor(collection, options) {\n    super(collection.s.db, options, collection);\n  }\n\n  _buildCommand() {\n    const collection = this.collection;\n\n    const cmd = { reIndex: collection.collectionName };\n\n    return cmd;\n  }\n\n  execute(callback) {\n    super.execute((err, result) => {\n      if (callback == null) return;\n      if (err) return handleCallback(callback, err, null);\n      handleCallback(callback, null, result.ok ? true : false);\n    });\n  }\n}\n\nmodule.exports = ReIndexOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvcmVfaW5kZXguanM/NmYwZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYix5QkFBeUIsbUJBQU8sQ0FBQyxHQUFXO0FBQzVDLHVCQUF1QixtQkFBTyxDQUFDLEVBQVU7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCOztBQUVqQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSIsImZpbGUiOiIxNjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IENvbW1hbmRPcGVyYXRpb24gPSByZXF1aXJlKCcuL2NvbW1hbmQnKTtcbmNvbnN0IGhhbmRsZUNhbGxiYWNrID0gcmVxdWlyZSgnLi4vdXRpbHMnKS5oYW5kbGVDYWxsYmFjaztcblxuY2xhc3MgUmVJbmRleE9wZXJhdGlvbiBleHRlbmRzIENvbW1hbmRPcGVyYXRpb24ge1xuICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBvcHRpb25zKSB7XG4gICAgc3VwZXIoY29sbGVjdGlvbi5zLmRiLCBvcHRpb25zLCBjb2xsZWN0aW9uKTtcbiAgfVxuXG4gIF9idWlsZENvbW1hbmQoKSB7XG4gICAgY29uc3QgY29sbGVjdGlvbiA9IHRoaXMuY29sbGVjdGlvbjtcblxuICAgIGNvbnN0IGNtZCA9IHsgcmVJbmRleDogY29sbGVjdGlvbi5jb2xsZWN0aW9uTmFtZSB9O1xuXG4gICAgcmV0dXJuIGNtZDtcbiAgfVxuXG4gIGV4ZWN1dGUoY2FsbGJhY2spIHtcbiAgICBzdXBlci5leGVjdXRlKChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKGNhbGxiYWNrID09IG51bGwpIHJldHVybjtcbiAgICAgIGlmIChlcnIpIHJldHVybiBoYW5kbGVDYWxsYmFjayhjYWxsYmFjaywgZXJyLCBudWxsKTtcbiAgICAgIGhhbmRsZUNhbGxiYWNrKGNhbGxiYWNrLCBudWxsLCByZXN1bHQub2sgPyB0cnVlIDogZmFsc2UpO1xuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVJbmRleE9wZXJhdGlvbjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///163\n");

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst updateDocuments = __webpack_require__(118).updateDocuments;\n\nclass ReplaceOneOperation extends OperationBase {\n  constructor(collection, filter, doc, options) {\n    super(options);\n\n    this.collection = collection;\n    this.filter = filter;\n    this.doc = doc;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const filter = this.filter;\n    const doc = this.doc;\n    const options = this.options;\n\n    // Set single document update\n    options.multi = false;\n\n    // Execute update\n    updateDocuments(coll, filter, doc, options, (err, r) => replaceCallback(err, r, doc, callback));\n  }\n}\n\nfunction replaceCallback(err, r, doc, callback) {\n  if (callback == null) return;\n  if (err && callback) return callback(err);\n  if (r == null) return callback(null, { result: { ok: 1 } });\n\n  r.modifiedCount = r.result.nModified != null ? r.result.nModified : r.result.n;\n  r.upsertedId =\n    Array.isArray(r.result.upserted) && r.result.upserted.length > 0\n      ? r.result.upserted[0] // FIXME(major): should be `r.result.upserted[0]._id`\n      : null;\n  r.upsertedCount =\n    Array.isArray(r.result.upserted) && r.result.upserted.length ? r.result.upserted.length : 0;\n  r.matchedCount =\n    Array.isArray(r.result.upserted) && r.result.upserted.length > 0 ? 0 : r.result.n;\n  r.ops = [doc]; // TODO: Should we still have this?\n  if (callback) callback(null, r);\n}\n\nmodule.exports = ReplaceOneOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvcmVwbGFjZV9vbmUuanM/ZjFkMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixzQkFBc0IsbUJBQU8sQ0FBQyxFQUFhO0FBQzNDLHdCQUF3QixtQkFBTyxDQUFDLEdBQW9COztBQUVwRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxVQUFVLFFBQVEsRUFBRTs7QUFFNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMTY0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBPcGVyYXRpb25CYXNlID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5PcGVyYXRpb25CYXNlO1xuY29uc3QgdXBkYXRlRG9jdW1lbnRzID0gcmVxdWlyZSgnLi9jb21tb25fZnVuY3Rpb25zJykudXBkYXRlRG9jdW1lbnRzO1xuXG5jbGFzcyBSZXBsYWNlT25lT3BlcmF0aW9uIGV4dGVuZHMgT3BlcmF0aW9uQmFzZSB7XG4gIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIGZpbHRlciwgZG9jLCBvcHRpb25zKSB7XG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgIHRoaXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIHRoaXMuZG9jID0gZG9jO1xuICB9XG5cbiAgZXhlY3V0ZShjYWxsYmFjaykge1xuICAgIGNvbnN0IGNvbGwgPSB0aGlzLmNvbGxlY3Rpb247XG4gICAgY29uc3QgZmlsdGVyID0gdGhpcy5maWx0ZXI7XG4gICAgY29uc3QgZG9jID0gdGhpcy5kb2M7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgIC8vIFNldCBzaW5nbGUgZG9jdW1lbnQgdXBkYXRlXG4gICAgb3B0aW9ucy5tdWx0aSA9IGZhbHNlO1xuXG4gICAgLy8gRXhlY3V0ZSB1cGRhdGVcbiAgICB1cGRhdGVEb2N1bWVudHMoY29sbCwgZmlsdGVyLCBkb2MsIG9wdGlvbnMsIChlcnIsIHIpID0+IHJlcGxhY2VDYWxsYmFjayhlcnIsIHIsIGRvYywgY2FsbGJhY2spKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXBsYWNlQ2FsbGJhY2soZXJyLCByLCBkb2MsIGNhbGxiYWNrKSB7XG4gIGlmIChjYWxsYmFjayA9PSBudWxsKSByZXR1cm47XG4gIGlmIChlcnIgJiYgY2FsbGJhY2spIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICBpZiAociA9PSBudWxsKSByZXR1cm4gY2FsbGJhY2sobnVsbCwgeyByZXN1bHQ6IHsgb2s6IDEgfSB9KTtcblxuICByLm1vZGlmaWVkQ291bnQgPSByLnJlc3VsdC5uTW9kaWZpZWQgIT0gbnVsbCA/IHIucmVzdWx0Lm5Nb2RpZmllZCA6IHIucmVzdWx0Lm47XG4gIHIudXBzZXJ0ZWRJZCA9XG4gICAgQXJyYXkuaXNBcnJheShyLnJlc3VsdC51cHNlcnRlZCkgJiYgci5yZXN1bHQudXBzZXJ0ZWQubGVuZ3RoID4gMFxuICAgICAgPyByLnJlc3VsdC51cHNlcnRlZFswXSAvLyBGSVhNRShtYWpvcik6IHNob3VsZCBiZSBgci5yZXN1bHQudXBzZXJ0ZWRbMF0uX2lkYFxuICAgICAgOiBudWxsO1xuICByLnVwc2VydGVkQ291bnQgPVxuICAgIEFycmF5LmlzQXJyYXkoci5yZXN1bHQudXBzZXJ0ZWQpICYmIHIucmVzdWx0LnVwc2VydGVkLmxlbmd0aCA/IHIucmVzdWx0LnVwc2VydGVkLmxlbmd0aCA6IDA7XG4gIHIubWF0Y2hlZENvdW50ID1cbiAgICBBcnJheS5pc0FycmF5KHIucmVzdWx0LnVwc2VydGVkKSAmJiByLnJlc3VsdC51cHNlcnRlZC5sZW5ndGggPiAwID8gMCA6IHIucmVzdWx0Lm47XG4gIHIub3BzID0gW2RvY107IC8vIFRPRE86IFNob3VsZCB3ZSBzdGlsbCBoYXZlIHRoaXM/XG4gIGlmIChjYWxsYmFjaykgY2FsbGJhY2sobnVsbCwgcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVwbGFjZU9uZU9wZXJhdGlvbjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///164\n");

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Aspect = __webpack_require__(84).Aspect;\nconst CommandOperation = __webpack_require__(124);\nconst defineAspects = __webpack_require__(84).defineAspects;\n\n/**\n * Get all the collection statistics.\n *\n * @class\n * @property {Collection} a Collection instance.\n * @property {object} [options] Optional settings. See Collection.prototype.stats for a list of options.\n */\nclass StatsOperation extends CommandOperation {\n  /**\n   * Construct a Stats operation.\n   *\n   * @param {Collection} a Collection instance.\n   * @param {object} [options] Optional settings. See Collection.prototype.stats for a list of options.\n   */\n  constructor(collection, options) {\n    super(collection.s.db, options, collection);\n  }\n\n  _buildCommand() {\n    const collection = this.collection;\n    const options = this.options;\n\n    // Build command object\n    const command = {\n      collStats: collection.collectionName\n    };\n\n    // Check if we have the scale value\n    if (options['scale'] != null) {\n      command['scale'] = options['scale'];\n    }\n\n    return command;\n  }\n}\n\ndefineAspects(StatsOperation, Aspect.READ_OPERATION);\n\nmodule.exports = StatsOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvc3RhdHMuanM/NDQwMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixlQUFlLG1CQUFPLENBQUMsRUFBYTtBQUNwQyx5QkFBeUIsbUJBQU8sQ0FBQyxHQUFXO0FBQzVDLHNCQUFzQixtQkFBTyxDQUFDLEVBQWE7O0FBRTNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxXQUFXO0FBQ3pCLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxXQUFXO0FBQ3hCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBIiwiZmlsZSI6IjE2NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgQXNwZWN0ID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5Bc3BlY3Q7XG5jb25zdCBDb21tYW5kT3BlcmF0aW9uID0gcmVxdWlyZSgnLi9jb21tYW5kJyk7XG5jb25zdCBkZWZpbmVBc3BlY3RzID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5kZWZpbmVBc3BlY3RzO1xuXG4vKipcbiAqIEdldCBhbGwgdGhlIGNvbGxlY3Rpb24gc3RhdGlzdGljcy5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwcm9wZXJ0eSB7Q29sbGVjdGlvbn0gYSBDb2xsZWN0aW9uIGluc3RhbmNlLlxuICogQHByb3BlcnR5IHtvYmplY3R9IFtvcHRpb25zXSBPcHRpb25hbCBzZXR0aW5ncy4gU2VlIENvbGxlY3Rpb24ucHJvdG90eXBlLnN0YXRzIGZvciBhIGxpc3Qgb2Ygb3B0aW9ucy5cbiAqL1xuY2xhc3MgU3RhdHNPcGVyYXRpb24gZXh0ZW5kcyBDb21tYW5kT3BlcmF0aW9uIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIFN0YXRzIG9wZXJhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtDb2xsZWN0aW9ufSBhIENvbGxlY3Rpb24gaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gT3B0aW9uYWwgc2V0dGluZ3MuIFNlZSBDb2xsZWN0aW9uLnByb3RvdHlwZS5zdGF0cyBmb3IgYSBsaXN0IG9mIG9wdGlvbnMuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBvcHRpb25zKSB7XG4gICAgc3VwZXIoY29sbGVjdGlvbi5zLmRiLCBvcHRpb25zLCBjb2xsZWN0aW9uKTtcbiAgfVxuXG4gIF9idWlsZENvbW1hbmQoKSB7XG4gICAgY29uc3QgY29sbGVjdGlvbiA9IHRoaXMuY29sbGVjdGlvbjtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgLy8gQnVpbGQgY29tbWFuZCBvYmplY3RcbiAgICBjb25zdCBjb21tYW5kID0ge1xuICAgICAgY29sbFN0YXRzOiBjb2xsZWN0aW9uLmNvbGxlY3Rpb25OYW1lXG4gICAgfTtcblxuICAgIC8vIENoZWNrIGlmIHdlIGhhdmUgdGhlIHNjYWxlIHZhbHVlXG4gICAgaWYgKG9wdGlvbnNbJ3NjYWxlJ10gIT0gbnVsbCkge1xuICAgICAgY29tbWFuZFsnc2NhbGUnXSA9IG9wdGlvbnNbJ3NjYWxlJ107XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbW1hbmQ7XG4gIH1cbn1cblxuZGVmaW5lQXNwZWN0cyhTdGF0c09wZXJhdGlvbiwgQXNwZWN0LlJFQURfT1BFUkFUSU9OKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTdGF0c09wZXJhdGlvbjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///165\n");

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst updateCallback = __webpack_require__(118).updateCallback;\nconst updateDocuments = __webpack_require__(118).updateDocuments;\n\nclass UpdateManyOperation extends OperationBase {\n  constructor(collection, filter, update, options) {\n    super(options);\n\n    this.collection = collection;\n    this.filter = filter;\n    this.update = update;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const filter = this.filter;\n    const update = this.update;\n    const options = this.options;\n\n    // Set single document update\n    options.multi = true;\n    // Execute update\n    updateDocuments(coll, filter, update, options, (err, r) => updateCallback(err, r, callback));\n  }\n}\n\nmodule.exports = UpdateManyOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvdXBkYXRlX21hbnkuanM/YzhkMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixzQkFBc0IsbUJBQU8sQ0FBQyxFQUFhO0FBQzNDLHVCQUF1QixtQkFBTyxDQUFDLEdBQW9CO0FBQ25ELHdCQUF3QixtQkFBTyxDQUFDLEdBQW9COztBQUVwRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMTY2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBPcGVyYXRpb25CYXNlID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5PcGVyYXRpb25CYXNlO1xuY29uc3QgdXBkYXRlQ2FsbGJhY2sgPSByZXF1aXJlKCcuL2NvbW1vbl9mdW5jdGlvbnMnKS51cGRhdGVDYWxsYmFjaztcbmNvbnN0IHVwZGF0ZURvY3VtZW50cyA9IHJlcXVpcmUoJy4vY29tbW9uX2Z1bmN0aW9ucycpLnVwZGF0ZURvY3VtZW50cztcblxuY2xhc3MgVXBkYXRlTWFueU9wZXJhdGlvbiBleHRlbmRzIE9wZXJhdGlvbkJhc2Uge1xuICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBmaWx0ZXIsIHVwZGF0ZSwgb3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICB0aGlzLmZpbHRlciA9IGZpbHRlcjtcbiAgICB0aGlzLnVwZGF0ZSA9IHVwZGF0ZTtcbiAgfVxuXG4gIGV4ZWN1dGUoY2FsbGJhY2spIHtcbiAgICBjb25zdCBjb2xsID0gdGhpcy5jb2xsZWN0aW9uO1xuICAgIGNvbnN0IGZpbHRlciA9IHRoaXMuZmlsdGVyO1xuICAgIGNvbnN0IHVwZGF0ZSA9IHRoaXMudXBkYXRlO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAvLyBTZXQgc2luZ2xlIGRvY3VtZW50IHVwZGF0ZVxuICAgIG9wdGlvbnMubXVsdGkgPSB0cnVlO1xuICAgIC8vIEV4ZWN1dGUgdXBkYXRlXG4gICAgdXBkYXRlRG9jdW1lbnRzKGNvbGwsIGZpbHRlciwgdXBkYXRlLCBvcHRpb25zLCAoZXJyLCByKSA9PiB1cGRhdGVDYWxsYmFjayhlcnIsIHIsIGNhbGxiYWNrKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBVcGRhdGVNYW55T3BlcmF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///166\n");

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst updateDocuments = __webpack_require__(118).updateDocuments;\n\nclass UpdateOneOperation extends OperationBase {\n  constructor(collection, filter, update, options) {\n    super(options);\n\n    this.collection = collection;\n    this.filter = filter;\n    this.update = update;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const filter = this.filter;\n    const update = this.update;\n    const options = this.options;\n\n    // Set single document update\n    options.multi = false;\n    // Execute update\n    updateDocuments(coll, filter, update, options, (err, r) => updateCallback(err, r, callback));\n  }\n}\n\nfunction updateCallback(err, r, callback) {\n  if (callback == null) return;\n  if (err) return callback(err);\n  if (r == null) return callback(null, { result: { ok: 1 } });\n  r.modifiedCount = r.result.nModified != null ? r.result.nModified : r.result.n;\n  r.upsertedId =\n    Array.isArray(r.result.upserted) && r.result.upserted.length > 0\n      ? r.result.upserted[0] // FIXME(major): should be `r.result.upserted[0]._id`\n      : null;\n  r.upsertedCount =\n    Array.isArray(r.result.upserted) && r.result.upserted.length ? r.result.upserted.length : 0;\n  r.matchedCount =\n    Array.isArray(r.result.upserted) && r.result.upserted.length > 0 ? 0 : r.result.n;\n  callback(null, r);\n}\n\nmodule.exports = UpdateOneOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvdXBkYXRlX29uZS5qcz9jNjdlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLHNCQUFzQixtQkFBTyxDQUFDLEVBQWE7QUFDM0Msd0JBQXdCLG1CQUFPLENBQUMsR0FBb0I7O0FBRXBEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsVUFBVSxRQUFRLEVBQUU7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIxNjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IE9wZXJhdGlvbkJhc2UgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLk9wZXJhdGlvbkJhc2U7XG5jb25zdCB1cGRhdGVEb2N1bWVudHMgPSByZXF1aXJlKCcuL2NvbW1vbl9mdW5jdGlvbnMnKS51cGRhdGVEb2N1bWVudHM7XG5cbmNsYXNzIFVwZGF0ZU9uZU9wZXJhdGlvbiBleHRlbmRzIE9wZXJhdGlvbkJhc2Uge1xuICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBmaWx0ZXIsIHVwZGF0ZSwgb3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICB0aGlzLmZpbHRlciA9IGZpbHRlcjtcbiAgICB0aGlzLnVwZGF0ZSA9IHVwZGF0ZTtcbiAgfVxuXG4gIGV4ZWN1dGUoY2FsbGJhY2spIHtcbiAgICBjb25zdCBjb2xsID0gdGhpcy5jb2xsZWN0aW9uO1xuICAgIGNvbnN0IGZpbHRlciA9IHRoaXMuZmlsdGVyO1xuICAgIGNvbnN0IHVwZGF0ZSA9IHRoaXMudXBkYXRlO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAvLyBTZXQgc2luZ2xlIGRvY3VtZW50IHVwZGF0ZVxuICAgIG9wdGlvbnMubXVsdGkgPSBmYWxzZTtcbiAgICAvLyBFeGVjdXRlIHVwZGF0ZVxuICAgIHVwZGF0ZURvY3VtZW50cyhjb2xsLCBmaWx0ZXIsIHVwZGF0ZSwgb3B0aW9ucywgKGVyciwgcikgPT4gdXBkYXRlQ2FsbGJhY2soZXJyLCByLCBjYWxsYmFjaykpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNhbGxiYWNrKGVyciwgciwgY2FsbGJhY2spIHtcbiAgaWYgKGNhbGxiYWNrID09IG51bGwpIHJldHVybjtcbiAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gIGlmIChyID09IG51bGwpIHJldHVybiBjYWxsYmFjayhudWxsLCB7IHJlc3VsdDogeyBvazogMSB9IH0pO1xuICByLm1vZGlmaWVkQ291bnQgPSByLnJlc3VsdC5uTW9kaWZpZWQgIT0gbnVsbCA/IHIucmVzdWx0Lm5Nb2RpZmllZCA6IHIucmVzdWx0Lm47XG4gIHIudXBzZXJ0ZWRJZCA9XG4gICAgQXJyYXkuaXNBcnJheShyLnJlc3VsdC51cHNlcnRlZCkgJiYgci5yZXN1bHQudXBzZXJ0ZWQubGVuZ3RoID4gMFxuICAgICAgPyByLnJlc3VsdC51cHNlcnRlZFswXSAvLyBGSVhNRShtYWpvcik6IHNob3VsZCBiZSBgci5yZXN1bHQudXBzZXJ0ZWRbMF0uX2lkYFxuICAgICAgOiBudWxsO1xuICByLnVwc2VydGVkQ291bnQgPVxuICAgIEFycmF5LmlzQXJyYXkoci5yZXN1bHQudXBzZXJ0ZWQpICYmIHIucmVzdWx0LnVwc2VydGVkLmxlbmd0aCA/IHIucmVzdWx0LnVwc2VydGVkLmxlbmd0aCA6IDA7XG4gIHIubWF0Y2hlZENvdW50ID1cbiAgICBBcnJheS5pc0FycmF5KHIucmVzdWx0LnVwc2VydGVkKSAmJiByLnJlc3VsdC51cHNlcnRlZC5sZW5ndGggPiAwID8gMCA6IHIucmVzdWx0Lm47XG4gIGNhbGxiYWNrKG51bGwsIHIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFVwZGF0ZU9uZU9wZXJhdGlvbjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///167\n");

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Aspect = __webpack_require__(84).Aspect;\nconst buildCountCommand = __webpack_require__(118).buildCountCommand;\nconst defineAspects = __webpack_require__(84).defineAspects;\nconst OperationBase = __webpack_require__(84).OperationBase;\n\nclass CountOperation extends OperationBase {\n  constructor(cursor, applySkipLimit, options) {\n    super(options);\n\n    this.cursor = cursor;\n    this.applySkipLimit = applySkipLimit;\n  }\n\n  execute(callback) {\n    const cursor = this.cursor;\n    const applySkipLimit = this.applySkipLimit;\n    const options = this.options;\n\n    if (applySkipLimit) {\n      if (typeof cursor.cursorSkip() === 'number') options.skip = cursor.cursorSkip();\n      if (typeof cursor.cursorLimit() === 'number') options.limit = cursor.cursorLimit();\n    }\n\n    // Ensure we have the right read preference inheritance\n    if (options.readPreference) {\n      cursor.setReadPreference(options.readPreference);\n    }\n\n    if (\n      typeof options.maxTimeMS !== 'number' &&\n      cursor.cmd &&\n      typeof cursor.cmd.maxTimeMS === 'number'\n    ) {\n      options.maxTimeMS = cursor.cmd.maxTimeMS;\n    }\n\n    let finalOptions = {};\n    finalOptions.skip = options.skip;\n    finalOptions.limit = options.limit;\n    finalOptions.hint = options.hint;\n    finalOptions.maxTimeMS = options.maxTimeMS;\n\n    // Command\n    finalOptions.collectionName = cursor.namespace.collection;\n\n    let command;\n    try {\n      command = buildCountCommand(cursor, cursor.cmd.query, finalOptions);\n    } catch (err) {\n      return callback(err);\n    }\n\n    // Set cursor server to the same as the topology\n    cursor.server = cursor.topology.s.coreTopology;\n\n    // Execute the command\n    cursor.topology.command(\n      cursor.namespace.withCollection('$cmd'),\n      command,\n      cursor.options,\n      (err, result) => {\n        callback(err, result ? result.result.n : null);\n      }\n    );\n  }\n}\n\ndefineAspects(CountOperation, Aspect.SKIP_SESSION);\n\nmodule.exports = CountOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvY291bnQuanM/YmU3YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixlQUFlLG1CQUFPLENBQUMsRUFBYTtBQUNwQywwQkFBMEIsbUJBQU8sQ0FBQyxHQUFvQjtBQUN0RCxzQkFBc0IsbUJBQU8sQ0FBQyxFQUFhO0FBQzNDLHNCQUFzQixtQkFBTyxDQUFDLEVBQWE7O0FBRTNDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSIsImZpbGUiOiIxNjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEFzcGVjdCA9IHJlcXVpcmUoJy4vb3BlcmF0aW9uJykuQXNwZWN0O1xuY29uc3QgYnVpbGRDb3VudENvbW1hbmQgPSByZXF1aXJlKCcuL2NvbW1vbl9mdW5jdGlvbnMnKS5idWlsZENvdW50Q29tbWFuZDtcbmNvbnN0IGRlZmluZUFzcGVjdHMgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLmRlZmluZUFzcGVjdHM7XG5jb25zdCBPcGVyYXRpb25CYXNlID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5PcGVyYXRpb25CYXNlO1xuXG5jbGFzcyBDb3VudE9wZXJhdGlvbiBleHRlbmRzIE9wZXJhdGlvbkJhc2Uge1xuICBjb25zdHJ1Y3RvcihjdXJzb3IsIGFwcGx5U2tpcExpbWl0LCBvcHRpb25zKSB7XG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICB0aGlzLmN1cnNvciA9IGN1cnNvcjtcbiAgICB0aGlzLmFwcGx5U2tpcExpbWl0ID0gYXBwbHlTa2lwTGltaXQ7XG4gIH1cblxuICBleGVjdXRlKGNhbGxiYWNrKSB7XG4gICAgY29uc3QgY3Vyc29yID0gdGhpcy5jdXJzb3I7XG4gICAgY29uc3QgYXBwbHlTa2lwTGltaXQgPSB0aGlzLmFwcGx5U2tpcExpbWl0O1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICBpZiAoYXBwbHlTa2lwTGltaXQpIHtcbiAgICAgIGlmICh0eXBlb2YgY3Vyc29yLmN1cnNvclNraXAoKSA9PT0gJ251bWJlcicpIG9wdGlvbnMuc2tpcCA9IGN1cnNvci5jdXJzb3JTa2lwKCk7XG4gICAgICBpZiAodHlwZW9mIGN1cnNvci5jdXJzb3JMaW1pdCgpID09PSAnbnVtYmVyJykgb3B0aW9ucy5saW1pdCA9IGN1cnNvci5jdXJzb3JMaW1pdCgpO1xuICAgIH1cblxuICAgIC8vIEVuc3VyZSB3ZSBoYXZlIHRoZSByaWdodCByZWFkIHByZWZlcmVuY2UgaW5oZXJpdGFuY2VcbiAgICBpZiAob3B0aW9ucy5yZWFkUHJlZmVyZW5jZSkge1xuICAgICAgY3Vyc29yLnNldFJlYWRQcmVmZXJlbmNlKG9wdGlvbnMucmVhZFByZWZlcmVuY2UpO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIHR5cGVvZiBvcHRpb25zLm1heFRpbWVNUyAhPT0gJ251bWJlcicgJiZcbiAgICAgIGN1cnNvci5jbWQgJiZcbiAgICAgIHR5cGVvZiBjdXJzb3IuY21kLm1heFRpbWVNUyA9PT0gJ251bWJlcidcbiAgICApIHtcbiAgICAgIG9wdGlvbnMubWF4VGltZU1TID0gY3Vyc29yLmNtZC5tYXhUaW1lTVM7XG4gICAgfVxuXG4gICAgbGV0IGZpbmFsT3B0aW9ucyA9IHt9O1xuICAgIGZpbmFsT3B0aW9ucy5za2lwID0gb3B0aW9ucy5za2lwO1xuICAgIGZpbmFsT3B0aW9ucy5saW1pdCA9IG9wdGlvbnMubGltaXQ7XG4gICAgZmluYWxPcHRpb25zLmhpbnQgPSBvcHRpb25zLmhpbnQ7XG4gICAgZmluYWxPcHRpb25zLm1heFRpbWVNUyA9IG9wdGlvbnMubWF4VGltZU1TO1xuXG4gICAgLy8gQ29tbWFuZFxuICAgIGZpbmFsT3B0aW9ucy5jb2xsZWN0aW9uTmFtZSA9IGN1cnNvci5uYW1lc3BhY2UuY29sbGVjdGlvbjtcblxuICAgIGxldCBjb21tYW5kO1xuICAgIHRyeSB7XG4gICAgICBjb21tYW5kID0gYnVpbGRDb3VudENvbW1hbmQoY3Vyc29yLCBjdXJzb3IuY21kLnF1ZXJ5LCBmaW5hbE9wdGlvbnMpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgfVxuXG4gICAgLy8gU2V0IGN1cnNvciBzZXJ2ZXIgdG8gdGhlIHNhbWUgYXMgdGhlIHRvcG9sb2d5XG4gICAgY3Vyc29yLnNlcnZlciA9IGN1cnNvci50b3BvbG9neS5zLmNvcmVUb3BvbG9neTtcblxuICAgIC8vIEV4ZWN1dGUgdGhlIGNvbW1hbmRcbiAgICBjdXJzb3IudG9wb2xvZ3kuY29tbWFuZChcbiAgICAgIGN1cnNvci5uYW1lc3BhY2Uud2l0aENvbGxlY3Rpb24oJyRjbWQnKSxcbiAgICAgIGNvbW1hbmQsXG4gICAgICBjdXJzb3Iub3B0aW9ucyxcbiAgICAgIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgICBjYWxsYmFjayhlcnIsIHJlc3VsdCA/IHJlc3VsdC5yZXN1bHQubiA6IG51bGwpO1xuICAgICAgfVxuICAgICk7XG4gIH1cbn1cblxuZGVmaW5lQXNwZWN0cyhDb3VudE9wZXJhdGlvbiwgQXNwZWN0LlNLSVBfU0VTU0lPTik7XG5cbm1vZHVsZS5leHBvcnRzID0gQ291bnRPcGVyYXRpb247XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///168\n");

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Aspect = __webpack_require__(84).Aspect;\nconst CoreCursor = __webpack_require__(82).CoreCursor;\nconst defineAspects = __webpack_require__(84).defineAspects;\nconst OperationBase = __webpack_require__(84).OperationBase;\n\nclass ExplainOperation extends OperationBase {\n  constructor(cursor) {\n    super();\n\n    this.cursor = cursor;\n  }\n\n  execute() {\n    const cursor = this.cursor;\n    return CoreCursor.prototype._next.apply(cursor, arguments);\n  }\n}\n\ndefineAspects(ExplainOperation, Aspect.SKIP_SESSION);\n\nmodule.exports = ExplainOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZXhwbGFpbi5qcz83NjczIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGVBQWUsbUJBQU8sQ0FBQyxFQUFhO0FBQ3BDLG1CQUFtQixtQkFBTyxDQUFDLEVBQWdCO0FBQzNDLHNCQUFzQixtQkFBTyxDQUFDLEVBQWE7QUFDM0Msc0JBQXNCLG1CQUFPLENBQUMsRUFBYTs7QUFFM0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSIsImZpbGUiOiIxNjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEFzcGVjdCA9IHJlcXVpcmUoJy4vb3BlcmF0aW9uJykuQXNwZWN0O1xuY29uc3QgQ29yZUN1cnNvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3Vyc29yJykuQ29yZUN1cnNvcjtcbmNvbnN0IGRlZmluZUFzcGVjdHMgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLmRlZmluZUFzcGVjdHM7XG5jb25zdCBPcGVyYXRpb25CYXNlID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5PcGVyYXRpb25CYXNlO1xuXG5jbGFzcyBFeHBsYWluT3BlcmF0aW9uIGV4dGVuZHMgT3BlcmF0aW9uQmFzZSB7XG4gIGNvbnN0cnVjdG9yKGN1cnNvcikge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLmN1cnNvciA9IGN1cnNvcjtcbiAgfVxuXG4gIGV4ZWN1dGUoKSB7XG4gICAgY29uc3QgY3Vyc29yID0gdGhpcy5jdXJzb3I7XG4gICAgcmV0dXJuIENvcmVDdXJzb3IucHJvdG90eXBlLl9uZXh0LmFwcGx5KGN1cnNvciwgYXJndW1lbnRzKTtcbiAgfVxufVxuXG5kZWZpbmVBc3BlY3RzKEV4cGxhaW5PcGVyYXRpb24sIEFzcGVjdC5TS0lQX1NFU1NJT04pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4cGxhaW5PcGVyYXRpb247XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///169\n");

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Aspect = __webpack_require__(84).Aspect;\nconst defineAspects = __webpack_require__(84).defineAspects;\nconst loadCursor = __webpack_require__(149).loadCursor;\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst nextObject = __webpack_require__(118).nextObject;\n\nclass HasNextOperation extends OperationBase {\n  constructor(cursor) {\n    super();\n\n    this.cursor = cursor;\n  }\n\n  execute(callback) {\n    const cursor = this.cursor;\n    let Cursor = loadCursor();\n\n    if (cursor.s.currentDoc) {\n      return callback(null, true);\n    }\n\n    if (cursor.isNotified()) {\n      return callback(null, false);\n    }\n\n    nextObject(cursor, (err, doc) => {\n      if (err) return callback(err, null);\n      if (cursor.s.state === Cursor.CLOSED || cursor.isDead()) return callback(null, false);\n      if (!doc) return callback(null, false);\n      cursor.s.currentDoc = doc;\n      callback(null, true);\n    });\n  }\n}\n\ndefineAspects(HasNextOperation, Aspect.SKIP_SESSION);\n\nmodule.exports = HasNextOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvaGFzX25leHQuanM/MzhiNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixlQUFlLG1CQUFPLENBQUMsRUFBYTtBQUNwQyxzQkFBc0IsbUJBQU8sQ0FBQyxFQUFhO0FBQzNDLG1CQUFtQixtQkFBTyxDQUFDLEdBQW9CO0FBQy9DLHNCQUFzQixtQkFBTyxDQUFDLEVBQWE7QUFDM0MsbUJBQW1CLG1CQUFPLENBQUMsR0FBb0I7O0FBRS9DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBOztBQUVBIiwiZmlsZSI6IjE3MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgQXNwZWN0ID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5Bc3BlY3Q7XG5jb25zdCBkZWZpbmVBc3BlY3RzID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5kZWZpbmVBc3BlY3RzO1xuY29uc3QgbG9hZEN1cnNvciA9IHJlcXVpcmUoJy4uL2R5bmFtaWNfbG9hZGVycycpLmxvYWRDdXJzb3I7XG5jb25zdCBPcGVyYXRpb25CYXNlID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5PcGVyYXRpb25CYXNlO1xuY29uc3QgbmV4dE9iamVjdCA9IHJlcXVpcmUoJy4vY29tbW9uX2Z1bmN0aW9ucycpLm5leHRPYmplY3Q7XG5cbmNsYXNzIEhhc05leHRPcGVyYXRpb24gZXh0ZW5kcyBPcGVyYXRpb25CYXNlIHtcbiAgY29uc3RydWN0b3IoY3Vyc29yKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuY3Vyc29yID0gY3Vyc29yO1xuICB9XG5cbiAgZXhlY3V0ZShjYWxsYmFjaykge1xuICAgIGNvbnN0IGN1cnNvciA9IHRoaXMuY3Vyc29yO1xuICAgIGxldCBDdXJzb3IgPSBsb2FkQ3Vyc29yKCk7XG5cbiAgICBpZiAoY3Vyc29yLnMuY3VycmVudERvYykge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHRydWUpO1xuICAgIH1cblxuICAgIGlmIChjdXJzb3IuaXNOb3RpZmllZCgpKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgZmFsc2UpO1xuICAgIH1cblxuICAgIG5leHRPYmplY3QoY3Vyc29yLCAoZXJyLCBkb2MpID0+IHtcbiAgICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIsIG51bGwpO1xuICAgICAgaWYgKGN1cnNvci5zLnN0YXRlID09PSBDdXJzb3IuQ0xPU0VEIHx8IGN1cnNvci5pc0RlYWQoKSkgcmV0dXJuIGNhbGxiYWNrKG51bGwsIGZhbHNlKTtcbiAgICAgIGlmICghZG9jKSByZXR1cm4gY2FsbGJhY2sobnVsbCwgZmFsc2UpO1xuICAgICAgY3Vyc29yLnMuY3VycmVudERvYyA9IGRvYztcbiAgICAgIGNhbGxiYWNrKG51bGwsIHRydWUpO1xuICAgIH0pO1xuICB9XG59XG5cbmRlZmluZUFzcGVjdHMoSGFzTmV4dE9wZXJhdGlvbiwgQXNwZWN0LlNLSVBfU0VTU0lPTik7XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzTmV4dE9wZXJhdGlvbjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///170\n");

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Aspect = __webpack_require__(84).Aspect;\nconst defineAspects = __webpack_require__(84).defineAspects;\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst nextObject = __webpack_require__(118).nextObject;\n\nclass NextOperation extends OperationBase {\n  constructor(cursor) {\n    super();\n\n    this.cursor = cursor;\n  }\n\n  execute(callback) {\n    const cursor = this.cursor;\n\n    // Return the currentDoc if someone called hasNext first\n    if (cursor.s.currentDoc) {\n      const doc = cursor.s.currentDoc;\n      cursor.s.currentDoc = null;\n      return callback(null, doc);\n    }\n\n    // Return the next object\n    nextObject(cursor, callback);\n  }\n}\n\ndefineAspects(NextOperation, Aspect.SKIP_SESSION);\n\nmodule.exports = NextOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvbmV4dC5qcz9lNDJhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGVBQWUsbUJBQU8sQ0FBQyxFQUFhO0FBQ3BDLHNCQUFzQixtQkFBTyxDQUFDLEVBQWE7QUFDM0Msc0JBQXNCLG1CQUFPLENBQUMsRUFBYTtBQUMzQyxtQkFBbUIsbUJBQU8sQ0FBQyxHQUFvQjs7QUFFL0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEiLCJmaWxlIjoiMTcxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBBc3BlY3QgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLkFzcGVjdDtcbmNvbnN0IGRlZmluZUFzcGVjdHMgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLmRlZmluZUFzcGVjdHM7XG5jb25zdCBPcGVyYXRpb25CYXNlID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5PcGVyYXRpb25CYXNlO1xuY29uc3QgbmV4dE9iamVjdCA9IHJlcXVpcmUoJy4vY29tbW9uX2Z1bmN0aW9ucycpLm5leHRPYmplY3Q7XG5cbmNsYXNzIE5leHRPcGVyYXRpb24gZXh0ZW5kcyBPcGVyYXRpb25CYXNlIHtcbiAgY29uc3RydWN0b3IoY3Vyc29yKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuY3Vyc29yID0gY3Vyc29yO1xuICB9XG5cbiAgZXhlY3V0ZShjYWxsYmFjaykge1xuICAgIGNvbnN0IGN1cnNvciA9IHRoaXMuY3Vyc29yO1xuXG4gICAgLy8gUmV0dXJuIHRoZSBjdXJyZW50RG9jIGlmIHNvbWVvbmUgY2FsbGVkIGhhc05leHQgZmlyc3RcbiAgICBpZiAoY3Vyc29yLnMuY3VycmVudERvYykge1xuICAgICAgY29uc3QgZG9jID0gY3Vyc29yLnMuY3VycmVudERvYztcbiAgICAgIGN1cnNvci5zLmN1cnJlbnREb2MgPSBudWxsO1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIGRvYyk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIHRoZSBuZXh0IG9iamVjdFxuICAgIG5leHRPYmplY3QoY3Vyc29yLCBjYWxsYmFjayk7XG4gIH1cbn1cblxuZGVmaW5lQXNwZWN0cyhOZXh0T3BlcmF0aW9uLCBBc3BlY3QuU0tJUF9TRVNTSU9OKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOZXh0T3BlcmF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///171\n");

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Aspect = __webpack_require__(84).Aspect;\nconst defineAspects = __webpack_require__(84).defineAspects;\nconst handleCallback = __webpack_require__(86).handleCallback;\nconst CursorState = __webpack_require__(82).CursorState;\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst push = Array.prototype.push;\n\nclass ToArrayOperation extends OperationBase {\n  constructor(cursor) {\n    super();\n\n    this.cursor = cursor;\n  }\n\n  execute(callback) {\n    const cursor = this.cursor;\n    const items = [];\n\n    // Reset cursor\n    cursor.rewind();\n    cursor.s.state = CursorState.INIT;\n\n    // Fetch all the documents\n    const fetchDocs = () => {\n      cursor._next((err, doc) => {\n        if (err) {\n          return cursor._endSession\n            ? cursor._endSession(() => handleCallback(callback, err))\n            : handleCallback(callback, err);\n        }\n\n        if (doc == null) {\n          return cursor.close({ skipKillCursors: true }, () =>\n            handleCallback(callback, null, items)\n          );\n        }\n\n        // Add doc to items\n        items.push(doc);\n\n        // Get all buffered objects\n        if (cursor.bufferedCount() > 0) {\n          let docs = cursor.readBufferedDocuments(cursor.bufferedCount());\n\n          // Transform the doc if transform method added\n          if (cursor.s.transforms && typeof cursor.s.transforms.doc === 'function') {\n            docs = docs.map(cursor.s.transforms.doc);\n          }\n\n          push.apply(items, docs);\n        }\n\n        // Attempt a fetch\n        fetchDocs();\n      });\n    };\n\n    fetchDocs();\n  }\n}\n\ndefineAspects(ToArrayOperation, Aspect.SKIP_SESSION);\n\nmodule.exports = ToArrayOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvdG9fYXJyYXkuanM/NmU0NyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixlQUFlLG1CQUFPLENBQUMsRUFBYTtBQUNwQyxzQkFBc0IsbUJBQU8sQ0FBQyxFQUFhO0FBQzNDLHVCQUF1QixtQkFBTyxDQUFDLEVBQVU7QUFDekMsb0JBQW9CLG1CQUFPLENBQUMsRUFBZ0I7QUFDNUMsc0JBQXNCLG1CQUFPLENBQUMsRUFBYTtBQUMzQzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrQkFBK0Isd0JBQXdCO0FBQ3ZEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBIiwiZmlsZSI6IjE3Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgQXNwZWN0ID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5Bc3BlY3Q7XG5jb25zdCBkZWZpbmVBc3BlY3RzID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKS5kZWZpbmVBc3BlY3RzO1xuY29uc3QgaGFuZGxlQ2FsbGJhY2sgPSByZXF1aXJlKCcuLi91dGlscycpLmhhbmRsZUNhbGxiYWNrO1xuY29uc3QgQ3Vyc29yU3RhdGUgPSByZXF1aXJlKCcuLi9jb3JlL2N1cnNvcicpLkN1cnNvclN0YXRlO1xuY29uc3QgT3BlcmF0aW9uQmFzZSA9IHJlcXVpcmUoJy4vb3BlcmF0aW9uJykuT3BlcmF0aW9uQmFzZTtcbmNvbnN0IHB1c2ggPSBBcnJheS5wcm90b3R5cGUucHVzaDtcblxuY2xhc3MgVG9BcnJheU9wZXJhdGlvbiBleHRlbmRzIE9wZXJhdGlvbkJhc2Uge1xuICBjb25zdHJ1Y3RvcihjdXJzb3IpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5jdXJzb3IgPSBjdXJzb3I7XG4gIH1cblxuICBleGVjdXRlKGNhbGxiYWNrKSB7XG4gICAgY29uc3QgY3Vyc29yID0gdGhpcy5jdXJzb3I7XG4gICAgY29uc3QgaXRlbXMgPSBbXTtcblxuICAgIC8vIFJlc2V0IGN1cnNvclxuICAgIGN1cnNvci5yZXdpbmQoKTtcbiAgICBjdXJzb3Iucy5zdGF0ZSA9IEN1cnNvclN0YXRlLklOSVQ7XG5cbiAgICAvLyBGZXRjaCBhbGwgdGhlIGRvY3VtZW50c1xuICAgIGNvbnN0IGZldGNoRG9jcyA9ICgpID0+IHtcbiAgICAgIGN1cnNvci5fbmV4dCgoZXJyLCBkb2MpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJldHVybiBjdXJzb3IuX2VuZFNlc3Npb25cbiAgICAgICAgICAgID8gY3Vyc29yLl9lbmRTZXNzaW9uKCgpID0+IGhhbmRsZUNhbGxiYWNrKGNhbGxiYWNrLCBlcnIpKVxuICAgICAgICAgICAgOiBoYW5kbGVDYWxsYmFjayhjYWxsYmFjaywgZXJyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkb2MgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBjdXJzb3IuY2xvc2UoeyBza2lwS2lsbEN1cnNvcnM6IHRydWUgfSwgKCkgPT5cbiAgICAgICAgICAgIGhhbmRsZUNhbGxiYWNrKGNhbGxiYWNrLCBudWxsLCBpdGVtcylcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIGRvYyB0byBpdGVtc1xuICAgICAgICBpdGVtcy5wdXNoKGRvYyk7XG5cbiAgICAgICAgLy8gR2V0IGFsbCBidWZmZXJlZCBvYmplY3RzXG4gICAgICAgIGlmIChjdXJzb3IuYnVmZmVyZWRDb3VudCgpID4gMCkge1xuICAgICAgICAgIGxldCBkb2NzID0gY3Vyc29yLnJlYWRCdWZmZXJlZERvY3VtZW50cyhjdXJzb3IuYnVmZmVyZWRDb3VudCgpKTtcblxuICAgICAgICAgIC8vIFRyYW5zZm9ybSB0aGUgZG9jIGlmIHRyYW5zZm9ybSBtZXRob2QgYWRkZWRcbiAgICAgICAgICBpZiAoY3Vyc29yLnMudHJhbnNmb3JtcyAmJiB0eXBlb2YgY3Vyc29yLnMudHJhbnNmb3Jtcy5kb2MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGRvY3MgPSBkb2NzLm1hcChjdXJzb3Iucy50cmFuc2Zvcm1zLmRvYyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcHVzaC5hcHBseShpdGVtcywgZG9jcyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBdHRlbXB0IGEgZmV0Y2hcbiAgICAgICAgZmV0Y2hEb2NzKCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgZmV0Y2hEb2NzKCk7XG4gIH1cbn1cblxuZGVmaW5lQXNwZWN0cyhUb0FycmF5T3BlcmF0aW9uLCBBc3BlY3QuU0tJUF9TRVNTSU9OKTtcblxubW9kdWxlLmV4cG9ydHMgPSBUb0FycmF5T3BlcmF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///172\n");

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst OperationBase = __webpack_require__(84).OperationBase;\nconst defineAspects = __webpack_require__(84).defineAspects;\nconst Aspect = __webpack_require__(84).Aspect;\nconst deprecate = __webpack_require__(12).deprecate;\nconst Logger = __webpack_require__(3).Logger;\nconst MongoCredentials = __webpack_require__(3).MongoCredentials;\nconst MongoError = __webpack_require__(3).MongoError;\nconst Mongos = __webpack_require__(174);\nconst NativeTopology = __webpack_require__(177);\nconst parse = __webpack_require__(3).parseConnectionString;\nconst ReadConcern = __webpack_require__(115);\nconst ReadPreference = __webpack_require__(3).ReadPreference;\nconst ReplSet = __webpack_require__(178);\nconst Server = __webpack_require__(176);\nconst ServerSessionPool = __webpack_require__(3).Sessions.ServerSessionPool;\n\nlet client;\nfunction loadClient() {\n  if (!client) {\n    client = __webpack_require__(103);\n  }\n  return client;\n}\n\nconst legacyParse = deprecate(\n  __webpack_require__(179),\n  'current URL string parser is deprecated, and will be removed in a future version. ' +\n    'To use the new parser, pass option { useNewUrlParser: true } to MongoClient.connect.'\n);\n\nconst AUTH_MECHANISM_INTERNAL_MAP = {\n  DEFAULT: 'default',\n  'MONGODB-CR': 'mongocr',\n  PLAIN: 'plain',\n  'MONGODB-X509': 'x509',\n  'SCRAM-SHA-1': 'scram-sha-1',\n  'SCRAM-SHA-256': 'scram-sha-256'\n};\n\nconst monitoringEvents = [\n  'timeout',\n  'close',\n  'serverOpening',\n  'serverDescriptionChanged',\n  'serverHeartbeatStarted',\n  'serverHeartbeatSucceeded',\n  'serverHeartbeatFailed',\n  'serverClosed',\n  'topologyOpening',\n  'topologyClosed',\n  'topologyDescriptionChanged',\n  'commandStarted',\n  'commandSucceeded',\n  'commandFailed',\n  'joined',\n  'left',\n  'ping',\n  'ha',\n  'all',\n  'fullsetup',\n  'open'\n];\n\nconst VALID_AUTH_MECHANISMS = new Set([\n  'DEFAULT',\n  'MONGODB-CR',\n  'PLAIN',\n  'MONGODB-X509',\n  'SCRAM-SHA-1',\n  'SCRAM-SHA-256',\n  'GSSAPI'\n]);\n\nconst validOptionNames = [\n  'poolSize',\n  'ssl',\n  'sslValidate',\n  'sslCA',\n  'sslCert',\n  'sslKey',\n  'sslPass',\n  'sslCRL',\n  'autoReconnect',\n  'noDelay',\n  'keepAlive',\n  'keepAliveInitialDelay',\n  'connectTimeoutMS',\n  'family',\n  'socketTimeoutMS',\n  'reconnectTries',\n  'reconnectInterval',\n  'ha',\n  'haInterval',\n  'replicaSet',\n  'secondaryAcceptableLatencyMS',\n  'acceptableLatencyMS',\n  'connectWithNoPrimary',\n  'authSource',\n  'w',\n  'wtimeout',\n  'j',\n  'forceServerObjectId',\n  'serializeFunctions',\n  'ignoreUndefined',\n  'raw',\n  'bufferMaxEntries',\n  'readPreference',\n  'pkFactory',\n  'promiseLibrary',\n  'readConcern',\n  'maxStalenessSeconds',\n  'loggerLevel',\n  'logger',\n  'promoteValues',\n  'promoteBuffers',\n  'promoteLongs',\n  'domainsEnabled',\n  'checkServerIdentity',\n  'validateOptions',\n  'appname',\n  'auth',\n  'user',\n  'password',\n  'authMechanism',\n  'compression',\n  'fsync',\n  'readPreferenceTags',\n  'numberOfRetries',\n  'auto_reconnect',\n  'minSize',\n  'monitorCommands',\n  'retryWrites',\n  'retryReads',\n  'useNewUrlParser',\n  'useUnifiedTopology',\n  'serverSelectionTimeoutMS',\n  'useRecoveryToken',\n  'autoEncryption'\n];\n\nconst ignoreOptionNames = ['native_parser'];\nconst legacyOptionNames = ['server', 'replset', 'replSet', 'mongos', 'db'];\n\n// Validate options object\nfunction validOptions(options) {\n  const _validOptions = validOptionNames.concat(legacyOptionNames);\n\n  for (const name in options) {\n    if (ignoreOptionNames.indexOf(name) !== -1) {\n      continue;\n    }\n\n    if (_validOptions.indexOf(name) === -1) {\n      if (options.validateOptions) {\n        return new MongoError(`option ${name} is not supported`);\n      } else {\n        console.warn(`the options [${name}] is not supported`);\n      }\n    }\n\n    if (legacyOptionNames.indexOf(name) !== -1) {\n      console.warn(\n        `the server/replset/mongos/db options are deprecated, ` +\n          `all their options are supported at the top level of the options object [${validOptionNames}]`\n      );\n    }\n  }\n}\n\nconst LEGACY_OPTIONS_MAP = validOptionNames.reduce((obj, name) => {\n  obj[name.toLowerCase()] = name;\n  return obj;\n}, {});\n\nclass ConnectOperation extends OperationBase {\n  constructor(mongoClient) {\n    super();\n\n    this.mongoClient = mongoClient;\n  }\n\n  execute(callback) {\n    const mongoClient = this.mongoClient;\n    const err = validOptions(mongoClient.s.options);\n\n    // Did we have a validation error\n    if (err) return callback(err);\n    // Fallback to callback based connect\n    connect(mongoClient, mongoClient.s.url, mongoClient.s.options, err => {\n      if (err) return callback(err);\n      callback(null, mongoClient);\n    });\n  }\n}\ndefineAspects(ConnectOperation, [Aspect.SKIP_SESSION]);\n\nfunction addListeners(mongoClient, topology) {\n  topology.on('authenticated', createListener(mongoClient, 'authenticated'));\n  topology.on('error', createListener(mongoClient, 'error'));\n  topology.on('timeout', createListener(mongoClient, 'timeout'));\n  topology.on('close', createListener(mongoClient, 'close'));\n  topology.on('parseError', createListener(mongoClient, 'parseError'));\n  topology.once('open', createListener(mongoClient, 'open'));\n  topology.once('fullsetup', createListener(mongoClient, 'fullsetup'));\n  topology.once('all', createListener(mongoClient, 'all'));\n  topology.on('reconnect', createListener(mongoClient, 'reconnect'));\n}\n\nfunction assignTopology(client, topology) {\n  client.topology = topology;\n  topology.s.sessionPool =\n    topology instanceof NativeTopology\n      ? new ServerSessionPool(topology)\n      : new ServerSessionPool(topology.s.coreTopology);\n}\n\n// Clear out all events\nfunction clearAllEvents(topology) {\n  monitoringEvents.forEach(event => topology.removeAllListeners(event));\n}\n\n// Collect all events in order from SDAM\nfunction collectEvents(mongoClient, topology) {\n  let MongoClient = loadClient();\n  const collectedEvents = [];\n\n  if (mongoClient instanceof MongoClient) {\n    monitoringEvents.forEach(event => {\n      topology.on(event, (object1, object2) => {\n        if (event === 'open') {\n          collectedEvents.push({ event: event, object1: mongoClient });\n        } else {\n          collectedEvents.push({ event: event, object1: object1, object2: object2 });\n        }\n      });\n    });\n  }\n\n  return collectedEvents;\n}\n\nconst emitDeprecationForNonUnifiedTopology = deprecate(() => {},\n'current Server Discovery and Monitoring engine is deprecated, and will be removed in a future version. ' + 'To use the new Server Discover and Monitoring engine, pass option { useUnifiedTopology: true } to the MongoClient constructor.');\n\nfunction connect(mongoClient, url, options, callback) {\n  options = Object.assign({}, options);\n\n  // If callback is null throw an exception\n  if (callback == null) {\n    throw new Error('no callback function provided');\n  }\n\n  let didRequestAuthentication = false;\n  const logger = Logger('MongoClient', options);\n\n  // Did we pass in a Server/ReplSet/Mongos\n  if (url instanceof Server || url instanceof ReplSet || url instanceof Mongos) {\n    return connectWithUrl(mongoClient, url, options, connectCallback);\n  }\n\n  const useNewUrlParser = options.useNewUrlParser !== false;\n\n  const parseFn = useNewUrlParser ? parse : legacyParse;\n  const transform = useNewUrlParser ? transformUrlOptions : legacyTransformUrlOptions;\n\n  parseFn(url, options, (err, _object) => {\n    // Do not attempt to connect if parsing error\n    if (err) return callback(err);\n\n    // Flatten\n    const object = transform(_object);\n\n    // Parse the string\n    const _finalOptions = createUnifiedOptions(object, options);\n\n    // Check if we have connection and socket timeout set\n    if (_finalOptions.socketTimeoutMS == null) _finalOptions.socketTimeoutMS = 360000;\n    if (_finalOptions.connectTimeoutMS == null) _finalOptions.connectTimeoutMS = 30000;\n    if (_finalOptions.retryWrites == null) _finalOptions.retryWrites = true;\n    if (_finalOptions.useRecoveryToken == null) _finalOptions.useRecoveryToken = true;\n    if (_finalOptions.readPreference == null) _finalOptions.readPreference = 'primary';\n\n    if (_finalOptions.db_options && _finalOptions.db_options.auth) {\n      delete _finalOptions.db_options.auth;\n    }\n\n    // Store the merged options object\n    mongoClient.s.options = _finalOptions;\n\n    // Failure modes\n    if (object.servers.length === 0) {\n      return callback(new Error('connection string must contain at least one seed host'));\n    }\n\n    if (_finalOptions.auth && !_finalOptions.credentials) {\n      try {\n        didRequestAuthentication = true;\n        _finalOptions.credentials = generateCredentials(\n          mongoClient,\n          _finalOptions.auth.user,\n          _finalOptions.auth.password,\n          _finalOptions\n        );\n      } catch (err) {\n        return callback(err);\n      }\n    }\n\n    if (_finalOptions.useUnifiedTopology) {\n      return createTopology(mongoClient, 'unified', _finalOptions, connectCallback);\n    }\n\n    emitDeprecationForNonUnifiedTopology();\n\n    // Do we have a replicaset then skip discovery and go straight to connectivity\n    if (_finalOptions.replicaSet || _finalOptions.rs_name) {\n      return createTopology(mongoClient, 'replicaset', _finalOptions, connectCallback);\n    } else if (object.servers.length > 1) {\n      return createTopology(mongoClient, 'mongos', _finalOptions, connectCallback);\n    } else {\n      return createServer(mongoClient, _finalOptions, connectCallback);\n    }\n  });\n\n  function connectCallback(err, topology) {\n    const warningMessage = `seed list contains no mongos proxies, replicaset connections requires the parameter replicaSet to be supplied in the URI or options object, mongodb://server:port/db?replicaSet=name`;\n    if (err && err.message === 'no mongos proxies found in seed list') {\n      if (logger.isWarn()) {\n        logger.warn(warningMessage);\n      }\n\n      // Return a more specific error message for MongoClient.connect\n      return callback(new MongoError(warningMessage));\n    }\n\n    if (didRequestAuthentication) {\n      mongoClient.emit('authenticated', null, true);\n    }\n\n    // Return the error and db instance\n    callback(err, topology);\n  }\n}\n\nfunction connectWithUrl(mongoClient, url, options, connectCallback) {\n  // Set the topology\n  assignTopology(mongoClient, url);\n\n  // Add listeners\n  addListeners(mongoClient, url);\n\n  // Propagate the events to the client\n  relayEvents(mongoClient, url);\n\n  let finalOptions = Object.assign({}, options);\n\n  // If we have a readPreference passed in by the db options, convert it from a string\n  if (typeof options.readPreference === 'string' || typeof options.read_preference === 'string') {\n    finalOptions.readPreference = new ReadPreference(\n      options.readPreference || options.read_preference\n    );\n  }\n\n  const isDoingAuth = finalOptions.user || finalOptions.password || finalOptions.authMechanism;\n  if (isDoingAuth && !finalOptions.credentials) {\n    try {\n      finalOptions.credentials = generateCredentials(\n        mongoClient,\n        finalOptions.user,\n        finalOptions.password,\n        finalOptions\n      );\n    } catch (err) {\n      return connectCallback(err, url);\n    }\n  }\n\n  return url.connect(finalOptions, connectCallback);\n}\n\nfunction createListener(mongoClient, event) {\n  const eventSet = new Set(['all', 'fullsetup', 'open', 'reconnect']);\n  return (v1, v2) => {\n    if (eventSet.has(event)) {\n      return mongoClient.emit(event, mongoClient);\n    }\n\n    mongoClient.emit(event, v1, v2);\n  };\n}\n\nfunction createServer(mongoClient, options, callback) {\n  // Pass in the promise library\n  options.promiseLibrary = mongoClient.s.promiseLibrary;\n\n  // Set default options\n  const servers = translateOptions(options);\n\n  const server = servers[0];\n\n  // Propagate the events to the client\n  const collectedEvents = collectEvents(mongoClient, server);\n\n  // Connect to topology\n  server.connect(options, (err, topology) => {\n    if (err) {\n      server.close(true);\n      return callback(err);\n    }\n    // Clear out all the collected event listeners\n    clearAllEvents(server);\n\n    // Relay all the events\n    relayEvents(mongoClient, server);\n    // Add listeners\n    addListeners(mongoClient, server);\n    // Check if we are really speaking to a mongos\n    const ismaster = topology.lastIsMaster();\n\n    // Set the topology\n    assignTopology(mongoClient, topology);\n\n    // Do we actually have a mongos\n    if (ismaster && ismaster.msg === 'isdbgrid') {\n      // Destroy the current connection\n      topology.close();\n      // Create mongos connection instead\n      return createTopology(mongoClient, 'mongos', options, callback);\n    }\n\n    // Fire all the events\n    replayEvents(mongoClient, collectedEvents);\n    // Otherwise callback\n    callback(err, topology);\n  });\n}\n\nfunction createTopology(mongoClient, topologyType, options, callback) {\n  // Pass in the promise library\n  options.promiseLibrary = mongoClient.s.promiseLibrary;\n\n  const translationOptions = {};\n  if (topologyType === 'unified') translationOptions.createServers = false;\n\n  // Set default options\n  const servers = translateOptions(options, translationOptions);\n\n  // Create the topology\n  let topology;\n  if (topologyType === 'mongos') {\n    topology = new Mongos(servers, options);\n  } else if (topologyType === 'replicaset') {\n    topology = new ReplSet(servers, options);\n  } else if (topologyType === 'unified') {\n    topology = new NativeTopology(options.servers, options);\n  }\n\n  // Add listeners\n  addListeners(mongoClient, topology);\n\n  // Propagate the events to the client\n  relayEvents(mongoClient, topology);\n\n  // Open the connection\n  assignTopology(mongoClient, topology);\n  topology.connect(options, err => {\n    if (err) {\n      topology.close(true);\n      return callback(err);\n    }\n\n    if (options.autoEncryption == null) {\n      callback(null, topology);\n      return;\n    }\n\n    // setup for client side encryption\n    let AutoEncrypter;\n    try {\n      /*require.resolve*/(!(function webpackMissingModule() { var e = new Error(\"Cannot find module 'mongodb-client-encryption'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n    } catch (err) {\n      callback(\n        new MongoError(\n          'Auto-encryption requested, but the module is not installed. Please add `mongodb-client-encryption` as a dependency of your project'\n        )\n      );\n      return;\n    }\n    try {\n      AutoEncrypter = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module 'mongodb-client-encryption'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()))(__webpack_require__(2)).AutoEncrypter;\n    } catch (err) {\n      callback(err);\n      return;\n    }\n\n    const mongoCryptOptions = Object.assign({}, options.autoEncryption);\n    topology.s.options.autoEncrypter = new AutoEncrypter(mongoClient, mongoCryptOptions);\n    topology.s.options.autoEncrypter.init(err => {\n      if (err) return callback(err, null);\n      callback(null, topology);\n    });\n  });\n}\n\nfunction createUnifiedOptions(finalOptions, options) {\n  const childOptions = [\n    'mongos',\n    'server',\n    'db',\n    'replset',\n    'db_options',\n    'server_options',\n    'rs_options',\n    'mongos_options'\n  ];\n  const noMerge = ['readconcern', 'compression'];\n\n  for (const name in options) {\n    if (noMerge.indexOf(name.toLowerCase()) !== -1) {\n      finalOptions[name] = options[name];\n    } else if (childOptions.indexOf(name.toLowerCase()) !== -1) {\n      finalOptions = mergeOptions(finalOptions, options[name], false);\n    } else {\n      if (\n        options[name] &&\n        typeof options[name] === 'object' &&\n        !Buffer.isBuffer(options[name]) &&\n        !Array.isArray(options[name])\n      ) {\n        finalOptions = mergeOptions(finalOptions, options[name], true);\n      } else {\n        finalOptions[name] = options[name];\n      }\n    }\n  }\n\n  return finalOptions;\n}\n\nfunction generateCredentials(client, username, password, options) {\n  options = Object.assign({}, options);\n\n  // the default db to authenticate against is 'self'\n  // if authententicate is called from a retry context, it may be another one, like admin\n  const source = options.authSource || options.authdb || options.dbName;\n\n  // authMechanism\n  const authMechanismRaw = options.authMechanism || 'DEFAULT';\n  const authMechanism = authMechanismRaw.toUpperCase();\n\n  if (!VALID_AUTH_MECHANISMS.has(authMechanism)) {\n    throw MongoError.create({\n      message: `authentication mechanism ${authMechanismRaw} not supported', options.authMechanism`,\n      driver: true\n    });\n  }\n\n  if (authMechanism === 'GSSAPI') {\n    return new MongoCredentials({\n      mechanism: process.platform === 'win32' ? 'sspi' : 'gssapi',\n      mechanismProperties: options,\n      source,\n      username,\n      password\n    });\n  }\n\n  return new MongoCredentials({\n    mechanism: AUTH_MECHANISM_INTERNAL_MAP[authMechanism],\n    source,\n    username,\n    password\n  });\n}\n\nfunction legacyTransformUrlOptions(object) {\n  return mergeOptions(createUnifiedOptions({}, object), object, false);\n}\n\nfunction mergeOptions(target, source, flatten) {\n  for (const name in source) {\n    if (source[name] && typeof source[name] === 'object' && flatten) {\n      target = mergeOptions(target, source[name], flatten);\n    } else {\n      target[name] = source[name];\n    }\n  }\n\n  return target;\n}\n\nfunction relayEvents(mongoClient, topology) {\n  const serverOrCommandEvents = [\n    'serverOpening',\n    'serverDescriptionChanged',\n    'serverHeartbeatStarted',\n    'serverHeartbeatSucceeded',\n    'serverHeartbeatFailed',\n    'serverClosed',\n    'topologyOpening',\n    'topologyClosed',\n    'topologyDescriptionChanged',\n    'commandStarted',\n    'commandSucceeded',\n    'commandFailed',\n    'joined',\n    'left',\n    'ping',\n    'ha'\n  ];\n\n  serverOrCommandEvents.forEach(event => {\n    topology.on(event, (object1, object2) => {\n      mongoClient.emit(event, object1, object2);\n    });\n  });\n}\n\n//\n// Replay any events due to single server connection switching to Mongos\n//\nfunction replayEvents(mongoClient, events) {\n  for (let i = 0; i < events.length; i++) {\n    mongoClient.emit(events[i].event, events[i].object1, events[i].object2);\n  }\n}\n\nfunction transformUrlOptions(_object) {\n  let object = Object.assign({ servers: _object.hosts }, _object.options);\n  for (let name in object) {\n    const camelCaseName = LEGACY_OPTIONS_MAP[name];\n    if (camelCaseName) {\n      object[camelCaseName] = object[name];\n    }\n  }\n\n  const hasUsername = _object.auth && _object.auth.username;\n  const hasAuthMechanism = _object.options && _object.options.authMechanism;\n  if (hasUsername || hasAuthMechanism) {\n    object.auth = Object.assign({}, _object.auth);\n    if (object.auth.db) {\n      object.authSource = object.authSource || object.auth.db;\n    }\n\n    if (object.auth.username) {\n      object.auth.user = object.auth.username;\n    }\n  }\n\n  if (_object.defaultDatabase) {\n    object.dbName = _object.defaultDatabase;\n  }\n\n  if (object.maxPoolSize) {\n    object.poolSize = object.maxPoolSize;\n  }\n\n  if (object.readConcernLevel) {\n    object.readConcern = new ReadConcern(object.readConcernLevel);\n  }\n\n  if (object.wTimeoutMS) {\n    object.wtimeout = object.wTimeoutMS;\n  }\n\n  if (_object.srvHost) {\n    object.srvHost = _object.srvHost;\n  }\n\n  return object;\n}\n\nfunction translateOptions(options, translationOptions) {\n  translationOptions = Object.assign({}, { createServers: true }, translationOptions);\n\n  // If we have a readPreference passed in by the db options\n  if (typeof options.readPreference === 'string' || typeof options.read_preference === 'string') {\n    options.readPreference = new ReadPreference(options.readPreference || options.read_preference);\n  }\n\n  // Do we have readPreference tags, add them\n  if (options.readPreference && (options.readPreferenceTags || options.read_preference_tags)) {\n    options.readPreference.tags = options.readPreferenceTags || options.read_preference_tags;\n  }\n\n  // Do we have maxStalenessSeconds\n  if (options.maxStalenessSeconds) {\n    options.readPreference.maxStalenessSeconds = options.maxStalenessSeconds;\n  }\n\n  // Set the socket and connection timeouts\n  if (options.socketTimeoutMS == null) options.socketTimeoutMS = 360000;\n  if (options.connectTimeoutMS == null) options.connectTimeoutMS = 30000;\n\n  if (!translationOptions.createServers) {\n    return;\n  }\n\n  // Create server instances\n  return options.servers.map(serverObj => {\n    return serverObj.domain_socket\n      ? new Server(serverObj.domain_socket, 27017, options)\n      : new Server(serverObj.host, serverObj.port, options);\n  });\n}\n\nmodule.exports = ConnectOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///173\n");

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst TopologyBase = __webpack_require__(175).TopologyBase;\nconst MongoError = __webpack_require__(3).MongoError;\nconst CMongos = __webpack_require__(3).Mongos;\nconst Cursor = __webpack_require__(106);\nconst Server = __webpack_require__(176);\nconst Store = __webpack_require__(175).Store;\nconst MAX_JS_INT = __webpack_require__(86).MAX_JS_INT;\nconst translateOptions = __webpack_require__(86).translateOptions;\nconst filterOptions = __webpack_require__(86).filterOptions;\nconst mergeOptions = __webpack_require__(86).mergeOptions;\n\n/**\n * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is\n * used to construct connections.\n *\n * **Mongos Should not be used, use MongoClient.connect**\n */\n\n// Allowed parameters\nvar legalOptionNames = [\n  'ha',\n  'haInterval',\n  'acceptableLatencyMS',\n  'poolSize',\n  'ssl',\n  'checkServerIdentity',\n  'sslValidate',\n  'sslCA',\n  'sslCRL',\n  'sslCert',\n  'ciphers',\n  'ecdhCurve',\n  'sslKey',\n  'sslPass',\n  'socketOptions',\n  'bufferMaxEntries',\n  'store',\n  'auto_reconnect',\n  'autoReconnect',\n  'emitError',\n  'keepAlive',\n  'keepAliveInitialDelay',\n  'noDelay',\n  'connectTimeoutMS',\n  'socketTimeoutMS',\n  'loggerLevel',\n  'logger',\n  'reconnectTries',\n  'appname',\n  'domainsEnabled',\n  'servername',\n  'promoteLongs',\n  'promoteValues',\n  'promoteBuffers',\n  'promiseLibrary',\n  'monitorCommands'\n];\n\n/**\n * Creates a new Mongos instance\n * @class\n * @deprecated\n * @param {Server[]} servers A seedlist of servers participating in the replicaset.\n * @param {object} [options] Optional settings.\n * @param {booelan} [options.ha=true] Turn on high availability monitoring.\n * @param {number} [options.haInterval=5000] Time between each replicaset status check.\n * @param {number} [options.poolSize=5] Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n * @param {number} [options.acceptableLatencyMS=15] Cutoff latency point in MS for MongoS proxy selection\n * @param {boolean} [options.ssl=false] Use ssl connection (needs to have a mongod server with ssl support)\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {boolean} [options.sslValidate=false] Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCA] Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCRL] Array of revocation certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {string} [options.ciphers] Passed directly through to tls.createSecureContext. See https://nodejs.org/dist/latest-v9.x/docs/api/tls.html#tls_tls_createsecurecontext_options for more info.\n * @param {string} [options.ecdhCurve] Passed directly through to tls.createSecureContext. See https://nodejs.org/dist/latest-v9.x/docs/api/tls.html#tls_tls_createsecurecontext_options for more info.\n * @param {(Buffer|string)} [options.sslCert] String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslKey] String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslPass] String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {string} [options.servername] String containing the server name requested via TLS SNI.\n * @param {object} [options.socketOptions] Socket options\n * @param {boolean} [options.socketOptions.noDelay=true] TCP Socket NoDelay option.\n * @param {boolean} [options.socketOptions.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.socketOptions.keepAliveInitialDelay=30000] The number of milliseconds to wait before initiating keepAlive on the TCP socket\n * @param {number} [options.socketOptions.connectTimeoutMS=0] TCP Connection timeout setting\n * @param {number} [options.socketOptions.socketTimeoutMS=0] TCP Socket timeout setting\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology\n * @fires Mongos#connect\n * @fires Mongos#ha\n * @fires Mongos#joined\n * @fires Mongos#left\n * @fires Mongos#fullsetup\n * @fires Mongos#open\n * @fires Mongos#close\n * @fires Mongos#error\n * @fires Mongos#timeout\n * @fires Mongos#parseError\n * @fires Mongos#commandStarted\n * @fires Mongos#commandSucceeded\n * @fires Mongos#commandFailed\n * @property {string} parserType the parser type used (c++ or js).\n * @return {Mongos} a Mongos instance.\n */\nclass Mongos extends TopologyBase {\n  constructor(servers, options) {\n    super();\n\n    options = options || {};\n    var self = this;\n\n    // Filter the options\n    options = filterOptions(options, legalOptionNames);\n\n    // Ensure all the instances are Server\n    for (var i = 0; i < servers.length; i++) {\n      if (!(servers[i] instanceof Server)) {\n        throw MongoError.create({\n          message: 'all seed list instances must be of the Server type',\n          driver: true\n        });\n      }\n    }\n\n    // Stored options\n    var storeOptions = {\n      force: false,\n      bufferMaxEntries:\n        typeof options.bufferMaxEntries === 'number' ? options.bufferMaxEntries : MAX_JS_INT\n    };\n\n    // Shared global store\n    var store = options.store || new Store(self, storeOptions);\n\n    // Build seed list\n    var seedlist = servers.map(function(x) {\n      return { host: x.host, port: x.port };\n    });\n\n    // Get the reconnect option\n    var reconnect = typeof options.auto_reconnect === 'boolean' ? options.auto_reconnect : true;\n    reconnect = typeof options.autoReconnect === 'boolean' ? options.autoReconnect : reconnect;\n\n    // Clone options\n    var clonedOptions = mergeOptions(\n      {},\n      {\n        disconnectHandler: store,\n        cursorFactory: Cursor,\n        reconnect: reconnect,\n        emitError: typeof options.emitError === 'boolean' ? options.emitError : true,\n        size: typeof options.poolSize === 'number' ? options.poolSize : 5,\n        monitorCommands:\n          typeof options.monitorCommands === 'boolean' ? options.monitorCommands : false\n      }\n    );\n\n    // Translate any SSL options and other connectivity options\n    clonedOptions = translateOptions(clonedOptions, options);\n\n    // Socket options\n    var socketOptions =\n      options.socketOptions && Object.keys(options.socketOptions).length > 0\n        ? options.socketOptions\n        : options;\n\n    // Translate all the options to the core types\n    clonedOptions = translateOptions(clonedOptions, socketOptions);\n\n    // Build default client information\n    clonedOptions.clientInfo = this.clientInfo;\n    // Do we have an application specific string\n    if (options.appname) {\n      clonedOptions.clientInfo.application = { name: options.appname };\n    }\n\n    // Internal state\n    this.s = {\n      // Create the Mongos\n      coreTopology: new CMongos(seedlist, clonedOptions),\n      // Server capabilities\n      sCapabilities: null,\n      // Debug turned on\n      debug: clonedOptions.debug,\n      // Store option defaults\n      storeOptions: storeOptions,\n      // Cloned options\n      clonedOptions: clonedOptions,\n      // Actual store of callbacks\n      store: store,\n      // Options\n      options: options,\n      // Server Session Pool\n      sessionPool: null,\n      // Active client sessions\n      sessions: new Set(),\n      // Promise library\n      promiseLibrary: options.promiseLibrary || Promise\n    };\n  }\n\n  // Connect\n  connect(_options, callback) {\n    var self = this;\n    if ('function' === typeof _options) (callback = _options), (_options = {});\n    if (_options == null) _options = {};\n    if (!('function' === typeof callback)) callback = null;\n    _options = Object.assign({}, this.s.clonedOptions, _options);\n    self.s.options = _options;\n\n    // Update bufferMaxEntries\n    self.s.storeOptions.bufferMaxEntries =\n      typeof _options.bufferMaxEntries === 'number' ? _options.bufferMaxEntries : -1;\n\n    // Error handler\n    var connectErrorHandler = function() {\n      return function(err) {\n        // Remove all event handlers\n        var events = ['timeout', 'error', 'close'];\n        events.forEach(function(e) {\n          self.removeListener(e, connectErrorHandler);\n        });\n\n        self.s.coreTopology.removeListener('connect', connectErrorHandler);\n        // Force close the topology\n        self.close(true);\n\n        // Try to callback\n        try {\n          callback(err);\n        } catch (err) {\n          process.nextTick(function() {\n            throw err;\n          });\n        }\n      };\n    };\n\n    // Actual handler\n    var errorHandler = function(event) {\n      return function(err) {\n        if (event !== 'error') {\n          self.emit(event, err);\n        }\n      };\n    };\n\n    // Error handler\n    var reconnectHandler = function() {\n      self.emit('reconnect');\n      self.s.store.execute();\n    };\n\n    // relay the event\n    var relay = function(event) {\n      return function(t, server) {\n        self.emit(event, t, server);\n      };\n    };\n\n    // Connect handler\n    var connectHandler = function() {\n      // Clear out all the current handlers left over\n      var events = ['timeout', 'error', 'close', 'fullsetup'];\n      events.forEach(function(e) {\n        self.s.coreTopology.removeAllListeners(e);\n      });\n\n      // Set up listeners\n      self.s.coreTopology.on('timeout', errorHandler('timeout'));\n      self.s.coreTopology.on('error', errorHandler('error'));\n      self.s.coreTopology.on('close', errorHandler('close'));\n\n      // Set up serverConfig listeners\n      self.s.coreTopology.on('fullsetup', function() {\n        self.emit('fullsetup', self);\n      });\n\n      // Emit open event\n      self.emit('open', null, self);\n\n      // Return correctly\n      try {\n        callback(null, self);\n      } catch (err) {\n        process.nextTick(function() {\n          throw err;\n        });\n      }\n    };\n\n    // Clear out all the current handlers left over\n    var events = [\n      'timeout',\n      'error',\n      'close',\n      'serverOpening',\n      'serverDescriptionChanged',\n      'serverHeartbeatStarted',\n      'serverHeartbeatSucceeded',\n      'serverHeartbeatFailed',\n      'serverClosed',\n      'topologyOpening',\n      'topologyClosed',\n      'topologyDescriptionChanged',\n      'commandStarted',\n      'commandSucceeded',\n      'commandFailed'\n    ];\n    events.forEach(function(e) {\n      self.s.coreTopology.removeAllListeners(e);\n    });\n\n    // Set up SDAM listeners\n    self.s.coreTopology.on('serverDescriptionChanged', relay('serverDescriptionChanged'));\n    self.s.coreTopology.on('serverHeartbeatStarted', relay('serverHeartbeatStarted'));\n    self.s.coreTopology.on('serverHeartbeatSucceeded', relay('serverHeartbeatSucceeded'));\n    self.s.coreTopology.on('serverHeartbeatFailed', relay('serverHeartbeatFailed'));\n    self.s.coreTopology.on('serverOpening', relay('serverOpening'));\n    self.s.coreTopology.on('serverClosed', relay('serverClosed'));\n    self.s.coreTopology.on('topologyOpening', relay('topologyOpening'));\n    self.s.coreTopology.on('topologyClosed', relay('topologyClosed'));\n    self.s.coreTopology.on('topologyDescriptionChanged', relay('topologyDescriptionChanged'));\n    self.s.coreTopology.on('commandStarted', relay('commandStarted'));\n    self.s.coreTopology.on('commandSucceeded', relay('commandSucceeded'));\n    self.s.coreTopology.on('commandFailed', relay('commandFailed'));\n\n    // Set up listeners\n    self.s.coreTopology.once('timeout', connectErrorHandler('timeout'));\n    self.s.coreTopology.once('error', connectErrorHandler('error'));\n    self.s.coreTopology.once('close', connectErrorHandler('close'));\n    self.s.coreTopology.once('connect', connectHandler);\n    // Join and leave events\n    self.s.coreTopology.on('joined', relay('joined'));\n    self.s.coreTopology.on('left', relay('left'));\n\n    // Reconnect server\n    self.s.coreTopology.on('reconnect', reconnectHandler);\n\n    // Start connection\n    self.s.coreTopology.connect(_options);\n  }\n}\n\nObject.defineProperty(Mongos.prototype, 'haInterval', {\n  enumerable: true,\n  get: function() {\n    return this.s.coreTopology.s.haInterval;\n  }\n});\n\n/**\n * A mongos connect event, used to verify that the connection is up and running\n *\n * @event Mongos#connect\n * @type {Mongos}\n */\n\n/**\n * The mongos high availability event\n *\n * @event Mongos#ha\n * @type {function}\n * @param {string} type The stage in the high availability event (start|end)\n * @param {boolean} data.norepeat This is a repeating high availability process or a single execution only\n * @param {number} data.id The id for this high availability request\n * @param {object} data.state An object containing the information about the current replicaset\n */\n\n/**\n * A server member left the mongos set\n *\n * @event Mongos#left\n * @type {function}\n * @param {string} type The type of member that left (primary|secondary|arbiter)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the mongos set\n *\n * @event Mongos#joined\n * @type {function}\n * @param {string} type The type of member that joined (primary|secondary|arbiter)\n * @param {Server} server The server object that joined\n */\n\n/**\n * Mongos fullsetup event, emitted when all proxies in the topology have been connected to.\n *\n * @event Mongos#fullsetup\n * @type {Mongos}\n */\n\n/**\n * Mongos open event, emitted when mongos can start processing commands.\n *\n * @event Mongos#open\n * @type {Mongos}\n */\n\n/**\n * Mongos close event\n *\n * @event Mongos#close\n * @type {object}\n */\n\n/**\n * Mongos error event, emitted if there is an error listener.\n *\n * @event Mongos#error\n * @type {MongoError}\n */\n\n/**\n * Mongos timeout event\n *\n * @event Mongos#timeout\n * @type {object}\n */\n\n/**\n * Mongos parseError event\n *\n * @event Mongos#parseError\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command was started, if command monitoring is enabled\n *\n * @event Mongos#commandStarted\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command succeeded, if command monitoring is enabled\n *\n * @event Mongos#commandSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command failed, if command monitoring is enabled\n *\n * @event Mongos#commandFailed\n * @type {object}\n */\n\nmodule.exports = Mongos;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///174\n");

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst EventEmitter = __webpack_require__(39),\n  MongoError = __webpack_require__(3).MongoError,\n  f = __webpack_require__(12).format,\n  os = __webpack_require__(60),\n  translateReadPreference = __webpack_require__(86).translateReadPreference,\n  ClientSession = __webpack_require__(3).Sessions.ClientSession;\n\n// The store of ops\nvar Store = function(topology, storeOptions) {\n  var self = this;\n  var storedOps = [];\n  storeOptions = storeOptions || { force: false, bufferMaxEntries: -1 };\n\n  // Internal state\n  this.s = {\n    storedOps: storedOps,\n    storeOptions: storeOptions,\n    topology: topology\n  };\n\n  Object.defineProperty(this, 'length', {\n    enumerable: true,\n    get: function() {\n      return self.s.storedOps.length;\n    }\n  });\n};\n\nStore.prototype.add = function(opType, ns, ops, options, callback) {\n  if (this.s.storeOptions.force) {\n    return callback(MongoError.create({ message: 'db closed by application', driver: true }));\n  }\n\n  if (this.s.storeOptions.bufferMaxEntries === 0) {\n    return callback(\n      MongoError.create({\n        message: f(\n          'no connection available for operation and number of stored operation > %s',\n          this.s.storeOptions.bufferMaxEntries\n        ),\n        driver: true\n      })\n    );\n  }\n\n  if (\n    this.s.storeOptions.bufferMaxEntries > 0 &&\n    this.s.storedOps.length > this.s.storeOptions.bufferMaxEntries\n  ) {\n    while (this.s.storedOps.length > 0) {\n      var op = this.s.storedOps.shift();\n      op.c(\n        MongoError.create({\n          message: f(\n            'no connection available for operation and number of stored operation > %s',\n            this.s.storeOptions.bufferMaxEntries\n          ),\n          driver: true\n        })\n      );\n    }\n\n    return;\n  }\n\n  this.s.storedOps.push({ t: opType, n: ns, o: ops, op: options, c: callback });\n};\n\nStore.prototype.addObjectAndMethod = function(opType, object, method, params, callback) {\n  if (this.s.storeOptions.force) {\n    return callback(MongoError.create({ message: 'db closed by application', driver: true }));\n  }\n\n  if (this.s.storeOptions.bufferMaxEntries === 0) {\n    return callback(\n      MongoError.create({\n        message: f(\n          'no connection available for operation and number of stored operation > %s',\n          this.s.storeOptions.bufferMaxEntries\n        ),\n        driver: true\n      })\n    );\n  }\n\n  if (\n    this.s.storeOptions.bufferMaxEntries > 0 &&\n    this.s.storedOps.length > this.s.storeOptions.bufferMaxEntries\n  ) {\n    while (this.s.storedOps.length > 0) {\n      var op = this.s.storedOps.shift();\n      op.c(\n        MongoError.create({\n          message: f(\n            'no connection available for operation and number of stored operation > %s',\n            this.s.storeOptions.bufferMaxEntries\n          ),\n          driver: true\n        })\n      );\n    }\n\n    return;\n  }\n\n  this.s.storedOps.push({ t: opType, m: method, o: object, p: params, c: callback });\n};\n\nStore.prototype.flush = function(err) {\n  while (this.s.storedOps.length > 0) {\n    this.s.storedOps\n      .shift()\n      .c(\n        err ||\n          MongoError.create({ message: f('no connection available for operation'), driver: true })\n      );\n  }\n};\n\nvar primaryOptions = ['primary', 'primaryPreferred', 'nearest', 'secondaryPreferred'];\nvar secondaryOptions = ['secondary', 'secondaryPreferred'];\n\nStore.prototype.execute = function(options) {\n  options = options || {};\n  // Get current ops\n  var ops = this.s.storedOps;\n  // Reset the ops\n  this.s.storedOps = [];\n\n  // Unpack options\n  var executePrimary = typeof options.executePrimary === 'boolean' ? options.executePrimary : true;\n  var executeSecondary =\n    typeof options.executeSecondary === 'boolean' ? options.executeSecondary : true;\n\n  // Execute all the stored ops\n  while (ops.length > 0) {\n    var op = ops.shift();\n\n    if (op.t === 'cursor') {\n      if (executePrimary && executeSecondary) {\n        op.o[op.m].apply(op.o, op.p);\n      } else if (\n        executePrimary &&\n        op.o.options &&\n        op.o.options.readPreference &&\n        primaryOptions.indexOf(op.o.options.readPreference.mode) !== -1\n      ) {\n        op.o[op.m].apply(op.o, op.p);\n      } else if (\n        !executePrimary &&\n        executeSecondary &&\n        op.o.options &&\n        op.o.options.readPreference &&\n        secondaryOptions.indexOf(op.o.options.readPreference.mode) !== -1\n      ) {\n        op.o[op.m].apply(op.o, op.p);\n      }\n    } else if (op.t === 'auth') {\n      this.s.topology[op.t].apply(this.s.topology, op.o);\n    } else {\n      if (executePrimary && executeSecondary) {\n        this.s.topology[op.t](op.n, op.o, op.op, op.c);\n      } else if (\n        executePrimary &&\n        op.op &&\n        op.op.readPreference &&\n        primaryOptions.indexOf(op.op.readPreference.mode) !== -1\n      ) {\n        this.s.topology[op.t](op.n, op.o, op.op, op.c);\n      } else if (\n        !executePrimary &&\n        executeSecondary &&\n        op.op &&\n        op.op.readPreference &&\n        secondaryOptions.indexOf(op.op.readPreference.mode) !== -1\n      ) {\n        this.s.topology[op.t](op.n, op.o, op.op, op.c);\n      }\n    }\n  }\n};\n\nStore.prototype.all = function() {\n  return this.s.storedOps;\n};\n\n// Server capabilities\nvar ServerCapabilities = function(ismaster) {\n  var setup_get_property = function(object, name, value) {\n    Object.defineProperty(object, name, {\n      enumerable: true,\n      get: function() {\n        return value;\n      }\n    });\n  };\n\n  // Capabilities\n  var aggregationCursor = false;\n  var writeCommands = false;\n  var textSearch = false;\n  var authCommands = false;\n  var listCollections = false;\n  var listIndexes = false;\n  var maxNumberOfDocsInBatch = ismaster.maxWriteBatchSize || 1000;\n  var commandsTakeWriteConcern = false;\n  var commandsTakeCollation = false;\n\n  if (ismaster.minWireVersion >= 0) {\n    textSearch = true;\n  }\n\n  if (ismaster.maxWireVersion >= 1) {\n    aggregationCursor = true;\n    authCommands = true;\n  }\n\n  if (ismaster.maxWireVersion >= 2) {\n    writeCommands = true;\n  }\n\n  if (ismaster.maxWireVersion >= 3) {\n    listCollections = true;\n    listIndexes = true;\n  }\n\n  if (ismaster.maxWireVersion >= 5) {\n    commandsTakeWriteConcern = true;\n    commandsTakeCollation = true;\n  }\n\n  // If no min or max wire version set to 0\n  if (ismaster.minWireVersion == null) {\n    ismaster.minWireVersion = 0;\n  }\n\n  if (ismaster.maxWireVersion == null) {\n    ismaster.maxWireVersion = 0;\n  }\n\n  // Map up read only parameters\n  setup_get_property(this, 'hasAggregationCursor', aggregationCursor);\n  setup_get_property(this, 'hasWriteCommands', writeCommands);\n  setup_get_property(this, 'hasTextSearch', textSearch);\n  setup_get_property(this, 'hasAuthCommands', authCommands);\n  setup_get_property(this, 'hasListCollectionsCommand', listCollections);\n  setup_get_property(this, 'hasListIndexesCommand', listIndexes);\n  setup_get_property(this, 'minWireVersion', ismaster.minWireVersion);\n  setup_get_property(this, 'maxWireVersion', ismaster.maxWireVersion);\n  setup_get_property(this, 'maxNumberOfDocsInBatch', maxNumberOfDocsInBatch);\n  setup_get_property(this, 'commandsTakeWriteConcern', commandsTakeWriteConcern);\n  setup_get_property(this, 'commandsTakeCollation', commandsTakeCollation);\n};\n\n// Get package.json variable\nconst driverVersion = __webpack_require__(61).version,\n  nodejsversion = f('Node.js %s, %s', process.version, os.endianness()),\n  type = os.type(),\n  name = process.platform,\n  architecture = process.arch,\n  release = os.release();\n\nclass TopologyBase extends EventEmitter {\n  constructor() {\n    super();\n\n    // Build default client information\n    this.clientInfo = {\n      driver: {\n        name: 'nodejs',\n        version: driverVersion\n      },\n      os: {\n        type: type,\n        name: name,\n        architecture: architecture,\n        version: release\n      },\n      platform: nodejsversion\n    };\n\n    this.setMaxListeners(Infinity);\n  }\n\n  // Sessions related methods\n  hasSessionSupport() {\n    return this.logicalSessionTimeoutMinutes != null;\n  }\n\n  startSession(options, clientOptions) {\n    const session = new ClientSession(this, this.s.sessionPool, options, clientOptions);\n\n    session.once('ended', () => {\n      this.s.sessions.delete(session);\n    });\n\n    this.s.sessions.add(session);\n    return session;\n  }\n\n  endSessions(sessions, callback) {\n    return this.s.coreTopology.endSessions(sessions, callback);\n  }\n\n  // Server capabilities\n  capabilities() {\n    if (this.s.sCapabilities) return this.s.sCapabilities;\n    if (this.s.coreTopology.lastIsMaster() == null) return null;\n    this.s.sCapabilities = new ServerCapabilities(this.s.coreTopology.lastIsMaster());\n    return this.s.sCapabilities;\n  }\n\n  // Command\n  command(ns, cmd, options, callback) {\n    this.s.coreTopology.command(ns.toString(), cmd, translateReadPreference(options), callback);\n  }\n\n  // Insert\n  insert(ns, ops, options, callback) {\n    this.s.coreTopology.insert(ns.toString(), ops, options, callback);\n  }\n\n  // Update\n  update(ns, ops, options, callback) {\n    this.s.coreTopology.update(ns.toString(), ops, options, callback);\n  }\n\n  // Remove\n  remove(ns, ops, options, callback) {\n    this.s.coreTopology.remove(ns.toString(), ops, options, callback);\n  }\n\n  // IsConnected\n  isConnected(options) {\n    options = options || {};\n    options = translateReadPreference(options);\n\n    return this.s.coreTopology.isConnected(options);\n  }\n\n  // IsDestroyed\n  isDestroyed() {\n    return this.s.coreTopology.isDestroyed();\n  }\n\n  // Cursor\n  cursor(ns, cmd, options) {\n    options = options || {};\n    options = translateReadPreference(options);\n    options.disconnectHandler = this.s.store;\n    options.topology = this;\n\n    return this.s.coreTopology.cursor(ns, cmd, options);\n  }\n\n  lastIsMaster() {\n    return this.s.coreTopology.lastIsMaster();\n  }\n\n  selectServer(selector, options, callback) {\n    return this.s.coreTopology.selectServer(selector, options, callback);\n  }\n\n  /**\n   * Unref all sockets\n   * @method\n   */\n  unref() {\n    return this.s.coreTopology.unref();\n  }\n\n  /**\n   * All raw connections\n   * @method\n   * @return {array}\n   */\n  connections() {\n    return this.s.coreTopology.connections();\n  }\n\n  close(forceClosed, callback) {\n    // If we have sessions, we want to individually move them to the session pool,\n    // and then send a single endSessions call.\n    this.s.sessions.forEach(session => session.endSession());\n\n    if (this.s.sessionPool) {\n      this.s.sessionPool.endAllPooledSessions();\n    }\n\n    // We need to wash out all stored processes\n    if (forceClosed === true) {\n      this.s.storeOptions.force = forceClosed;\n      this.s.store.flush();\n    }\n\n    this.s.coreTopology.destroy(\n      {\n        force: typeof forceClosed === 'boolean' ? forceClosed : false\n      },\n      callback\n    );\n  }\n}\n\n// Properties\nObject.defineProperty(TopologyBase.prototype, 'bson', {\n  enumerable: true,\n  get: function() {\n    return this.s.coreTopology.s.bson;\n  }\n});\n\nObject.defineProperty(TopologyBase.prototype, 'parserType', {\n  enumerable: true,\n  get: function() {\n    return this.s.coreTopology.parserType;\n  }\n});\n\nObject.defineProperty(TopologyBase.prototype, 'logicalSessionTimeoutMinutes', {\n  enumerable: true,\n  get: function() {\n    return this.s.coreTopology.logicalSessionTimeoutMinutes;\n  }\n});\n\nObject.defineProperty(TopologyBase.prototype, 'type', {\n  enumerable: true,\n  get: function() {\n    return this.s.coreTopology.type;\n  }\n});\n\nexports.Store = Store;\nexports.ServerCapabilities = ServerCapabilities;\nexports.TopologyBase = TopologyBase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///175\n");

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst CServer = __webpack_require__(3).Server;\nconst Cursor = __webpack_require__(106);\nconst TopologyBase = __webpack_require__(175).TopologyBase;\nconst Store = __webpack_require__(175).Store;\nconst MongoError = __webpack_require__(3).MongoError;\nconst MAX_JS_INT = __webpack_require__(86).MAX_JS_INT;\nconst translateOptions = __webpack_require__(86).translateOptions;\nconst filterOptions = __webpack_require__(86).filterOptions;\nconst mergeOptions = __webpack_require__(86).mergeOptions;\n\n/**\n * @fileOverview The **Server** class is a class that represents a single server topology and is\n * used to construct connections.\n *\n * **Server Should not be used, use MongoClient.connect**\n */\n\n// Allowed parameters\nvar legalOptionNames = [\n  'ha',\n  'haInterval',\n  'acceptableLatencyMS',\n  'poolSize',\n  'ssl',\n  'checkServerIdentity',\n  'sslValidate',\n  'sslCA',\n  'sslCRL',\n  'sslCert',\n  'ciphers',\n  'ecdhCurve',\n  'sslKey',\n  'sslPass',\n  'socketOptions',\n  'bufferMaxEntries',\n  'store',\n  'auto_reconnect',\n  'autoReconnect',\n  'emitError',\n  'keepAlive',\n  'keepAliveInitialDelay',\n  'noDelay',\n  'connectTimeoutMS',\n  'socketTimeoutMS',\n  'family',\n  'loggerLevel',\n  'logger',\n  'reconnectTries',\n  'reconnectInterval',\n  'monitoring',\n  'appname',\n  'domainsEnabled',\n  'servername',\n  'promoteLongs',\n  'promoteValues',\n  'promoteBuffers',\n  'compression',\n  'promiseLibrary',\n  'monitorCommands'\n];\n\n/**\n * Creates a new Server instance\n * @class\n * @deprecated\n * @param {string} host The host for the server, can be either an IP4, IP6 or domain socket style host.\n * @param {number} [port] The server port if IP4.\n * @param {object} [options] Optional settings.\n * @param {number} [options.poolSize=5] Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n * @param {boolean} [options.ssl=false] Use ssl connection (needs to have a mongod server with ssl support)\n * @param {boolean} [options.sslValidate=false] Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {array} [options.sslCA] Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCRL] Array of revocation certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslCert] String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {string} [options.ciphers] Passed directly through to tls.createSecureContext. See https://nodejs.org/dist/latest-v9.x/docs/api/tls.html#tls_tls_createsecurecontext_options for more info.\n * @param {string} [options.ecdhCurve] Passed directly through to tls.createSecureContext. See https://nodejs.org/dist/latest-v9.x/docs/api/tls.html#tls_tls_createsecurecontext_options for more info.\n * @param {(Buffer|string)} [options.sslKey] String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslPass] String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {string} [options.servername] String containing the server name requested via TLS SNI.\n * @param {object} [options.socketOptions] Socket options\n * @param {boolean} [options.socketOptions.autoReconnect=true] Reconnect on error.\n * @param {boolean} [options.socketOptions.noDelay=true] TCP Socket NoDelay option.\n * @param {boolean} [options.socketOptions.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.socketOptions.keepAliveInitialDelay=30000] The number of milliseconds to wait before initiating keepAlive on the TCP socket\n * @param {number} [options.socketOptions.connectTimeoutMS=0] TCP Connection timeout setting\n * @param {number} [options.socketOptions.socketTimeoutMS=0] TCP Socket timeout setting\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @param {boolean} [options.monitoring=true] Triggers the server instance to call ismaster\n * @param {number} [options.haInterval=10000] The interval of calling ismaster when monitoring is enabled.\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology\n * @fires Server#connect\n * @fires Server#close\n * @fires Server#error\n * @fires Server#timeout\n * @fires Server#parseError\n * @fires Server#reconnect\n * @fires Server#commandStarted\n * @fires Server#commandSucceeded\n * @fires Server#commandFailed\n * @property {string} parserType the parser type used (c++ or js).\n * @return {Server} a Server instance.\n */\nclass Server extends TopologyBase {\n  constructor(host, port, options) {\n    super();\n    var self = this;\n\n    // Filter the options\n    options = filterOptions(options, legalOptionNames);\n\n    // Promise library\n    const promiseLibrary = options.promiseLibrary;\n\n    // Stored options\n    var storeOptions = {\n      force: false,\n      bufferMaxEntries:\n        typeof options.bufferMaxEntries === 'number' ? options.bufferMaxEntries : MAX_JS_INT\n    };\n\n    // Shared global store\n    var store = options.store || new Store(self, storeOptions);\n\n    // Detect if we have a socket connection\n    if (host.indexOf('/') !== -1) {\n      if (port != null && typeof port === 'object') {\n        options = port;\n        port = null;\n      }\n    } else if (port == null) {\n      throw MongoError.create({ message: 'port must be specified', driver: true });\n    }\n\n    // Get the reconnect option\n    var reconnect = typeof options.auto_reconnect === 'boolean' ? options.auto_reconnect : true;\n    reconnect = typeof options.autoReconnect === 'boolean' ? options.autoReconnect : reconnect;\n\n    // Clone options\n    var clonedOptions = mergeOptions(\n      {},\n      {\n        host: host,\n        port: port,\n        disconnectHandler: store,\n        cursorFactory: Cursor,\n        reconnect: reconnect,\n        emitError: typeof options.emitError === 'boolean' ? options.emitError : true,\n        size: typeof options.poolSize === 'number' ? options.poolSize : 5,\n        monitorCommands:\n          typeof options.monitorCommands === 'boolean' ? options.monitorCommands : false\n      }\n    );\n\n    // Translate any SSL options and other connectivity options\n    clonedOptions = translateOptions(clonedOptions, options);\n\n    // Socket options\n    var socketOptions =\n      options.socketOptions && Object.keys(options.socketOptions).length > 0\n        ? options.socketOptions\n        : options;\n\n    // Translate all the options to the core types\n    clonedOptions = translateOptions(clonedOptions, socketOptions);\n\n    // Build default client information\n    clonedOptions.clientInfo = this.clientInfo;\n    // Do we have an application specific string\n    if (options.appname) {\n      clonedOptions.clientInfo.application = { name: options.appname };\n    }\n\n    // Define the internal properties\n    this.s = {\n      // Create an instance of a server instance from core module\n      coreTopology: new CServer(clonedOptions),\n      // Server capabilities\n      sCapabilities: null,\n      // Cloned options\n      clonedOptions: clonedOptions,\n      // Reconnect\n      reconnect: clonedOptions.reconnect,\n      // Emit error\n      emitError: clonedOptions.emitError,\n      // Pool size\n      poolSize: clonedOptions.size,\n      // Store Options\n      storeOptions: storeOptions,\n      // Store\n      store: store,\n      // Host\n      host: host,\n      // Port\n      port: port,\n      // Options\n      options: options,\n      // Server Session Pool\n      sessionPool: null,\n      // Active client sessions\n      sessions: new Set(),\n      // Promise library\n      promiseLibrary: promiseLibrary || Promise\n    };\n  }\n\n  // Connect\n  connect(_options, callback) {\n    var self = this;\n    if ('function' === typeof _options) (callback = _options), (_options = {});\n    if (_options == null) _options = this.s.clonedOptions;\n    if (!('function' === typeof callback)) callback = null;\n    _options = Object.assign({}, this.s.clonedOptions, _options);\n    self.s.options = _options;\n\n    // Update bufferMaxEntries\n    self.s.storeOptions.bufferMaxEntries =\n      typeof _options.bufferMaxEntries === 'number' ? _options.bufferMaxEntries : -1;\n\n    // Error handler\n    var connectErrorHandler = function() {\n      return function(err) {\n        // Remove all event handlers\n        var events = ['timeout', 'error', 'close'];\n        events.forEach(function(e) {\n          self.s.coreTopology.removeListener(e, connectHandlers[e]);\n        });\n\n        self.s.coreTopology.removeListener('connect', connectErrorHandler);\n\n        // Try to callback\n        try {\n          callback(err);\n        } catch (err) {\n          process.nextTick(function() {\n            throw err;\n          });\n        }\n      };\n    };\n\n    // Actual handler\n    var errorHandler = function(event) {\n      return function(err) {\n        if (event !== 'error') {\n          self.emit(event, err);\n        }\n      };\n    };\n\n    // Error handler\n    var reconnectHandler = function() {\n      self.emit('reconnect', self);\n      self.s.store.execute();\n    };\n\n    // Reconnect failed\n    var reconnectFailedHandler = function(err) {\n      self.emit('reconnectFailed', err);\n      self.s.store.flush(err);\n    };\n\n    // Destroy called on topology, perform cleanup\n    var destroyHandler = function() {\n      self.s.store.flush();\n    };\n\n    // relay the event\n    var relay = function(event) {\n      return function(t, server) {\n        self.emit(event, t, server);\n      };\n    };\n\n    // Connect handler\n    var connectHandler = function() {\n      // Clear out all the current handlers left over\n      ['timeout', 'error', 'close', 'destroy'].forEach(function(e) {\n        self.s.coreTopology.removeAllListeners(e);\n      });\n\n      // Set up listeners\n      self.s.coreTopology.on('timeout', errorHandler('timeout'));\n      self.s.coreTopology.once('error', errorHandler('error'));\n      self.s.coreTopology.on('close', errorHandler('close'));\n      // Only called on destroy\n      self.s.coreTopology.on('destroy', destroyHandler);\n\n      // Emit open event\n      self.emit('open', null, self);\n\n      // Return correctly\n      try {\n        callback(null, self);\n      } catch (err) {\n        process.nextTick(function() {\n          throw err;\n        });\n      }\n    };\n\n    // Set up listeners\n    var connectHandlers = {\n      timeout: connectErrorHandler('timeout'),\n      error: connectErrorHandler('error'),\n      close: connectErrorHandler('close')\n    };\n\n    // Clear out all the current handlers left over\n    [\n      'timeout',\n      'error',\n      'close',\n      'serverOpening',\n      'serverDescriptionChanged',\n      'serverHeartbeatStarted',\n      'serverHeartbeatSucceeded',\n      'serverHeartbeatFailed',\n      'serverClosed',\n      'topologyOpening',\n      'topologyClosed',\n      'topologyDescriptionChanged',\n      'commandStarted',\n      'commandSucceeded',\n      'commandFailed'\n    ].forEach(function(e) {\n      self.s.coreTopology.removeAllListeners(e);\n    });\n\n    // Add the event handlers\n    self.s.coreTopology.once('timeout', connectHandlers.timeout);\n    self.s.coreTopology.once('error', connectHandlers.error);\n    self.s.coreTopology.once('close', connectHandlers.close);\n    self.s.coreTopology.once('connect', connectHandler);\n    // Reconnect server\n    self.s.coreTopology.on('reconnect', reconnectHandler);\n    self.s.coreTopology.on('reconnectFailed', reconnectFailedHandler);\n\n    // Set up SDAM listeners\n    self.s.coreTopology.on('serverDescriptionChanged', relay('serverDescriptionChanged'));\n    self.s.coreTopology.on('serverHeartbeatStarted', relay('serverHeartbeatStarted'));\n    self.s.coreTopology.on('serverHeartbeatSucceeded', relay('serverHeartbeatSucceeded'));\n    self.s.coreTopology.on('serverHeartbeatFailed', relay('serverHeartbeatFailed'));\n    self.s.coreTopology.on('serverOpening', relay('serverOpening'));\n    self.s.coreTopology.on('serverClosed', relay('serverClosed'));\n    self.s.coreTopology.on('topologyOpening', relay('topologyOpening'));\n    self.s.coreTopology.on('topologyClosed', relay('topologyClosed'));\n    self.s.coreTopology.on('topologyDescriptionChanged', relay('topologyDescriptionChanged'));\n    self.s.coreTopology.on('commandStarted', relay('commandStarted'));\n    self.s.coreTopology.on('commandSucceeded', relay('commandSucceeded'));\n    self.s.coreTopology.on('commandFailed', relay('commandFailed'));\n    self.s.coreTopology.on('attemptReconnect', relay('attemptReconnect'));\n    self.s.coreTopology.on('monitoring', relay('monitoring'));\n\n    // Start connection\n    self.s.coreTopology.connect(_options);\n  }\n}\n\nObject.defineProperty(Server.prototype, 'poolSize', {\n  enumerable: true,\n  get: function() {\n    return this.s.coreTopology.connections().length;\n  }\n});\n\nObject.defineProperty(Server.prototype, 'autoReconnect', {\n  enumerable: true,\n  get: function() {\n    return this.s.reconnect;\n  }\n});\n\nObject.defineProperty(Server.prototype, 'host', {\n  enumerable: true,\n  get: function() {\n    return this.s.host;\n  }\n});\n\nObject.defineProperty(Server.prototype, 'port', {\n  enumerable: true,\n  get: function() {\n    return this.s.port;\n  }\n});\n\n/**\n * Server connect event\n *\n * @event Server#connect\n * @type {object}\n */\n\n/**\n * Server close event\n *\n * @event Server#close\n * @type {object}\n */\n\n/**\n * Server reconnect event\n *\n * @event Server#reconnect\n * @type {object}\n */\n\n/**\n * Server error event\n *\n * @event Server#error\n * @type {MongoError}\n */\n\n/**\n * Server timeout event\n *\n * @event Server#timeout\n * @type {object}\n */\n\n/**\n * Server parseError event\n *\n * @event Server#parseError\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command was started, if command monitoring is enabled\n *\n * @event Server#commandStarted\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command succeeded, if command monitoring is enabled\n *\n * @event Server#commandSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command failed, if command monitoring is enabled\n *\n * @event Server#commandFailed\n * @type {object}\n */\n\nmodule.exports = Server;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///176\n");

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Topology = __webpack_require__(3).Topology;\nconst ServerCapabilities = __webpack_require__(175).ServerCapabilities;\nconst Cursor = __webpack_require__(106);\nconst translateOptions = __webpack_require__(86).translateOptions;\n\nclass NativeTopology extends Topology {\n  constructor(servers, options) {\n    options = options || {};\n\n    let clonedOptions = Object.assign(\n      {},\n      {\n        cursorFactory: Cursor,\n        reconnect: false,\n        emitError: typeof options.emitError === 'boolean' ? options.emitError : true,\n        size: typeof options.poolSize === 'number' ? options.poolSize : 5,\n        monitorCommands:\n          typeof options.monitorCommands === 'boolean' ? options.monitorCommands : false\n      }\n    );\n\n    // Translate any SSL options and other connectivity options\n    clonedOptions = translateOptions(clonedOptions, options);\n\n    // Socket options\n    var socketOptions =\n      options.socketOptions && Object.keys(options.socketOptions).length > 0\n        ? options.socketOptions\n        : options;\n\n    // Translate all the options to the core types\n    clonedOptions = translateOptions(clonedOptions, socketOptions);\n\n    super(servers, clonedOptions);\n\n    // Do we have an application specific string\n    if (options.appname) {\n      this.s.clientInfo.application = { name: options.appname };\n    }\n  }\n\n  capabilities() {\n    if (this.s.sCapabilities) return this.s.sCapabilities;\n    if (this.lastIsMaster() == null) return null;\n    this.s.sCapabilities = new ServerCapabilities(this.lastIsMaster());\n    return this.s.sCapabilities;\n  }\n\n  // Command\n  command(ns, cmd, options, callback) {\n    super.command(ns.toString(), cmd, options, callback);\n  }\n\n  // Insert\n  insert(ns, ops, options, callback) {\n    super.insert(ns.toString(), ops, options, callback);\n  }\n\n  // Update\n  update(ns, ops, options, callback) {\n    super.update(ns.toString(), ops, options, callback);\n  }\n\n  // Remove\n  remove(ns, ops, options, callback) {\n    super.remove(ns.toString(), ops, options, callback);\n  }\n}\n\nmodule.exports = NativeTopology;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3RvcG9sb2dpZXMvbmF0aXZlX3RvcG9sb2d5LmpzP2UzODIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsaUJBQWlCLG1CQUFPLENBQUMsQ0FBUztBQUNsQywyQkFBMkIsbUJBQU8sQ0FBQyxHQUFpQjtBQUNwRCxlQUFlLG1CQUFPLENBQUMsR0FBVztBQUNsQyx5QkFBeUIsbUJBQU8sQ0FBQyxFQUFVOztBQUUzQztBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIxNzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFRvcG9sb2d5ID0gcmVxdWlyZSgnLi4vY29yZScpLlRvcG9sb2d5O1xuY29uc3QgU2VydmVyQ2FwYWJpbGl0aWVzID0gcmVxdWlyZSgnLi90b3BvbG9neV9iYXNlJykuU2VydmVyQ2FwYWJpbGl0aWVzO1xuY29uc3QgQ3Vyc29yID0gcmVxdWlyZSgnLi4vY3Vyc29yJyk7XG5jb25zdCB0cmFuc2xhdGVPcHRpb25zID0gcmVxdWlyZSgnLi4vdXRpbHMnKS50cmFuc2xhdGVPcHRpb25zO1xuXG5jbGFzcyBOYXRpdmVUb3BvbG9neSBleHRlbmRzIFRvcG9sb2d5IHtcbiAgY29uc3RydWN0b3Ioc2VydmVycywgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgbGV0IGNsb25lZE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKFxuICAgICAge30sXG4gICAgICB7XG4gICAgICAgIGN1cnNvckZhY3Rvcnk6IEN1cnNvcixcbiAgICAgICAgcmVjb25uZWN0OiBmYWxzZSxcbiAgICAgICAgZW1pdEVycm9yOiB0eXBlb2Ygb3B0aW9ucy5lbWl0RXJyb3IgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuZW1pdEVycm9yIDogdHJ1ZSxcbiAgICAgICAgc2l6ZTogdHlwZW9mIG9wdGlvbnMucG9vbFNpemUgPT09ICdudW1iZXInID8gb3B0aW9ucy5wb29sU2l6ZSA6IDUsXG4gICAgICAgIG1vbml0b3JDb21tYW5kczpcbiAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5tb25pdG9yQ29tbWFuZHMgPT09ICdib29sZWFuJyA/IG9wdGlvbnMubW9uaXRvckNvbW1hbmRzIDogZmFsc2VcbiAgICAgIH1cbiAgICApO1xuXG4gICAgLy8gVHJhbnNsYXRlIGFueSBTU0wgb3B0aW9ucyBhbmQgb3RoZXIgY29ubmVjdGl2aXR5IG9wdGlvbnNcbiAgICBjbG9uZWRPcHRpb25zID0gdHJhbnNsYXRlT3B0aW9ucyhjbG9uZWRPcHRpb25zLCBvcHRpb25zKTtcblxuICAgIC8vIFNvY2tldCBvcHRpb25zXG4gICAgdmFyIHNvY2tldE9wdGlvbnMgPVxuICAgICAgb3B0aW9ucy5zb2NrZXRPcHRpb25zICYmIE9iamVjdC5rZXlzKG9wdGlvbnMuc29ja2V0T3B0aW9ucykubGVuZ3RoID4gMFxuICAgICAgICA/IG9wdGlvbnMuc29ja2V0T3B0aW9uc1xuICAgICAgICA6IG9wdGlvbnM7XG5cbiAgICAvLyBUcmFuc2xhdGUgYWxsIHRoZSBvcHRpb25zIHRvIHRoZSBjb3JlIHR5cGVzXG4gICAgY2xvbmVkT3B0aW9ucyA9IHRyYW5zbGF0ZU9wdGlvbnMoY2xvbmVkT3B0aW9ucywgc29ja2V0T3B0aW9ucyk7XG5cbiAgICBzdXBlcihzZXJ2ZXJzLCBjbG9uZWRPcHRpb25zKTtcblxuICAgIC8vIERvIHdlIGhhdmUgYW4gYXBwbGljYXRpb24gc3BlY2lmaWMgc3RyaW5nXG4gICAgaWYgKG9wdGlvbnMuYXBwbmFtZSkge1xuICAgICAgdGhpcy5zLmNsaWVudEluZm8uYXBwbGljYXRpb24gPSB7IG5hbWU6IG9wdGlvbnMuYXBwbmFtZSB9O1xuICAgIH1cbiAgfVxuXG4gIGNhcGFiaWxpdGllcygpIHtcbiAgICBpZiAodGhpcy5zLnNDYXBhYmlsaXRpZXMpIHJldHVybiB0aGlzLnMuc0NhcGFiaWxpdGllcztcbiAgICBpZiAodGhpcy5sYXN0SXNNYXN0ZXIoKSA9PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICB0aGlzLnMuc0NhcGFiaWxpdGllcyA9IG5ldyBTZXJ2ZXJDYXBhYmlsaXRpZXModGhpcy5sYXN0SXNNYXN0ZXIoKSk7XG4gICAgcmV0dXJuIHRoaXMucy5zQ2FwYWJpbGl0aWVzO1xuICB9XG5cbiAgLy8gQ29tbWFuZFxuICBjb21tYW5kKG5zLCBjbWQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgc3VwZXIuY29tbWFuZChucy50b1N0cmluZygpLCBjbWQsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8vIEluc2VydFxuICBpbnNlcnQobnMsIG9wcywgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICBzdXBlci5pbnNlcnQobnMudG9TdHJpbmcoKSwgb3BzLCBvcHRpb25zLCBjYWxsYmFjayk7XG4gIH1cblxuICAvLyBVcGRhdGVcbiAgdXBkYXRlKG5zLCBvcHMsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgc3VwZXIudXBkYXRlKG5zLnRvU3RyaW5nKCksIG9wcywgb3B0aW9ucywgY2FsbGJhY2spO1xuICB9XG5cbiAgLy8gUmVtb3ZlXG4gIHJlbW92ZShucywgb3BzLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIHN1cGVyLnJlbW92ZShucy50b1N0cmluZygpLCBvcHMsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE5hdGl2ZVRvcG9sb2d5O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///177\n");

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Server = __webpack_require__(176);\nconst Cursor = __webpack_require__(106);\nconst MongoError = __webpack_require__(3).MongoError;\nconst TopologyBase = __webpack_require__(175).TopologyBase;\nconst Store = __webpack_require__(175).Store;\nconst CReplSet = __webpack_require__(3).ReplSet;\nconst MAX_JS_INT = __webpack_require__(86).MAX_JS_INT;\nconst translateOptions = __webpack_require__(86).translateOptions;\nconst filterOptions = __webpack_require__(86).filterOptions;\nconst mergeOptions = __webpack_require__(86).mergeOptions;\n\n/**\n * @fileOverview The **ReplSet** class is a class that represents a Replicaset topology and is\n * used to construct connections.\n *\n * **ReplSet Should not be used, use MongoClient.connect**\n */\n\n// Allowed parameters\nvar legalOptionNames = [\n  'ha',\n  'haInterval',\n  'replicaSet',\n  'rs_name',\n  'secondaryAcceptableLatencyMS',\n  'connectWithNoPrimary',\n  'poolSize',\n  'ssl',\n  'checkServerIdentity',\n  'sslValidate',\n  'sslCA',\n  'sslCert',\n  'ciphers',\n  'ecdhCurve',\n  'sslCRL',\n  'sslKey',\n  'sslPass',\n  'socketOptions',\n  'bufferMaxEntries',\n  'store',\n  'auto_reconnect',\n  'autoReconnect',\n  'emitError',\n  'keepAlive',\n  'keepAliveInitialDelay',\n  'noDelay',\n  'connectTimeoutMS',\n  'socketTimeoutMS',\n  'strategy',\n  'debug',\n  'family',\n  'loggerLevel',\n  'logger',\n  'reconnectTries',\n  'appname',\n  'domainsEnabled',\n  'servername',\n  'promoteLongs',\n  'promoteValues',\n  'promoteBuffers',\n  'maxStalenessSeconds',\n  'promiseLibrary',\n  'minSize',\n  'monitorCommands'\n];\n\n/**\n * Creates a new ReplSet instance\n * @class\n * @deprecated\n * @param {Server[]} servers A seedlist of servers participating in the replicaset.\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.ha=true] Turn on high availability monitoring.\n * @param {number} [options.haInterval=10000] Time between each replicaset status check.\n * @param {string} [options.replicaSet] The name of the replicaset to connect to.\n * @param {number} [options.secondaryAcceptableLatencyMS=15] Sets the range of servers to pick when using NEAREST (lowest ping ms + the latency fence, ex: range of 1 to (1 + 15) ms)\n * @param {boolean} [options.connectWithNoPrimary=false] Sets if the driver should connect even if no primary is available\n * @param {number} [options.poolSize=5] Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n * @param {boolean} [options.ssl=false] Use ssl connection (needs to have a mongod server with ssl support)\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {boolean} [options.sslValidate=false] Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCA] Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCRL] Array of revocation certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslCert] String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher.\n * @param {string} [options.ciphers] Passed directly through to tls.createSecureContext. See https://nodejs.org/dist/latest-v9.x/docs/api/tls.html#tls_tls_createsecurecontext_options for more info.\n * @param {string} [options.ecdhCurve] Passed directly through to tls.createSecureContext. See https://nodejs.org/dist/latest-v9.x/docs/api/tls.html#tls_tls_createsecurecontext_options for more info.\n * @param {(Buffer|string)} [options.sslKey] String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslPass] String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {string} [options.servername] String containing the server name requested via TLS SNI.\n * @param {object} [options.socketOptions] Socket options\n * @param {boolean} [options.socketOptions.noDelay=true] TCP Socket NoDelay option.\n * @param {boolean} [options.socketOptions.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.socketOptions.keepAliveInitialDelay=30000] The number of milliseconds to wait before initiating keepAlive on the TCP socket\n * @param {number} [options.socketOptions.connectTimeoutMS=10000] TCP Connection timeout setting\n * @param {number} [options.socketOptions.socketTimeoutMS=0] TCP Socket timeout setting\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @param {number} [options.maxStalenessSeconds=undefined] The max staleness to secondary reads (values under 10 seconds cannot be guaranteed);\n * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology\n * @fires ReplSet#connect\n * @fires ReplSet#ha\n * @fires ReplSet#joined\n * @fires ReplSet#left\n * @fires ReplSet#fullsetup\n * @fires ReplSet#open\n * @fires ReplSet#close\n * @fires ReplSet#error\n * @fires ReplSet#timeout\n * @fires ReplSet#parseError\n * @fires ReplSet#commandStarted\n * @fires ReplSet#commandSucceeded\n * @fires ReplSet#commandFailed\n * @property {string} parserType the parser type used (c++ or js).\n * @return {ReplSet} a ReplSet instance.\n */\nclass ReplSet extends TopologyBase {\n  constructor(servers, options) {\n    super();\n\n    options = options || {};\n    var self = this;\n\n    // Filter the options\n    options = filterOptions(options, legalOptionNames);\n\n    // Ensure all the instances are Server\n    for (var i = 0; i < servers.length; i++) {\n      if (!(servers[i] instanceof Server)) {\n        throw MongoError.create({\n          message: 'all seed list instances must be of the Server type',\n          driver: true\n        });\n      }\n    }\n\n    // Stored options\n    var storeOptions = {\n      force: false,\n      bufferMaxEntries:\n        typeof options.bufferMaxEntries === 'number' ? options.bufferMaxEntries : MAX_JS_INT\n    };\n\n    // Shared global store\n    var store = options.store || new Store(self, storeOptions);\n\n    // Build seed list\n    var seedlist = servers.map(function(x) {\n      return { host: x.host, port: x.port };\n    });\n\n    // Clone options\n    var clonedOptions = mergeOptions(\n      {},\n      {\n        disconnectHandler: store,\n        cursorFactory: Cursor,\n        reconnect: false,\n        emitError: typeof options.emitError === 'boolean' ? options.emitError : true,\n        size: typeof options.poolSize === 'number' ? options.poolSize : 5,\n        monitorCommands:\n          typeof options.monitorCommands === 'boolean' ? options.monitorCommands : false\n      }\n    );\n\n    // Translate any SSL options and other connectivity options\n    clonedOptions = translateOptions(clonedOptions, options);\n\n    // Socket options\n    var socketOptions =\n      options.socketOptions && Object.keys(options.socketOptions).length > 0\n        ? options.socketOptions\n        : options;\n\n    // Translate all the options to the core types\n    clonedOptions = translateOptions(clonedOptions, socketOptions);\n\n    // Build default client information\n    clonedOptions.clientInfo = this.clientInfo;\n    // Do we have an application specific string\n    if (options.appname) {\n      clonedOptions.clientInfo.application = { name: options.appname };\n    }\n\n    // Create the ReplSet\n    var coreTopology = new CReplSet(seedlist, clonedOptions);\n\n    // Listen to reconnect event\n    coreTopology.on('reconnect', function() {\n      self.emit('reconnect');\n      store.execute();\n    });\n\n    // Internal state\n    this.s = {\n      // Replicaset\n      coreTopology: coreTopology,\n      // Server capabilities\n      sCapabilities: null,\n      // Debug tag\n      tag: options.tag,\n      // Store options\n      storeOptions: storeOptions,\n      // Cloned options\n      clonedOptions: clonedOptions,\n      // Store\n      store: store,\n      // Options\n      options: options,\n      // Server Session Pool\n      sessionPool: null,\n      // Active client sessions\n      sessions: new Set(),\n      // Promise library\n      promiseLibrary: options.promiseLibrary || Promise\n    };\n\n    // Debug\n    if (clonedOptions.debug) {\n      // Last ismaster\n      Object.defineProperty(this, 'replset', {\n        enumerable: true,\n        get: function() {\n          return coreTopology;\n        }\n      });\n    }\n  }\n\n  // Connect method\n  connect(_options, callback) {\n    var self = this;\n    if ('function' === typeof _options) (callback = _options), (_options = {});\n    if (_options == null) _options = {};\n    if (!('function' === typeof callback)) callback = null;\n    _options = Object.assign({}, this.s.clonedOptions, _options);\n    self.s.options = _options;\n\n    // Update bufferMaxEntries\n    self.s.storeOptions.bufferMaxEntries =\n      typeof _options.bufferMaxEntries === 'number' ? _options.bufferMaxEntries : -1;\n\n    // Actual handler\n    var errorHandler = function(event) {\n      return function(err) {\n        if (event !== 'error') {\n          self.emit(event, err);\n        }\n      };\n    };\n\n    // Clear out all the current handlers left over\n    var events = [\n      'timeout',\n      'error',\n      'close',\n      'serverOpening',\n      'serverDescriptionChanged',\n      'serverHeartbeatStarted',\n      'serverHeartbeatSucceeded',\n      'serverHeartbeatFailed',\n      'serverClosed',\n      'topologyOpening',\n      'topologyClosed',\n      'topologyDescriptionChanged',\n      'commandStarted',\n      'commandSucceeded',\n      'commandFailed',\n      'joined',\n      'left',\n      'ping',\n      'ha'\n    ];\n    events.forEach(function(e) {\n      self.s.coreTopology.removeAllListeners(e);\n    });\n\n    // relay the event\n    var relay = function(event) {\n      return function(t, server) {\n        self.emit(event, t, server);\n      };\n    };\n\n    // Replset events relay\n    var replsetRelay = function(event) {\n      return function(t, server) {\n        self.emit(event, t, server.lastIsMaster(), server);\n      };\n    };\n\n    // Relay ha\n    var relayHa = function(t, state) {\n      self.emit('ha', t, state);\n\n      if (t === 'start') {\n        self.emit('ha_connect', t, state);\n      } else if (t === 'end') {\n        self.emit('ha_ismaster', t, state);\n      }\n    };\n\n    // Set up serverConfig listeners\n    self.s.coreTopology.on('joined', replsetRelay('joined'));\n    self.s.coreTopology.on('left', relay('left'));\n    self.s.coreTopology.on('ping', relay('ping'));\n    self.s.coreTopology.on('ha', relayHa);\n\n    // Set up SDAM listeners\n    self.s.coreTopology.on('serverDescriptionChanged', relay('serverDescriptionChanged'));\n    self.s.coreTopology.on('serverHeartbeatStarted', relay('serverHeartbeatStarted'));\n    self.s.coreTopology.on('serverHeartbeatSucceeded', relay('serverHeartbeatSucceeded'));\n    self.s.coreTopology.on('serverHeartbeatFailed', relay('serverHeartbeatFailed'));\n    self.s.coreTopology.on('serverOpening', relay('serverOpening'));\n    self.s.coreTopology.on('serverClosed', relay('serverClosed'));\n    self.s.coreTopology.on('topologyOpening', relay('topologyOpening'));\n    self.s.coreTopology.on('topologyClosed', relay('topologyClosed'));\n    self.s.coreTopology.on('topologyDescriptionChanged', relay('topologyDescriptionChanged'));\n    self.s.coreTopology.on('commandStarted', relay('commandStarted'));\n    self.s.coreTopology.on('commandSucceeded', relay('commandSucceeded'));\n    self.s.coreTopology.on('commandFailed', relay('commandFailed'));\n\n    self.s.coreTopology.on('fullsetup', function() {\n      self.emit('fullsetup', self, self);\n    });\n\n    self.s.coreTopology.on('all', function() {\n      self.emit('all', null, self);\n    });\n\n    // Connect handler\n    var connectHandler = function() {\n      // Set up listeners\n      self.s.coreTopology.once('timeout', errorHandler('timeout'));\n      self.s.coreTopology.once('error', errorHandler('error'));\n      self.s.coreTopology.once('close', errorHandler('close'));\n\n      // Emit open event\n      self.emit('open', null, self);\n\n      // Return correctly\n      try {\n        callback(null, self);\n      } catch (err) {\n        process.nextTick(function() {\n          throw err;\n        });\n      }\n    };\n\n    // Error handler\n    var connectErrorHandler = function() {\n      return function(err) {\n        ['timeout', 'error', 'close'].forEach(function(e) {\n          self.s.coreTopology.removeListener(e, connectErrorHandler);\n        });\n\n        self.s.coreTopology.removeListener('connect', connectErrorHandler);\n        // Destroy the replset\n        self.s.coreTopology.destroy();\n\n        // Try to callback\n        try {\n          callback(err);\n        } catch (err) {\n          if (!self.s.coreTopology.isConnected())\n            process.nextTick(function() {\n              throw err;\n            });\n        }\n      };\n    };\n\n    // Set up listeners\n    self.s.coreTopology.once('timeout', connectErrorHandler('timeout'));\n    self.s.coreTopology.once('error', connectErrorHandler('error'));\n    self.s.coreTopology.once('close', connectErrorHandler('close'));\n    self.s.coreTopology.once('connect', connectHandler);\n\n    // Start connection\n    self.s.coreTopology.connect(_options);\n  }\n\n  close(forceClosed, callback) {\n    ['timeout', 'error', 'close', 'joined', 'left'].forEach(e => this.removeAllListeners(e));\n    super.close(forceClosed, callback);\n  }\n}\n\nObject.defineProperty(ReplSet.prototype, 'haInterval', {\n  enumerable: true,\n  get: function() {\n    return this.s.coreTopology.s.haInterval;\n  }\n});\n\n/**\n * A replset connect event, used to verify that the connection is up and running\n *\n * @event ReplSet#connect\n * @type {ReplSet}\n */\n\n/**\n * The replset high availability event\n *\n * @event ReplSet#ha\n * @type {function}\n * @param {string} type The stage in the high availability event (start|end)\n * @param {boolean} data.norepeat This is a repeating high availability process or a single execution only\n * @param {number} data.id The id for this high availability request\n * @param {object} data.state An object containing the information about the current replicaset\n */\n\n/**\n * A server member left the replicaset\n *\n * @event ReplSet#left\n * @type {function}\n * @param {string} type The type of member that left (primary|secondary|arbiter)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the replicaset\n *\n * @event ReplSet#joined\n * @type {function}\n * @param {string} type The type of member that joined (primary|secondary|arbiter)\n * @param {Server} server The server object that joined\n */\n\n/**\n * ReplSet open event, emitted when replicaset can start processing commands.\n *\n * @event ReplSet#open\n * @type {Replset}\n */\n\n/**\n * ReplSet fullsetup event, emitted when all servers in the topology have been connected to.\n *\n * @event ReplSet#fullsetup\n * @type {Replset}\n */\n\n/**\n * ReplSet close event\n *\n * @event ReplSet#close\n * @type {object}\n */\n\n/**\n * ReplSet error event, emitted if there is an error listener.\n *\n * @event ReplSet#error\n * @type {MongoError}\n */\n\n/**\n * ReplSet timeout event\n *\n * @event ReplSet#timeout\n * @type {object}\n */\n\n/**\n * ReplSet parseError event\n *\n * @event ReplSet#parseError\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command was started, if command monitoring is enabled\n *\n * @event ReplSet#commandStarted\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command succeeded, if command monitoring is enabled\n *\n * @event ReplSet#commandSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command failed, if command monitoring is enabled\n *\n * @event ReplSet#commandFailed\n * @type {object}\n */\n\nmodule.exports = ReplSet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///178\n");

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst ReadPreference = __webpack_require__(3).ReadPreference,\n  parser = __webpack_require__(100),\n  f = __webpack_require__(12).format,\n  Logger = __webpack_require__(3).Logger,\n  dns = __webpack_require__(97);\nconst ReadConcern = __webpack_require__(115);\n\nmodule.exports = function(url, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  let result;\n  try {\n    result = parser.parse(url, true);\n  } catch (e) {\n    return callback(new Error('URL malformed, cannot be parsed'));\n  }\n\n  if (result.protocol !== 'mongodb:' && result.protocol !== 'mongodb+srv:') {\n    return callback(new Error('Invalid schema, expected `mongodb` or `mongodb+srv`'));\n  }\n\n  if (result.protocol === 'mongodb:') {\n    return parseHandler(url, options, callback);\n  }\n\n  // Otherwise parse this as an SRV record\n  if (result.hostname.split('.').length < 3) {\n    return callback(new Error('URI does not have hostname, domain name and tld'));\n  }\n\n  result.domainLength = result.hostname.split('.').length;\n\n  if (result.pathname && result.pathname.match(',')) {\n    return callback(new Error('Invalid URI, cannot contain multiple hostnames'));\n  }\n\n  if (result.port) {\n    return callback(new Error('Ports not accepted with `mongodb+srv` URIs'));\n  }\n\n  let srvAddress = `_mongodb._tcp.${result.host}`;\n  dns.resolveSrv(srvAddress, function(err, addresses) {\n    if (err) return callback(err);\n\n    if (addresses.length === 0) {\n      return callback(new Error('No addresses found at host'));\n    }\n\n    for (let i = 0; i < addresses.length; i++) {\n      if (!matchesParentDomain(addresses[i].name, result.hostname, result.domainLength)) {\n        return callback(new Error('Server record does not share hostname with parent URI'));\n      }\n    }\n\n    let base = result.auth ? `mongodb://${result.auth}@` : `mongodb://`;\n    let connectionStrings = addresses.map(function(address, i) {\n      if (i === 0) return `${base}${address.name}:${address.port}`;\n      else return `${address.name}:${address.port}`;\n    });\n\n    let connectionString = connectionStrings.join(',') + '/';\n    let connectionStringOptions = [];\n\n    // Add the default database if needed\n    if (result.path) {\n      let defaultDb = result.path.slice(1);\n      if (defaultDb.indexOf('?') !== -1) {\n        defaultDb = defaultDb.slice(0, defaultDb.indexOf('?'));\n      }\n\n      connectionString += defaultDb;\n    }\n\n    // Default to SSL true\n    if (!options.ssl && !result.search) {\n      connectionStringOptions.push('ssl=true');\n    } else if (!options.ssl && result.search && !result.search.match('ssl')) {\n      connectionStringOptions.push('ssl=true');\n    }\n\n    // Keep original uri options\n    if (result.search) {\n      connectionStringOptions.push(result.search.replace('?', ''));\n    }\n\n    dns.resolveTxt(result.host, function(err, record) {\n      if (err && err.code !== 'ENODATA') return callback(err);\n      if (err && err.code === 'ENODATA') record = null;\n\n      if (record) {\n        if (record.length > 1) {\n          return callback(new Error('Multiple text records not allowed'));\n        }\n\n        record = record[0];\n        if (record.length > 1) record = record.join('');\n        else record = record[0];\n\n        if (!record.includes('authSource') && !record.includes('replicaSet')) {\n          return callback(new Error('Text record must only set `authSource` or `replicaSet`'));\n        }\n\n        connectionStringOptions.push(record);\n      }\n\n      // Add any options to the connection string\n      if (connectionStringOptions.length) {\n        connectionString += `?${connectionStringOptions.join('&')}`;\n      }\n\n      parseHandler(connectionString, options, callback);\n    });\n  });\n};\n\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  let regex = /^.*?\\./;\n  let srv = `.${srvAddress.replace(regex, '')}`;\n  let parent = `.${parentDomain.replace(regex, '')}`;\n  if (srv.endsWith(parent)) return true;\n  else return false;\n}\n\nfunction parseHandler(address, options, callback) {\n  let result, err;\n  try {\n    result = parseConnectionString(address, options);\n  } catch (e) {\n    err = e;\n  }\n\n  return err ? callback(err, null) : callback(null, result);\n}\n\nfunction parseConnectionString(url, options) {\n  // Variables\n  let connection_part = '';\n  let auth_part = '';\n  let query_string_part = '';\n  let dbName = 'admin';\n\n  // Url parser result\n  let result = parser.parse(url, true);\n  if ((result.hostname == null || result.hostname === '') && url.indexOf('.sock') === -1) {\n    throw new Error('No hostname or hostnames provided in connection string');\n  }\n\n  if (result.port === '0') {\n    throw new Error('Invalid port (zero) with hostname');\n  }\n\n  if (!isNaN(parseInt(result.port, 10)) && parseInt(result.port, 10) > 65535) {\n    throw new Error('Invalid port (larger than 65535) with hostname');\n  }\n\n  if (\n    result.path &&\n    result.path.length > 0 &&\n    result.path[0] !== '/' &&\n    url.indexOf('.sock') === -1\n  ) {\n    throw new Error('Missing delimiting slash between hosts and options');\n  }\n\n  if (result.query) {\n    for (let name in result.query) {\n      if (name.indexOf('::') !== -1) {\n        throw new Error('Double colon in host identifier');\n      }\n\n      if (result.query[name] === '') {\n        throw new Error('Query parameter ' + name + ' is an incomplete value pair');\n      }\n    }\n  }\n\n  if (result.auth) {\n    let parts = result.auth.split(':');\n    if (url.indexOf(result.auth) !== -1 && parts.length > 2) {\n      throw new Error('Username with password containing an unescaped colon');\n    }\n\n    if (url.indexOf(result.auth) !== -1 && result.auth.indexOf('@') !== -1) {\n      throw new Error('Username containing an unescaped at-sign');\n    }\n  }\n\n  // Remove query\n  let clean = url.split('?').shift();\n\n  // Extract the list of hosts\n  let strings = clean.split(',');\n  let hosts = [];\n\n  for (let i = 0; i < strings.length; i++) {\n    let hostString = strings[i];\n\n    if (hostString.indexOf('mongodb') !== -1) {\n      if (hostString.indexOf('@') !== -1) {\n        hosts.push(hostString.split('@').pop());\n      } else {\n        hosts.push(hostString.substr('mongodb://'.length));\n      }\n    } else if (hostString.indexOf('/') !== -1) {\n      hosts.push(hostString.split('/').shift());\n    } else if (hostString.indexOf('/') === -1) {\n      hosts.push(hostString.trim());\n    }\n  }\n\n  for (let i = 0; i < hosts.length; i++) {\n    let r = parser.parse(f('mongodb://%s', hosts[i].trim()));\n    if (r.path && r.path.indexOf('.sock') !== -1) continue;\n    if (r.path && r.path.indexOf(':') !== -1) {\n      // Not connecting to a socket so check for an extra slash in the hostname.\n      // Using String#split as perf is better than match.\n      if (r.path.split('/').length > 1 && r.path.indexOf('::') === -1) {\n        throw new Error('Slash in host identifier');\n      } else {\n        throw new Error('Double colon in host identifier');\n      }\n    }\n  }\n\n  // If we have a ? mark cut the query elements off\n  if (url.indexOf('?') !== -1) {\n    query_string_part = url.substr(url.indexOf('?') + 1);\n    connection_part = url.substring('mongodb://'.length, url.indexOf('?'));\n  } else {\n    connection_part = url.substring('mongodb://'.length);\n  }\n\n  // Check if we have auth params\n  if (connection_part.indexOf('@') !== -1) {\n    auth_part = connection_part.split('@')[0];\n    connection_part = connection_part.split('@')[1];\n  }\n\n  // Check there is not more than one unescaped slash\n  if (connection_part.split('/').length > 2) {\n    throw new Error(\n      \"Unsupported host '\" +\n        connection_part.split('?')[0] +\n        \"', hosts must be URL encoded and contain at most one unencoded slash\"\n    );\n  }\n\n  // Check if the connection string has a db\n  if (connection_part.indexOf('.sock') !== -1) {\n    if (connection_part.indexOf('.sock/') !== -1) {\n      dbName = connection_part.split('.sock/')[1];\n      // Check if multiple database names provided, or just an illegal trailing backslash\n      if (dbName.indexOf('/') !== -1) {\n        if (dbName.split('/').length === 2 && dbName.split('/')[1].length === 0) {\n          throw new Error('Illegal trailing backslash after database name');\n        }\n        throw new Error('More than 1 database name in URL');\n      }\n      connection_part = connection_part.split(\n        '/',\n        connection_part.indexOf('.sock') + '.sock'.length\n      );\n    }\n  } else if (connection_part.indexOf('/') !== -1) {\n    // Check if multiple database names provided, or just an illegal trailing backslash\n    if (connection_part.split('/').length > 2) {\n      if (connection_part.split('/')[2].length === 0) {\n        throw new Error('Illegal trailing backslash after database name');\n      }\n      throw new Error('More than 1 database name in URL');\n    }\n    dbName = connection_part.split('/')[1];\n    connection_part = connection_part.split('/')[0];\n  }\n\n  // URI decode the host information\n  connection_part = decodeURIComponent(connection_part);\n\n  // Result object\n  let object = {};\n\n  // Pick apart the authentication part of the string\n  let authPart = auth_part || '';\n  let auth = authPart.split(':', 2);\n\n  // Decode the authentication URI components and verify integrity\n  let user = decodeURIComponent(auth[0]);\n  if (auth[0] !== encodeURIComponent(user)) {\n    throw new Error('Username contains an illegal unescaped character');\n  }\n  auth[0] = user;\n\n  if (auth[1]) {\n    let pass = decodeURIComponent(auth[1]);\n    if (auth[1] !== encodeURIComponent(pass)) {\n      throw new Error('Password contains an illegal unescaped character');\n    }\n    auth[1] = pass;\n  }\n\n  // Add auth to final object if we have 2 elements\n  if (auth.length === 2) object.auth = { user: auth[0], password: auth[1] };\n  // if user provided auth options, use that\n  if (options && options.auth != null) object.auth = options.auth;\n\n  // Variables used for temporary storage\n  let hostPart;\n  let urlOptions;\n  let servers;\n  let compression;\n  let serverOptions = { socketOptions: {} };\n  let dbOptions = { read_preference_tags: [] };\n  let replSetServersOptions = { socketOptions: {} };\n  let mongosOptions = { socketOptions: {} };\n  // Add server options to final object\n  object.server_options = serverOptions;\n  object.db_options = dbOptions;\n  object.rs_options = replSetServersOptions;\n  object.mongos_options = mongosOptions;\n\n  // Let's check if we are using a domain socket\n  if (url.match(/\\.sock/)) {\n    // Split out the socket part\n    let domainSocket = url.substring(\n      url.indexOf('mongodb://') + 'mongodb://'.length,\n      url.lastIndexOf('.sock') + '.sock'.length\n    );\n    // Clean out any auth stuff if any\n    if (domainSocket.indexOf('@') !== -1) domainSocket = domainSocket.split('@')[1];\n    domainSocket = decodeURIComponent(domainSocket);\n    servers = [{ domain_socket: domainSocket }];\n  } else {\n    // Split up the db\n    hostPart = connection_part;\n    // Deduplicate servers\n    let deduplicatedServers = {};\n\n    // Parse all server results\n    servers = hostPart\n      .split(',')\n      .map(function(h) {\n        let _host, _port, ipv6match;\n        //check if it matches [IPv6]:port, where the port number is optional\n        if ((ipv6match = /\\[([^\\]]+)\\](?::(.+))?/.exec(h))) {\n          _host = ipv6match[1];\n          _port = parseInt(ipv6match[2], 10) || 27017;\n        } else {\n          //otherwise assume it's IPv4, or plain hostname\n          let hostPort = h.split(':', 2);\n          _host = hostPort[0] || 'localhost';\n          _port = hostPort[1] != null ? parseInt(hostPort[1], 10) : 27017;\n          // Check for localhost?safe=true style case\n          if (_host.indexOf('?') !== -1) _host = _host.split(/\\?/)[0];\n        }\n\n        // No entry returned for duplicate server\n        if (deduplicatedServers[_host + '_' + _port]) return null;\n        deduplicatedServers[_host + '_' + _port] = 1;\n\n        // Return the mapped object\n        return { host: _host, port: _port };\n      })\n      .filter(function(x) {\n        return x != null;\n      });\n  }\n\n  // Get the db name\n  object.dbName = dbName || 'admin';\n  // Split up all the options\n  urlOptions = (query_string_part || '').split(/[&;]/);\n  // Ugh, we have to figure out which options go to which constructor manually.\n  urlOptions.forEach(function(opt) {\n    if (!opt) return;\n    var splitOpt = opt.split('='),\n      name = splitOpt[0],\n      value = splitOpt[1];\n\n    // Options implementations\n    switch (name) {\n      case 'slaveOk':\n      case 'slave_ok':\n        serverOptions.slave_ok = value === 'true';\n        dbOptions.slaveOk = value === 'true';\n        break;\n      case 'maxPoolSize':\n      case 'poolSize':\n        serverOptions.poolSize = parseInt(value, 10);\n        replSetServersOptions.poolSize = parseInt(value, 10);\n        break;\n      case 'appname':\n        object.appname = decodeURIComponent(value);\n        break;\n      case 'autoReconnect':\n      case 'auto_reconnect':\n        serverOptions.auto_reconnect = value === 'true';\n        break;\n      case 'ssl':\n        if (value === 'prefer') {\n          serverOptions.ssl = value;\n          replSetServersOptions.ssl = value;\n          mongosOptions.ssl = value;\n          break;\n        }\n        serverOptions.ssl = value === 'true';\n        replSetServersOptions.ssl = value === 'true';\n        mongosOptions.ssl = value === 'true';\n        break;\n      case 'sslValidate':\n        serverOptions.sslValidate = value === 'true';\n        replSetServersOptions.sslValidate = value === 'true';\n        mongosOptions.sslValidate = value === 'true';\n        break;\n      case 'replicaSet':\n      case 'rs_name':\n        replSetServersOptions.rs_name = value;\n        break;\n      case 'reconnectWait':\n        replSetServersOptions.reconnectWait = parseInt(value, 10);\n        break;\n      case 'retries':\n        replSetServersOptions.retries = parseInt(value, 10);\n        break;\n      case 'readSecondary':\n      case 'read_secondary':\n        replSetServersOptions.read_secondary = value === 'true';\n        break;\n      case 'fsync':\n        dbOptions.fsync = value === 'true';\n        break;\n      case 'journal':\n        dbOptions.j = value === 'true';\n        break;\n      case 'safe':\n        dbOptions.safe = value === 'true';\n        break;\n      case 'nativeParser':\n      case 'native_parser':\n        dbOptions.native_parser = value === 'true';\n        break;\n      case 'readConcernLevel':\n        dbOptions.readConcern = new ReadConcern(value);\n        break;\n      case 'connectTimeoutMS':\n        serverOptions.socketOptions.connectTimeoutMS = parseInt(value, 10);\n        replSetServersOptions.socketOptions.connectTimeoutMS = parseInt(value, 10);\n        mongosOptions.socketOptions.connectTimeoutMS = parseInt(value, 10);\n        break;\n      case 'socketTimeoutMS':\n        serverOptions.socketOptions.socketTimeoutMS = parseInt(value, 10);\n        replSetServersOptions.socketOptions.socketTimeoutMS = parseInt(value, 10);\n        mongosOptions.socketOptions.socketTimeoutMS = parseInt(value, 10);\n        break;\n      case 'w':\n        dbOptions.w = parseInt(value, 10);\n        if (isNaN(dbOptions.w)) dbOptions.w = value;\n        break;\n      case 'authSource':\n        dbOptions.authSource = value;\n        break;\n      case 'gssapiServiceName':\n        dbOptions.gssapiServiceName = value;\n        break;\n      case 'authMechanism':\n        if (value === 'GSSAPI') {\n          // If no password provided decode only the principal\n          if (object.auth == null) {\n            let urlDecodeAuthPart = decodeURIComponent(authPart);\n            if (urlDecodeAuthPart.indexOf('@') === -1)\n              throw new Error('GSSAPI requires a provided principal');\n            object.auth = { user: urlDecodeAuthPart, password: null };\n          } else {\n            object.auth.user = decodeURIComponent(object.auth.user);\n          }\n        } else if (value === 'MONGODB-X509') {\n          object.auth = { user: decodeURIComponent(authPart) };\n        }\n\n        // Only support GSSAPI or MONGODB-CR for now\n        if (\n          value !== 'GSSAPI' &&\n          value !== 'MONGODB-X509' &&\n          value !== 'MONGODB-CR' &&\n          value !== 'DEFAULT' &&\n          value !== 'SCRAM-SHA-1' &&\n          value !== 'SCRAM-SHA-256' &&\n          value !== 'PLAIN'\n        )\n          throw new Error(\n            'Only DEFAULT, GSSAPI, PLAIN, MONGODB-X509, or SCRAM-SHA-1 is supported by authMechanism'\n          );\n\n        // Authentication mechanism\n        dbOptions.authMechanism = value;\n        break;\n      case 'authMechanismProperties':\n        {\n          // Split up into key, value pairs\n          let values = value.split(',');\n          let o = {};\n          // For each value split into key, value\n          values.forEach(function(x) {\n            let v = x.split(':');\n            o[v[0]] = v[1];\n          });\n\n          // Set all authMechanismProperties\n          dbOptions.authMechanismProperties = o;\n          // Set the service name value\n          if (typeof o.SERVICE_NAME === 'string') dbOptions.gssapiServiceName = o.SERVICE_NAME;\n          if (typeof o.SERVICE_REALM === 'string') dbOptions.gssapiServiceRealm = o.SERVICE_REALM;\n          if (typeof o.CANONICALIZE_HOST_NAME === 'string')\n            dbOptions.gssapiCanonicalizeHostName =\n              o.CANONICALIZE_HOST_NAME === 'true' ? true : false;\n        }\n        break;\n      case 'wtimeoutMS':\n        dbOptions.wtimeout = parseInt(value, 10);\n        break;\n      case 'readPreference':\n        if (!ReadPreference.isValid(value))\n          throw new Error(\n            'readPreference must be either primary/primaryPreferred/secondary/secondaryPreferred/nearest'\n          );\n        dbOptions.readPreference = value;\n        break;\n      case 'maxStalenessSeconds':\n        dbOptions.maxStalenessSeconds = parseInt(value, 10);\n        break;\n      case 'readPreferenceTags':\n        {\n          // Decode the value\n          value = decodeURIComponent(value);\n          // Contains the tag object\n          let tagObject = {};\n          if (value == null || value === '') {\n            dbOptions.read_preference_tags.push(tagObject);\n            break;\n          }\n\n          // Split up the tags\n          let tags = value.split(/,/);\n          for (let i = 0; i < tags.length; i++) {\n            let parts = tags[i].trim().split(/:/);\n            tagObject[parts[0]] = parts[1];\n          }\n\n          // Set the preferences tags\n          dbOptions.read_preference_tags.push(tagObject);\n        }\n        break;\n      case 'compressors':\n        {\n          compression = serverOptions.compression || {};\n          let compressors = value.split(',');\n          if (\n            !compressors.every(function(compressor) {\n              return compressor === 'snappy' || compressor === 'zlib';\n            })\n          ) {\n            throw new Error('Compressors must be at least one of snappy or zlib');\n          }\n\n          compression.compressors = compressors;\n          serverOptions.compression = compression;\n        }\n        break;\n      case 'zlibCompressionLevel':\n        {\n          compression = serverOptions.compression || {};\n          let zlibCompressionLevel = parseInt(value, 10);\n          if (zlibCompressionLevel < -1 || zlibCompressionLevel > 9) {\n            throw new Error('zlibCompressionLevel must be an integer between -1 and 9');\n          }\n\n          compression.zlibCompressionLevel = zlibCompressionLevel;\n          serverOptions.compression = compression;\n        }\n        break;\n      case 'retryWrites':\n        dbOptions.retryWrites = value === 'true';\n        break;\n      case 'minSize':\n        dbOptions.minSize = parseInt(value, 10);\n        break;\n      default:\n        {\n          let logger = Logger('URL Parser');\n          logger.warn(`${name} is not supported as a connection string option`);\n        }\n        break;\n    }\n  });\n\n  // No tags: should be null (not [])\n  if (dbOptions.read_preference_tags.length === 0) {\n    dbOptions.read_preference_tags = null;\n  }\n\n  // Validate if there are an invalid write concern combinations\n  if (\n    (dbOptions.w === -1 || dbOptions.w === 0) &&\n    (dbOptions.journal === true || dbOptions.fsync === true || dbOptions.safe === true)\n  )\n    throw new Error('w set to -1 or 0 cannot be combined with safe/w/journal/fsync');\n\n  // If no read preference set it to primary\n  if (!dbOptions.readPreference) {\n    dbOptions.readPreference = 'primary';\n  }\n\n  // make sure that user-provided options are applied with priority\n  dbOptions = Object.assign(dbOptions, options);\n\n  // Add servers to result\n  object.servers = servers;\n\n  // Returned parsed object\n  return object;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///179\n");

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Aspect = __webpack_require__(84).Aspect;\nconst defineAspects = __webpack_require__(84).defineAspects;\nconst OperationBase = __webpack_require__(84).OperationBase;\n\nclass CloseOperation extends OperationBase {\n  constructor(client, force) {\n    super();\n    this.client = client;\n    this.force = force;\n  }\n\n  execute(callback) {\n    const client = this.client;\n    const force = this.force;\n    const completeClose = err => {\n      client.emit('close', client);\n      for (const item of client.s.dbCache) {\n        item[1].emit('close', client);\n      }\n\n      client.removeAllListeners('close');\n      callback(err, null);\n    };\n\n    if (client.topology == null) {\n      completeClose();\n      return;\n    }\n\n    client.topology.close(force, err => {\n      const autoEncrypter = client.topology.s.options.autoEncrypter;\n      if (!autoEncrypter) {\n        completeClose(err);\n        return;\n      }\n\n      autoEncrypter.teardown(force, err2 => completeClose(err || err2));\n    });\n  }\n}\n\ndefineAspects(CloseOperation, [Aspect.SKIP_SESSION]);\n\nmodule.exports = CloseOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly9Vc2Vycy9tb2RldG9qb3kvd29yay9tb25nb2RiLWpzL21vbmdvc2gvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvY2xvc2UuanM/NWY0NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixlQUFlLG1CQUFPLENBQUMsRUFBYTtBQUNwQyxzQkFBc0IsbUJBQU8sQ0FBQyxFQUFhO0FBQzNDLHNCQUFzQixtQkFBTyxDQUFDLEVBQWE7O0FBRTNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTs7QUFFQSIsImZpbGUiOiIxODAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEFzcGVjdCA9IHJlcXVpcmUoJy4vb3BlcmF0aW9uJykuQXNwZWN0O1xuY29uc3QgZGVmaW5lQXNwZWN0cyA9IHJlcXVpcmUoJy4vb3BlcmF0aW9uJykuZGVmaW5lQXNwZWN0cztcbmNvbnN0IE9wZXJhdGlvbkJhc2UgPSByZXF1aXJlKCcuL29wZXJhdGlvbicpLk9wZXJhdGlvbkJhc2U7XG5cbmNsYXNzIENsb3NlT3BlcmF0aW9uIGV4dGVuZHMgT3BlcmF0aW9uQmFzZSB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCwgZm9yY2UpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIHRoaXMuZm9yY2UgPSBmb3JjZTtcbiAgfVxuXG4gIGV4ZWN1dGUoY2FsbGJhY2spIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLmNsaWVudDtcbiAgICBjb25zdCBmb3JjZSA9IHRoaXMuZm9yY2U7XG4gICAgY29uc3QgY29tcGxldGVDbG9zZSA9IGVyciA9PiB7XG4gICAgICBjbGllbnQuZW1pdCgnY2xvc2UnLCBjbGllbnQpO1xuICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGNsaWVudC5zLmRiQ2FjaGUpIHtcbiAgICAgICAgaXRlbVsxXS5lbWl0KCdjbG9zZScsIGNsaWVudCk7XG4gICAgICB9XG5cbiAgICAgIGNsaWVudC5yZW1vdmVBbGxMaXN0ZW5lcnMoJ2Nsb3NlJyk7XG4gICAgICBjYWxsYmFjayhlcnIsIG51bGwpO1xuICAgIH07XG5cbiAgICBpZiAoY2xpZW50LnRvcG9sb2d5ID09IG51bGwpIHtcbiAgICAgIGNvbXBsZXRlQ2xvc2UoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjbGllbnQudG9wb2xvZ3kuY2xvc2UoZm9yY2UsIGVyciA9PiB7XG4gICAgICBjb25zdCBhdXRvRW5jcnlwdGVyID0gY2xpZW50LnRvcG9sb2d5LnMub3B0aW9ucy5hdXRvRW5jcnlwdGVyO1xuICAgICAgaWYgKCFhdXRvRW5jcnlwdGVyKSB7XG4gICAgICAgIGNvbXBsZXRlQ2xvc2UoZXJyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhdXRvRW5jcnlwdGVyLnRlYXJkb3duKGZvcmNlLCBlcnIyID0+IGNvbXBsZXRlQ2xvc2UoZXJyIHx8IGVycjIpKTtcbiAgICB9KTtcbiAgfVxufVxuXG5kZWZpbmVBc3BlY3RzKENsb3NlT3BlcmF0aW9uLCBbQXNwZWN0LlNLSVBfU0VTU0lPTl0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENsb3NlT3BlcmF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///180\n");

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * @fileOverview GridFS is a tool for MongoDB to store files to the database.\n * Because of the restrictions of the object size the database can hold, a\n * facility to split a file into several chunks is needed. The {@link GridStore}\n * class offers a simplified api to interact with files while managing the\n * chunks of split files behind the scenes. More information about GridFS can be\n * found <a href=\"http://www.mongodb.org/display/DOCS/GridFS\">here</a>.\n *\n * @example\n * const MongoClient = require('mongodb').MongoClient;\n * const GridStore = require('mongodb').GridStore;\n * const ObjectID = require('mongodb').ObjectID;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   const db = client.db(dbName);\n *   const gridStore = new GridStore(db, null, \"w\");\n *   gridStore.open(function(err, gridStore) {\n *     gridStore.write(\"hello world!\", function(err, gridStore) {\n *       gridStore.close(function(err, result) {\n *         // Let's read the file using object Id\n *         GridStore.read(db, result._id, function(err, data) {\n *           test.equal('hello world!', data);\n *           client.close();\n *           test.done();\n *         });\n *       });\n *     });\n *   });\n * });\n */\nconst Chunk = __webpack_require__(182);\nconst ObjectID = __webpack_require__(3).BSON.ObjectID;\nconst ReadPreference = __webpack_require__(3).ReadPreference;\nconst Buffer = __webpack_require__(49).Buffer;\nconst fs = __webpack_require__(30);\nconst f = __webpack_require__(12).format;\nconst util = __webpack_require__(12);\nconst MongoError = __webpack_require__(3).MongoError;\nconst inherits = util.inherits;\nconst Duplex = __webpack_require__(85).Duplex;\nconst shallowClone = __webpack_require__(86).shallowClone;\nconst executeLegacyOperation = __webpack_require__(86).executeLegacyOperation;\nconst deprecate = __webpack_require__(12).deprecate;\n\nvar REFERENCE_BY_FILENAME = 0,\n  REFERENCE_BY_ID = 1;\n\nconst deprecationFn = deprecate(() => {},\n'GridStore is deprecated, and will be removed in a future version. Please use GridFSBucket instead');\n\n/**\n * Namespace provided by the core module\n * @external Duplex\n */\n\n/**\n * Create a new GridStore instance\n *\n * Modes\n *  - **\"r\"** - read only. This is the default mode.\n *  - **\"w\"** - write in truncate mode. Existing data will be overwritten.\n *\n * @class\n * @param {Db} db A database instance to interact with.\n * @param {object} [id] optional unique id for this file\n * @param {string} [filename] optional filename for this file, no unique constrain on the field\n * @param {string} mode set the mode for this file.\n * @param {object} [options] Optional settings.\n * @param {(number|string)} [options.w] The write concern.\n * @param {number} [options.wtimeout] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.fsync=false] Specify a file sync write concern.\n * @param {string} [options.root] Root collection to use. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.\n * @param {string} [options.content_type] MIME type of the file. Defaults to **{GridStore.DEFAULT_CONTENT_TYPE}**.\n * @param {number} [options.chunk_size=261120] Size for the chunk. Defaults to **{Chunk.DEFAULT_CHUNK_SIZE}**.\n * @param {object} [options.metadata] Arbitrary data the user wants to store.\n * @param {object} [options.promiseLibrary] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @property {number} chunkSize Get the gridstore chunk size.\n * @property {number} md5 The md5 checksum for this file.\n * @property {number} chunkNumber The current chunk number the gridstore has materialized into memory\n * @return {GridStore} a GridStore instance.\n * @deprecated Use GridFSBucket API instead\n */\nvar GridStore = function GridStore(db, id, filename, mode, options) {\n  deprecationFn();\n  if (!(this instanceof GridStore)) return new GridStore(db, id, filename, mode, options);\n  this.db = db;\n\n  // Handle options\n  if (typeof options === 'undefined') options = {};\n  // Handle mode\n  if (typeof mode === 'undefined') {\n    mode = filename;\n    filename = undefined;\n  } else if (typeof mode === 'object') {\n    options = mode;\n    mode = filename;\n    filename = undefined;\n  }\n\n  if (id && id._bsontype === 'ObjectID') {\n    this.referenceBy = REFERENCE_BY_ID;\n    this.fileId = id;\n    this.filename = filename;\n  } else if (typeof filename === 'undefined') {\n    this.referenceBy = REFERENCE_BY_FILENAME;\n    this.filename = id;\n    if (mode.indexOf('w') != null) {\n      this.fileId = new ObjectID();\n    }\n  } else {\n    this.referenceBy = REFERENCE_BY_ID;\n    this.fileId = id;\n    this.filename = filename;\n  }\n\n  // Set up the rest\n  this.mode = mode == null ? 'r' : mode;\n  this.options = options || {};\n\n  // Opened\n  this.isOpen = false;\n\n  // Set the root if overridden\n  this.root =\n    this.options['root'] == null ? GridStore.DEFAULT_ROOT_COLLECTION : this.options['root'];\n  this.position = 0;\n  this.readPreference =\n    this.options.readPreference || db.options.readPreference || ReadPreference.primary;\n  this.writeConcern = _getWriteConcern(db, this.options);\n  // Set default chunk size\n  this.internalChunkSize =\n    this.options['chunkSize'] == null ? Chunk.DEFAULT_CHUNK_SIZE : this.options['chunkSize'];\n\n  // Get the promiseLibrary\n  var promiseLibrary = this.options.promiseLibrary || Promise;\n\n  // Set the promiseLibrary\n  this.promiseLibrary = promiseLibrary;\n\n  Object.defineProperty(this, 'chunkSize', {\n    enumerable: true,\n    get: function() {\n      return this.internalChunkSize;\n    },\n    set: function(value) {\n      if (!(this.mode[0] === 'w' && this.position === 0 && this.uploadDate == null)) {\n        this.internalChunkSize = this.internalChunkSize;\n      } else {\n        this.internalChunkSize = value;\n      }\n    }\n  });\n\n  Object.defineProperty(this, 'md5', {\n    enumerable: true,\n    get: function() {\n      return this.internalMd5;\n    }\n  });\n\n  Object.defineProperty(this, 'chunkNumber', {\n    enumerable: true,\n    get: function() {\n      return this.currentChunk && this.currentChunk.chunkNumber\n        ? this.currentChunk.chunkNumber\n        : null;\n    }\n  });\n};\n\n/**\n * The callback format for the Gridstore.open method\n * @callback GridStore~openCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {GridStore} gridStore The GridStore instance if the open method was successful.\n */\n\n/**\n * Opens the file from the database and initialize this object. Also creates a\n * new one if file does not exist.\n *\n * @method\n * @param {object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~openCallback} [callback] this will be called after executing this method\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.open = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  if (this.mode !== 'w' && this.mode !== 'w+' && this.mode !== 'r') {\n    throw MongoError.create({ message: 'Illegal mode ' + this.mode, driver: true });\n  }\n\n  return executeLegacyOperation(this.db.s.topology, open, [this, options, callback], {\n    skipSessions: true\n  });\n};\n\nvar open = function(self, options, callback) {\n  // Get the write concern\n  var writeConcern = _getWriteConcern(self.db, self.options);\n\n  // If we are writing we need to ensure we have the right indexes for md5's\n  if (self.mode === 'w' || self.mode === 'w+') {\n    // Get files collection\n    var collection = self.collection();\n    // Put index on filename\n    collection.ensureIndex([['filename', 1]], writeConcern, function() {\n      // Get chunk collection\n      var chunkCollection = self.chunkCollection();\n      // Make an unique index for compatibility with mongo-cxx-driver:legacy\n      var chunkIndexOptions = shallowClone(writeConcern);\n      chunkIndexOptions.unique = true;\n      // Ensure index on chunk collection\n      chunkCollection.ensureIndex([['files_id', 1], ['n', 1]], chunkIndexOptions, function() {\n        // Open the connection\n        _open(self, writeConcern, function(err, r) {\n          if (err) return callback(err);\n          self.isOpen = true;\n          callback(err, r);\n        });\n      });\n    });\n  } else {\n    // Open the gridstore\n    _open(self, writeConcern, function(err, r) {\n      if (err) return callback(err);\n      self.isOpen = true;\n      callback(err, r);\n    });\n  }\n};\n\n/**\n * Verify if the file is at EOF.\n *\n * @method\n * @return {boolean} true if the read/write head is at the end of this file.\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.eof = function() {\n  return this.position === this.length ? true : false;\n};\n\n/**\n * The callback result format.\n * @callback GridStore~resultCallback\n * @param {object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {object} result The result from the callback.\n */\n\n/**\n * Retrieves a single character from this file.\n *\n * @method\n * @param {GridStore~resultCallback} [callback] this gets called after this method is executed. Passes null to the first parameter and the character read to the second or null to the second if the read/write head is at the end of the file.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.getc = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeLegacyOperation(this.db.s.topology, getc, [this, options, callback], {\n    skipSessions: true\n  });\n};\n\nvar getc = function(self, options, callback) {\n  if (self.eof()) {\n    callback(null, null);\n  } else if (self.currentChunk.eof()) {\n    nthChunk(self, self.currentChunk.chunkNumber + 1, function(err, chunk) {\n      self.currentChunk = chunk;\n      self.position = self.position + 1;\n      callback(err, self.currentChunk.getc());\n    });\n  } else {\n    self.position = self.position + 1;\n    callback(null, self.currentChunk.getc());\n  }\n};\n\n/**\n * Writes a string to the file with a newline character appended at the end if\n * the given string does not have one.\n *\n * @method\n * @param {string} string the string to write.\n * @param {object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~resultCallback} [callback] this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.puts = function(string, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  var finalString = string.match(/\\n$/) == null ? string + '\\n' : string;\n  return executeLegacyOperation(\n    this.db.s.topology,\n    this.write.bind(this),\n    [finalString, options, callback],\n    { skipSessions: true }\n  );\n};\n\n/**\n * Return a modified Readable stream including a possible transform method.\n *\n * @method\n * @return {GridStoreStream}\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.stream = function() {\n  return new GridStoreStream(this);\n};\n\n/**\n * Writes some data. This method will work properly only if initialized with mode \"w\" or \"w+\".\n *\n * @method\n * @param {(string|Buffer)} data the data to write.\n * @param {boolean} [close] closes this file after writing if set to true.\n * @param {object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~resultCallback} [callback] this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.write = function write(data, close, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeLegacyOperation(\n    this.db.s.topology,\n    _writeNormal,\n    [this, data, close, options, callback],\n    { skipSessions: true }\n  );\n};\n\n/**\n * Handles the destroy part of a stream\n *\n * @method\n * @result {null}\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.destroy = function destroy() {\n  // close and do not emit any more events. queued data is not sent.\n  if (!this.writable) return;\n  this.readable = false;\n  if (this.writable) {\n    this.writable = false;\n    this._q.length = 0;\n    this.emit('close');\n  }\n};\n\n/**\n * Stores a file from the file system to the GridFS database.\n *\n * @method\n * @param {(string|Buffer|FileHandle)} file the file to store.\n * @param {object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~resultCallback} [callback] this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.writeFile = function(file, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeLegacyOperation(this.db.s.topology, writeFile, [this, file, options, callback], {\n    skipSessions: true\n  });\n};\n\nvar writeFile = function(self, file, options, callback) {\n  if (typeof file === 'string') {\n    fs.open(file, 'r', function(err, fd) {\n      if (err) return callback(err);\n      self.writeFile(fd, callback);\n    });\n    return;\n  }\n\n  self.open(function(err, self) {\n    if (err) return callback(err, self);\n\n    fs.fstat(file, function(err, stats) {\n      if (err) return callback(err, self);\n\n      var offset = 0;\n      var index = 0;\n\n      // Write a chunk\n      var writeChunk = function() {\n        // Allocate the buffer\n        var _buffer = Buffer.alloc(self.chunkSize);\n        // Read the file\n        fs.read(file, _buffer, 0, _buffer.length, offset, function(err, bytesRead, data) {\n          if (err) return callback(err, self);\n\n          offset = offset + bytesRead;\n\n          // Create a new chunk for the data\n          var chunk = new Chunk(self, { n: index++ }, self.writeConcern);\n          chunk.write(data.slice(0, bytesRead), function(err, chunk) {\n            if (err) return callback(err, self);\n\n            chunk.save({}, function(err) {\n              if (err) return callback(err, self);\n\n              self.position = self.position + bytesRead;\n\n              // Point to current chunk\n              self.currentChunk = chunk;\n\n              if (offset >= stats.size) {\n                fs.close(file, function(err) {\n                  if (err) return callback(err);\n\n                  self.close(function(err) {\n                    if (err) return callback(err, self);\n                    return callback(null, self);\n                  });\n                });\n              } else {\n                return process.nextTick(writeChunk);\n              }\n            });\n          });\n        });\n      };\n\n      // Process the first write\n      process.nextTick(writeChunk);\n    });\n  });\n};\n\n/**\n * Saves this file to the database. This will overwrite the old entry if it\n * already exists. This will work properly only if mode was initialized to\n * \"w\" or \"w+\".\n *\n * @method\n * @param {object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~resultCallback} [callback] this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.close = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeLegacyOperation(this.db.s.topology, close, [this, options, callback], {\n    skipSessions: true\n  });\n};\n\nvar close = function(self, options, callback) {\n  if (self.mode[0] === 'w') {\n    // Set up options\n    options = Object.assign({}, self.writeConcern, options);\n\n    if (self.currentChunk != null && self.currentChunk.position > 0) {\n      self.currentChunk.save({}, function(err) {\n        if (err && typeof callback === 'function') return callback(err);\n\n        self.collection(function(err, files) {\n          if (err && typeof callback === 'function') return callback(err);\n\n          // Build the mongo object\n          if (self.uploadDate != null) {\n            buildMongoObject(self, function(err, mongoObject) {\n              if (err) {\n                if (typeof callback === 'function') return callback(err);\n                else throw err;\n              }\n\n              files.save(mongoObject, options, function(err) {\n                if (typeof callback === 'function') callback(err, mongoObject);\n              });\n            });\n          } else {\n            self.uploadDate = new Date();\n            buildMongoObject(self, function(err, mongoObject) {\n              if (err) {\n                if (typeof callback === 'function') return callback(err);\n                else throw err;\n              }\n\n              files.save(mongoObject, options, function(err) {\n                if (typeof callback === 'function') callback(err, mongoObject);\n              });\n            });\n          }\n        });\n      });\n    } else {\n      self.collection(function(err, files) {\n        if (err && typeof callback === 'function') return callback(err);\n\n        self.uploadDate = new Date();\n        buildMongoObject(self, function(err, mongoObject) {\n          if (err) {\n            if (typeof callback === 'function') return callback(err);\n            else throw err;\n          }\n\n          files.save(mongoObject, options, function(err) {\n            if (typeof callback === 'function') callback(err, mongoObject);\n          });\n        });\n      });\n    }\n  } else if (self.mode[0] === 'r') {\n    if (typeof callback === 'function') callback(null, null);\n  } else {\n    if (typeof callback === 'function')\n      callback(MongoError.create({ message: f('Illegal mode %s', self.mode), driver: true }));\n  }\n};\n\n/**\n * The collection callback format.\n * @callback GridStore~collectionCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Collection} collection The collection from the command execution.\n */\n\n/**\n * Retrieve this file's chunks collection.\n *\n * @method\n * @param {GridStore~collectionCallback} callback the command callback.\n * @return {Collection}\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.chunkCollection = function(callback) {\n  if (typeof callback === 'function') return this.db.collection(this.root + '.chunks', callback);\n  return this.db.collection(this.root + '.chunks');\n};\n\n/**\n * Deletes all the chunks of this file in the database.\n *\n * @method\n * @param {object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~resultCallback} [callback] the command callback.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.unlink = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeLegacyOperation(this.db.s.topology, unlink, [this, options, callback], {\n    skipSessions: true\n  });\n};\n\nvar unlink = function(self, options, callback) {\n  deleteChunks(self, function(err) {\n    if (err !== null) {\n      err.message = 'at deleteChunks: ' + err.message;\n      return callback(err);\n    }\n\n    self.collection(function(err, collection) {\n      if (err !== null) {\n        err.message = 'at collection: ' + err.message;\n        return callback(err);\n      }\n\n      collection.remove({ _id: self.fileId }, self.writeConcern, function(err) {\n        callback(err, self);\n      });\n    });\n  });\n};\n\n/**\n * Retrieves the file collection associated with this object.\n *\n * @method\n * @param {GridStore~collectionCallback} callback the command callback.\n * @return {Collection}\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.collection = function(callback) {\n  if (typeof callback === 'function') this.db.collection(this.root + '.files', callback);\n  return this.db.collection(this.root + '.files');\n};\n\n/**\n * The readlines callback format.\n * @callback GridStore~readlinesCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {string[]} strings The array of strings returned.\n */\n\n/**\n * Read the entire file as a list of strings splitting by the provided separator.\n *\n * @method\n * @param {string} [separator] The character to be recognized as the newline separator.\n * @param {object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~readlinesCallback} [callback] the command callback.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.readlines = function(separator, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  separator = args.length ? args.shift() : '\\n';\n  separator = separator || '\\n';\n  options = args.length ? args.shift() : {};\n\n  return executeLegacyOperation(\n    this.db.s.topology,\n    readlines,\n    [this, separator, options, callback],\n    { skipSessions: true }\n  );\n};\n\nvar readlines = function(self, separator, options, callback) {\n  self.read(function(err, data) {\n    if (err) return callback(err);\n\n    var items = data.toString().split(separator);\n    items = items.length > 0 ? items.splice(0, items.length - 1) : [];\n    for (var i = 0; i < items.length; i++) {\n      items[i] = items[i] + separator;\n    }\n\n    callback(null, items);\n  });\n};\n\n/**\n * Deletes all the chunks of this file in the database if mode was set to \"w\" or\n * \"w+\" and resets the read/write head to the initial position.\n *\n * @method\n * @param {object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~resultCallback} [callback] this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.rewind = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeLegacyOperation(this.db.s.topology, rewind, [this, options, callback], {\n    skipSessions: true\n  });\n};\n\nvar rewind = function(self, options, callback) {\n  if (self.currentChunk.chunkNumber !== 0) {\n    if (self.mode[0] === 'w') {\n      deleteChunks(self, function(err) {\n        if (err) return callback(err);\n        self.currentChunk = new Chunk(self, { n: 0 }, self.writeConcern);\n        self.position = 0;\n        callback(null, self);\n      });\n    } else {\n      self.currentChunk(0, function(err, chunk) {\n        if (err) return callback(err);\n        self.currentChunk = chunk;\n        self.currentChunk.rewind();\n        self.position = 0;\n        callback(null, self);\n      });\n    }\n  } else {\n    self.currentChunk.rewind();\n    self.position = 0;\n    callback(null, self);\n  }\n};\n\n/**\n * The read callback format.\n * @callback GridStore~readCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Buffer} data The data read from the GridStore object\n */\n\n/**\n * Retrieves the contents of this file and advances the read/write head. Works with Buffers only.\n *\n * There are 3 signatures for this method:\n *\n * (callback)\n * (length, callback)\n * (length, buffer, callback)\n *\n * @method\n * @param {number} [length] the number of characters to read. Reads all the characters from the read/write head to the EOF if not specified.\n * @param {(string|Buffer)} [buffer] a string to hold temporary data. This is used for storing the string data read so far when recursively calling this method.\n * @param {object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~readCallback} [callback] the command callback.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.read = function(length, buffer, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  length = args.length ? args.shift() : null;\n  buffer = args.length ? args.shift() : null;\n  options = args.length ? args.shift() : {};\n\n  return executeLegacyOperation(\n    this.db.s.topology,\n    read,\n    [this, length, buffer, options, callback],\n    { skipSessions: true }\n  );\n};\n\nvar read = function(self, length, buffer, options, callback) {\n  // The data is a c-terminated string and thus the length - 1\n  var finalLength = length == null ? self.length - self.position : length;\n  var finalBuffer = buffer == null ? Buffer.alloc(finalLength) : buffer;\n  // Add a index to buffer to keep track of writing position or apply current index\n  finalBuffer._index = buffer != null && buffer._index != null ? buffer._index : 0;\n\n  if (self.currentChunk.length() - self.currentChunk.position + finalBuffer._index >= finalLength) {\n    var slice = self.currentChunk.readSlice(finalLength - finalBuffer._index);\n    // Copy content to final buffer\n    slice.copy(finalBuffer, finalBuffer._index);\n    // Update internal position\n    self.position = self.position + finalBuffer.length;\n    // Check if we don't have a file at all\n    if (finalLength === 0 && finalBuffer.length === 0)\n      return callback(MongoError.create({ message: 'File does not exist', driver: true }), null);\n    // Else return data\n    return callback(null, finalBuffer);\n  }\n\n  // Read the next chunk\n  slice = self.currentChunk.readSlice(self.currentChunk.length() - self.currentChunk.position);\n  // Copy content to final buffer\n  slice.copy(finalBuffer, finalBuffer._index);\n  // Update index position\n  finalBuffer._index += slice.length;\n\n  // Load next chunk and read more\n  nthChunk(self, self.currentChunk.chunkNumber + 1, function(err, chunk) {\n    if (err) return callback(err);\n\n    if (chunk.length() > 0) {\n      self.currentChunk = chunk;\n      self.read(length, finalBuffer, callback);\n    } else {\n      if (finalBuffer._index > 0) {\n        callback(null, finalBuffer);\n      } else {\n        callback(\n          MongoError.create({\n            message: 'no chunks found for file, possibly corrupt',\n            driver: true\n          }),\n          null\n        );\n      }\n    }\n  });\n};\n\n/**\n * The tell callback format.\n * @callback GridStore~tellCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {number} position The current read position in the GridStore.\n */\n\n/**\n * Retrieves the position of the read/write head of this file.\n *\n * @method\n * @param {number} [length] the number of characters to read. Reads all the characters from the read/write head to the EOF if not specified.\n * @param {(string|Buffer)} [buffer] a string to hold temporary data. This is used for storing the string data read so far when recursively calling this method.\n * @param {object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~tellCallback} [callback] the command callback.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.tell = function(callback) {\n  var self = this;\n  // We provided a callback leg\n  if (typeof callback === 'function') return callback(null, this.position);\n  // Return promise\n  return new self.promiseLibrary(function(resolve) {\n    resolve(self.position);\n  });\n};\n\n/**\n * The tell callback format.\n * @callback GridStore~gridStoreCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {GridStore} gridStore The gridStore.\n */\n\n/**\n * Moves the read/write head to a new location.\n *\n * There are 3 signatures for this method\n *\n * Seek Location Modes\n *  - **GridStore.IO_SEEK_SET**, **(default)** set the position from the start of the file.\n *  - **GridStore.IO_SEEK_CUR**, set the position from the current position in the file.\n *  - **GridStore.IO_SEEK_END**, set the position from the end of the file.\n *\n * @method\n * @param {number} [position] the position to seek to\n * @param {number} [seekLocation] seek mode. Use one of the Seek Location modes.\n * @param {object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~gridStoreCallback} [callback] the command callback.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.seek = function(position, seekLocation, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  seekLocation = args.length ? args.shift() : null;\n  options = args.length ? args.shift() : {};\n\n  return executeLegacyOperation(\n    this.db.s.topology,\n    seek,\n    [this, position, seekLocation, options, callback],\n    { skipSessions: true }\n  );\n};\n\nvar seek = function(self, position, seekLocation, options, callback) {\n  // Seek only supports read mode\n  if (self.mode !== 'r') {\n    return callback(\n      MongoError.create({ message: 'seek is only supported for mode r', driver: true })\n    );\n  }\n\n  var seekLocationFinal = seekLocation == null ? GridStore.IO_SEEK_SET : seekLocation;\n  var finalPosition = position;\n  var targetPosition = 0;\n\n  // Calculate the position\n  if (seekLocationFinal === GridStore.IO_SEEK_CUR) {\n    targetPosition = self.position + finalPosition;\n  } else if (seekLocationFinal === GridStore.IO_SEEK_END) {\n    targetPosition = self.length + finalPosition;\n  } else {\n    targetPosition = finalPosition;\n  }\n\n  // Get the chunk\n  var newChunkNumber = Math.floor(targetPosition / self.chunkSize);\n  var seekChunk = function() {\n    nthChunk(self, newChunkNumber, function(err, chunk) {\n      if (err) return callback(err, null);\n      if (chunk == null) return callback(new Error('no chunk found'));\n\n      // Set the current chunk\n      self.currentChunk = chunk;\n      self.position = targetPosition;\n      self.currentChunk.position = self.position % self.chunkSize;\n      callback(err, self);\n    });\n  };\n\n  seekChunk();\n};\n\n/**\n * @ignore\n */\nvar _open = function(self, options, callback) {\n  var collection = self.collection();\n  // Create the query\n  var query =\n    self.referenceBy === REFERENCE_BY_ID ? { _id: self.fileId } : { filename: self.filename };\n  query = null == self.fileId && self.filename == null ? null : query;\n  options.readPreference = self.readPreference;\n\n  // Fetch the chunks\n  if (query != null) {\n    collection.findOne(query, options, function(err, doc) {\n      if (err) {\n        return error(err);\n      }\n\n      // Check if the collection for the files exists otherwise prepare the new one\n      if (doc != null) {\n        self.fileId = doc._id;\n        // Prefer a new filename over the existing one if this is a write\n        self.filename =\n          self.mode === 'r' || self.filename === undefined ? doc.filename : self.filename;\n        self.contentType = doc.contentType;\n        self.internalChunkSize = doc.chunkSize;\n        self.uploadDate = doc.uploadDate;\n        self.aliases = doc.aliases;\n        self.length = doc.length;\n        self.metadata = doc.metadata;\n        self.internalMd5 = doc.md5;\n      } else if (self.mode !== 'r') {\n        self.fileId = self.fileId == null ? new ObjectID() : self.fileId;\n        self.contentType = GridStore.DEFAULT_CONTENT_TYPE;\n        self.internalChunkSize =\n          self.internalChunkSize == null ? Chunk.DEFAULT_CHUNK_SIZE : self.internalChunkSize;\n        self.length = 0;\n      } else {\n        self.length = 0;\n        var txtId = self.fileId._bsontype === 'ObjectID' ? self.fileId.toHexString() : self.fileId;\n        return error(\n          MongoError.create({\n            message: f(\n              'file with id %s not opened for writing',\n              self.referenceBy === REFERENCE_BY_ID ? txtId : self.filename\n            ),\n            driver: true\n          }),\n          self\n        );\n      }\n\n      // Process the mode of the object\n      if (self.mode === 'r') {\n        nthChunk(self, 0, options, function(err, chunk) {\n          if (err) return error(err);\n          self.currentChunk = chunk;\n          self.position = 0;\n          callback(null, self);\n        });\n      } else if (self.mode === 'w' && doc) {\n        // Delete any existing chunks\n        deleteChunks(self, options, function(err) {\n          if (err) return error(err);\n          self.currentChunk = new Chunk(self, { n: 0 }, self.writeConcern);\n          self.contentType =\n            self.options['content_type'] == null ? self.contentType : self.options['content_type'];\n          self.internalChunkSize =\n            self.options['chunk_size'] == null\n              ? self.internalChunkSize\n              : self.options['chunk_size'];\n          self.metadata =\n            self.options['metadata'] == null ? self.metadata : self.options['metadata'];\n          self.aliases = self.options['aliases'] == null ? self.aliases : self.options['aliases'];\n          self.position = 0;\n          callback(null, self);\n        });\n      } else if (self.mode === 'w') {\n        self.currentChunk = new Chunk(self, { n: 0 }, self.writeConcern);\n        self.contentType =\n          self.options['content_type'] == null ? self.contentType : self.options['content_type'];\n        self.internalChunkSize =\n          self.options['chunk_size'] == null ? self.internalChunkSize : self.options['chunk_size'];\n        self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];\n        self.aliases = self.options['aliases'] == null ? self.aliases : self.options['aliases'];\n        self.position = 0;\n        callback(null, self);\n      } else if (self.mode === 'w+') {\n        nthChunk(self, lastChunkNumber(self), options, function(err, chunk) {\n          if (err) return error(err);\n          // Set the current chunk\n          self.currentChunk = chunk == null ? new Chunk(self, { n: 0 }, self.writeConcern) : chunk;\n          self.currentChunk.position = self.currentChunk.data.length();\n          self.metadata =\n            self.options['metadata'] == null ? self.metadata : self.options['metadata'];\n          self.aliases = self.options['aliases'] == null ? self.aliases : self.options['aliases'];\n          self.position = self.length;\n          callback(null, self);\n        });\n      }\n    });\n  } else {\n    // Write only mode\n    self.fileId = null == self.fileId ? new ObjectID() : self.fileId;\n    self.contentType = GridStore.DEFAULT_CONTENT_TYPE;\n    self.internalChunkSize =\n      self.internalChunkSize == null ? Chunk.DEFAULT_CHUNK_SIZE : self.internalChunkSize;\n    self.length = 0;\n\n    // No file exists set up write mode\n    if (self.mode === 'w') {\n      // Delete any existing chunks\n      deleteChunks(self, options, function(err) {\n        if (err) return error(err);\n        self.currentChunk = new Chunk(self, { n: 0 }, self.writeConcern);\n        self.contentType =\n          self.options['content_type'] == null ? self.contentType : self.options['content_type'];\n        self.internalChunkSize =\n          self.options['chunk_size'] == null ? self.internalChunkSize : self.options['chunk_size'];\n        self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];\n        self.aliases = self.options['aliases'] == null ? self.aliases : self.options['aliases'];\n        self.position = 0;\n        callback(null, self);\n      });\n    } else if (self.mode === 'w+') {\n      nthChunk(self, lastChunkNumber(self), options, function(err, chunk) {\n        if (err) return error(err);\n        // Set the current chunk\n        self.currentChunk = chunk == null ? new Chunk(self, { n: 0 }, self.writeConcern) : chunk;\n        self.currentChunk.position = self.currentChunk.data.length();\n        self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];\n        self.aliases = self.options['aliases'] == null ? self.aliases : self.options['aliases'];\n        self.position = self.length;\n        callback(null, self);\n      });\n    }\n  }\n\n  // only pass error to callback once\n  function error(err) {\n    if (error.err) return;\n    callback((error.err = err));\n  }\n};\n\n/**\n * @ignore\n */\nvar writeBuffer = function(self, buffer, close, callback) {\n  if (typeof close === 'function') {\n    callback = close;\n    close = null;\n  }\n  var finalClose = typeof close === 'boolean' ? close : false;\n\n  if (self.mode !== 'w') {\n    callback(\n      MongoError.create({\n        message: f(\n          'file with id %s not opened for writing',\n          self.referenceBy === REFERENCE_BY_ID ? self.referenceBy : self.filename\n        ),\n        driver: true\n      }),\n      null\n    );\n  } else {\n    if (self.currentChunk.position + buffer.length >= self.chunkSize) {\n      // Write out the current Chunk and then keep writing until we have less data left than a chunkSize left\n      // to a new chunk (recursively)\n      var previousChunkNumber = self.currentChunk.chunkNumber;\n      var leftOverDataSize = self.chunkSize - self.currentChunk.position;\n      var firstChunkData = buffer.slice(0, leftOverDataSize);\n      var leftOverData = buffer.slice(leftOverDataSize);\n      // A list of chunks to write out\n      var chunksToWrite = [self.currentChunk.write(firstChunkData)];\n      // If we have more data left than the chunk size let's keep writing new chunks\n      while (leftOverData.length >= self.chunkSize) {\n        // Create a new chunk and write to it\n        var newChunk = new Chunk(self, { n: previousChunkNumber + 1 }, self.writeConcern);\n        firstChunkData = leftOverData.slice(0, self.chunkSize);\n        leftOverData = leftOverData.slice(self.chunkSize);\n        // Update chunk number\n        previousChunkNumber = previousChunkNumber + 1;\n        // Write data\n        newChunk.write(firstChunkData);\n        // Push chunk to save list\n        chunksToWrite.push(newChunk);\n      }\n\n      // Set current chunk with remaining data\n      self.currentChunk = new Chunk(self, { n: previousChunkNumber + 1 }, self.writeConcern);\n      // If we have left over data write it\n      if (leftOverData.length > 0) self.currentChunk.write(leftOverData);\n\n      // Update the position for the gridstore\n      self.position = self.position + buffer.length;\n      // Total number of chunks to write\n      var numberOfChunksToWrite = chunksToWrite.length;\n\n      for (var i = 0; i < chunksToWrite.length; i++) {\n        chunksToWrite[i].save({}, function(err) {\n          if (err) return callback(err);\n\n          numberOfChunksToWrite = numberOfChunksToWrite - 1;\n\n          if (numberOfChunksToWrite <= 0) {\n            // We care closing the file before returning\n            if (finalClose) {\n              return self.close(function(err) {\n                callback(err, self);\n              });\n            }\n\n            // Return normally\n            return callback(null, self);\n          }\n        });\n      }\n    } else {\n      // Update the position for the gridstore\n      self.position = self.position + buffer.length;\n      // We have less data than the chunk size just write it and callback\n      self.currentChunk.write(buffer);\n      // We care closing the file before returning\n      if (finalClose) {\n        return self.close(function(err) {\n          callback(err, self);\n        });\n      }\n      // Return normally\n      return callback(null, self);\n    }\n  }\n};\n\n/**\n * Creates a mongoDB object representation of this object.\n *\n *        <pre><code>\n *        {\n *          '_id' : , // {number} id for this file\n *          'filename' : , // {string} name for this file\n *          'contentType' : , // {string} mime type for this file\n *          'length' : , // {number} size of this file?\n *          'chunksize' : , // {number} chunk size used by this file\n *          'uploadDate' : , // {Date}\n *          'aliases' : , // {array of string}\n *          'metadata' : , // {string}\n *        }\n *        </code></pre>\n *\n * @ignore\n */\nvar buildMongoObject = function(self, callback) {\n  // Calcuate the length\n  var mongoObject = {\n    _id: self.fileId,\n    filename: self.filename,\n    contentType: self.contentType,\n    length: self.position ? self.position : 0,\n    chunkSize: self.chunkSize,\n    uploadDate: self.uploadDate,\n    aliases: self.aliases,\n    metadata: self.metadata\n  };\n\n  var md5Command = { filemd5: self.fileId, root: self.root };\n  self.db.command(md5Command, function(err, results) {\n    if (err) return callback(err);\n\n    mongoObject.md5 = results.md5;\n    callback(null, mongoObject);\n  });\n};\n\n/**\n * Gets the nth chunk of this file.\n * @ignore\n */\nvar nthChunk = function(self, chunkNumber, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || self.writeConcern;\n  options.readPreference = self.readPreference;\n  // Get the nth chunk\n  self\n    .chunkCollection()\n    .findOne({ files_id: self.fileId, n: chunkNumber }, options, function(err, chunk) {\n      if (err) return callback(err);\n\n      var finalChunk = chunk == null ? {} : chunk;\n      callback(null, new Chunk(self, finalChunk, self.writeConcern));\n    });\n};\n\n/**\n * @ignore\n */\nvar lastChunkNumber = function(self) {\n  return Math.floor((self.length ? self.length - 1 : 0) / self.chunkSize);\n};\n\n/**\n * Deletes all the chunks of this file in the database.\n *\n * @ignore\n */\nvar deleteChunks = function(self, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || self.writeConcern;\n\n  if (self.fileId != null) {\n    self.chunkCollection().remove({ files_id: self.fileId }, options, function(err) {\n      if (err) return callback(err, false);\n      callback(null, true);\n    });\n  } else {\n    callback(null, true);\n  }\n};\n\n/**\n * The collection to be used for holding the files and chunks collection.\n *\n * @classconstant DEFAULT_ROOT_COLLECTION\n */\nGridStore.DEFAULT_ROOT_COLLECTION = 'fs';\n\n/**\n * Default file mime type\n *\n * @classconstant DEFAULT_CONTENT_TYPE\n */\nGridStore.DEFAULT_CONTENT_TYPE = 'binary/octet-stream';\n\n/**\n * Seek mode where the given length is absolute.\n *\n * @classconstant IO_SEEK_SET\n */\nGridStore.IO_SEEK_SET = 0;\n\n/**\n * Seek mode where the given length is an offset to the current read/write head.\n *\n * @classconstant IO_SEEK_CUR\n */\nGridStore.IO_SEEK_CUR = 1;\n\n/**\n * Seek mode where the given length is an offset to the end of the file.\n *\n * @classconstant IO_SEEK_END\n */\nGridStore.IO_SEEK_END = 2;\n\n/**\n * Checks if a file exists in the database.\n *\n * @method\n * @static\n * @param {Db} db the database to query.\n * @param {string} name The name of the file to look for.\n * @param {string} [rootCollection] The root collection that holds the files and chunks collection. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.\n * @param {object} [options] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {object} [options.promiseLibrary] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~resultCallback} [callback] result from exists.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.exist = function(db, fileIdObject, rootCollection, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  rootCollection = args.length ? args.shift() : null;\n  options = args.length ? args.shift() : {};\n  options = options || {};\n\n  return executeLegacyOperation(\n    db.s.topology,\n    exists,\n    [db, fileIdObject, rootCollection, options, callback],\n    { skipSessions: true }\n  );\n};\n\nvar exists = function(db, fileIdObject, rootCollection, options, callback) {\n  // Establish read preference\n  var readPreference = options.readPreference || ReadPreference.PRIMARY;\n  // Fetch collection\n  var rootCollectionFinal =\n    rootCollection != null ? rootCollection : GridStore.DEFAULT_ROOT_COLLECTION;\n  db.collection(rootCollectionFinal + '.files', function(err, collection) {\n    if (err) return callback(err);\n\n    // Build query\n    var query =\n      typeof fileIdObject === 'string' ||\n      Object.prototype.toString.call(fileIdObject) === '[object RegExp]'\n        ? { filename: fileIdObject }\n        : { _id: fileIdObject }; // Attempt to locate file\n\n    // We have a specific query\n    if (\n      fileIdObject != null &&\n      typeof fileIdObject === 'object' &&\n      Object.prototype.toString.call(fileIdObject) !== '[object RegExp]'\n    ) {\n      query = fileIdObject;\n    }\n\n    // Check if the entry exists\n    collection.findOne(query, { readPreference: readPreference }, function(err, item) {\n      if (err) return callback(err);\n      callback(null, item == null ? false : true);\n    });\n  });\n};\n\n/**\n * Gets the list of files stored in the GridFS.\n *\n * @method\n * @static\n * @param {Db} db the database to query.\n * @param {string} [rootCollection] The root collection that holds the files and chunks collection. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.\n * @param {object} [options] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {object} [options.promiseLibrary] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~resultCallback} [callback] result from exists.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.list = function(db, rootCollection, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  rootCollection = args.length ? args.shift() : null;\n  options = args.length ? args.shift() : {};\n  options = options || {};\n\n  return executeLegacyOperation(db.s.topology, list, [db, rootCollection, options, callback], {\n    skipSessions: true\n  });\n};\n\nvar list = function(db, rootCollection, options, callback) {\n  // Ensure we have correct values\n  if (rootCollection != null && typeof rootCollection === 'object') {\n    options = rootCollection;\n    rootCollection = null;\n  }\n\n  // Establish read preference\n  var readPreference = options.readPreference || ReadPreference.primary;\n  // Check if we are returning by id not filename\n  var byId = options['id'] != null ? options['id'] : false;\n  // Fetch item\n  var rootCollectionFinal =\n    rootCollection != null ? rootCollection : GridStore.DEFAULT_ROOT_COLLECTION;\n  var items = [];\n  db.collection(rootCollectionFinal + '.files', function(err, collection) {\n    if (err) return callback(err);\n\n    collection.find({}, { readPreference: readPreference }, function(err, cursor) {\n      if (err) return callback(err);\n\n      cursor.each(function(err, item) {\n        if (item != null) {\n          items.push(byId ? item._id : item.filename);\n        } else {\n          callback(err, items);\n        }\n      });\n    });\n  });\n};\n\n/**\n * Reads the contents of a file.\n *\n * This method has the following signatures\n *\n * (db, name, callback)\n * (db, name, length, callback)\n * (db, name, length, offset, callback)\n * (db, name, length, offset, options, callback)\n *\n * @method\n * @static\n * @param {Db} db the database to query.\n * @param {string} name The name of the file.\n * @param {number} [length] The size of data to read.\n * @param {number} [offset] The offset from the head of the file of which to start reading from.\n * @param {object} [options] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {object} [options.promiseLibrary] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~readCallback} [callback] the command callback.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.read = function(db, name, length, offset, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  length = args.length ? args.shift() : null;\n  offset = args.length ? args.shift() : null;\n  options = args.length ? args.shift() : null;\n  options = options || {};\n\n  return executeLegacyOperation(\n    db.s.topology,\n    readStatic,\n    [db, name, length, offset, options, callback],\n    { skipSessions: true }\n  );\n};\n\nvar readStatic = function(db, name, length, offset, options, callback) {\n  new GridStore(db, name, 'r', options).open(function(err, gridStore) {\n    if (err) return callback(err);\n    // Make sure we are not reading out of bounds\n    if (offset && offset >= gridStore.length)\n      return callback('offset larger than size of file', null);\n    if (length && length > gridStore.length)\n      return callback('length is larger than the size of the file', null);\n    if (offset && length && offset + length > gridStore.length)\n      return callback('offset and length is larger than the size of the file', null);\n\n    if (offset != null) {\n      gridStore.seek(offset, function(err, gridStore) {\n        if (err) return callback(err);\n        gridStore.read(length, callback);\n      });\n    } else {\n      gridStore.read(length, callback);\n    }\n  });\n};\n\n/**\n * Read the entire file as a list of strings splitting by the provided separator.\n *\n * @method\n * @static\n * @param {Db} db the database to query.\n * @param {(String|object)} name the name of the file.\n * @param {string} [separator] The character to be recognized as the newline separator.\n * @param {object} [options] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {object} [options.promiseLibrary] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~readlinesCallback} [callback] the command callback.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.readlines = function(db, name, separator, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  separator = args.length ? args.shift() : null;\n  options = args.length ? args.shift() : null;\n  options = options || {};\n\n  return executeLegacyOperation(\n    db.s.topology,\n    readlinesStatic,\n    [db, name, separator, options, callback],\n    { skipSessions: true }\n  );\n};\n\nvar readlinesStatic = function(db, name, separator, options, callback) {\n  var finalSeperator = separator == null ? '\\n' : separator;\n  new GridStore(db, name, 'r', options).open(function(err, gridStore) {\n    if (err) return callback(err);\n    gridStore.readlines(finalSeperator, callback);\n  });\n};\n\n/**\n * Deletes the chunks and metadata information of a file from GridFS.\n *\n * @method\n * @static\n * @param {Db} db The database to query.\n * @param {(string|array)} names The name/names of the files to delete.\n * @param {object} [options] Optional settings.\n * @param {object} [options.promiseLibrary] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~resultCallback} [callback] the command callback.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.unlink = function(db, names, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  options = args.length ? args.shift() : {};\n  options = options || {};\n\n  return executeLegacyOperation(db.s.topology, unlinkStatic, [this, db, names, options, callback], {\n    skipSessions: true\n  });\n};\n\nvar unlinkStatic = function(self, db, names, options, callback) {\n  // Get the write concern\n  var writeConcern = _getWriteConcern(db, options);\n\n  // List of names\n  if (names.constructor === Array) {\n    var tc = 0;\n    for (var i = 0; i < names.length; i++) {\n      ++tc;\n      GridStore.unlink(db, names[i], options, function() {\n        if (--tc === 0) {\n          callback(null, self);\n        }\n      });\n    }\n  } else {\n    new GridStore(db, names, 'w', options).open(function(err, gridStore) {\n      if (err) return callback(err);\n      deleteChunks(gridStore, function(err) {\n        if (err) return callback(err);\n        gridStore.collection(function(err, collection) {\n          if (err) return callback(err);\n          collection.remove({ _id: gridStore.fileId }, writeConcern, function(err) {\n            callback(err, self);\n          });\n        });\n      });\n    });\n  }\n};\n\n/**\n *  @ignore\n */\nvar _writeNormal = function(self, data, close, options, callback) {\n  // If we have a buffer write it using the writeBuffer method\n  if (Buffer.isBuffer(data)) {\n    return writeBuffer(self, data, close, callback);\n  } else {\n    return writeBuffer(self, Buffer.from(data, 'binary'), close, callback);\n  }\n};\n\n/**\n * @ignore\n */\nvar _setWriteConcernHash = function(options) {\n  var finalOptions = {};\n  if (options.w != null) finalOptions.w = options.w;\n  if (options.journal === true) finalOptions.j = options.journal;\n  if (options.j === true) finalOptions.j = options.j;\n  if (options.fsync === true) finalOptions.fsync = options.fsync;\n  if (options.wtimeout != null) finalOptions.wtimeout = options.wtimeout;\n  return finalOptions;\n};\n\n/**\n * @ignore\n */\nvar _getWriteConcern = function(self, options) {\n  // Final options\n  var finalOptions = { w: 1 };\n  options = options || {};\n\n  // Local options verification\n  if (\n    options.w != null ||\n    typeof options.j === 'boolean' ||\n    typeof options.journal === 'boolean' ||\n    typeof options.fsync === 'boolean'\n  ) {\n    finalOptions = _setWriteConcernHash(options);\n  } else if (options.safe != null && typeof options.safe === 'object') {\n    finalOptions = _setWriteConcernHash(options.safe);\n  } else if (typeof options.safe === 'boolean') {\n    finalOptions = { w: options.safe ? 1 : 0 };\n  } else if (\n    self.options.w != null ||\n    typeof self.options.j === 'boolean' ||\n    typeof self.options.journal === 'boolean' ||\n    typeof self.options.fsync === 'boolean'\n  ) {\n    finalOptions = _setWriteConcernHash(self.options);\n  } else if (\n    self.safe &&\n    (self.safe.w != null ||\n      typeof self.safe.j === 'boolean' ||\n      typeof self.safe.journal === 'boolean' ||\n      typeof self.safe.fsync === 'boolean')\n  ) {\n    finalOptions = _setWriteConcernHash(self.safe);\n  } else if (typeof self.safe === 'boolean') {\n    finalOptions = { w: self.safe ? 1 : 0 };\n  }\n\n  // Ensure we don't have an invalid combination of write concerns\n  if (\n    finalOptions.w < 1 &&\n    (finalOptions.journal === true || finalOptions.j === true || finalOptions.fsync === true)\n  )\n    throw MongoError.create({\n      message: 'No acknowledgement using w < 1 cannot be combined with journal:true or fsync:true',\n      driver: true\n    });\n\n  // Return the options\n  return finalOptions;\n};\n\n/**\n * Create a new GridStoreStream instance (INTERNAL TYPE, do not instantiate directly)\n *\n * @class\n * @extends external:Duplex\n * @return {GridStoreStream} a GridStoreStream instance.\n * @deprecated Use GridFSBucket API instead\n */\nvar GridStoreStream = function(gs) {\n  // Initialize the duplex stream\n  Duplex.call(this);\n\n  // Get the gridstore\n  this.gs = gs;\n\n  // End called\n  this.endCalled = false;\n\n  // If we have a seek\n  this.totalBytesToRead = this.gs.length - this.gs.position;\n  this.seekPosition = this.gs.position;\n};\n\n//\n// Inherit duplex\ninherits(GridStoreStream, Duplex);\n\nGridStoreStream.prototype._pipe = GridStoreStream.prototype.pipe;\n\n// Set up override\nGridStoreStream.prototype.pipe = function(destination) {\n  var self = this;\n\n  // Only open gridstore if not already open\n  if (!self.gs.isOpen) {\n    self.gs.open(function(err) {\n      if (err) return self.emit('error', err);\n      self.totalBytesToRead = self.gs.length - self.gs.position;\n      self._pipe.apply(self, [destination]);\n    });\n  } else {\n    self.totalBytesToRead = self.gs.length - self.gs.position;\n    self._pipe.apply(self, [destination]);\n  }\n\n  return destination;\n};\n\n// Called by stream\nGridStoreStream.prototype._read = function() {\n  var self = this;\n\n  var read = function() {\n    // Read data\n    self.gs.read(length, function(err, buffer) {\n      if (err && !self.endCalled) return self.emit('error', err);\n\n      // Stream is closed\n      if (self.endCalled || buffer == null) return self.push(null);\n      // Remove bytes read\n      if (buffer.length <= self.totalBytesToRead) {\n        self.totalBytesToRead = self.totalBytesToRead - buffer.length;\n        self.push(buffer);\n      } else if (buffer.length > self.totalBytesToRead) {\n        self.totalBytesToRead = self.totalBytesToRead - buffer._index;\n        self.push(buffer.slice(0, buffer._index));\n      }\n\n      // Finished reading\n      if (self.totalBytesToRead <= 0) {\n        self.endCalled = true;\n      }\n    });\n  };\n\n  // Set read length\n  var length =\n    self.gs.length < self.gs.chunkSize ? self.gs.length - self.seekPosition : self.gs.chunkSize;\n  if (!self.gs.isOpen) {\n    self.gs.open(function(err) {\n      self.totalBytesToRead = self.gs.length - self.gs.position;\n      if (err) return self.emit('error', err);\n      read();\n    });\n  } else {\n    read();\n  }\n};\n\nGridStoreStream.prototype.destroy = function() {\n  this.pause();\n  this.endCalled = true;\n  this.gs.close();\n  this.emit('end');\n};\n\nGridStoreStream.prototype.write = function(chunk) {\n  var self = this;\n  if (self.endCalled)\n    return self.emit(\n      'error',\n      MongoError.create({ message: 'attempting to write to stream after end called', driver: true })\n    );\n  // Do we have to open the gridstore\n  if (!self.gs.isOpen) {\n    self.gs.open(function() {\n      self.gs.isOpen = true;\n      self.gs.write(chunk, function() {\n        process.nextTick(function() {\n          self.emit('drain');\n        });\n      });\n    });\n    return false;\n  } else {\n    self.gs.write(chunk, function() {\n      self.emit('drain');\n    });\n    return true;\n  }\n};\n\nGridStoreStream.prototype.end = function(chunk, encoding, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  chunk = args.length ? args.shift() : null;\n  encoding = args.length ? args.shift() : null;\n  self.endCalled = true;\n\n  if (chunk) {\n    self.gs.write(chunk, function() {\n      self.gs.close(function() {\n        if (typeof callback === 'function') callback();\n        self.emit('end');\n      });\n    });\n  }\n\n  self.gs.close(function() {\n    if (typeof callback === 'function') callback();\n    self.emit('end');\n  });\n};\n\n/**\n * The read() method pulls some data out of the internal buffer and returns it. If there is no data available, then it will return null.\n * @function external:Duplex#read\n * @param {number} size Optional argument to specify how much data to read.\n * @return {(String | Buffer | null)}\n */\n\n/**\n * Call this function to cause the stream to return strings of the specified encoding instead of Buffer objects.\n * @function external:Duplex#setEncoding\n * @param {string} encoding The encoding to use.\n * @return {null}\n */\n\n/**\n * This method will cause the readable stream to resume emitting data events.\n * @function external:Duplex#resume\n * @return {null}\n */\n\n/**\n * This method will cause a stream in flowing-mode to stop emitting data events. Any data that becomes available will remain in the internal buffer.\n * @function external:Duplex#pause\n * @return {null}\n */\n\n/**\n * This method pulls all the data out of a readable stream, and writes it to the supplied destination, automatically managing the flow so that the destination is not overwhelmed by a fast readable stream.\n * @function external:Duplex#pipe\n * @param {Writable} destination The destination for writing data\n * @param {object} [options] Pipe options\n * @return {null}\n */\n\n/**\n * This method will remove the hooks set up for a previous pipe() call.\n * @function external:Duplex#unpipe\n * @param {Writable} [destination] The destination for writing data\n * @return {null}\n */\n\n/**\n * This is useful in certain cases where a stream is being consumed by a parser, which needs to \"un-consume\" some data that it has optimistically pulled out of the source, so that the stream can be passed on to some other party.\n * @function external:Duplex#unshift\n * @param {(Buffer|string)} chunk Chunk of data to unshift onto the read queue.\n * @return {null}\n */\n\n/**\n * Versions of Node prior to v0.10 had streams that did not implement the entire Streams API as it is today. (See \"Compatibility\" below for more information.)\n * @function external:Duplex#wrap\n * @param {Stream} stream An \"old style\" readable stream.\n * @return {null}\n */\n\n/**\n * This method writes some data to the underlying system, and calls the supplied callback once the data has been fully handled.\n * @function external:Duplex#write\n * @param {(string|Buffer)} chunk The data to write\n * @param {string} encoding The encoding, if chunk is a String\n * @param {function} callback Callback for when this chunk of data is flushed\n * @return {boolean}\n */\n\n/**\n * Call this method when no more data will be written to the stream. If supplied, the callback is attached as a listener on the finish event.\n * @function external:Duplex#end\n * @param {(string|Buffer)} chunk The data to write\n * @param {string} encoding The encoding, if chunk is a String\n * @param {function} callback Callback for when this chunk of data is flushed\n * @return {null}\n */\n\n/**\n * GridStoreStream stream data event, fired for each document in the cursor.\n *\n * @event GridStoreStream#data\n * @type {object}\n */\n\n/**\n * GridStoreStream stream end event\n *\n * @event GridStoreStream#end\n * @type {null}\n */\n\n/**\n * GridStoreStream stream close event\n *\n * @event GridStoreStream#close\n * @type {null}\n */\n\n/**\n * GridStoreStream stream readable event\n *\n * @event GridStoreStream#readable\n * @type {null}\n */\n\n/**\n * GridStoreStream stream drain event\n *\n * @event GridStoreStream#drain\n * @type {null}\n */\n\n/**\n * GridStoreStream stream finish event\n *\n * @event GridStoreStream#finish\n * @type {null}\n */\n\n/**\n * GridStoreStream stream pipe event\n *\n * @event GridStoreStream#pipe\n * @type {null}\n */\n\n/**\n * GridStoreStream stream unpipe event\n *\n * @event GridStoreStream#unpipe\n * @type {null}\n */\n\n/**\n * GridStoreStream stream error event\n *\n * @event GridStoreStream#error\n * @type {null}\n */\n\n/**\n * @ignore\n */\nmodule.exports = GridStore;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///181\n");

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Binary = __webpack_require__(3).BSON.Binary,\n  ObjectID = __webpack_require__(3).BSON.ObjectID;\n\nvar Buffer = __webpack_require__(49).Buffer;\n\n/**\n * Class for representing a single chunk in GridFS.\n *\n * @class\n *\n * @param file {GridStore} The {@link GridStore} object holding this chunk.\n * @param mongoObject {object} The mongo object representation of this chunk.\n *\n * @throws Error when the type of data field for {@link mongoObject} is not\n *     supported. Currently supported types for data field are instances of\n *     {@link String}, {@link Array}, {@link Binary} and {@link Binary}\n *     from the bson module\n *\n * @see Chunk#buildMongoObject\n */\nvar Chunk = function(file, mongoObject, writeConcern) {\n  if (!(this instanceof Chunk)) return new Chunk(file, mongoObject);\n\n  this.file = file;\n  var mongoObjectFinal = mongoObject == null ? {} : mongoObject;\n  this.writeConcern = writeConcern || { w: 1 };\n  this.objectId = mongoObjectFinal._id == null ? new ObjectID() : mongoObjectFinal._id;\n  this.chunkNumber = mongoObjectFinal.n == null ? 0 : mongoObjectFinal.n;\n  this.data = new Binary();\n\n  if (typeof mongoObjectFinal.data === 'string') {\n    var buffer = Buffer.alloc(mongoObjectFinal.data.length);\n    buffer.write(mongoObjectFinal.data, 0, mongoObjectFinal.data.length, 'binary');\n    this.data = new Binary(buffer);\n  } else if (Array.isArray(mongoObjectFinal.data)) {\n    buffer = Buffer.alloc(mongoObjectFinal.data.length);\n    var data = mongoObjectFinal.data.join('');\n    buffer.write(data, 0, data.length, 'binary');\n    this.data = new Binary(buffer);\n  } else if (mongoObjectFinal.data && mongoObjectFinal.data._bsontype === 'Binary') {\n    this.data = mongoObjectFinal.data;\n  } else if (!Buffer.isBuffer(mongoObjectFinal.data) && !(mongoObjectFinal.data == null)) {\n    throw Error('Illegal chunk format');\n  }\n\n  // Update position\n  this.internalPosition = 0;\n};\n\n/**\n * Writes a data to this object and advance the read/write head.\n *\n * @param data {string} the data to write\n * @param callback {function(*, GridStore)} This will be called after executing\n *     this method. The first parameter will contain null and the second one\n *     will contain a reference to this object.\n */\nChunk.prototype.write = function(data, callback) {\n  this.data.write(data, this.internalPosition, data.length, 'binary');\n  this.internalPosition = this.data.length();\n  if (callback != null) return callback(null, this);\n  return this;\n};\n\n/**\n * Reads data and advances the read/write head.\n *\n * @param length {number} The length of data to read.\n *\n * @return {string} The data read if the given length will not exceed the end of\n *     the chunk. Returns an empty String otherwise.\n */\nChunk.prototype.read = function(length) {\n  // Default to full read if no index defined\n  length = length == null || length === 0 ? this.length() : length;\n\n  if (this.length() - this.internalPosition + 1 >= length) {\n    var data = this.data.read(this.internalPosition, length);\n    this.internalPosition = this.internalPosition + length;\n    return data;\n  } else {\n    return '';\n  }\n};\n\nChunk.prototype.readSlice = function(length) {\n  if (this.length() - this.internalPosition >= length) {\n    var data = null;\n    if (this.data.buffer != null) {\n      //Pure BSON\n      data = this.data.buffer.slice(this.internalPosition, this.internalPosition + length);\n    } else {\n      //Native BSON\n      data = Buffer.alloc(length);\n      length = this.data.readInto(data, this.internalPosition);\n    }\n    this.internalPosition = this.internalPosition + length;\n    return data;\n  } else {\n    return null;\n  }\n};\n\n/**\n * Checks if the read/write head is at the end.\n *\n * @return {boolean} Whether the read/write head has reached the end of this\n *     chunk.\n */\nChunk.prototype.eof = function() {\n  return this.internalPosition === this.length() ? true : false;\n};\n\n/**\n * Reads one character from the data of this chunk and advances the read/write\n * head.\n *\n * @return {string} a single character data read if the the read/write head is\n *     not at the end of the chunk. Returns an empty String otherwise.\n */\nChunk.prototype.getc = function() {\n  return this.read(1);\n};\n\n/**\n * Clears the contents of the data in this chunk and resets the read/write head\n * to the initial position.\n */\nChunk.prototype.rewind = function() {\n  this.internalPosition = 0;\n  this.data = new Binary();\n};\n\n/**\n * Saves this chunk to the database. Also overwrites existing entries having the\n * same id as this chunk.\n *\n * @param callback {function(*, GridStore)} This will be called after executing\n *     this method. The first parameter will contain null and the second one\n *     will contain a reference to this object.\n */\nChunk.prototype.save = function(options, callback) {\n  var self = this;\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  self.file.chunkCollection(function(err, collection) {\n    if (err) return callback(err);\n\n    // Merge the options\n    var writeOptions = { upsert: true };\n    for (var name in options) writeOptions[name] = options[name];\n    for (name in self.writeConcern) writeOptions[name] = self.writeConcern[name];\n\n    if (self.data.length() > 0) {\n      self.buildMongoObject(function(mongoObject) {\n        var options = { forceServerObjectId: true };\n        for (var name in self.writeConcern) {\n          options[name] = self.writeConcern[name];\n        }\n\n        collection.replaceOne({ _id: self.objectId }, mongoObject, writeOptions, function(err) {\n          callback(err, self);\n        });\n      });\n    } else {\n      callback(null, self);\n    }\n    // });\n  });\n};\n\n/**\n * Creates a mongoDB object representation of this chunk.\n *\n * @param callback {function(Object)} This will be called after executing this\n *     method. The object will be passed to the first parameter and will have\n *     the structure:\n *\n *        <pre><code>\n *        {\n *          '_id' : , // {number} id for this chunk\n *          'files_id' : , // {number} foreign key to the file collection\n *          'n' : , // {number} chunk number\n *          'data' : , // {bson#Binary} the chunk data itself\n *        }\n *        </code></pre>\n *\n * @see <a href=\"http://www.mongodb.org/display/DOCS/GridFS+Specification#GridFSSpecification-{{chunks}}\">MongoDB GridFS Chunk Object Structure</a>\n */\nChunk.prototype.buildMongoObject = function(callback) {\n  var mongoObject = {\n    files_id: this.file.fileId,\n    n: this.chunkNumber,\n    data: this.data\n  };\n  // If we are saving using a specific ObjectId\n  if (this.objectId != null) mongoObject._id = this.objectId;\n\n  callback(mongoObject);\n};\n\n/**\n * @return {number} the length of the data\n */\nChunk.prototype.length = function() {\n  return this.data.length();\n};\n\n/**\n * The position of the read/write head\n * @name position\n * @lends Chunk#\n * @field\n */\nObject.defineProperty(Chunk.prototype, 'position', {\n  enumerable: true,\n  get: function() {\n    return this.internalPosition;\n  },\n  set: function(value) {\n    this.internalPosition = value;\n  }\n});\n\n/**\n * The default chunk size\n * @constant\n */\nChunk.DEFAULT_CHUNK_SIZE = 1024 * 255;\n\nmodule.exports = Chunk;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///182\n");

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Emitter = __webpack_require__(39).EventEmitter;\nvar GridFSBucketReadStream = __webpack_require__(184);\nvar GridFSBucketWriteStream = __webpack_require__(185);\nvar shallowClone = __webpack_require__(86).shallowClone;\nvar toError = __webpack_require__(86).toError;\nvar util = __webpack_require__(12);\nvar executeLegacyOperation = __webpack_require__(86).executeLegacyOperation;\n\nvar DEFAULT_GRIDFS_BUCKET_OPTIONS = {\n  bucketName: 'fs',\n  chunkSizeBytes: 255 * 1024\n};\n\nmodule.exports = GridFSBucket;\n\n/**\n * Constructor for a streaming GridFS interface\n * @class\n * @param {Db} db A db handle\n * @param {object} [options] Optional settings.\n * @param {string} [options.bucketName=\"fs\"] The 'files' and 'chunks' collections will be prefixed with the bucket name followed by a dot.\n * @param {number} [options.chunkSizeBytes=255 * 1024] Number of bytes stored in each chunk. Defaults to 255KB\n * @param {object} [options.writeConcern] Optional write concern to be passed to write operations, for instance `{ w: 1 }`\n * @param {object} [options.readPreference] Optional read preference to be passed to read operations\n * @fires GridFSBucketWriteStream#index\n * @return {GridFSBucket}\n */\n\nfunction GridFSBucket(db, options) {\n  Emitter.apply(this);\n  this.setMaxListeners(0);\n\n  if (options && typeof options === 'object') {\n    options = shallowClone(options);\n    var keys = Object.keys(DEFAULT_GRIDFS_BUCKET_OPTIONS);\n    for (var i = 0; i < keys.length; ++i) {\n      if (!options[keys[i]]) {\n        options[keys[i]] = DEFAULT_GRIDFS_BUCKET_OPTIONS[keys[i]];\n      }\n    }\n  } else {\n    options = DEFAULT_GRIDFS_BUCKET_OPTIONS;\n  }\n\n  this.s = {\n    db: db,\n    options: options,\n    _chunksCollection: db.collection(options.bucketName + '.chunks'),\n    _filesCollection: db.collection(options.bucketName + '.files'),\n    checkedIndexes: false,\n    calledOpenUploadStream: false,\n    promiseLibrary: db.s.promiseLibrary || Promise\n  };\n}\n\nutil.inherits(GridFSBucket, Emitter);\n\n/**\n * When the first call to openUploadStream is made, the upload stream will\n * check to see if it needs to create the proper indexes on the chunks and\n * files collections. This event is fired either when 1) it determines that\n * no index creation is necessary, 2) when it successfully creates the\n * necessary indexes.\n *\n * @event GridFSBucket#index\n * @type {Error}\n */\n\n/**\n * Returns a writable stream (GridFSBucketWriteStream) for writing\n * buffers to GridFS. The stream's 'id' property contains the resulting\n * file's id.\n * @method\n * @param {string} filename The value of the 'filename' key in the files doc\n * @param {object} [options] Optional settings.\n * @param {number} [options.chunkSizeBytes] Optional overwrite this bucket's chunkSizeBytes for this file\n * @param {object} [options.metadata] Optional object to store in the file document's `metadata` field\n * @param {string} [options.contentType] Optional string to store in the file document's `contentType` field\n * @param {array} [options.aliases] Optional array of strings to store in the file document's `aliases` field\n * @param {boolean} [options.disableMD5=false] If true, disables adding an md5 field to file data\n * @return {GridFSBucketWriteStream}\n */\n\nGridFSBucket.prototype.openUploadStream = function(filename, options) {\n  if (options) {\n    options = shallowClone(options);\n  } else {\n    options = {};\n  }\n  if (!options.chunkSizeBytes) {\n    options.chunkSizeBytes = this.s.options.chunkSizeBytes;\n  }\n  return new GridFSBucketWriteStream(this, filename, options);\n};\n\n/**\n * Returns a writable stream (GridFSBucketWriteStream) for writing\n * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting\n * file's id.\n * @method\n * @param {string|number|object} id A custom id used to identify the file\n * @param {string} filename The value of the 'filename' key in the files doc\n * @param {object} [options] Optional settings.\n * @param {number} [options.chunkSizeBytes] Optional overwrite this bucket's chunkSizeBytes for this file\n * @param {object} [options.metadata] Optional object to store in the file document's `metadata` field\n * @param {string} [options.contentType] Optional string to store in the file document's `contentType` field\n * @param {array} [options.aliases] Optional array of strings to store in the file document's `aliases` field\n * @param {boolean} [options.disableMD5=false] If true, disables adding an md5 field to file data\n * @return {GridFSBucketWriteStream}\n */\n\nGridFSBucket.prototype.openUploadStreamWithId = function(id, filename, options) {\n  if (options) {\n    options = shallowClone(options);\n  } else {\n    options = {};\n  }\n\n  if (!options.chunkSizeBytes) {\n    options.chunkSizeBytes = this.s.options.chunkSizeBytes;\n  }\n\n  options.id = id;\n\n  return new GridFSBucketWriteStream(this, filename, options);\n};\n\n/**\n * Returns a readable stream (GridFSBucketReadStream) for streaming file\n * data from GridFS.\n * @method\n * @param {ObjectId} id The id of the file doc\n * @param {Object} [options] Optional settings.\n * @param {Number} [options.start] Optional 0-based offset in bytes to start streaming from\n * @param {Number} [options.end] Optional 0-based offset in bytes to stop streaming before\n * @return {GridFSBucketReadStream}\n */\n\nGridFSBucket.prototype.openDownloadStream = function(id, options) {\n  var filter = { _id: id };\n  options = {\n    start: options && options.start,\n    end: options && options.end\n  };\n\n  return new GridFSBucketReadStream(\n    this.s._chunksCollection,\n    this.s._filesCollection,\n    this.s.options.readPreference,\n    filter,\n    options\n  );\n};\n\n/**\n * Deletes a file with the given id\n * @method\n * @param {ObjectId} id The id of the file doc\n * @param {GridFSBucket~errorCallback} [callback]\n */\n\nGridFSBucket.prototype.delete = function(id, callback) {\n  return executeLegacyOperation(this.s.db.s.topology, _delete, [this, id, callback], {\n    skipSessions: true\n  });\n};\n\n/**\n * @ignore\n */\n\nfunction _delete(_this, id, callback) {\n  _this.s._filesCollection.deleteOne({ _id: id }, function(error, res) {\n    if (error) {\n      return callback(error);\n    }\n\n    _this.s._chunksCollection.deleteMany({ files_id: id }, function(error) {\n      if (error) {\n        return callback(error);\n      }\n\n      // Delete orphaned chunks before returning FileNotFound\n      if (!res.result.n) {\n        var errmsg = 'FileNotFound: no file with id ' + id + ' found';\n        return callback(new Error(errmsg));\n      }\n\n      callback();\n    });\n  });\n}\n\n/**\n * Convenience wrapper around find on the files collection\n * @method\n * @param {Object} filter\n * @param {Object} [options] Optional settings for cursor\n * @param {number} [options.batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/find|find command documentation}.\n * @param {number} [options.limit] Optional limit for cursor\n * @param {number} [options.maxTimeMS] Optional maxTimeMS for cursor\n * @param {boolean} [options.noCursorTimeout] Optionally set cursor's `noCursorTimeout` flag\n * @param {number} [options.skip] Optional skip for cursor\n * @param {object} [options.sort] Optional sort for cursor\n * @return {Cursor}\n */\n\nGridFSBucket.prototype.find = function(filter, options) {\n  filter = filter || {};\n  options = options || {};\n\n  var cursor = this.s._filesCollection.find(filter);\n\n  if (options.batchSize != null) {\n    cursor.batchSize(options.batchSize);\n  }\n  if (options.limit != null) {\n    cursor.limit(options.limit);\n  }\n  if (options.maxTimeMS != null) {\n    cursor.maxTimeMS(options.maxTimeMS);\n  }\n  if (options.noCursorTimeout != null) {\n    cursor.addCursorFlag('noCursorTimeout', options.noCursorTimeout);\n  }\n  if (options.skip != null) {\n    cursor.skip(options.skip);\n  }\n  if (options.sort != null) {\n    cursor.sort(options.sort);\n  }\n\n  return cursor;\n};\n\n/**\n * Returns a readable stream (GridFSBucketReadStream) for streaming the\n * file with the given name from GridFS. If there are multiple files with\n * the same name, this will stream the most recent file with the given name\n * (as determined by the `uploadDate` field). You can set the `revision`\n * option to change this behavior.\n * @method\n * @param {String} filename The name of the file to stream\n * @param {Object} [options] Optional settings\n * @param {number} [options.revision=-1] The revision number relative to the oldest file with the given filename. 0 gets you the oldest file, 1 gets you the 2nd oldest, -1 gets you the newest.\n * @param {Number} [options.start] Optional 0-based offset in bytes to start streaming from\n * @param {Number} [options.end] Optional 0-based offset in bytes to stop streaming before\n * @return {GridFSBucketReadStream}\n */\n\nGridFSBucket.prototype.openDownloadStreamByName = function(filename, options) {\n  var sort = { uploadDate: -1 };\n  var skip = null;\n  if (options && options.revision != null) {\n    if (options.revision >= 0) {\n      sort = { uploadDate: 1 };\n      skip = options.revision;\n    } else {\n      skip = -options.revision - 1;\n    }\n  }\n\n  var filter = { filename: filename };\n  options = {\n    sort: sort,\n    skip: skip,\n    start: options && options.start,\n    end: options && options.end\n  };\n  return new GridFSBucketReadStream(\n    this.s._chunksCollection,\n    this.s._filesCollection,\n    this.s.options.readPreference,\n    filter,\n    options\n  );\n};\n\n/**\n * Renames the file with the given _id to the given string\n * @method\n * @param {ObjectId} id the id of the file to rename\n * @param {String} filename new name for the file\n * @param {GridFSBucket~errorCallback} [callback]\n */\n\nGridFSBucket.prototype.rename = function(id, filename, callback) {\n  return executeLegacyOperation(this.s.db.s.topology, _rename, [this, id, filename, callback], {\n    skipSessions: true\n  });\n};\n\n/**\n * @ignore\n */\n\nfunction _rename(_this, id, filename, callback) {\n  var filter = { _id: id };\n  var update = { $set: { filename: filename } };\n  _this.s._filesCollection.updateOne(filter, update, function(error, res) {\n    if (error) {\n      return callback(error);\n    }\n    if (!res.result.n) {\n      return callback(toError('File with id ' + id + ' not found'));\n    }\n    callback();\n  });\n}\n\n/**\n * Removes this bucket's files collection, followed by its chunks collection.\n * @method\n * @param {GridFSBucket~errorCallback} [callback]\n */\n\nGridFSBucket.prototype.drop = function(callback) {\n  return executeLegacyOperation(this.s.db.s.topology, _drop, [this, callback], {\n    skipSessions: true\n  });\n};\n\n/**\n * Return the db logger\n * @method\n * @return {Logger} return the db logger\n * @ignore\n */\nGridFSBucket.prototype.getLogger = function() {\n  return this.s.db.s.logger;\n};\n\n/**\n * @ignore\n */\n\nfunction _drop(_this, callback) {\n  _this.s._filesCollection.drop(function(error) {\n    if (error) {\n      return callback(error);\n    }\n    _this.s._chunksCollection.drop(function(error) {\n      if (error) {\n        return callback(error);\n      }\n\n      return callback();\n    });\n  });\n}\n\n/**\n * Callback format for all GridFSBucket methods that can accept a callback.\n * @callback GridFSBucket~errorCallback\n * @param {MongoError} error An error instance representing any errors that occurred\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///183\n");

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar stream = __webpack_require__(85),\n  util = __webpack_require__(12);\n\nmodule.exports = GridFSBucketReadStream;\n\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n *\n * @class\n * @param {Collection} chunks Handle for chunks collection\n * @param {Collection} files Handle for files collection\n * @param {Object} readPreference The read preference to use\n * @param {Object} filter The query to use to find the file document\n * @param {Object} [options] Optional settings.\n * @param {Number} [options.sort] Optional sort for the file find query\n * @param {Number} [options.skip] Optional skip for the file find query\n * @param {Number} [options.start] Optional 0-based offset in bytes to start streaming from\n * @param {Number} [options.end] Optional 0-based offset in bytes to stop streaming before\n * @fires GridFSBucketReadStream#error\n * @fires GridFSBucketReadStream#file\n * @return {GridFSBucketReadStream} a GridFSBucketReadStream instance.\n */\n\nfunction GridFSBucketReadStream(chunks, files, readPreference, filter, options) {\n  this.s = {\n    bytesRead: 0,\n    chunks: chunks,\n    cursor: null,\n    expected: 0,\n    files: files,\n    filter: filter,\n    init: false,\n    expectedEnd: 0,\n    file: null,\n    options: options,\n    readPreference: readPreference\n  };\n\n  stream.Readable.call(this);\n}\n\nutil.inherits(GridFSBucketReadStream, stream.Readable);\n\n/**\n * An error occurred\n *\n * @event GridFSBucketReadStream#error\n * @type {Error}\n */\n\n/**\n * Fires when the stream loaded the file document corresponding to the\n * provided id.\n *\n * @event GridFSBucketReadStream#file\n * @type {object}\n */\n\n/**\n * Emitted when a chunk of data is available to be consumed.\n *\n * @event GridFSBucketReadStream#data\n * @type {object}\n */\n\n/**\n * Fired when the stream is exhausted (no more data events).\n *\n * @event GridFSBucketReadStream#end\n * @type {object}\n */\n\n/**\n * Fired when the stream is exhausted and the underlying cursor is killed\n *\n * @event GridFSBucketReadStream#close\n * @type {object}\n */\n\n/**\n * Reads from the cursor and pushes to the stream.\n * @method\n */\n\nGridFSBucketReadStream.prototype._read = function() {\n  var _this = this;\n  if (this.destroyed) {\n    return;\n  }\n\n  waitForFile(_this, function() {\n    doRead(_this);\n  });\n};\n\n/**\n * Sets the 0-based offset in bytes to start streaming from. Throws\n * an error if this stream has entered flowing mode\n * (e.g. if you've already called `on('data')`)\n * @method\n * @param {Number} start Offset in bytes to start reading at\n * @return {GridFSBucketReadStream}\n */\n\nGridFSBucketReadStream.prototype.start = function(start) {\n  throwIfInitialized(this);\n  this.s.options.start = start;\n  return this;\n};\n\n/**\n * Sets the 0-based offset in bytes to start streaming from. Throws\n * an error if this stream has entered flowing mode\n * (e.g. if you've already called `on('data')`)\n * @method\n * @param {Number} end Offset in bytes to stop reading at\n * @return {GridFSBucketReadStream}\n */\n\nGridFSBucketReadStream.prototype.end = function(end) {\n  throwIfInitialized(this);\n  this.s.options.end = end;\n  return this;\n};\n\n/**\n * Marks this stream as aborted (will never push another `data` event)\n * and kills the underlying cursor. Will emit the 'end' event, and then\n * the 'close' event once the cursor is successfully killed.\n *\n * @method\n * @param {GridFSBucket~errorCallback} [callback] called when the cursor is successfully closed or an error occurred.\n * @fires GridFSBucketWriteStream#close\n * @fires GridFSBucketWriteStream#end\n */\n\nGridFSBucketReadStream.prototype.abort = function(callback) {\n  var _this = this;\n  this.push(null);\n  this.destroyed = true;\n  if (this.s.cursor) {\n    this.s.cursor.close(function(error) {\n      _this.emit('close');\n      callback && callback(error);\n    });\n  } else {\n    if (!this.s.init) {\n      // If not initialized, fire close event because we will never\n      // get a cursor\n      _this.emit('close');\n    }\n    callback && callback();\n  }\n};\n\n/**\n * @ignore\n */\n\nfunction throwIfInitialized(self) {\n  if (self.s.init) {\n    throw new Error('You cannot change options after the stream has entered' + 'flowing mode!');\n  }\n}\n\n/**\n * @ignore\n */\n\nfunction doRead(_this) {\n  if (_this.destroyed) {\n    return;\n  }\n\n  _this.s.cursor.next(function(error, doc) {\n    if (_this.destroyed) {\n      return;\n    }\n    if (error) {\n      return __handleError(_this, error);\n    }\n    if (!doc) {\n      _this.push(null);\n\n      process.nextTick(() => {\n        _this.s.cursor.close(function(error) {\n          if (error) {\n            __handleError(_this, error);\n            return;\n          }\n\n          _this.emit('close');\n        });\n      });\n\n      return;\n    }\n\n    var bytesRemaining = _this.s.file.length - _this.s.bytesRead;\n    var expectedN = _this.s.expected++;\n    var expectedLength = Math.min(_this.s.file.chunkSize, bytesRemaining);\n\n    if (doc.n > expectedN) {\n      var errmsg = 'ChunkIsMissing: Got unexpected n: ' + doc.n + ', expected: ' + expectedN;\n      return __handleError(_this, new Error(errmsg));\n    }\n\n    if (doc.n < expectedN) {\n      errmsg = 'ExtraChunk: Got unexpected n: ' + doc.n + ', expected: ' + expectedN;\n      return __handleError(_this, new Error(errmsg));\n    }\n\n    var buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n\n    if (buf.length !== expectedLength) {\n      if (bytesRemaining <= 0) {\n        errmsg = 'ExtraChunk: Got unexpected n: ' + doc.n;\n        return __handleError(_this, new Error(errmsg));\n      }\n\n      errmsg =\n        'ChunkIsWrongSize: Got unexpected length: ' + buf.length + ', expected: ' + expectedLength;\n      return __handleError(_this, new Error(errmsg));\n    }\n\n    _this.s.bytesRead += buf.length;\n\n    if (buf.length === 0) {\n      return _this.push(null);\n    }\n\n    var sliceStart = null;\n    var sliceEnd = null;\n\n    if (_this.s.bytesToSkip != null) {\n      sliceStart = _this.s.bytesToSkip;\n      _this.s.bytesToSkip = 0;\n    }\n\n    const atEndOfStream = expectedN === _this.s.expectedEnd - 1;\n    const bytesLeftToRead = _this.s.options.end - _this.s.bytesToSkip;\n    if (atEndOfStream && _this.s.bytesToTrim != null) {\n      sliceEnd = _this.s.file.chunkSize - _this.s.bytesToTrim;\n    } else if (_this.s.options.end && bytesLeftToRead < doc.data.length()) {\n      sliceEnd = bytesLeftToRead;\n    }\n\n    if (sliceStart != null || sliceEnd != null) {\n      buf = buf.slice(sliceStart || 0, sliceEnd || buf.length);\n    }\n\n    _this.push(buf);\n  });\n}\n\n/**\n * @ignore\n */\n\nfunction init(self) {\n  var findOneOptions = {};\n  if (self.s.readPreference) {\n    findOneOptions.readPreference = self.s.readPreference;\n  }\n  if (self.s.options && self.s.options.sort) {\n    findOneOptions.sort = self.s.options.sort;\n  }\n  if (self.s.options && self.s.options.skip) {\n    findOneOptions.skip = self.s.options.skip;\n  }\n\n  self.s.files.findOne(self.s.filter, findOneOptions, function(error, doc) {\n    if (error) {\n      return __handleError(self, error);\n    }\n    if (!doc) {\n      var identifier = self.s.filter._id ? self.s.filter._id.toString() : self.s.filter.filename;\n      var errmsg = 'FileNotFound: file ' + identifier + ' was not found';\n      var err = new Error(errmsg);\n      err.code = 'ENOENT';\n      return __handleError(self, err);\n    }\n\n    // If document is empty, kill the stream immediately and don't\n    // execute any reads\n    if (doc.length <= 0) {\n      self.push(null);\n      return;\n    }\n\n    if (self.destroyed) {\n      // If user destroys the stream before we have a cursor, wait\n      // until the query is done to say we're 'closed' because we can't\n      // cancel a query.\n      self.emit('close');\n      return;\n    }\n\n    self.s.bytesToSkip = handleStartOption(self, doc, self.s.options);\n\n    var filter = { files_id: doc._id };\n\n    // Currently (MongoDB 3.4.4) skip function does not support the index,\n    // it needs to retrieve all the documents first and then skip them. (CS-25811)\n    // As work around we use $gte on the \"n\" field.\n    if (self.s.options && self.s.options.start != null) {\n      var skip = Math.floor(self.s.options.start / doc.chunkSize);\n      if (skip > 0) {\n        filter['n'] = { $gte: skip };\n      }\n    }\n    self.s.cursor = self.s.chunks.find(filter).sort({ n: 1 });\n\n    if (self.s.readPreference) {\n      self.s.cursor.setReadPreference(self.s.readPreference);\n    }\n\n    self.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n    self.s.file = doc;\n    self.s.bytesToTrim = handleEndOption(self, doc, self.s.cursor, self.s.options);\n    self.emit('file', doc);\n  });\n}\n\n/**\n * @ignore\n */\n\nfunction waitForFile(_this, callback) {\n  if (_this.s.file) {\n    return callback();\n  }\n\n  if (!_this.s.init) {\n    init(_this);\n    _this.s.init = true;\n  }\n\n  _this.once('file', function() {\n    callback();\n  });\n}\n\n/**\n * @ignore\n */\n\nfunction handleStartOption(stream, doc, options) {\n  if (options && options.start != null) {\n    if (options.start > doc.length) {\n      throw new Error(\n        'Stream start (' +\n          options.start +\n          ') must not be ' +\n          'more than the length of the file (' +\n          doc.length +\n          ')'\n      );\n    }\n    if (options.start < 0) {\n      throw new Error('Stream start (' + options.start + ') must not be ' + 'negative');\n    }\n    if (options.end != null && options.end < options.start) {\n      throw new Error(\n        'Stream start (' +\n          options.start +\n          ') must not be ' +\n          'greater than stream end (' +\n          options.end +\n          ')'\n      );\n    }\n\n    stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n    stream.s.expected = Math.floor(options.start / doc.chunkSize);\n\n    return options.start - stream.s.bytesRead;\n  }\n}\n\n/**\n * @ignore\n */\n\nfunction handleEndOption(stream, doc, cursor, options) {\n  if (options && options.end != null) {\n    if (options.end > doc.length) {\n      throw new Error(\n        'Stream end (' +\n          options.end +\n          ') must not be ' +\n          'more than the length of the file (' +\n          doc.length +\n          ')'\n      );\n    }\n    if (options.start < 0) {\n      throw new Error('Stream end (' + options.end + ') must not be ' + 'negative');\n    }\n\n    var start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n\n    cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n\n    stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n\n    return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n  }\n}\n\n/**\n * @ignore\n */\n\nfunction __handleError(_this, error) {\n  _this.emit('error', error);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///184\n");

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar core = __webpack_require__(3);\nvar crypto = __webpack_require__(36);\nvar stream = __webpack_require__(85);\nvar util = __webpack_require__(12);\nvar Buffer = __webpack_require__(49).Buffer;\n\nvar ERROR_NAMESPACE_NOT_FOUND = 26;\n\nmodule.exports = GridFSBucketWriteStream;\n\n/**\n * A writable stream that enables you to write buffers to GridFS.\n *\n * Do not instantiate this class directly. Use `openUploadStream()` instead.\n *\n * @class\n * @param {GridFSBucket} bucket Handle for this stream's corresponding bucket\n * @param {string} filename The value of the 'filename' key in the files doc\n * @param {object} [options] Optional settings.\n * @param {string|number|object} [options.id] Custom file id for the GridFS file.\n * @param {number} [options.chunkSizeBytes] The chunk size to use, in bytes\n * @param {number} [options.w] The write concern\n * @param {number} [options.wtimeout] The write concern timeout\n * @param {number} [options.j] The journal write concern\n * @param {boolean} [options.disableMD5=false] If true, disables adding an md5 field to file data\n * @fires GridFSBucketWriteStream#error\n * @fires GridFSBucketWriteStream#finish\n * @return {GridFSBucketWriteStream} a GridFSBucketWriteStream instance.\n */\n\nfunction GridFSBucketWriteStream(bucket, filename, options) {\n  options = options || {};\n  this.bucket = bucket;\n  this.chunks = bucket.s._chunksCollection;\n  this.filename = filename;\n  this.files = bucket.s._filesCollection;\n  this.options = options;\n  // Signals the write is all done\n  this.done = false;\n\n  this.id = options.id ? options.id : core.BSON.ObjectId();\n  this.chunkSizeBytes = this.options.chunkSizeBytes;\n  this.bufToStore = Buffer.alloc(this.chunkSizeBytes);\n  this.length = 0;\n  this.md5 = !options.disableMD5 && crypto.createHash('md5');\n  this.n = 0;\n  this.pos = 0;\n  this.state = {\n    streamEnd: false,\n    outstandingRequests: 0,\n    errored: false,\n    aborted: false,\n    promiseLibrary: this.bucket.s.promiseLibrary\n  };\n\n  if (!this.bucket.s.calledOpenUploadStream) {\n    this.bucket.s.calledOpenUploadStream = true;\n\n    var _this = this;\n    checkIndexes(this, function() {\n      _this.bucket.s.checkedIndexes = true;\n      _this.bucket.emit('index');\n    });\n  }\n}\n\nutil.inherits(GridFSBucketWriteStream, stream.Writable);\n\n/**\n * An error occurred\n *\n * @event GridFSBucketWriteStream#error\n * @type {Error}\n */\n\n/**\n * `end()` was called and the write stream successfully wrote the file\n * metadata and all the chunks to MongoDB.\n *\n * @event GridFSBucketWriteStream#finish\n * @type {object}\n */\n\n/**\n * Write a buffer to the stream.\n *\n * @method\n * @param {Buffer} chunk Buffer to write\n * @param {String} encoding Optional encoding for the buffer\n * @param {Function} callback Function to call when the chunk was added to the buffer, or if the entire chunk was persisted to MongoDB if this chunk caused a flush.\n * @return {Boolean} False if this write required flushing a chunk to MongoDB. True otherwise.\n */\n\nGridFSBucketWriteStream.prototype.write = function(chunk, encoding, callback) {\n  var _this = this;\n  return waitForIndexes(this, function() {\n    return doWrite(_this, chunk, encoding, callback);\n  });\n};\n\n/**\n * Places this write stream into an aborted state (all future writes fail)\n * and deletes all chunks that have already been written.\n *\n * @method\n * @param {GridFSBucket~errorCallback} callback called when chunks are successfully removed or error occurred\n * @return {Promise} if no callback specified\n */\n\nGridFSBucketWriteStream.prototype.abort = function(callback) {\n  if (this.state.streamEnd) {\n    var error = new Error('Cannot abort a stream that has already completed');\n    if (typeof callback === 'function') {\n      return callback(error);\n    }\n    return this.state.promiseLibrary.reject(error);\n  }\n  if (this.state.aborted) {\n    error = new Error('Cannot call abort() on a stream twice');\n    if (typeof callback === 'function') {\n      return callback(error);\n    }\n    return this.state.promiseLibrary.reject(error);\n  }\n  this.state.aborted = true;\n  this.chunks.deleteMany({ files_id: this.id }, function(error) {\n    if (typeof callback === 'function') callback(error);\n  });\n};\n\n/**\n * Tells the stream that no more data will be coming in. The stream will\n * persist the remaining data to MongoDB, write the files document, and\n * then emit a 'finish' event.\n *\n * @method\n * @param {Buffer} chunk Buffer to write\n * @param {String} encoding Optional encoding for the buffer\n * @param {Function} callback Function to call when all files and chunks have been persisted to MongoDB\n */\n\nGridFSBucketWriteStream.prototype.end = function(chunk, encoding, callback) {\n  var _this = this;\n  if (typeof chunk === 'function') {\n    (callback = chunk), (chunk = null), (encoding = null);\n  } else if (typeof encoding === 'function') {\n    (callback = encoding), (encoding = null);\n  }\n\n  if (checkAborted(this, callback)) {\n    return;\n  }\n  this.state.streamEnd = true;\n\n  if (callback) {\n    this.once('finish', function(result) {\n      callback(null, result);\n    });\n  }\n\n  if (!chunk) {\n    waitForIndexes(this, function() {\n      writeRemnant(_this);\n    });\n    return;\n  }\n\n  this.write(chunk, encoding, function() {\n    writeRemnant(_this);\n  });\n};\n\n/**\n * @ignore\n */\n\nfunction __handleError(_this, error, callback) {\n  if (_this.state.errored) {\n    return;\n  }\n  _this.state.errored = true;\n  if (callback) {\n    return callback(error);\n  }\n  _this.emit('error', error);\n}\n\n/**\n * @ignore\n */\n\nfunction createChunkDoc(filesId, n, data) {\n  return {\n    _id: core.BSON.ObjectId(),\n    files_id: filesId,\n    n: n,\n    data: data\n  };\n}\n\n/**\n * @ignore\n */\n\nfunction checkChunksIndex(_this, callback) {\n  _this.chunks.listIndexes().toArray(function(error, indexes) {\n    if (error) {\n      // Collection doesn't exist so create index\n      if (error.code === ERROR_NAMESPACE_NOT_FOUND) {\n        var index = { files_id: 1, n: 1 };\n        _this.chunks.createIndex(index, { background: false, unique: true }, function(error) {\n          if (error) {\n            return callback(error);\n          }\n\n          callback();\n        });\n        return;\n      }\n      return callback(error);\n    }\n\n    var hasChunksIndex = false;\n    indexes.forEach(function(index) {\n      if (index.key) {\n        var keys = Object.keys(index.key);\n        if (keys.length === 2 && index.key.files_id === 1 && index.key.n === 1) {\n          hasChunksIndex = true;\n        }\n      }\n    });\n\n    if (hasChunksIndex) {\n      callback();\n    } else {\n      index = { files_id: 1, n: 1 };\n      var indexOptions = getWriteOptions(_this);\n\n      indexOptions.background = false;\n      indexOptions.unique = true;\n\n      _this.chunks.createIndex(index, indexOptions, function(error) {\n        if (error) {\n          return callback(error);\n        }\n\n        callback();\n      });\n    }\n  });\n}\n\n/**\n * @ignore\n */\n\nfunction checkDone(_this, callback) {\n  if (_this.done) return true;\n  if (_this.state.streamEnd && _this.state.outstandingRequests === 0 && !_this.state.errored) {\n    // Set done so we dont' trigger duplicate createFilesDoc\n    _this.done = true;\n    // Create a new files doc\n    var filesDoc = createFilesDoc(\n      _this.id,\n      _this.length,\n      _this.chunkSizeBytes,\n      _this.md5 && _this.md5.digest('hex'),\n      _this.filename,\n      _this.options.contentType,\n      _this.options.aliases,\n      _this.options.metadata\n    );\n\n    if (checkAborted(_this, callback)) {\n      return false;\n    }\n\n    _this.files.insertOne(filesDoc, getWriteOptions(_this), function(error) {\n      if (error) {\n        return __handleError(_this, error, callback);\n      }\n      _this.emit('finish', filesDoc);\n    });\n\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * @ignore\n */\n\nfunction checkIndexes(_this, callback) {\n  _this.files.findOne({}, { _id: 1 }, function(error, doc) {\n    if (error) {\n      return callback(error);\n    }\n    if (doc) {\n      return callback();\n    }\n\n    _this.files.listIndexes().toArray(function(error, indexes) {\n      if (error) {\n        // Collection doesn't exist so create index\n        if (error.code === ERROR_NAMESPACE_NOT_FOUND) {\n          var index = { filename: 1, uploadDate: 1 };\n          _this.files.createIndex(index, { background: false }, function(error) {\n            if (error) {\n              return callback(error);\n            }\n\n            checkChunksIndex(_this, callback);\n          });\n          return;\n        }\n        return callback(error);\n      }\n\n      var hasFileIndex = false;\n      indexes.forEach(function(index) {\n        var keys = Object.keys(index.key);\n        if (keys.length === 2 && index.key.filename === 1 && index.key.uploadDate === 1) {\n          hasFileIndex = true;\n        }\n      });\n\n      if (hasFileIndex) {\n        checkChunksIndex(_this, callback);\n      } else {\n        index = { filename: 1, uploadDate: 1 };\n\n        var indexOptions = getWriteOptions(_this);\n\n        indexOptions.background = false;\n\n        _this.files.createIndex(index, indexOptions, function(error) {\n          if (error) {\n            return callback(error);\n          }\n\n          checkChunksIndex(_this, callback);\n        });\n      }\n    });\n  });\n}\n\n/**\n * @ignore\n */\n\nfunction createFilesDoc(_id, length, chunkSize, md5, filename, contentType, aliases, metadata) {\n  var ret = {\n    _id: _id,\n    length: length,\n    chunkSize: chunkSize,\n    uploadDate: new Date(),\n    filename: filename\n  };\n\n  if (md5) {\n    ret.md5 = md5;\n  }\n\n  if (contentType) {\n    ret.contentType = contentType;\n  }\n\n  if (aliases) {\n    ret.aliases = aliases;\n  }\n\n  if (metadata) {\n    ret.metadata = metadata;\n  }\n\n  return ret;\n}\n\n/**\n * @ignore\n */\n\nfunction doWrite(_this, chunk, encoding, callback) {\n  if (checkAborted(_this, callback)) {\n    return false;\n  }\n\n  var inputBuf = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n\n  _this.length += inputBuf.length;\n\n  // Input is small enough to fit in our buffer\n  if (_this.pos + inputBuf.length < _this.chunkSizeBytes) {\n    inputBuf.copy(_this.bufToStore, _this.pos);\n    _this.pos += inputBuf.length;\n\n    callback && callback();\n\n    // Note that we reverse the typical semantics of write's return value\n    // to be compatible with node's `.pipe()` function.\n    // True means client can keep writing.\n    return true;\n  }\n\n  // Otherwise, buffer is too big for current chunk, so we need to flush\n  // to MongoDB.\n  var inputBufRemaining = inputBuf.length;\n  var spaceRemaining = _this.chunkSizeBytes - _this.pos;\n  var numToCopy = Math.min(spaceRemaining, inputBuf.length);\n  var outstandingRequests = 0;\n  while (inputBufRemaining > 0) {\n    var inputBufPos = inputBuf.length - inputBufRemaining;\n    inputBuf.copy(_this.bufToStore, _this.pos, inputBufPos, inputBufPos + numToCopy);\n    _this.pos += numToCopy;\n    spaceRemaining -= numToCopy;\n    if (spaceRemaining === 0) {\n      if (_this.md5) {\n        _this.md5.update(_this.bufToStore);\n      }\n      var doc = createChunkDoc(_this.id, _this.n, _this.bufToStore);\n      ++_this.state.outstandingRequests;\n      ++outstandingRequests;\n\n      if (checkAborted(_this, callback)) {\n        return false;\n      }\n\n      _this.chunks.insertOne(doc, getWriteOptions(_this), function(error) {\n        if (error) {\n          return __handleError(_this, error);\n        }\n        --_this.state.outstandingRequests;\n        --outstandingRequests;\n\n        if (!outstandingRequests) {\n          _this.emit('drain', doc);\n          callback && callback();\n          checkDone(_this);\n        }\n      });\n\n      spaceRemaining = _this.chunkSizeBytes;\n      _this.pos = 0;\n      ++_this.n;\n    }\n    inputBufRemaining -= numToCopy;\n    numToCopy = Math.min(spaceRemaining, inputBufRemaining);\n  }\n\n  // Note that we reverse the typical semantics of write's return value\n  // to be compatible with node's `.pipe()` function.\n  // False means the client should wait for the 'drain' event.\n  return false;\n}\n\n/**\n * @ignore\n */\n\nfunction getWriteOptions(_this) {\n  var obj = {};\n  if (_this.options.writeConcern) {\n    obj.w = _this.options.writeConcern.w;\n    obj.wtimeout = _this.options.writeConcern.wtimeout;\n    obj.j = _this.options.writeConcern.j;\n  }\n  return obj;\n}\n\n/**\n * @ignore\n */\n\nfunction waitForIndexes(_this, callback) {\n  if (_this.bucket.s.checkedIndexes) {\n    return callback(false);\n  }\n\n  _this.bucket.once('index', function() {\n    callback(true);\n  });\n\n  return true;\n}\n\n/**\n * @ignore\n */\n\nfunction writeRemnant(_this, callback) {\n  // Buffer is empty, so don't bother to insert\n  if (_this.pos === 0) {\n    return checkDone(_this, callback);\n  }\n\n  ++_this.state.outstandingRequests;\n\n  // Create a new buffer to make sure the buffer isn't bigger than it needs\n  // to be.\n  var remnant = Buffer.alloc(_this.pos);\n  _this.bufToStore.copy(remnant, 0, 0, _this.pos);\n  if (_this.md5) {\n    _this.md5.update(remnant);\n  }\n  var doc = createChunkDoc(_this.id, _this.n, remnant);\n\n  // If the stream was aborted, do not write remnant\n  if (checkAborted(_this, callback)) {\n    return false;\n  }\n\n  _this.chunks.insertOne(doc, getWriteOptions(_this), function(error) {\n    if (error) {\n      return __handleError(_this, error);\n    }\n    --_this.state.outstandingRequests;\n    checkDone(_this);\n  });\n}\n\n/**\n * @ignore\n */\n\nfunction checkAborted(_this, callback) {\n  if (_this.state.aborted) {\n    if (typeof callback === 'function') {\n      callback(new Error('this stream has been aborted'));\n    }\n    return true;\n  }\n  return false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///185\n");

/***/ }),
/* 186 */
/***/ (function(module, exports) {

eval("var cov_1kekewbsmn=function(){var path='/Users/modetojoy/work/mongodb-js/mongosh/packages/transport/src/stitch-browser-transport.js',hash='ac3d084f6a10aa7084c9c0e89a18028530f12aae',Function=function(){}.constructor,global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/Users/modetojoy/work/mongodb-js/mongosh/packages/transport/src/stitch-browser-transport.js',statementMap:{'0':{start:{line:1,column:24},end:{line:1,column:70}},'1':{start:{line:15,column:4},end:{line:15,column:36}},'2':{start:{line:29,column:4},end:{line:29,column:82}},'3':{start:{line:35,column:0},end:{line:35,column:40}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:14,column:2},end:{line:14,column:3}},loc:{start:{line:14,column:28},end:{line:16,column:3}},line:14},'1':{name:'(anonymous_1)',decl:{start:{line:28,column:2},end:{line:28,column:3}},loc:{start:{line:28,column:43},end:{line:30,column:3}},line:28}},branchMap:{'0':{loc:{start:{line:28,column:29},end:{line:28,column:41}},type:'default-arg',locations:[{start:{line:28,column:39},end:{line:28,column:41}}],line:28}},s:{'0':0,'1':0,'2':0,'3':0},f:{'0':0,'1':0},b:{'0':[0]},inputSourceMap:{version:3,sources:['/Users/modetojoy/work/mongodb-js/mongosh/packages/transport/src/stitch-browser-transport.js'],names:['NOT_IMPLEMENTED','StitchBrowserTransport','constructor','stitchClient','stichClient','runCommand','database','spec','options','Promise','reject','module','exports'],mappings:'AAAA,MAAMA,eAAe,GAAG,8CAAxB;AAEA;;;;;AAIA,MAAMC,sBAAN,CAA6B;AAC3B;;;;;;AAMAC,EAAAA,WAAW,CAACC,YAAD,EAAe;AACxB,SAAKC,WAAL,GAAmBD,YAAnB;AACD;AAED;;;;;;;;;;;AASAE,EAAAA,UAAU,CAACC,QAAD,EAAWC,IAAX,EAAiBC,OAAO,GAAG,EAA3B,EAA+B;AACvC,WAAOC,OAAO,CAACC,MAAR,CAAgB,qCAAoCV,eAAgB,EAApE,CAAP;AACD;;AAtB0B;;AAuB5B;AAEDW,MAAM,CAACC,OAAP,GAAiBX,sBAAjB',sourcesContent:['const NOT_IMPLEMENTED = \\'is not implemented in the Stitch browser SDK\\';\\n\\n/**\\n * Encapsulates logic for communicating with a MongoDB instance via\\n * Stitch in the browser.\\n */\\nclass StitchBrowserTransport {\\n  /**\\n   * Instantiate a new Stitch browser transport with a connected stitch\\n   * client instance.\\n   *\\n   * @param {Client} stitchClient - The Stitch client instance.\\n   */\\n  constructor(stitchClient) {\\n    this.stichClient = stitchClient;\\n  }\\n\\n  /**\\n   * Run a command against the database.\\n   *\\n   * @param {String} database - The database name.\\n   * @param {Object} spec - The command specification.\\n   * @param {Object} options - The database options.\\n   *\\n   * @returns {Promise} The promise of command results.\\n   */\\n  runCommand(database, spec, options = {}) {\\n    return Promise.reject(`StitchBrowserTransport#runCommand ${NOT_IMPLEMENTED}`);\\n  }\\n};\\n\\nmodule.exports = StitchBrowserTransport;\\n']},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const NOT_IMPLEMENTED=(cov_1kekewbsmn.s[0]++,'is not implemented in the Stitch browser SDK');class StitchBrowserTransport{constructor(stitchClient){cov_1kekewbsmn.f[0]++;cov_1kekewbsmn.s[1]++;this.stichClient=stitchClient;}runCommand(database,spec,options=(cov_1kekewbsmn.b[0][0]++,{})){cov_1kekewbsmn.f[1]++;cov_1kekewbsmn.s[2]++;return Promise.reject(`StitchBrowserTransport#runCommand ${NOT_IMPLEMENTED}`);}};cov_1kekewbsmn.s[3]++;module.exports=StitchBrowserTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly4vc3JjL3N0aXRjaC1icm93c2VyLXRyYW5zcG9ydC5qcz84Y2QyIl0sIm5hbWVzIjpbIk5PVF9JTVBMRU1FTlRFRCIsIlN0aXRjaEJyb3dzZXJUcmFuc3BvcnQiLCJjb25zdHJ1Y3RvciIsInN0aXRjaENsaWVudCIsInN0aWNoQ2xpZW50IiwicnVuQ29tbWFuZCIsImRhdGFiYXNlIiwic3BlYyIsIm9wdGlvbnMiLCJQcm9taXNlIiwicmVqZWN0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6InU2RkFBQSxLQUFNQSx3Q0FBa0IsOENBQWxCLENBQU4sQ0FNQSxLQUFNQyx1QkFBdUIsQ0FPM0JDLFlBQVlDLFlBQVosQ0FBMEIsNkNBQ3hCLEtBQUtDLFdBQUwsQ0FBbUJELFlBQW5CLENBQ0QsQ0FZREUsV0FBV0MsUUFBWCxDQUFxQkMsSUFBckIsQ0FBMkJDLGtDQUFVLEVBQVYsQ0FBM0IsQ0FBeUMsNkNBQ3ZDLE1BQU9DLFNBQVFDLE1BQVIsQ0FBZ0IscUNBQW9DVixlQUFnQixFQUFwRSxDQUFQLENBQ0QsQ0F2QjBCLENBMkI3QixDLHNCQUNBVyxPQUFPQyxPQUFQLENBQWlCWCxzQkFBakIiLCJmaWxlIjoiMTg2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTk9UX0lNUExFTUVOVEVEID0gJ2lzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGUgU3RpdGNoIGJyb3dzZXIgU0RLJztcbi8qKlxuICogRW5jYXBzdWxhdGVzIGxvZ2ljIGZvciBjb21tdW5pY2F0aW5nIHdpdGggYSBNb25nb0RCIGluc3RhbmNlIHZpYVxuICogU3RpdGNoIGluIHRoZSBicm93c2VyLlxuICovXG5cbmNsYXNzIFN0aXRjaEJyb3dzZXJUcmFuc3BvcnQge1xuICAvKipcbiAgICogSW5zdGFudGlhdGUgYSBuZXcgU3RpdGNoIGJyb3dzZXIgdHJhbnNwb3J0IHdpdGggYSBjb25uZWN0ZWQgc3RpdGNoXG4gICAqIGNsaWVudCBpbnN0YW5jZS5cbiAgICpcbiAgICogQHBhcmFtIHtDbGllbnR9IHN0aXRjaENsaWVudCAtIFRoZSBTdGl0Y2ggY2xpZW50IGluc3RhbmNlLlxuICAgKi9cbiAgY29uc3RydWN0b3Ioc3RpdGNoQ2xpZW50KSB7XG4gICAgdGhpcy5zdGljaENsaWVudCA9IHN0aXRjaENsaWVudDtcbiAgfVxuICAvKipcbiAgICogUnVuIGEgY29tbWFuZCBhZ2FpbnN0IHRoZSBkYXRhYmFzZS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGFiYXNlIC0gVGhlIGRhdGFiYXNlIG5hbWUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzcGVjIC0gVGhlIGNvbW1hbmQgc3BlY2lmaWNhdGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgZGF0YWJhc2Ugb3B0aW9ucy5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2V9IFRoZSBwcm9taXNlIG9mIGNvbW1hbmQgcmVzdWx0cy5cbiAgICovXG5cblxuICBydW5Db21tYW5kKGRhdGFiYXNlLCBzcGVjLCBvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYFN0aXRjaEJyb3dzZXJUcmFuc3BvcnQjcnVuQ29tbWFuZCAke05PVF9JTVBMRU1FTlRFRH1gKTtcbiAgfVxuXG59XG5cbjtcbm1vZHVsZS5leHBvcnRzID0gU3RpdGNoQnJvd3NlclRyYW5zcG9ydDsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///186\n");

/***/ }),
/* 187 */
/***/ (function(module, exports) {

eval("var cov_1e58knxw89=function(){var path='/Users/modetojoy/work/mongodb-js/mongosh/packages/transport/src/stitch-server-transport.js',hash='13b8f812c1041df62aea216378a37a52a8d00109',Function=function(){}.constructor,global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/Users/modetojoy/work/mongodb-js/mongosh/packages/transport/src/stitch-server-transport.js',statementMap:{'0':{start:{line:1,column:24},end:{line:1,column:69}},'1':{start:{line:15,column:4},end:{line:15,column:36}},'2':{start:{line:29,column:4},end:{line:29,column:81}},'3':{start:{line:35,column:0},end:{line:35,column:39}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:14,column:2},end:{line:14,column:3}},loc:{start:{line:14,column:28},end:{line:16,column:3}},line:14},'1':{name:'(anonymous_1)',decl:{start:{line:28,column:2},end:{line:28,column:3}},loc:{start:{line:28,column:43},end:{line:30,column:3}},line:28}},branchMap:{'0':{loc:{start:{line:28,column:29},end:{line:28,column:41}},type:'default-arg',locations:[{start:{line:28,column:39},end:{line:28,column:41}}],line:28}},s:{'0':0,'1':0,'2':0,'3':0},f:{'0':0,'1':0},b:{'0':[0]},inputSourceMap:{version:3,sources:['/Users/modetojoy/work/mongodb-js/mongosh/packages/transport/src/stitch-server-transport.js'],names:['NOT_IMPLEMENTED','StitchServerTransport','constructor','stitchClient','stichClient','runCommand','database','spec','options','Promise','reject','module','exports'],mappings:'AAAA,MAAMA,eAAe,GAAG,6CAAxB;AAEA;;;;;AAIA,MAAMC,qBAAN,CAA4B;AAC1B;;;;;;AAMAC,EAAAA,WAAW,CAACC,YAAD,EAAe;AACxB,SAAKC,WAAL,GAAmBD,YAAnB;AACD;AAED;;;;;;;;;;;AASAE,EAAAA,UAAU,CAACC,QAAD,EAAWC,IAAX,EAAiBC,OAAO,GAAG,EAA3B,EAA+B;AACvC,WAAOC,OAAO,CAACC,MAAR,CAAgB,oCAAmCV,eAAgB,EAAnE,CAAP;AACD;;AAtByB;;AAuB3B;AAEDW,MAAM,CAACC,OAAP,GAAiBX,qBAAjB',sourcesContent:['const NOT_IMPLEMENTED = \\'is not implemented in the Stitch server SDK\\';\\n\\n/**\\n * Encapsulates logic for communicating with a MongoDB instance via\\n * Stitch in the server.\\n */\\nclass StitchServerTransport {\\n  /**\\n   * Instantiate a new Stitch server transport with a connected stitch\\n   * client instance.\\n   *\\n   * @param {Client} stitchClient - The Stitch client instance.\\n   */\\n  constructor(stitchClient) {\\n    this.stichClient = stitchClient;\\n  }\\n\\n  /**\\n   * Run a command against the database.\\n   *\\n   * @param {String} database - The database name.\\n   * @param {Object} spec - The command specification.\\n   * @param {Object} options - The database options.\\n   *\\n   * @returns {Promise} The promise of command results.\\n   */\\n  runCommand(database, spec, options = {}) {\\n    return Promise.reject(`StitchServerTransport#runCommand ${NOT_IMPLEMENTED}`);\\n  }\\n};\\n\\nmodule.exports = StitchServerTransport;\\n']},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const NOT_IMPLEMENTED=(cov_1e58knxw89.s[0]++,'is not implemented in the Stitch server SDK');class StitchServerTransport{constructor(stitchClient){cov_1e58knxw89.f[0]++;cov_1e58knxw89.s[1]++;this.stichClient=stitchClient;}runCommand(database,spec,options=(cov_1e58knxw89.b[0][0]++,{})){cov_1e58knxw89.f[1]++;cov_1e58knxw89.s[2]++;return Promise.reject(`StitchServerTransport#runCommand ${NOT_IMPLEMENTED}`);}};cov_1e58knxw89.s[3]++;module.exports=StitchServerTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25nb2Ric2gtdHJhbnNwb3J0Ly4vc3JjL3N0aXRjaC1zZXJ2ZXItdHJhbnNwb3J0LmpzP2RjNjIiXSwibmFtZXMiOlsiTk9UX0lNUExFTUVOVEVEIiwiU3RpdGNoU2VydmVyVHJhbnNwb3J0IiwiY29uc3RydWN0b3IiLCJzdGl0Y2hDbGllbnQiLCJzdGljaENsaWVudCIsInJ1bkNvbW1hbmQiLCJkYXRhYmFzZSIsInNwZWMiLCJvcHRpb25zIiwiUHJvbWlzZSIsInJlamVjdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI2NUZBQUEsS0FBTUEsd0NBQWtCLDZDQUFsQixDQUFOLENBTUEsS0FBTUMsc0JBQXNCLENBTzFCQyxZQUFZQyxZQUFaLENBQTBCLDZDQUN4QixLQUFLQyxXQUFMLENBQW1CRCxZQUFuQixDQUNELENBWURFLFdBQVdDLFFBQVgsQ0FBcUJDLElBQXJCLENBQTJCQyxrQ0FBVSxFQUFWLENBQTNCLENBQXlDLDZDQUN2QyxNQUFPQyxTQUFRQyxNQUFSLENBQWdCLG9DQUFtQ1YsZUFBZ0IsRUFBbkUsQ0FBUCxDQUNELENBdkJ5QixDQTJCNUIsQyxzQkFDQVcsT0FBT0MsT0FBUCxDQUFpQlgscUJBQWpCIiwiZmlsZSI6IjE4Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE5PVF9JTVBMRU1FTlRFRCA9ICdpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIFN0aXRjaCBzZXJ2ZXIgU0RLJztcbi8qKlxuICogRW5jYXBzdWxhdGVzIGxvZ2ljIGZvciBjb21tdW5pY2F0aW5nIHdpdGggYSBNb25nb0RCIGluc3RhbmNlIHZpYVxuICogU3RpdGNoIGluIHRoZSBzZXJ2ZXIuXG4gKi9cblxuY2xhc3MgU3RpdGNoU2VydmVyVHJhbnNwb3J0IHtcbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlIGEgbmV3IFN0aXRjaCBzZXJ2ZXIgdHJhbnNwb3J0IHdpdGggYSBjb25uZWN0ZWQgc3RpdGNoXG4gICAqIGNsaWVudCBpbnN0YW5jZS5cbiAgICpcbiAgICogQHBhcmFtIHtDbGllbnR9IHN0aXRjaENsaWVudCAtIFRoZSBTdGl0Y2ggY2xpZW50IGluc3RhbmNlLlxuICAgKi9cbiAgY29uc3RydWN0b3Ioc3RpdGNoQ2xpZW50KSB7XG4gICAgdGhpcy5zdGljaENsaWVudCA9IHN0aXRjaENsaWVudDtcbiAgfVxuICAvKipcbiAgICogUnVuIGEgY29tbWFuZCBhZ2FpbnN0IHRoZSBkYXRhYmFzZS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGFiYXNlIC0gVGhlIGRhdGFiYXNlIG5hbWUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzcGVjIC0gVGhlIGNvbW1hbmQgc3BlY2lmaWNhdGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgZGF0YWJhc2Ugb3B0aW9ucy5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2V9IFRoZSBwcm9taXNlIG9mIGNvbW1hbmQgcmVzdWx0cy5cbiAgICovXG5cblxuICBydW5Db21tYW5kKGRhdGFiYXNlLCBzcGVjLCBvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYFN0aXRjaFNlcnZlclRyYW5zcG9ydCNydW5Db21tYW5kICR7Tk9UX0lNUExFTUVOVEVEfWApO1xuICB9XG5cbn1cblxuO1xubW9kdWxlLmV4cG9ydHMgPSBTdGl0Y2hTZXJ2ZXJUcmFuc3BvcnQ7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///187\n");

/***/ })
/******/ ]);
});